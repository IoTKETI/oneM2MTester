// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for jaeyounghwang (jaeyounghwang@ubuntu) on Mon Sep 18 04:04:30 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "OneM2M_Constants.hh"

namespace OneM2M__Constants {

/* Prototypes of static functions */

static void pre_init_module();
static boolean set_module_param(Module_Param& param);
static void log_module_param();

/* Literal string constants */

static const CHARSTRING cs_0(0, NULL),
cs_19(4, "2000"),
cs_20(4, "2001"),
cs_21(4, "2002"),
cs_22(4, "2004"),
cs_8(6, "Accept"),
cs_10(14, "Content-Length"),
cs_9(12, "Content-Type"),
cs_16(6, "DELETE"),
cs_14(3, "GET"),
cs_7(4, "Host"),
cs_13(4, "POST"),
cs_15(3, "PUT"),
cs_11(12, "X-M2M-Origin"),
cs_12(8, "X-M2M-RI"),
cs_17(12, "application/"),
cs_18(27, "application/vnd.onem2m-res+"),
cs_3(4, "coap"),
cs_1(4, "http"),
cs_4(4, "json"),
cs_2(4, "mqtt"),
cs_6(12, "resourceName"),
cs_5(3, "xml");
static const unsigned char module_checksum[] = { 0x54, 0x08, 0x68, 0x37, 0x5b, 0x43, 0xb5, 0xcd, 0x2a, 0x31, 0xc2, 0x28, 0xa2, 0xdb, 0xbc, 0x22 };

/* Global variable definitions */

const XERdescriptor_t       ConnectionParams_remHost_xer_ = { {"remHost>\n", "remHost>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t ConnectionParams_remHost_descr_ = { "@OneM2M_Constants.ConnectionParams.remHost", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ConnectionParams_remHost_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ConnectionParams_remPort_xer_ = { {"remPort>\n", "remPort>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t ConnectionParams_remPort_descr_ = { "@OneM2M_Constants.ConnectionParams.remPort", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &ConnectionParams_remPort_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ConnectionParams_locHost_xer_ = { {"locHost>\n", "locHost>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t ConnectionParams_locHost_descr_ = { "@OneM2M_Constants.ConnectionParams.locHost", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ConnectionParams_locHost_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ConnectionParams_locPort_xer_ = { {"locPort>\n", "locPort>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t ConnectionParams_locPort_descr_ = { "@OneM2M_Constants.ConnectionParams.locPort", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &ConnectionParams_locPort_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ConnectionParams
const TTCN_Typedescriptor_t ConnectionParams_descr_ = { "@OneM2M_Constants.ConnectionParams", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
static ConnectionParams modulepar_tsp__connectionParams;
const ConnectionParams& tsp__connectionParams = modulepar_tsp__connectionParams;
static FLOAT modulepar_maxResponseTime;
const FLOAT& maxResponseTime = modulepar_maxResponseTime;
static CHARSTRING modulepar_PX__UT__URI;
const CHARSTRING& PX__UT__URI = modulepar_PX__UT__URI;
static CHARSTRING const_HTTP__BINDING;
const CHARSTRING& HTTP__BINDING = const_HTTP__BINDING;
static CHARSTRING const_MQTT__BINDING;
const CHARSTRING& MQTT__BINDING = const_MQTT__BINDING;
static CHARSTRING const_COAP__BINDING;
const CHARSTRING& COAP__BINDING = const_COAP__BINDING;
static CHARSTRING const_JSON__SERIAL;
const CHARSTRING& JSON__SERIAL = const_JSON__SERIAL;
static CHARSTRING const_XML__SERIAL;
const CHARSTRING& XML__SERIAL = const_XML__SERIAL;
static CHARSTRING const_RESOURCE__NAME;
const CHARSTRING& RESOURCE__NAME = const_RESOURCE__NAME;
static CHARSTRING const_HTTP__HOST;
const CHARSTRING& HTTP__HOST = const_HTTP__HOST;
static CHARSTRING const_HTTP__ACCEPT;
const CHARSTRING& HTTP__ACCEPT = const_HTTP__ACCEPT;
static CHARSTRING const_HTTP__CONTENT__TYPE;
const CHARSTRING& HTTP__CONTENT__TYPE = const_HTTP__CONTENT__TYPE;
static CHARSTRING const_HTTP__CONTENT__LENGTH;
const CHARSTRING& HTTP__CONTENT__LENGTH = const_HTTP__CONTENT__LENGTH;
static CHARSTRING const_HTTP__M2M__ORIGIN;
const CHARSTRING& HTTP__M2M__ORIGIN = const_HTTP__M2M__ORIGIN;
static CHARSTRING const_HTTP__M2M__REQUEST__ID;
const CHARSTRING& HTTP__M2M__REQUEST__ID = const_HTTP__M2M__REQUEST__ID;
static CHARSTRING const_POST__HTTP;
const CHARSTRING& POST__HTTP = const_POST__HTTP;
static CHARSTRING const_GET__HTTP;
const CHARSTRING& GET__HTTP = const_GET__HTTP;
static CHARSTRING const_PUT__HTTP;
const CHARSTRING& PUT__HTTP = const_PUT__HTTP;
static CHARSTRING const_DELETE__HTTP;
const CHARSTRING& DELETE__HTTP = const_DELETE__HTTP;
static INTEGER const_APPLICATION__XML__COAP;
const INTEGER& APPLICATION__XML__COAP = const_APPLICATION__XML__COAP;
static INTEGER const_APPLICATION__JSON__COAP;
const INTEGER& APPLICATION__JSON__COAP = const_APPLICATION__JSON__COAP;
static CHARSTRING const_ACCEPT__BASE;
const CHARSTRING& ACCEPT__BASE = const_ACCEPT__BASE;
static CHARSTRING const_CONTENT__TYPE__BASE;
const CHARSTRING& CONTENT__TYPE__BASE = const_CONTENT__TYPE__BASE;
static CHARSTRING const_RSC__OK;
const CHARSTRING& RSC__OK = const_RSC__OK;
static CHARSTRING const_RSC__CREATED;
const CHARSTRING& RSC__CREATED = const_RSC__CREATED;
static CHARSTRING const_RSC__UPDATED;
const CHARSTRING& RSC__UPDATED = const_RSC__UPDATED;
static CHARSTRING const_RSC__DELETED;
const CHARSTRING& RSC__DELETED = const_RSC__DELETED;
TTCN_Module module_object("OneM2M_Constants", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, set_module_param, NULL, log_module_param, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_1,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

ConnectionParams::ConnectionParams()
{
}

ConnectionParams::ConnectionParams(const CHARSTRING& par_remHost,
    const INTEGER& par_remPort,
    const CHARSTRING& par_locHost,
    const INTEGER& par_locPort)
  :   field_remHost(par_remHost),
  field_remPort(par_remPort),
  field_locHost(par_locHost),
  field_locPort(par_locPort)
{
}

ConnectionParams::ConnectionParams(const ConnectionParams& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @OneM2M_Constants.ConnectionParams.");
if (other_value.remHost().is_bound()) field_remHost = other_value.remHost();
else field_remHost.clean_up();
if (other_value.remPort().is_bound()) field_remPort = other_value.remPort();
else field_remPort.clean_up();
if (other_value.locHost().is_bound()) field_locHost = other_value.locHost();
else field_locHost.clean_up();
if (other_value.locPort().is_bound()) field_locPort = other_value.locPort();
else field_locPort.clean_up();
}

void ConnectionParams::clean_up()
{
field_remHost.clean_up();
field_remPort.clean_up();
field_locHost.clean_up();
field_locPort.clean_up();
}

ConnectionParams& ConnectionParams::operator=(const ConnectionParams& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @OneM2M_Constants.ConnectionParams.");
  if (other_value.remHost().is_bound()) field_remHost = other_value.remHost();
  else field_remHost.clean_up();
  if (other_value.remPort().is_bound()) field_remPort = other_value.remPort();
  else field_remPort.clean_up();
  if (other_value.locHost().is_bound()) field_locHost = other_value.locHost();
  else field_locHost.clean_up();
  if (other_value.locPort().is_bound()) field_locPort = other_value.locPort();
  else field_locPort.clean_up();
}
return *this;
}

boolean ConnectionParams::operator==(const ConnectionParams& other_value) const
{
return field_remHost==other_value.field_remHost
  && field_remPort==other_value.field_remPort
  && field_locHost==other_value.field_locHost
  && field_locPort==other_value.field_locPort;
}

boolean ConnectionParams::is_bound() const
{
if(field_remHost.is_bound()) return TRUE;
if(field_remPort.is_bound()) return TRUE;
if(field_locHost.is_bound()) return TRUE;
if(field_locPort.is_bound()) return TRUE;
return FALSE;
}
boolean ConnectionParams::is_value() const
{
if(!field_remHost.is_value()) return FALSE;
if(!field_remPort.is_value()) return FALSE;
if(!field_locHost.is_value()) return FALSE;
if(!field_locPort.is_value()) return FALSE;
return TRUE;
}
void ConnectionParams::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ remHost := ");
field_remHost.log();
TTCN_Logger::log_event_str(", remPort := ");
field_remPort.log();
TTCN_Logger::log_event_str(", locHost := ");
field_locHost.log();
TTCN_Logger::log_event_str(", locPort := ");
field_locPort.log();
TTCN_Logger::log_event_str(" }");
}

void ConnectionParams::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record value of type @OneM2M_Constants.ConnectionParams has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) remHost().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) remPort().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) locHost().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) locPort().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "remHost")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          remHost().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "remPort")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          remPort().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "locHost")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          locHost().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "locPort")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          locPort().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @OneM2M_Constants.ConnectionParams: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@OneM2M_Constants.ConnectionParams");
  }
}

void ConnectionParams::set_implicit_omit()
{
if (remHost().is_bound()) remHost().set_implicit_omit();
if (remPort().is_bound()) remPort().set_implicit_omit();
if (locHost().is_bound()) locHost().set_implicit_omit();
if (locPort().is_bound()) locPort().set_implicit_omit();
}

void ConnectionParams::encode_text(Text_Buf& text_buf) const
{
field_remHost.encode_text(text_buf);
field_remPort.encode_text(text_buf);
field_locHost.encode_text(text_buf);
field_locPort.encode_text(text_buf);
}

void ConnectionParams::decode_text(Text_Buf& text_buf)
{
field_remHost.decode_text(text_buf);
field_remPort.decode_text(text_buf);
field_locHost.decode_text(text_buf);
field_locPort.decode_text(text_buf);
}

struct ConnectionParams_template::single_value_struct {
CHARSTRING_template field_remHost;
INTEGER_template field_remPort;
CHARSTRING_template field_locHost;
INTEGER_template field_locPort;
};

void ConnectionParams_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_remHost = ANY_VALUE;
single_value->field_remPort = ANY_VALUE;
single_value->field_locHost = ANY_VALUE;
single_value->field_locPort = ANY_VALUE;
}
}
}

void ConnectionParams_template::copy_value(const ConnectionParams& other_value)
{
single_value = new single_value_struct;
if (other_value.remHost().is_bound()) {
  single_value->field_remHost = other_value.remHost();
} else {
  single_value->field_remHost.clean_up();
}
if (other_value.remPort().is_bound()) {
  single_value->field_remPort = other_value.remPort();
} else {
  single_value->field_remPort.clean_up();
}
if (other_value.locHost().is_bound()) {
  single_value->field_locHost = other_value.locHost();
} else {
  single_value->field_locHost.clean_up();
}
if (other_value.locPort().is_bound()) {
  single_value->field_locPort = other_value.locPort();
} else {
  single_value->field_locPort.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void ConnectionParams_template::copy_template(const ConnectionParams_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.remHost().get_selection()) {
single_value->field_remHost = other_value.remHost();
} else {
single_value->field_remHost.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.remPort().get_selection()) {
single_value->field_remPort = other_value.remPort();
} else {
single_value->field_remPort.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.locHost().get_selection()) {
single_value->field_locHost = other_value.locHost();
} else {
single_value->field_locHost.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.locPort().get_selection()) {
single_value->field_locPort = other_value.locPort();
} else {
single_value->field_locPort.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ConnectionParams_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @OneM2M_Constants.ConnectionParams.");
break;
}
set_selection(other_value);
}

ConnectionParams_template::ConnectionParams_template()
{
}

ConnectionParams_template::ConnectionParams_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ConnectionParams_template::ConnectionParams_template(const ConnectionParams& other_value)
{
copy_value(other_value);
}

ConnectionParams_template::ConnectionParams_template(const OPTIONAL<ConnectionParams>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ConnectionParams&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @OneM2M_Constants.ConnectionParams from an unbound optional field.");
}
}

ConnectionParams_template::ConnectionParams_template(const ConnectionParams_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

ConnectionParams_template::~ConnectionParams_template()
{
clean_up();
}

ConnectionParams_template& ConnectionParams_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ConnectionParams_template& ConnectionParams_template::operator=(const ConnectionParams& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ConnectionParams_template& ConnectionParams_template::operator=(const OPTIONAL<ConnectionParams>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ConnectionParams&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @OneM2M_Constants.ConnectionParams.");
}
return *this;
}

ConnectionParams_template& ConnectionParams_template::operator=(const ConnectionParams_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ConnectionParams_template::match(const ConnectionParams& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.remHost().is_bound()) return FALSE;
if(!single_value->field_remHost.match(other_value.remHost(), legacy))return FALSE;
if(!other_value.remPort().is_bound()) return FALSE;
if(!single_value->field_remPort.match(other_value.remPort(), legacy))return FALSE;
if(!other_value.locHost().is_bound()) return FALSE;
if(!single_value->field_locHost.match(other_value.locHost(), legacy))return FALSE;
if(!other_value.locPort().is_bound()) return FALSE;
if(!single_value->field_locPort.match(other_value.locPort(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @OneM2M_Constants.ConnectionParams.");
}
return FALSE;
}

boolean ConnectionParams_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_remHost.is_bound()) return TRUE;
if (single_value->field_remPort.is_bound()) return TRUE;
if (single_value->field_locHost.is_bound()) return TRUE;
if (single_value->field_locPort.is_bound()) return TRUE;
return FALSE;
}

boolean ConnectionParams_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_remHost.is_value()) return FALSE;
if (!single_value->field_remPort.is_value()) return FALSE;
if (!single_value->field_locHost.is_value()) return FALSE;
if (!single_value->field_locPort.is_value()) return FALSE;
return TRUE;
}

void ConnectionParams_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ConnectionParams ConnectionParams_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @OneM2M_Constants.ConnectionParams.");
ConnectionParams ret_val;
if (single_value->field_remHost.is_bound()) {
ret_val.remHost() = single_value->field_remHost.valueof();
}
if (single_value->field_remPort.is_bound()) {
ret_val.remPort() = single_value->field_remPort.valueof();
}
if (single_value->field_locHost.is_bound()) {
ret_val.locHost() = single_value->field_locHost.valueof();
}
if (single_value->field_locPort.is_bound()) {
ret_val.locPort() = single_value->field_locPort.valueof();
}
return ret_val;
}

void ConnectionParams_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @OneM2M_Constants.ConnectionParams.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ConnectionParams_template[list_length];
}

ConnectionParams_template& ConnectionParams_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @OneM2M_Constants.ConnectionParams.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @OneM2M_Constants.ConnectionParams.");
return value_list.list_value[list_index];
}

CHARSTRING_template& ConnectionParams_template::remHost()
{
set_specific();
return single_value->field_remHost;
}

const CHARSTRING_template& ConnectionParams_template::remHost() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field remHost of a non-specific template of type @OneM2M_Constants.ConnectionParams.");
return single_value->field_remHost;
}

INTEGER_template& ConnectionParams_template::remPort()
{
set_specific();
return single_value->field_remPort;
}

const INTEGER_template& ConnectionParams_template::remPort() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field remPort of a non-specific template of type @OneM2M_Constants.ConnectionParams.");
return single_value->field_remPort;
}

CHARSTRING_template& ConnectionParams_template::locHost()
{
set_specific();
return single_value->field_locHost;
}

const CHARSTRING_template& ConnectionParams_template::locHost() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field locHost of a non-specific template of type @OneM2M_Constants.ConnectionParams.");
return single_value->field_locHost;
}

INTEGER_template& ConnectionParams_template::locPort()
{
set_specific();
return single_value->field_locPort;
}

const INTEGER_template& ConnectionParams_template::locPort() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field locPort of a non-specific template of type @OneM2M_Constants.ConnectionParams.");
return single_value->field_locPort;
}

int ConnectionParams_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @OneM2M_Constants.ConnectionParams which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 4;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @OneM2M_Constants.ConnectionParams containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @OneM2M_Constants.ConnectionParams containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @OneM2M_Constants.ConnectionParams containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @OneM2M_Constants.ConnectionParams containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @OneM2M_Constants.ConnectionParams containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @OneM2M_Constants.ConnectionParams.");
  }
  return 0;
}

void ConnectionParams_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ remHost := ");
single_value->field_remHost.log();
TTCN_Logger::log_event_str(", remPort := ");
single_value->field_remPort.log();
TTCN_Logger::log_event_str(", locHost := ");
single_value->field_locHost.log();
TTCN_Logger::log_event_str(", locPort := ");
single_value->field_locPort.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ConnectionParams_template::log_match(const ConnectionParams& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_remHost.match(match_value.remHost(), legacy)){
TTCN_Logger::log_logmatch_info(".remHost");
single_value->field_remHost.log_match(match_value.remHost(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_remPort.match(match_value.remPort(), legacy)){
TTCN_Logger::log_logmatch_info(".remPort");
single_value->field_remPort.log_match(match_value.remPort(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_locHost.match(match_value.locHost(), legacy)){
TTCN_Logger::log_logmatch_info(".locHost");
single_value->field_locHost.log_match(match_value.locHost(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_locPort.match(match_value.locPort(), legacy)){
TTCN_Logger::log_logmatch_info(".locPort");
single_value->field_locPort.log_match(match_value.locPort(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ remHost := ");
single_value->field_remHost.log_match(match_value.remHost(), legacy);
TTCN_Logger::log_event_str(", remPort := ");
single_value->field_remPort.log_match(match_value.remPort(), legacy);
TTCN_Logger::log_event_str(", locHost := ");
single_value->field_locHost.log_match(match_value.locHost(), legacy);
TTCN_Logger::log_event_str(", locPort := ");
single_value->field_locPort.log_match(match_value.locPort(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ConnectionParams_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_remHost.encode_text(text_buf);
single_value->field_remPort.encode_text(text_buf);
single_value->field_locHost.encode_text(text_buf);
single_value->field_locPort.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @OneM2M_Constants.ConnectionParams.");
}
}

void ConnectionParams_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_remHost.decode_text(text_buf);
single_value->field_remPort.decode_text(text_buf);
single_value->field_locHost.decode_text(text_buf);
single_value->field_locPort.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ConnectionParams_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @OneM2M_Constants.ConnectionParams.");
}
}

void ConnectionParams_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ConnectionParams_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record template of type @OneM2M_Constants.ConnectionParams has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) remHost().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) remPort().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) locHost().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) locPort().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "remHost")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          remHost().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "remPort")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          remPort().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "locHost")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          locHost().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "locPort")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          locPort().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @OneM2M_Constants.ConnectionParams: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@OneM2M_Constants.ConnectionParams");
  }
  is_ifpresent = param.get_ifpresent();
}

void ConnectionParams_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_remHost.check_restriction(t_res, t_name ? t_name : "@OneM2M_Constants.ConnectionParams");
single_value->field_remPort.check_restriction(t_res, t_name ? t_name : "@OneM2M_Constants.ConnectionParams");
single_value->field_locHost.check_restriction(t_res, t_name ? t_name : "@OneM2M_Constants.ConnectionParams");
single_value->field_locPort.check_restriction(t_res, t_name ? t_name : "@OneM2M_Constants.ConnectionParams");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@OneM2M_Constants.ConnectionParams");
}

boolean ConnectionParams_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ConnectionParams_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("../oneM2MTester/src/Functions/OneM2M_Constants.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "OneM2M_Constants");
current_location.update_lineno(23);
#line 23 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
modulepar_tsp__connectionParams.remHost() = cs_0;
modulepar_tsp__connectionParams.remPort() = 0;
modulepar_tsp__connectionParams.locHost() = cs_0;
modulepar_tsp__connectionParams.locPort() = 0;
current_location.update_lineno(24);
#line 24 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
modulepar_maxResponseTime = 3.0e1;
current_location.update_lineno(25);
#line 25 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
modulepar_PX__UT__URI = cs_0;
current_location.update_lineno(31);
#line 31 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_HTTP__BINDING = cs_1;
current_location.update_lineno(32);
#line 32 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_MQTT__BINDING = cs_2;
current_location.update_lineno(33);
#line 33 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_COAP__BINDING = cs_3;
current_location.update_lineno(35);
#line 35 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_JSON__SERIAL = cs_4;
current_location.update_lineno(36);
#line 36 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_XML__SERIAL = cs_5;
current_location.update_lineno(37);
#line 37 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_RESOURCE__NAME = cs_6;
current_location.update_lineno(40);
#line 40 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_HTTP__HOST = cs_7;
current_location.update_lineno(41);
#line 41 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_HTTP__ACCEPT = cs_8;
current_location.update_lineno(42);
#line 42 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_HTTP__CONTENT__TYPE = cs_9;
current_location.update_lineno(43);
#line 43 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_HTTP__CONTENT__LENGTH = cs_10;
current_location.update_lineno(44);
#line 44 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_HTTP__M2M__ORIGIN = cs_11;
current_location.update_lineno(45);
#line 45 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_HTTP__M2M__REQUEST__ID = cs_12;
current_location.update_lineno(48);
#line 48 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_POST__HTTP = cs_13;
current_location.update_lineno(49);
#line 49 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_GET__HTTP = cs_14;
current_location.update_lineno(50);
#line 50 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_PUT__HTTP = cs_15;
current_location.update_lineno(51);
#line 51 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_DELETE__HTTP = cs_16;
current_location.update_lineno(54);
#line 54 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_APPLICATION__XML__COAP = 41;
current_location.update_lineno(55);
#line 55 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_APPLICATION__JSON__COAP = 50;
current_location.update_lineno(57);
#line 57 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_ACCEPT__BASE = cs_17;
current_location.update_lineno(58);
#line 58 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_CONTENT__TYPE__BASE = cs_18;
current_location.update_lineno(60);
#line 60 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_RSC__OK = cs_19;
current_location.update_lineno(61);
#line 61 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_RSC__CREATED = cs_20;
current_location.update_lineno(62);
#line 62 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_RSC__UPDATED = cs_21;
current_location.update_lineno(63);
#line 63 "../oneM2MTester/src/Functions/OneM2M_Constants.ttcn"
const_RSC__DELETED = cs_22;
}

static boolean set_module_param(Module_Param& param)
{
const char* const par_name = param.get_id()->get_current_name();
if (!strcmp(par_name, "tsp_connectionParams")) {
modulepar_tsp__connectionParams.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "maxResponseTime")) {
modulepar_maxResponseTime.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_UT_URI")) {
modulepar_PX__UT__URI.set_param(param);
return TRUE;
} else return FALSE;
}

static void log_module_param()
{
TTCN_Logger::log_event_str("tsp_connectionParams := ");
tsp__connectionParams.log();
TTCN_Logger::log_event_str(", maxResponseTime := ");
maxResponseTime.log();
TTCN_Logger::log_event_str(", PX_UT_URI := ");
PX__UT__URI.log();
}


} /* end of namespace */
