// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for jaeyounghwang (jaeyounghwang@ubuntu) on Mon Sep 18 04:04:30 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "LibCommon_AbstractData.hh"

namespace LibCommon__AbstractData {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const CHARSTRING cs_1(0, NULL),
cs_0(44, "f_peekTopStringStack: String stack is empty!");
static const unsigned char module_checksum[] = { 0x9e, 0x47, 0xd9, 0x07, 0x29, 0xf2, 0x59, 0x2e, 0x17, 0x84, 0x42, 0xbf, 0x2a, 0x5d, 0xf4, 0xbb };

/* Global variable definitions */

const XERdescriptor_t       StringStack_stackSize_xer_ = { {"stackSize>\n", "stackSize>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t StringStack_stackSize_descr_ = { "@LibCommon_AbstractData.StringStack.stackSize", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &StringStack_stackSize_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for StringItems
const TTCN_Typedescriptor_t StringItems_descr_ = { "@LibCommon_AbstractData.StringItems", NULL, NULL, NULL, NULL, NULL, &CHARSTRING_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       StringItems_0_xer_ = { {"CHARSTRING>\n", "CHARSTRING>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t StringItems_0_descr_ = { "@LibCommon_AbstractData.StringItems.<oftype>", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &StringItems_0_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for StringStack
const TTCN_Typedescriptor_t StringStack_descr_ = { "@LibCommon_AbstractData.StringStack", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
static StringStack const_c__initStringStack;
const StringStack& c__initStringStack = const_c__initStringStack;
TTCN_Module module_object("LibCommon_AbstractData", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_1,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

StringStack::StringStack()
{
}

StringStack::StringStack(const INTEGER& par_stackSize,
    const StringItems& par_stringItems)
  :   field_stackSize(par_stackSize),
  field_stringItems(par_stringItems)
{
}

StringStack::StringStack(const StringStack& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibCommon_AbstractData.StringStack.");
if (other_value.stackSize().is_bound()) field_stackSize = other_value.stackSize();
else field_stackSize.clean_up();
if (other_value.stringItems().is_bound()) field_stringItems = other_value.stringItems();
else field_stringItems.clean_up();
}

void StringStack::clean_up()
{
field_stackSize.clean_up();
field_stringItems.clean_up();
}

StringStack& StringStack::operator=(const StringStack& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LibCommon_AbstractData.StringStack.");
  if (other_value.stackSize().is_bound()) field_stackSize = other_value.stackSize();
  else field_stackSize.clean_up();
  if (other_value.stringItems().is_bound()) field_stringItems = other_value.stringItems();
  else field_stringItems.clean_up();
}
return *this;
}

boolean StringStack::operator==(const StringStack& other_value) const
{
return field_stackSize==other_value.field_stackSize
  && field_stringItems==other_value.field_stringItems;
}

boolean StringStack::is_bound() const
{
if(field_stackSize.is_bound()) return TRUE;
if(field_stringItems.is_bound()) return TRUE;
return FALSE;
}
boolean StringStack::is_value() const
{
if(!field_stackSize.is_value()) return FALSE;
if(!field_stringItems.is_value()) return FALSE;
return TRUE;
}
void StringStack::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ stackSize := ");
field_stackSize.log();
TTCN_Logger::log_event_str(", stringItems := ");
field_stringItems.log();
TTCN_Logger::log_event_str(" }");
}

void StringStack::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @LibCommon_AbstractData.StringStack has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) stackSize().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) stringItems().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "stackSize")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          stackSize().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "stringItems")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          stringItems().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @LibCommon_AbstractData.StringStack: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LibCommon_AbstractData.StringStack");
  }
}

void StringStack::set_implicit_omit()
{
if (stackSize().is_bound()) stackSize().set_implicit_omit();
if (stringItems().is_bound()) stringItems().set_implicit_omit();
}

void StringStack::encode_text(Text_Buf& text_buf) const
{
field_stackSize.encode_text(text_buf);
field_stringItems.encode_text(text_buf);
}

void StringStack::decode_text(Text_Buf& text_buf)
{
field_stackSize.decode_text(text_buf);
field_stringItems.decode_text(text_buf);
}

struct StringStack_template::single_value_struct {
INTEGER_template field_stackSize;
StringItems_template field_stringItems;
};

void StringStack_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_stackSize = ANY_VALUE;
single_value->field_stringItems = ANY_VALUE;
}
}
}

void StringStack_template::copy_value(const StringStack& other_value)
{
single_value = new single_value_struct;
if (other_value.stackSize().is_bound()) {
  single_value->field_stackSize = other_value.stackSize();
} else {
  single_value->field_stackSize.clean_up();
}
if (other_value.stringItems().is_bound()) {
  single_value->field_stringItems = other_value.stringItems();
} else {
  single_value->field_stringItems.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void StringStack_template::copy_template(const StringStack_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.stackSize().get_selection()) {
single_value->field_stackSize = other_value.stackSize();
} else {
single_value->field_stackSize.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.stringItems().get_selection()) {
single_value->field_stringItems = other_value.stringItems();
} else {
single_value->field_stringItems.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new StringStack_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibCommon_AbstractData.StringStack.");
break;
}
set_selection(other_value);
}

StringStack_template::StringStack_template()
{
}

StringStack_template::StringStack_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

StringStack_template::StringStack_template(const StringStack& other_value)
{
copy_value(other_value);
}

StringStack_template::StringStack_template(const OPTIONAL<StringStack>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const StringStack&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibCommon_AbstractData.StringStack from an unbound optional field.");
}
}

StringStack_template::StringStack_template(const StringStack_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

StringStack_template::~StringStack_template()
{
clean_up();
}

StringStack_template& StringStack_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

StringStack_template& StringStack_template::operator=(const StringStack& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

StringStack_template& StringStack_template::operator=(const OPTIONAL<StringStack>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const StringStack&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibCommon_AbstractData.StringStack.");
}
return *this;
}

StringStack_template& StringStack_template::operator=(const StringStack_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean StringStack_template::match(const StringStack& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.stackSize().is_bound()) return FALSE;
if(!single_value->field_stackSize.match(other_value.stackSize(), legacy))return FALSE;
if(!other_value.stringItems().is_bound()) return FALSE;
if(!single_value->field_stringItems.match(other_value.stringItems(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibCommon_AbstractData.StringStack.");
}
return FALSE;
}

boolean StringStack_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_stackSize.is_bound()) return TRUE;
if (single_value->field_stringItems.is_bound()) return TRUE;
return FALSE;
}

boolean StringStack_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_stackSize.is_value()) return FALSE;
if (!single_value->field_stringItems.is_value()) return FALSE;
return TRUE;
}

void StringStack_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

StringStack StringStack_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @LibCommon_AbstractData.StringStack.");
StringStack ret_val;
if (single_value->field_stackSize.is_bound()) {
ret_val.stackSize() = single_value->field_stackSize.valueof();
}
if (single_value->field_stringItems.is_bound()) {
ret_val.stringItems() = single_value->field_stringItems.valueof();
}
return ret_val;
}

void StringStack_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibCommon_AbstractData.StringStack.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new StringStack_template[list_length];
}

StringStack_template& StringStack_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibCommon_AbstractData.StringStack.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibCommon_AbstractData.StringStack.");
return value_list.list_value[list_index];
}

INTEGER_template& StringStack_template::stackSize()
{
set_specific();
return single_value->field_stackSize;
}

const INTEGER_template& StringStack_template::stackSize() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field stackSize of a non-specific template of type @LibCommon_AbstractData.StringStack.");
return single_value->field_stackSize;
}

StringItems_template& StringStack_template::stringItems()
{
set_specific();
return single_value->field_stringItems;
}

const StringItems_template& StringStack_template::stringItems() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field stringItems of a non-specific template of type @LibCommon_AbstractData.StringStack.");
return single_value->field_stringItems;
}

int StringStack_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LibCommon_AbstractData.StringStack which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LibCommon_AbstractData.StringStack containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LibCommon_AbstractData.StringStack containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LibCommon_AbstractData.StringStack containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LibCommon_AbstractData.StringStack containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LibCommon_AbstractData.StringStack containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LibCommon_AbstractData.StringStack.");
  }
  return 0;
}

void StringStack_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ stackSize := ");
single_value->field_stackSize.log();
TTCN_Logger::log_event_str(", stringItems := ");
single_value->field_stringItems.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void StringStack_template::log_match(const StringStack& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_stackSize.match(match_value.stackSize(), legacy)){
TTCN_Logger::log_logmatch_info(".stackSize");
single_value->field_stackSize.log_match(match_value.stackSize(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_stringItems.match(match_value.stringItems(), legacy)){
TTCN_Logger::log_logmatch_info(".stringItems");
single_value->field_stringItems.log_match(match_value.stringItems(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ stackSize := ");
single_value->field_stackSize.log_match(match_value.stackSize(), legacy);
TTCN_Logger::log_event_str(", stringItems := ");
single_value->field_stringItems.log_match(match_value.stringItems(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void StringStack_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_stackSize.encode_text(text_buf);
single_value->field_stringItems.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibCommon_AbstractData.StringStack.");
}
}

void StringStack_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_stackSize.decode_text(text_buf);
single_value->field_stringItems.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new StringStack_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibCommon_AbstractData.StringStack.");
}
}

void StringStack_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    StringStack_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @LibCommon_AbstractData.StringStack has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) stackSize().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) stringItems().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "stackSize")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          stackSize().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "stringItems")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          stringItems().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @LibCommon_AbstractData.StringStack: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LibCommon_AbstractData.StringStack");
  }
  is_ifpresent = param.get_ifpresent();
}

void StringStack_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_stackSize.check_restriction(t_res, t_name ? t_name : "@LibCommon_AbstractData.StringStack");
single_value->field_stringItems.check_restriction(t_res, t_name ? t_name : "@LibCommon_AbstractData.StringStack");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibCommon_AbstractData.StringStack");
}

boolean StringStack_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean StringStack_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


/* Bodies of functions, altsteps and testcases */

void f__initStringStack(StringStack& p__stack)
{
TTCN_Location current_location("../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn", 52, TTCN_Location::LOCATION_FUNCTION, "f_initStringStack");
current_location.update_lineno(53);
#line 53 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
p__stack = c__initStringStack;
}

BOOLEAN f__isStringStackEmpty(StringStack& p__stack)
{
TTCN_Location current_location("../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn", 61, TTCN_Location::LOCATION_FUNCTION, "f_isStringStackEmpty");
current_location.update_lineno(63);
#line 63 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
if ((const_cast< const StringStack&>(p__stack).stackSize() == 0)) {
current_location.update_lineno(63);
#line 63 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
return TRUE;
}
else {
current_location.update_lineno(64);
#line 64 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
return FALSE;
}
}

BOOLEAN f__isItemOnStringStack(StringStack& p__stack, const CHARSTRING& p__item)
{
TTCN_Location current_location("../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn", 75, TTCN_Location::LOCATION_FUNCTION, "f_isItemOnStringStack");
current_location.update_lineno(78);
#line 78 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
INTEGER i;
current_location.update_lineno(79);
#line 79 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
i = 0;
current_location.update_lineno(79);
#line 79 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
for ( ; ; ) {
current_location.update_lineno(79);
#line 79 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
if (!(i < const_cast< const StringStack&>(p__stack).stackSize())) break;
current_location.update_lineno(80);
#line 80 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
if ((const_cast< const StringStack&>(p__stack).stringItems()[i] == p__item)) {
current_location.update_lineno(81);
#line 81 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
return TRUE;
}
current_location.update_lineno(79);
#line 79 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
{
INTEGER tmp_2;
++i;
}
}
current_location.update_lineno(84);
#line 84 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
return FALSE;
}

BOOLEAN f__peekStringStackTop(StringStack& p__stack, CHARSTRING& p__item)
{
TTCN_Location current_location("../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn", 95, TTCN_Location::LOCATION_FUNCTION, "f_peekStringStackTop");
p__item.clean_up();
current_location.update_lineno(98);
#line 98 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
if ((const_cast< const StringStack&>(p__stack).stackSize() == 0)) {
current_location.update_lineno(99);
#line 99 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
p__item = cs_0;
current_location.update_lineno(100);
#line 100 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
return FALSE;
}
current_location.update_lineno(102);
#line 102 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
p__item = const_cast< const StringStack&>(p__stack).stringItems()[(const_cast< const StringStack&>(p__stack).stackSize() - 1)];
current_location.update_lineno(103);
#line 103 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
return TRUE;
}

void f__pushStringStack(StringStack& p__stack, const CHARSTRING& p__item)
{
TTCN_Location current_location("../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn", 114, TTCN_Location::LOCATION_FUNCTION, "f_pushStringStack");
current_location.update_lineno(116);
#line 116 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
p__stack.stringItems()[const_cast< const StringStack&>(p__stack).stackSize()] = p__item;
current_location.update_lineno(117);
#line 117 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
{
INTEGER tmp_6;
tmp_6 = (const_cast< const StringStack&>(p__stack).stackSize() + 1);
p__stack.stackSize() = tmp_6;
}
}

void f__popStringStack(StringStack& p__stack)
{
TTCN_Location current_location("../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn", 126, TTCN_Location::LOCATION_FUNCTION, "f_popStringStack");
current_location.update_lineno(127);
#line 127 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
if ((const_cast< const StringStack&>(p__stack).stackSize() > 0)) {
current_location.update_lineno(128);
#line 128 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
{
INTEGER tmp_7;
tmp_7 = (const_cast< const StringStack&>(p__stack).stackSize() - 1);
p__stack.stackSize() = tmp_7;
}
current_location.update_lineno(131);
#line 131 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
p__stack.stringItems()[const_cast< const StringStack&>(p__stack).stackSize()] = cs_1;
}
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibCommon_AbstractData");
LibCommon__BasicTypesAndValues::module_object.pre_init_module();
current_location.update_lineno(42);
#line 42 "../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn"
const_c__initStringStack.stackSize() = 0;
const_c__initStringStack.stringItems() = NULL_VALUE;
module_object.add_function("f_initStringStack", (genericfunc_t)&f__initStringStack, NULL);
module_object.add_function("f_isStringStackEmpty", (genericfunc_t)&f__isStringStackEmpty, NULL);
module_object.add_function("f_isItemOnStringStack", (genericfunc_t)&f__isItemOnStringStack, NULL);
module_object.add_function("f_peekStringStackTop", (genericfunc_t)&f__peekStringStackTop, NULL);
module_object.add_function("f_pushStringStack", (genericfunc_t)&f__pushStringStack, NULL);
module_object.add_function("f_popStringStack", (genericfunc_t)&f__popStringStack, NULL);
}

static void post_init_module()
{
TTCN_Location current_location("../oneM2MTester/AbstractTestSuite/LibCommon/LibCommon_AbstractData.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibCommon_AbstractData");
LibCommon__BasicTypesAndValues::module_object.post_init_module();
}


} /* end of namespace */
