// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for jaeyounghwang (jaeyounghwang@ubuntu) on Mon Sep 18 04:04:30 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef OneM2M__Testcases_HH
#define OneM2M__Testcases_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "OneM2M_Functions.hh"

#if TTCN3_VERSION != 60100
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

namespace OneM2M__Testcases {

/* Function prototypes */

extern verdicttype testcase_TC__DELETE__RESOURCES(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__CRE__001__CSR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__CRE__001__SPR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__CRE__001__ABS(boolean has_timer, double timer_value);
extern void f__CSE__GEN__CRE__001(const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern void start_f__CSE__GEN__CRE__001(const COMPONENT& component_reference, const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern verdicttype testcase_TC__CSE__GEN__CRE__002__CSR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__CRE__002__SPR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__CRE__002__ABS(boolean has_timer, double timer_value);
extern void f__CSE__GEN__CRE__002(const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern void start_f__CSE__GEN__CRE__002(const COMPONENT& component_reference, const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern verdicttype testcase_TC__CSE__GEN__RET__001__CSR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__RET__001__SPR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__RET__001__ABS(boolean has_timer, double timer_value);
extern void f__CSE__GEN__RET__001(const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern void start_f__CSE__GEN__RET__001(const COMPONENT& component_reference, const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern verdicttype testcase_TC__CSE__GEN__RET__002__CSR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__RET__002__SPR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__RET__002__ABS(boolean has_timer, double timer_value);
extern void f__CSE__GEN__RET__002(const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern void start_f__CSE__GEN__RET__002(const COMPONENT& component_reference, const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern verdicttype testcase_TC__CSE__GEN__UPD__001__CSR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__UPD__001__SPR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__UPD__001__ABS(boolean has_timer, double timer_value);
extern void f__CSE__GEN__UPD__001(const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern void start_f__CSE__GEN__UPD__001(const COMPONENT& component_reference, const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern verdicttype testcase_TC__CSE__GEN__UPD__002__CSR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__UPD__002__SPR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__UPD__002__ABS(boolean has_timer, double timer_value);
extern void f__CSE__GEN__UPD__002(const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern void start_f__CSE__GEN__UPD__002(const COMPONENT& component_reference, const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern verdicttype testcase_TC__CSE__GEN__DEL__001__CSR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__DEL__001__SPR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__DEL__001__ABS(boolean has_timer, double timer_value);
extern void f__CSE__GEN__DEL__001(const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern void start_f__CSE__GEN__DEL__001(const COMPONENT& component_reference, const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern verdicttype testcase_TC__CSE__GEN__DEL__002__CSR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__DEL__002__SPR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GEN__DEL__002__ABS(boolean has_timer, double timer_value);
extern void f__CSE__GEN__DEL__002(const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern void start_f__CSE__GEN__DEL__002(const COMPONENT& component_reference, const OneM2M__Types::PrimitiveScope& p__primitiveScope);
extern verdicttype testcase_TC__CSE__REG__CRE__001(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__CRE__002(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__CRE__004(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__CRE__005(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__CRE__008(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__CRE__009(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__CRE__010(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__CRE__016__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__CRE__016__CST(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__CRE__016__POA(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__CRE__016__NL(boolean has_timer, double timer_value);
extern void f__CSE__REG__CRE__016(const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::AttributeAux& p__optionalAttribute);
extern void start_f__CSE__REG__CRE__016(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::AttributeAux& p__optionalAttribute);
extern verdicttype testcase_TC__CSE__REG__CRE__018(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__CRE__022(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__CRE__023(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__CRE__024(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__CRE__026(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__RET__001(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__RET__005(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__RET__008(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__UPD__001(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__REG__DEL__001(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__CNT__CB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__CNT__AE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__CNT__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__GRP__CB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__GRP__AE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__ACP__CB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__ACP__AE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__SCH__CB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__SCH__AE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__SCH__SUB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__PCH__AE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__SUB__CB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__SUB__AE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__SUB__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__SUB__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__SUB__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__SUB__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__NOD__CB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__MGC__CB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__LCP__CB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__STCG__CB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__STCL__CB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__MSSP__CB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__ASAR__CB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__001__CIN__CNT(boolean has_timer, double timer_value);
extern OneM2M__Types::ResponsePrimitive f__CSE__DMR__CRE__001(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__parentRequestPrimitive, const COMPONENT& p__notifyHandler);
extern void start_f__CSE__DMR__CRE__001(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__parentRequestPrimitive, const COMPONENT& p__notifyHandler);
extern verdicttype testcase_TC__CSE__DMR__CRE__002__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__002__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__002__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__002__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__002__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__002__SUB(boolean has_timer, double timer_value);
extern OneM2M__Types::ResponsePrimitive f__CSE__DMR__CRE__002(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern void start_f__CSE__DMR__CRE__002(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__CRE__003__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__003__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__003__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__003__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__003__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__003__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__CRE__003(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern void start_f__CSE__DMR__CRE__003(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__CRE__004__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__004__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__004__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__004__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__004__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__004__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__CRE__004(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern void start_f__CSE__DMR__CRE__004(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__CRE__005__MNI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__005__MBS(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__005__MIA(boolean has_timer, double timer_value);
extern void f__CSE__DMR__CRE__005(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::AttributeAux& p__invalidAttribute);
extern void start_f__CSE__DMR__CRE__005(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::AttributeAux& p__invalidAttribute);
extern verdicttype testcase_TC__CSE__DMR__CRE__006__MNI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__006__MBS(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__006__MIA(boolean has_timer, double timer_value);
extern OneM2M__Types::ResponsePrimitive f__CSE__DMR__CRE__006(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern void start_f__CSE__DMR__CRE__006(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__CRE__007(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__008(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__009(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__010(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__011(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__012__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__012__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__012__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__012__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__012__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__012__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__CRE__012(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern void start_f__CSE__DMR__CRE__012(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__CRE__013__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__013__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__013__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__013__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__013__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__013__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__CRE__013(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern void start_f__CSE__DMR__CRE__013(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern verdicttype testcase_TC__CSE__DMR__CRE__014__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__014__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__014__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__014__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__014__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__014__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__CRE__014(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern void start_f__CSE__DMR__CRE__014(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__CNT__ACPI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__CNT__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__CNT__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__CNT__MNI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__CNT__MBS(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__CNT__MIA(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__CNT__OR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__CIN__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__CIN__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__CIN__CR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__CIN__CNF(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__CIN__OR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__ACP__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__ACP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__ACPI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__ENC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__EXC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__GPI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__NFU(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__BN(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__RL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__PSN(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__PN(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__NSP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__LN(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__NCT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__NEC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__CR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__015__SUB__SU(boolean has_timer, double timer_value);
extern void f__CSE__DMR__CRE__015(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::AttributeAux& p__optionalAttribute);
extern void start_f__CSE__DMR__CRE__015(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::AttributeAux& p__optionalAttribute);
extern verdicttype testcase_TC__CSE__DMR__CRE__016__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__016__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__016__CIN(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__016__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__016__LCP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__016__MGO(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__016__NOD(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__016__SCH(boolean has_timer, double timer_value);
extern void f__CSE__DMR__CRE__016(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__requestAnnc);
extern void start_f__CSE__DMR__CRE__016(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__requestAnnc);
extern verdicttype testcase_TC__CSE__DMR__CRE__017__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__017__CIN(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__017__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__017__LCP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__017__MGO(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__017__NOD(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__017__SCH(boolean has_timer, double timer_value);
extern OneM2M__Types::RequestPrimitive f__CSE__DMR__CRE__017(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__requestAnnc);
extern void start_f__CSE__DMR__CRE__017(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__requestAnnc);
extern verdicttype testcase_TC__CSE__DMR__CRE__020(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__CRE__021(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__001__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__001__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__001__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__001__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__001__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__001__SUB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__001__CIN(boolean has_timer, double timer_value);
extern OneM2M__Types::ResponsePrimitive f__CSE__DMR__RET__001(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern void start_f__CSE__DMR__RET__001(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern verdicttype testcase_TC__CSE__DMR__RET__002(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__003__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__003__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__003__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__003__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__003__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__003__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__003(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern void start_f__CSE__DMR__RET__003(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__RET__004__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__004__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__004__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__004__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__004__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__004__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__004(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern void start_f__CSE__DMR__RET__004(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern verdicttype testcase_TC__CSE__DMR__RET__005__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__005__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__005__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__005__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__005__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__005__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__005(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern void start_f__CSE__DMR__RET__005(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern verdicttype testcase_TC__CSE__DMR__RET__006__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__006__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__006__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__006__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__006__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__006__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__006(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern void start_f__CSE__DMR__RET__006(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern verdicttype testcase_TC__CSE__DMR__RET__007__CNT__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__007__GRP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__007__ACP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__007__SCH__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__007__PCH__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__007__SUB__LBL(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__007(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern void start_f__CSE__DMR__RET__007(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__RET__008__CNT__AT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__008__GRP__AT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__008__ACP__AT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__008__SCH__AT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__008__PCH__AT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__008__SUB__AT(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__008(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern void start_f__CSE__DMR__RET__008(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__RET__009(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__010(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__011(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__012(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__013__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__013__AE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__013__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__013__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__013__CSR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__013__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__013__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__013(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern void start_f__CSE__DMR__RET__013(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern verdicttype testcase_TC__CSE__DMR__RET__014__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__014__AE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__014__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__014__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__014__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__014__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__014(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern void start_f__CSE__DMR__RET__014(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__RET__015__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__015__AE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__015__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__015__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__015__CSR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__015__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__015__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__015(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern void start_f__CSE__DMR__RET__015(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern verdicttype testcase_TC__CSE__DMR__RET__016__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__016__AE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__016__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__016__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__016__CSR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__016__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__016__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__016(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern void start_f__CSE__DMR__RET__016(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern verdicttype testcase_TC__CSE__DMR__RET__017__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__017__AE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__017__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__017__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__017__LCP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__017__MGC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__017__NOD(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__017__CSR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__017__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__017__STCL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__017__STCG(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__017__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__017(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern void start_f__CSE__DMR__RET__017(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse);
extern verdicttype testcase_TC__CSE__DMR__RET__018__ACP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__018__AE__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__018__CNT__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__018__GRP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__018__CSR__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__018__SCH__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__018__SUB__LBL(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__018(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern void start_f__CSE__DMR__RET__018(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__RET__019__ACP__LBL__AT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__019__AE__LBL__AT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__019__CNT__LBL__AT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__019__GRP__LBL__AT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__019__CSR__LBL__AT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__019__SCH__LBL__AT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__019__SUB__LBL__AT(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__019(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern void start_f__CSE__DMR__RET__019(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__RET__020__RCN__0(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__020__RCN__2(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__020__RCN__3(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__020(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::ResultContent& p__resultContent);
extern void start_f__CSE__DMR__RET__020(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::ResultContent& p__resultContent);
extern verdicttype testcase_TC__CSE__DMR__RET__021__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__021__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__021__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__021__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__021__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__021__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__021(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse, const OneM2M__Types::ResourceType_template& p__childResourceType, const OneM2M__Types::RequestPrimitive_template& p__childRequestPrimitive);
extern void start_f__CSE__DMR__RET__021(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse, const OneM2M__Types::ResourceType_template& p__childResourceType, const OneM2M__Types::RequestPrimitive_template& p__childRequestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__RET__022__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__022__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__022__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__022__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__022__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__022__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__022(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse, const OneM2M__Types::ResourceType_template& p__childResourceType, const OneM2M__Types::RequestPrimitive_template& p__childRequestPrimitive);
extern void start_f__CSE__DMR__RET__022(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse, const OneM2M__Types::ResourceType_template& p__childResourceType, const OneM2M__Types::RequestPrimitive_template& p__childRequestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__RET__023__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__023__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__023__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__023__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__023__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__023__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__023(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse, const OneM2M__Types::ResourceType_template& p__childResourceType, const OneM2M__Types::RequestPrimitive_template& p__childRequestPrimitive);
extern void start_f__CSE__DMR__RET__023(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse, const OneM2M__Types::ResourceType_template& p__childResourceType, const OneM2M__Types::RequestPrimitive_template& p__childRequestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__RET__024__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__024__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__024__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__024__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__024__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__024__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__024(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse, const OneM2M__Types::ResourceType_template& p__childResourceType, const OneM2M__Types::RequestPrimitive_template& p__childRequestPrimitive);
extern void start_f__CSE__DMR__RET__024(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse, const OneM2M__Types::ResourceType_template& p__childResourceType, const OneM2M__Types::RequestPrimitive_template& p__childRequestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__RET__025__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__025__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__025__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__025__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__025__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__RET__025__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__RET__025(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse, const OneM2M__Types::ResourceType_template& p__childResourceType, const OneM2M__Types::RequestPrimitive_template& p__childRequestPrimitive);
extern void start_f__CSE__DMR__RET__025(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse, const OneM2M__Types::ResourceType_template& p__childResourceType, const OneM2M__Types::RequestPrimitive_template& p__childRequestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__UPD__001__CNT__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__001__GRP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__001__ACP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__001__SCH__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__001__PCH__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__001__SUB__LBL(boolean has_timer, double timer_value);
extern OneM2M__Types::ResponsePrimitive f__CSE__DMR__UPD__001(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__updateRequestPrimitive, OneM2M__Types::PrimitiveContent& p__primitiveContentRetrievedResource);
extern verdicttype testcase_TC__CSE__DMR__UPD__002__CNT__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__002__GRP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__002__ACP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__002__SCH__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__002__PCH__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__002__SUB__LBL(boolean has_timer, double timer_value);
extern OneM2M__Types::ResponsePrimitive f__CSE__DMR__UPD__002(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__updateRequestPrimitive, OneM2M__Types::PrimitiveContent& p__primitiveContentRetrievedResource);
extern verdicttype testcase_TC__CSE__DMR__UPD__003__CNT__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__003__GRP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__003__ACP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__003__SCH__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__003__PCH__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__003__SUB__LBL(boolean has_timer, double timer_value);
extern OneM2M__Types::ResponsePrimitive f__CSE__DMR__UPD__003(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__updateRequestPrimitive, const OneM2M__Types::AttributeAux__list_template& p__nullFields, OneM2M__Types::PrimitiveContent& p__primitiveContentRetrievedResource);
extern verdicttype testcase_TC__CSE__DMR__UPD__004__CNT__ET__MNI__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__004__GRP__ET__GN__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__004__ACP__PV__AT__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__004__SCH__SE__AT__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__004__PCH__LBL__ACP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__004__SUB__ET__LBL__EXC(boolean has_timer, double timer_value);
extern OneM2M__Types::ResponsePrimitive f__CSE__DMR__UPD__004(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__updateRequestPrimitive, const OneM2M__Types::AttributeAux__list_template& p__nullFields, OneM2M__Types::PrimitiveContent& p__primitiveContentRetrievedResource);
extern verdicttype testcase_TC__CSE__DMR__UPD__005__CNT__EXC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__005__GRP__EXC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__005__ACP__EXC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__005__SCH__EXC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__005__PCH__EXC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__005__SUB__MNI(boolean has_timer, double timer_value);
extern void f__CSE__DMR__UPD__005(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__updateRequestPrimitive);
extern void start_f__CSE__DMR__UPD__005(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__updateRequestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__UPD__006__CNT__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__006__GRP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__006__ACP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__006__SCH__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__006__PCH__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__006__SUB__LBL(boolean has_timer, double timer_value);
extern void f__CSE__DMR__UPD__006(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__updateRequestPrimitive, OneM2M__Types::PrimitiveContent& p__primitiveContentRetrievedResource);
extern verdicttype testcase_TC__CSE__DMR__UPD__007__CNT__CT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__007__GRP__CT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__007__ACP__CT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__007__SCH__CT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__007__PCH__CT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__007__SUB__CT(boolean has_timer, double timer_value);
extern void f__CSE__DMR__UPD__007(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__updateRequestPrimitive, OneM2M__Types::PrimitiveContent& p__primitiveContentRetrievedResource);
extern verdicttype testcase_TC__CSE__DMR__UPD__008__CNT__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__008__GRP__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__008__ACP__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__008__SCH__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__008__PCH__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__008__SUB__ET(boolean has_timer, double timer_value);
extern void f__CSE__DMR__UPD__008(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__updateRequestPrimitive, const OneM2M__Types::AttributeAux__list_template& p__nullFields, OneM2M__Types::PrimitiveContent& p__primitiveContentRetrievedResource);
extern verdicttype testcase_TC__CSE__DMR__UPD__010(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__011(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__012(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__013(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__ACP__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__ACP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__ACP__PV(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__ACP__PVS(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__CNT__ACPI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__CNT__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__CNT__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__CNT__MBS(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__CNT__MIA(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__CNT__MNI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__CNT__OR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__SUB__ACPI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__SUB__BN(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__SUB__ENC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__SUB__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__SUB__EXC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__SUB__GPI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__SUB__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__SUB__LN(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__SUB__NCT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__SUB__NEC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__SUB__NFU(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__SUB__NSP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__SUB__PN(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__014__SUB__RL(boolean has_timer, double timer_value);
extern OneM2M__Types::ResponsePrimitive f__CSE__DMR__UPD__014(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__updateRequestPrimitive);
extern void start_f__CSE__DMR__UPD__014(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__updateRequestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__CSR__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__CSR__POA(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__CSR__NL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__NOD__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__NOD__ACPI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__NOD__HCL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__AE__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__AE__ACPI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__AE__APN(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__AE__POA(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__AE__OR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__CNT__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__CNT__ACPI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__CNT__MNI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__CNT__MBS(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__CNT__MIA(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__CNT__OR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__CNT__LI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__ACP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__SUB__ACPI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__SUB__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__SUB__ENC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__SUB__EXC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__SUB__GPI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__SUB__NFU(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__SUB__BN(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__SUB__RL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__SUB__PN(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__SUB__NSP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__SUB__LN(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__SUB__NEC(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__GRP__LBL(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__GRP__ACPI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__GRP__MACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__017__GRP__GN(boolean has_timer, double timer_value);
extern OneM2M__Types::ResponsePrimitive f__CSE__DMR__UPD__017(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__updateRequestPrimitive, OneM2M__Types::PrimitiveContent& p__primitiveContentRetrievedResource, OneM2M__Types::AcpType& p__acpi, const BOOLEAN& p__secondAcp);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__CSR__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__CSR__RR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__NOD__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__NOD__NI(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__AE__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__AE__RR(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__CNT__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__ACP__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__ACP__PV(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__ACP__PVS(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__SUB__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__SUB__NU(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__SUB__NCT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__GRP__ET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__GRP__MNM(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__UPD__018__GRP__MID(boolean has_timer, double timer_value);
extern OneM2M__Types::ResponsePrimitive f__CSE__DMR__UPD__018(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::RequestPrimitive_template& p__updateRequestPrimitive, OneM2M__Types::PrimitiveContent& p__primitiveContentRetrievedResource);
extern verdicttype testcase_TC__CSE__DMR__DEL__001__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__001__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__001__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__001__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__001__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__001__SUB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__001__CIN(boolean has_timer, double timer_value);
extern void f__CSE__DMR__DEL__001(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive);
extern void start_f__CSE__DMR__DEL__001(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__DEL__002__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__002__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__002__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__002__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__002__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__002__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__DEL__002(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive);
extern void start_f__CSE__DMR__DEL__002(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive);
extern verdicttype testcase_TC__CSE__DMR__DEL__003(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__004__CNT(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__004__GRP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__004__ACP(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__004__SCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__004__PCH(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__004__SUB(boolean has_timer, double timer_value);
extern void f__CSE__DMR__DEL__004(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::ResourceType& p__childResourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitiveChildResource);
extern void start_f__CSE__DMR__DEL__004(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::ResourceType& p__childResourceType, const OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitiveChildResource);
extern verdicttype testcase_TC__CSE__DMR__DEL__005(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__006(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__007(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__008(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__009(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DMR__DEL__010(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__LOC__BV__001(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__LOC__BV__002(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__LOC__BO__003(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__LOC__BO__004(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__LOC__BI__005(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__LOC__BV__006(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__LOC__BV__007(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__LOC__BV__008(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__LOC__BV__009__01(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__LOC__BV__009__02(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__LOC__BV__009__03(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__LOC__BV__012(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__LOC__BV__013(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__CRE__001(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__CRE__002(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__CRE__003(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__CRE__004(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__CRE__005(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__CRE__006(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__CRE__007(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__CRE__008__CRE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__CRE__008__UPD(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__CRE__008__RET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__CRE__008__DEL(boolean has_timer, double timer_value);
extern void f__CSE__GMG__CRE__008(const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode);
extern void start_f__CSE__GMG__CRE__008(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__contentResponse, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode);
extern verdicttype testcase_TC__CSE__GMG__CRE__009(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__RET__001(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__UPD__001(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__UPD__002(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__UPD__003(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__UPD__004(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__UPD__005(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__UPD__006(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__UPD__007(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__UPD__008(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__UPD__009(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__UPD__010(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__001__CRE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__001__UPD(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__001__RET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__001__DEL(boolean has_timer, double timer_value);
extern void f__CSE__GMG__001(const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode);
extern void start_f__CSE__GMG__001(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode);
extern verdicttype testcase_TC__CSE__GMG__002__CRE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__002__UPD(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__002__RET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__002__DEL(boolean has_timer, double timer_value);
extern void f__CSE__GMG__002(const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::AccessControlOperations& p__accessControlOperations);
extern void start_f__CSE__GMG__002(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::AccessControlOperations& p__accessControlOperations);
extern verdicttype testcase_TC__CSE__GMG__003__CRE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__003__UPD(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__003__RET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__003__DEL(boolean has_timer, double timer_value);
extern void f__CSE__GMG__003(const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode);
extern void start_f__CSE__GMG__003(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode);
extern verdicttype testcase_TC__CSE__GMG__004__CRE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__004__UPD(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__004__RET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__GMG__004__DEL(boolean has_timer, double timer_value);
extern void f__CSE__GMG__004(const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::AccessControlOperations& p__accessControlOperations);
extern void start_f__CSE__GMG__004(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::AccessControlOperations& p__accessControlOperations);
extern verdicttype testcase_TC__CSE__DIS__001(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DIS__003(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DIS__004(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DIS__005(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DIS__006(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__DIS__007(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__CRE__001__SUB(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__CRE__001__CIN(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__CRE__002(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__CRE__003(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__CRE__004(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__CRE__005(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__NTF__001(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__NTF__002(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__NTF__003(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__UPD__001(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__UPD__002(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__UPD__003(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__UPD__004(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__UPD__005(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__UPD__006(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__UPD__007(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__UPD__008(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__UPD__009(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__DEL__001(boolean has_timer, double timer_value);
extern void f__CSE__SUB__DEL__001(const UNIVERSAL_CHARSTRING& p__subscriptionReference);
extern void start_f__CSE__SUB__DEL__001(const COMPONENT& component_reference, const UNIVERSAL_CHARSTRING& p__subscriptionReference);
extern verdicttype testcase_TC__CSE__SUB__DEL__002(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SUB__DEL__003(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__CRE__001(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__CRE__002(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__UPD__001(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__UPD__002(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__001__CRE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__001__UPD(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__001__RET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__001__DEL(boolean has_timer, double timer_value);
extern void f__CSE__SEC__ACP__001(const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern void start_f__CSE__SEC__ACP__001(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive);
extern verdicttype testcase_TC__CSE__SEC__ACP__002__CRE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__002__UPD(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__002__RET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__002__DEL(boolean has_timer, double timer_value);
extern void f__CSE__SEC__ACP__002(const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode);
extern void start_f__CSE__SEC__ACP__002(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode);
extern verdicttype testcase_TC__CSE__SEC__ACP__003__CRE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__003__UPD(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__003__RET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__003__DEL(boolean has_timer, double timer_value);
extern void f__CSE__SEC__ACP__003(const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode);
extern void start_f__CSE__SEC__ACP__003(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode);
extern verdicttype testcase_TC__CSE__SEC__ACP__004__CRE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__004__UPD(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__004__RET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__004__DEL(boolean has_timer, double timer_value);
extern void f__CSE__SEC__ACP__004(const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode);
extern void start_f__CSE__SEC__ACP__004(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode);
extern verdicttype testcase_TC__CSE__SEC__ACP__011__CRE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__011__UPD(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__011__RET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__011__DEL(boolean has_timer, double timer_value);
extern void f__CSE__SEC__ACP__011(const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode);
extern void start_f__CSE__SEC__ACP__011(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode);
extern verdicttype testcase_TC__CSE__SEC__ACP__012__CRE(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__012__UPD(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__012__RET(boolean has_timer, double timer_value);
extern verdicttype testcase_TC__CSE__SEC__ACP__012__DEL(boolean has_timer, double timer_value);
extern void f__CSE__SEC__ACP__012(const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::AccessControlOperations& p__acor);
extern void start_f__CSE__SEC__ACP__012(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::AccessControlOperations& p__acor);

/* Global variable declarations */

extern const OneM2M__Types::RequestPrimitive_template& f__CSE__DMR__CRE__001_p__parentRequestPrimitive_defval;
extern const OneM2M__Types::AttributeAux__list_template& f__CSE__DMR__UPD__003_p__nullFields_defval;
extern const OneM2M__Types::AttributeAux__list_template& f__CSE__DMR__UPD__004_p__nullFields_defval;
extern const OneM2M__Types::AttributeAux__list_template& f__CSE__DMR__UPD__008_p__nullFields_defval;
extern const BOOLEAN& f__CSE__DMR__UPD__017_p__secondAcp_defval;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
