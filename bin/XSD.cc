// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for jaeyounghwang (jaeyounghwang@ubuntu) on Mon Sep 18 04:04:30 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "XSD.hh"

namespace XSD {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const CHARSTRING cs_3(30, "(-([1-9][0-9]#(0,))#(,1))#(,1)"),
cs_8(18, "(.[0-9]#(1,))#(,1)"),
cs_4(15, "(0[1-9]|1[0-2])"),
cs_5(24, "(0[1-9]|[12][0-9]|3[01])"),
cs_12(147, "(T[0-9]#(1,)(H([0-9]#(1,)(M([0-9]#(1,)(S|.[0-9]#(1,)S))#(,1)|.[0-9]#(1,)S|S))#(,1)|M([0-9]#(1,)(S|.[0-9]#(1,)S)|.[0-9]#(1,)M)#(,1)|S|.[0-9]#(1,)S))"),
cs_11(47, "(Z|[+-]((0[0-9]|1[0-3]):[0-5][0-9]|14:00))#(,1)"),
cs_7(12, "([0-5][0-9])"),
cs_6(18, "([01][0-9]|2[0-3])"),
cs_0('-'),
cs_9(22, "24:00:00(.0#(1,))#(,1)"),
cs_1(':'),
cs_10(10, "[0-9]#(1,)"),
cs_2(7, "[0-9]#4");
static const unsigned char module_checksum[] = { 0x9f, 0xaa, 0x21, 0x88, 0xe6, 0xcf, 0x90, 0x94, 0x47, 0x03, 0xb6, 0x5f, 0xee, 0xa8, 0xd6, 0x98 };

/* Global variable definitions */

const XERdescriptor_t       _T_dash_xer_ = { {"CHARSTRING>\n", "CHARSTRING>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t _T_dash_descr_ = { "@XSD.dash.<type>", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &_T_dash_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static CHARSTRING const_dash;
const CHARSTRING& dash = const_dash;
static CHARSTRING const_cln;
const CHARSTRING& cln = const_cln;
static CHARSTRING const_year;
const CHARSTRING& year = const_year;
static CHARSTRING const_yearExpansion;
const CHARSTRING& yearExpansion = const_yearExpansion;
static CHARSTRING const_month;
const CHARSTRING& month = const_month;
static CHARSTRING const_dayOfMonth;
const CHARSTRING& dayOfMonth = const_dayOfMonth;
static CHARSTRING const_hour;
const CHARSTRING& hour = const_hour;
static CHARSTRING const_minute;
const CHARSTRING& minute = const_minute;
static CHARSTRING const_second;
const CHARSTRING& second = const_second;
static CHARSTRING const_sFraction;
const CHARSTRING& sFraction = const_sFraction;
static CHARSTRING const_endOfDayExt;
const CHARSTRING& endOfDayExt = const_endOfDayExt;
static CHARSTRING const_nums;
const CHARSTRING& nums = const_nums;
static CHARSTRING const_ZorTimeZoneExt;
const CHARSTRING& ZorTimeZoneExt = const_ZorTimeZoneExt;
static CHARSTRING const_durTime;
const CHARSTRING& durTime = const_durTime;
const XERdescriptor_t       XMLCompatibleString_xer_ = { {"XMLCompatibleString>\n", "XMLCompatibleString>\n"}, {21, 21}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t XMLCompatibleString_descr_ = { "@XSD.XMLCompatibleString", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &XMLCompatibleString_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnySimpleType_xer_ = { {"AnySimpleType>\n", "AnySimpleType>\n"}, {15, 15}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_ANYSIMPLETYPE };
const TTCN_Typedescriptor_t AnySimpleType_descr_ = { "@XSD.AnySimpleType", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &AnySimpleType_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnyType_elem__list_xer_ = { {"elem_list>\n", "elem_list>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, &AnyType_elem__list_0_xer_, -1, XSD_NONE };
const TTCN_JSONdescriptor_t AnyType_elem__list_json_ = { FALSE, NULL, FALSE, NULL, FALSE };
const TTCN_Typedescriptor_t AnyType_elem__list_descr_ = { "@XSD.AnyType.elem_list", NULL, NULL, NULL, &AnyType_elem__list_xer_, &AnyType_elem__list_json_, &AnyType_elem__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       String_xer_ = { {"String>\n", "String>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_STRING };
const TTCN_Typedescriptor_t String_descr_ = { "@XSD.String", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &String_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnyType_elem__list_0_xer_ = { {"String>\n", "String>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_STRING };
const TTCN_Typedescriptor_t AnyType_elem__list_0_descr_ = { "@XSD.AnyType.elem_list.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &AnyType_elem__list_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnyType_xer_ = { {"AnyType>\n", "AnyType>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_ANYTYPE };
const TTCN_JSONdescriptor_t AnyType_json_ = { FALSE, NULL, FALSE, NULL, FALSE };
const TTCN_Typedescriptor_t AnyType_descr_ = { "@XSD.AnyType", NULL, NULL, NULL, &AnyType_xer_, &AnyType_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnyType_embed__values_xer_ = { {"embed_values>\n", "embed_values>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED |XER_OPTIONAL, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, &AnyType_embed__values_0_xer_, -1, XSD_NONE };
const TTCN_JSONdescriptor_t AnyType_embed__values_json_ = { FALSE, NULL, FALSE, NULL, FALSE };
const TTCN_Typedescriptor_t AnyType_embed__values_descr_ = { "@XSD.AnyType.embed_values", NULL, NULL, NULL, &AnyType_embed__values_xer_, &AnyType_embed__values_json_, &AnyType_embed__values_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnyType_embed__values_0_xer_ = { {"String>\n", "String>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_STRING };
const TTCN_Typedescriptor_t AnyType_embed__values_0_descr_ = { "@XSD.AnyType.embed_values.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &AnyType_embed__values_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnyType_attr_xer_ = { {"attr>\n", "attr>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED |XER_OPTIONAL, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, &AnyType_attr_0_xer_, -1, XSD_NONE };
const TTCN_JSONdescriptor_t AnyType_attr_json_ = { FALSE, NULL, FALSE, NULL, FALSE };
const TTCN_Typedescriptor_t AnyType_attr_descr_ = { "@XSD.AnyType.attr", NULL, NULL, NULL, &AnyType_attr_xer_, &AnyType_attr_json_, &AnyType_attr_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnyType_attr_0_xer_ = { {"String>\n", "String>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_STRING };
const TTCN_Typedescriptor_t AnyType_attr_0_descr_ = { "@XSD.AnyType.attr.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &AnyType_attr_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       XMLStringWithNoCRLFHT_xer_ = { {"XMLStringWithNoCRLFHT>\n", "XMLStringWithNoCRLFHT>\n"}, {23, 23}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t XMLStringWithNoCRLFHT_descr_ = { "@XSD.XMLStringWithNoCRLFHT", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &XMLStringWithNoCRLFHT_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NormalizedString_xer_ = { {"NormalizedString>\n", "NormalizedString>\n"}, {18, 18}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NORMALIZEDSTRING };
const TTCN_Typedescriptor_t NormalizedString_descr_ = { "@XSD.NormalizedString", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &NormalizedString_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Token_xer_ = { {"Token>\n", "Token>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_TOKEN };
const TTCN_Typedescriptor_t Token_descr_ = { "@XSD.Token", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Token_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       XMLStringWithNoWhitespace_xer_ = { {"XMLStringWithNoWhitespace>\n", "XMLStringWithNoWhitespace>\n"}, {27, 27}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t XMLStringWithNoWhitespace_descr_ = { "@XSD.XMLStringWithNoWhitespace", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &XMLStringWithNoWhitespace_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Name_xer_ = { {"Name>\n", "Name>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NAME };
const TTCN_Typedescriptor_t Name_descr_ = { "@XSD.Name", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Name_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NMTOKEN_xer_ = { {"NMTOKEN>\n", "NMTOKEN>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NMTOKEN };
const TTCN_Typedescriptor_t NMTOKEN_descr_ = { "@XSD.NMTOKEN", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &NMTOKEN_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NCName_xer_ = { {"NCName>\n", "NCName>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NCName };
const TTCN_Typedescriptor_t NCName_descr_ = { "@XSD.NCName", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &NCName_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ID_xer_ = { {"ID>\n", "ID>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_ID };
const TTCN_Typedescriptor_t ID_descr_ = { "@XSD.ID", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &ID_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       IDREF_xer_ = { {"IDREF>\n", "IDREF>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_IDREF };
const TTCN_Typedescriptor_t IDREF_descr_ = { "@XSD.IDREF", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &IDREF_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ENTITY_xer_ = { {"ENTITY>\n", "ENTITY>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_ENTITY };
const TTCN_Typedescriptor_t ENTITY_descr_ = { "@XSD.ENTITY", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &ENTITY_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       HexBinary_xer_ = { {"HexBinary>\n", "HexBinary>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_HEXBINARY };
const TTCN_Typedescriptor_t HexBinary_descr_ = { "@XSD.HexBinary", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &HexBinary_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Base64Binary_xer_ = { {"Base64Binary>\n", "Base64Binary>\n"}, {14, 14}, 0 |BASE_64 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_BASE64BINARY };
const TTCN_Typedescriptor_t Base64Binary_descr_ = { "@XSD.Base64Binary", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &Base64Binary_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnyURI_xer_ = { {"AnyURI>\n", "AnyURI>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_ANYURI };
const TTCN_Typedescriptor_t AnyURI_descr_ = { "@XSD.AnyURI", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &AnyURI_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Language_xer_ = { {"Language>\n", "Language>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_LANGUAGE };
const TTCN_Typedescriptor_t Language_descr_ = { "@XSD.Language", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Language_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Integer_xer_ = { {"Integer>\n", "Integer>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_INTEGER };
const TTCN_Typedescriptor_t Integer_descr_ = { "@XSD.Integer", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &Integer_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       PositiveInteger_xer_ = { {"PositiveInteger>\n", "PositiveInteger>\n"}, {17, 17}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_POSITIVEINTEGER };
const TTCN_Typedescriptor_t PositiveInteger_descr_ = { "@XSD.PositiveInteger", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &PositiveInteger_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NonPositiveInteger_xer_ = { {"NonPositiveInteger>\n", "NonPositiveInteger>\n"}, {20, 20}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONPOSITIVEINTEGER };
const TTCN_Typedescriptor_t NonPositiveInteger_descr_ = { "@XSD.NonPositiveInteger", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &NonPositiveInteger_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NegativeInteger_xer_ = { {"NegativeInteger>\n", "NegativeInteger>\n"}, {17, 17}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NEGATIVEINTEGER };
const TTCN_Typedescriptor_t NegativeInteger_descr_ = { "@XSD.NegativeInteger", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &NegativeInteger_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NonNegativeInteger_xer_ = { {"NonNegativeInteger>\n", "NonNegativeInteger>\n"}, {20, 20}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONNEGATIVEINTEGER };
const TTCN_Typedescriptor_t NonNegativeInteger_descr_ = { "@XSD.NonNegativeInteger", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &NonNegativeInteger_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Long_xer_ = { {"Long>\n", "Long>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_LONG };
const TTCN_Typedescriptor_t Long_descr_ = { "@XSD.Long", &INTEGER_ber_, &UsefulTtcn3Types::longlong_raw_, &INTEGER_text_, &Long_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       UnsignedLong_xer_ = { {"UnsignedLong>\n", "UnsignedLong>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_UNSIGNEDLONG };
const TTCN_Typedescriptor_t UnsignedLong_descr_ = { "@XSD.UnsignedLong", &INTEGER_ber_, &UsefulTtcn3Types::unsignedlonglong_raw_, &INTEGER_text_, &UnsignedLong_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Int_xer_ = { {"Int>\n", "Int>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_INT };
const TTCN_Typedescriptor_t Int_descr_ = { "@XSD.Int", &INTEGER_ber_, &UsefulTtcn3Types::long__raw_, &INTEGER_text_, &Int_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       UnsignedInt_xer_ = { {"UnsignedInt>\n", "UnsignedInt>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_UNSIGNEDINT };
const TTCN_Typedescriptor_t UnsignedInt_descr_ = { "@XSD.UnsignedInt", &INTEGER_ber_, &UsefulTtcn3Types::unsignedlong_raw_, &INTEGER_text_, &UnsignedInt_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Short_xer_ = { {"Short>\n", "Short>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_SHORT };
const TTCN_Typedescriptor_t Short_descr_ = { "@XSD.Short", &INTEGER_ber_, &UsefulTtcn3Types::short__raw_, &INTEGER_text_, &Short_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       UnsignedShort_xer_ = { {"UnsignedShort>\n", "UnsignedShort>\n"}, {15, 15}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_UNSIGNEDSHORT };
const TTCN_Typedescriptor_t UnsignedShort_descr_ = { "@XSD.UnsignedShort", &INTEGER_ber_, &UsefulTtcn3Types::unsignedshort_raw_, &INTEGER_text_, &UnsignedShort_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Byte_xer_ = { {"Byte>\n", "Byte>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_BYTE };
const TTCN_Typedescriptor_t Byte_descr_ = { "@XSD.Byte", &INTEGER_ber_, &UsefulTtcn3Types::byte_raw_, &INTEGER_text_, &Byte_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       UnsignedByte_xer_ = { {"UnsignedByte>\n", "UnsignedByte>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_UNSIGNEDBYTE };
const TTCN_Typedescriptor_t UnsignedByte_descr_ = { "@XSD.UnsignedByte", &INTEGER_ber_, &UsefulTtcn3Types::unsignedbyte_raw_, &INTEGER_text_, &UnsignedByte_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Decimal_xer_ = { {"Decimal>\n", "Decimal>\n"}, {9, 9}, 0 |XER_DECIMAL |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_DECIMAL };
const TTCN_Typedescriptor_t Decimal_descr_ = { "@XSD.Decimal", &FLOAT_ber_, &FLOAT_raw_, NULL, &Decimal_xer_, &FLOAT_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Float_xer_ = { {"Float>\n", "Float>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_FLOAT };
const TTCN_Typedescriptor_t Float_descr_ = { "@XSD.Float", &FLOAT_ber_, &UsefulTtcn3Types::IEEE754float_raw_, NULL, &Float_xer_, &FLOAT_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Double_xer_ = { {"Double>\n", "Double>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_DOUBLE };
const TTCN_Typedescriptor_t Double_descr_ = { "@XSD.Double", &FLOAT_ber_, &UsefulTtcn3Types::IEEE754double_raw_, NULL, &Double_xer_, &FLOAT_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Duration_xer_ = { {"Duration>\n", "Duration>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_DURATION };
const TTCN_Typedescriptor_t Duration_descr_ = { "@XSD.Duration", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Duration_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       DateTime_xer_ = { {"DateTime>\n", "DateTime>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_DATETIME };
const TTCN_Typedescriptor_t DateTime_descr_ = { "@XSD.DateTime", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &DateTime_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Time_xer_ = { {"Time>\n", "Time>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_TIME };
const TTCN_Typedescriptor_t Time_descr_ = { "@XSD.Time", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Time_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Date_xer_ = { {"Date>\n", "Date>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_DATE };
const TTCN_Typedescriptor_t Date_descr_ = { "@XSD.Date", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Date_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       GYearMonth_xer_ = { {"GYearMonth>\n", "GYearMonth>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_GYEARMONTH };
const TTCN_Typedescriptor_t GYearMonth_descr_ = { "@XSD.GYearMonth", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &GYearMonth_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       GYear_xer_ = { {"GYear>\n", "GYear>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_GYEAR };
const TTCN_Typedescriptor_t GYear_descr_ = { "@XSD.GYear", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &GYear_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       GMonthDay_xer_ = { {"GMonthDay>\n", "GMonthDay>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_GMONTHDAY };
const TTCN_Typedescriptor_t GMonthDay_descr_ = { "@XSD.GMonthDay", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &GMonthDay_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       GDay_xer_ = { {"GDay>\n", "GDay>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_GDAY };
const TTCN_Typedescriptor_t GDay_descr_ = { "@XSD.GDay", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &GDay_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       GMonth_xer_ = { {"GMonth>\n", "GMonth>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_GMONTH };
const TTCN_Typedescriptor_t GMonth_descr_ = { "@XSD.GMonth", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &GMonth_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NMTOKENS_xer_ = { {"NMTOKENS>\n", "NMTOKENS>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, &NMTOKENS_0_xer_, -1, XSD_NMTOKENS };
const TTCN_Typedescriptor_t NMTOKENS_descr_ = { "@XSD.NMTOKENS", NULL, NULL, NULL, &NMTOKENS_xer_, NULL, &NMTOKENS_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NMTOKENS_0_xer_ = { {"NMTOKEN>\n", "NMTOKEN>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NMTOKEN };
const TTCN_Typedescriptor_t NMTOKENS_0_descr_ = { "@XSD.NMTOKENS.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &NMTOKENS_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       IDREFS_xer_ = { {"IDREFS>\n", "IDREFS>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, &IDREFS_0_xer_, -1, XSD_IDREFS };
const TTCN_Typedescriptor_t IDREFS_descr_ = { "@XSD.IDREFS", NULL, NULL, NULL, &IDREFS_xer_, NULL, &IDREFS_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       IDREFS_0_xer_ = { {"IDREF>\n", "IDREF>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_IDREF };
const TTCN_Typedescriptor_t IDREFS_0_descr_ = { "@XSD.IDREFS.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &IDREFS_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ENTITIES_xer_ = { {"ENTITIES>\n", "ENTITIES>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, &ENTITIES_0_xer_, -1, XSD_ENTITIES };
const TTCN_Typedescriptor_t ENTITIES_descr_ = { "@XSD.ENTITIES", NULL, NULL, NULL, &ENTITIES_xer_, NULL, &ENTITIES_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ENTITIES_0_xer_ = { {"ENTITY>\n", "ENTITY>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_ENTITY };
const TTCN_Typedescriptor_t ENTITIES_0_descr_ = { "@XSD.ENTITIES.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &ENTITIES_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       QName_name_xer_ = { {"name>\n", "name>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NCName };
const TTCN_Typedescriptor_t QName_name_descr_ = { "@XSD.QName.name", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &QName_name_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       QName_xer_ = { {"QName>\n", "QName>\n"}, {7, 7}, 0 |USE_QNAME |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_QNAME };
const TTCN_JSONdescriptor_t QName_json_ = { FALSE, NULL, FALSE, NULL, FALSE };
const TTCN_Typedescriptor_t QName_descr_ = { "@XSD.QName", NULL, NULL, NULL, &QName_xer_, &QName_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       QName_uri_xer_ = { {"uri>\n", "uri>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED |XER_OPTIONAL, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_ANYURI };
const TTCN_Typedescriptor_t QName_uri_descr_ = { "@XSD.QName.uri", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &QName_uri_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Boolean_xer_ = { {"Boolean>\n", "Boolean>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_BOOLEAN };
const TTCN_Typedescriptor_t Boolean_descr_ = { "@XSD.Boolean", &BOOLEAN_ber_, &BOOLEAN_raw_, &BOOLEAN_text_, &Boolean_xer_, &BOOLEAN_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
TTCN_Module module_object("XSD", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_1,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

AnyType::AnyType()
{
}

AnyType::AnyType(const OPTIONAL<AnyType_embed__values>& par_embed__values,
    const OPTIONAL<AnyType_attr>& par_attr,
    const AnyType_elem__list& par_elem__list)
  :   field_embed__values(par_embed__values),
  field_attr(par_attr),
  field_elem__list(par_elem__list)
{
}

AnyType::AnyType(const AnyType& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @XSD.AnyType.");
if (other_value.embed__values().is_bound()) field_embed__values = other_value.embed__values();
else field_embed__values.clean_up();
if (other_value.attr().is_bound()) field_attr = other_value.attr();
else field_attr.clean_up();
if (other_value.elem__list().is_bound()) field_elem__list = other_value.elem__list();
else field_elem__list.clean_up();
}

void AnyType::clean_up()
{
field_embed__values.clean_up();
field_attr.clean_up();
field_elem__list.clean_up();
}

AnyType& AnyType::operator=(const AnyType& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @XSD.AnyType.");
  if (other_value.embed__values().is_bound()) field_embed__values = other_value.embed__values();
  else field_embed__values.clean_up();
  if (other_value.attr().is_bound()) field_attr = other_value.attr();
  else field_attr.clean_up();
  if (other_value.elem__list().is_bound()) field_elem__list = other_value.elem__list();
  else field_elem__list.clean_up();
}
return *this;
}

boolean AnyType::operator==(const AnyType& other_value) const
{
return field_embed__values==other_value.field_embed__values
  && field_attr==other_value.field_attr
  && field_elem__list==other_value.field_elem__list;
}

boolean AnyType::is_bound() const
{
if(OPTIONAL_OMIT == field_embed__values.get_selection() || field_embed__values.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_attr.get_selection() || field_attr.is_bound()) return TRUE;
if(field_elem__list.is_bound()) return TRUE;
return FALSE;
}
boolean AnyType::is_value() const
{
if(OPTIONAL_OMIT != field_embed__values.get_selection() && !field_embed__values.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_attr.get_selection() && !field_attr.is_value()) return FALSE;
if(!field_elem__list.is_value()) return FALSE;
return TRUE;
}
int AnyType::size_of() const
{
  int ret_val = 1;
  if (field_embed__values.ispresent()) ret_val++;
  if (field_attr.ispresent()) ret_val++;
  return ret_val;
}

void AnyType::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ embed_values := ");
field_embed__values.log();
TTCN_Logger::log_event_str(", attr := ");
field_attr.log();
TTCN_Logger::log_event_str(", elem_list := ");
field_elem__list.log();
TTCN_Logger::log_event_str(" }");
}

void AnyType::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record value of type @XSD.AnyType has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) embed__values().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) attr().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) elem__list().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "embed_values")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          embed__values().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "attr")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          attr().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem__list().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @XSD.AnyType: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@XSD.AnyType");
  }
}

void AnyType::set_implicit_omit()
{
if (!embed__values().is_bound()) embed__values() = OMIT_VALUE;
else embed__values().set_implicit_omit();
if (!attr().is_bound()) attr() = OMIT_VALUE;
else attr().set_implicit_omit();
if (elem__list().is_bound()) elem__list().set_implicit_omit();
}

void AnyType::encode_text(Text_Buf& text_buf) const
{
field_embed__values.encode_text(text_buf);
field_attr.encode_text(text_buf);
field_elem__list.encode_text(text_buf);
}

void AnyType::decode_text(Text_Buf& text_buf)
{
field_embed__values.decode_text(text_buf);
field_attr.decode_text(text_buf);
field_elem__list.decode_text(text_buf);
}

void AnyType::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void AnyType::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, XER_NONE, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, FALSE)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** AnyType::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns, unsigned int flavor) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns, flavor);
  try {
  char **new_ns;
  size_t num_new;
  boolean def_ns_1 = FALSE;
  new_ns = field_attr.collect_ns(AnyType_attr_xer_, num_new, def_ns, flavor);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_elem__list.collect_ns(AnyType_elem__list_xer_, num_new, def_ns, flavor);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean AnyType::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor, unsigned int flavor2) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (AnyType_attr::can_start(name, uri, AnyType_attr_xer_, flavor, flavor2)) return TRUE;
  else if (AnyType_elem__list::can_start(name, uri, AnyType_elem__list_xer_, flavor, flavor2)) return TRUE;
  return FALSE;
}

int AnyType::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, unsigned int p_flavor2, int p_indent, embed_values_enc_struct_t* emb_val_parent) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  const boolean need_control_ns = (p_td.xer_bits & (USE_NIL));
  size_t num_collected = 0;
  char **collected_ns = NULL;
  boolean def_ns = FALSE;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns, p_flavor2);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns((size_t)p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns, p_flavor2);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns((size_t)p_td.ns_index)->px == '\0';
  boolean delay_close = e_xer && (need_control_ns || num_collected || empty_ns_hack);
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & (USE_NIL|USE_TYPE_ATTR)) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
    delay_close = TRUE;
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  { // !QN
  if (!e_xer && (p_td.xer_bits & EMBED_VALUES)) {
    ec_1.set_msg("embed_values': ");
    sub_len += field_embed__values.XER_encode(AnyType_embed__values_xer_, p_buf, p_flavor, p_flavor2, p_indent+1, 0);
  }
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("embed_values': ");
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) {
    if (field_embed__values.ispresent() && field_embed__values().size_of() > 0) {
      sub_len += field_embed__values()[0].XER_encode(UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_flavor2, p_indent+1, 0);
    }
  }
  else if ( !(p_td.xer_bits & EMBED_VALUES)) {
    sub_len += field_embed__values.XER_encode(AnyType_embed__values_xer_, p_buf, p_flavor, p_flavor2, p_indent+1, 0);
  }
  embed_values_enc_struct_t* emb_val = 0;
  if (e_xer && (p_td.xer_bits & EMBED_VALUES) &&     field_embed__values.ispresent() && field_embed__values().size_of() > 1) {
    emb_val = new embed_values_enc_struct_t;
    emb_val->embval_array_reg = (const PreGenRecordOf::PREGEN__RECORD__OF__UNIVERSAL__CHARSTRING*)&field_embed__values();
    emb_val->embval_array_opt = NULL;
    emb_val->embval_index = 1;
  }
  ec_1.set_msg("attr': ");
  sub_len += field_attr.XER_encode(AnyType_attr_xer_, p_buf, p_flavor, p_flavor2, p_indent+!omit_tag, emb_val);
  if (e_xer && (p_td.xer_bits & EMBED_VALUES) && 0 != emb_val &&
      field_embed__values.ispresent() && field_attr.ispresent() && emb_val->embval_index < field_embed__values().size_of()) {
    field_embed__values()[emb_val->embval_index].XER_encode(
      UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_flavor2, p_indent+1, 0);
    ++emb_val->embval_index;
  }
  ec_1.set_msg("elem_list': ");
if (e_xer && ((p_td.xer_bits & UNTAGGED) && !(p_td.xer_bits & EMBED_VALUES) && 0 != emb_val_parent
  && field_embed__values.ispresent())) {
  if (0 != emb_val_parent->embval_array_reg) {
    if (emb_val_parent->embval_index < emb_val_parent->embval_array_reg->size_of()) {
      (*emb_val_parent->embval_array_reg)[emb_val_parent->embval_index].XER_encode(UNIVERSAL_CHARSTRING_xer_      , p_buf, p_flavor | EMBED_VALUES, p_flavor2, p_indent+1, 0);
      ++emb_val_parent->embval_index;
    }
  } else {
   if (emb_val_parent->embval_index < emb_val_parent->embval_array_opt->size_of()) {
      (*emb_val_parent->embval_array_opt)[emb_val_parent->embval_index].XER_encode(UNIVERSAL_CHARSTRING_xer_      , p_buf, p_flavor | EMBED_VALUES, p_flavor2, p_indent+1, 0);
      ++emb_val_parent->embval_index;
    }
  }
}
  sub_len += field_elem__list.XER_encode(AnyType_elem__list_xer_, p_buf, p_flavor, p_flavor2, p_indent+!omit_tag, emb_val);
  if (e_xer && (p_td.xer_bits & EMBED_VALUES) && 0 != emb_val &&
      field_embed__values.ispresent() &&  emb_val->embval_index < field_embed__values().size_of()) {
    field_embed__values()[emb_val->embval_index].XER_encode(
      UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_flavor2, p_indent+1, 0);
    ++emb_val->embval_index;
  }
  if (0 != emb_val) {
    if (field_embed__values.ispresent() && emb_val->embval_index < field_embed__values().size_of()) {
      ec_1.set_msg("embed__values': ");
      TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_CONSTRAINT,
        "Too many EMBED-VALUEs specified: %d (expected %d or less)",
        field_embed__values().size_of(), emb_val->embval_index);
    }
    delete emb_val;
  }
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int AnyType::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, unsigned int p_flavor2, embed_values_dec_struct_t* emb_val_parent)
{
  boolean e_xer = is_exer(p_flavor);
  unsigned long xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && ((p_flavor & USE_TYPE_ATTR)|| (p_flavor2 & USE_NIL_PARENT_TAG));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  p_flavor2 = XER_NONE;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  if (!(p_td.xer_bits & EMBED_VALUES)) {
    ec_1.set_msg("embed_values': ");
    field_embed__values.XER_decode(AnyType_embed__values_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : XER_NONE), p_flavor2, 0);
  }
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("embed_values': ");
    field_embed__values.XER_decode(AnyType_embed__values_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), p_flavor2, 0);
  }
}
  embed_values_dec_struct_t* emb_val = 0;
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) {
    emb_val = new embed_values_dec_struct_t;
    emb_val->embval_array_reg = (PreGenRecordOf::PREGEN__RECORD__OF__UNIVERSAL__CHARSTRING*)&field_embed__values();
    emb_val->embval_array_opt = NULL;
    emb_val->embval_index = 0;
    field_embed__values().set_size(0);
  }
  int last_embval_index = 0;
  if (0 != emb_val) {
    if (p_reader.NodeType()==XML_READER_TYPE_TEXT) {
      UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
      field_embed__values()[emb_val->embval_index] = emb_ustr;
    }
    if (last_embval_index == emb_val->embval_index) {
      ++emb_val->embval_index;
    }
    last_embval_index = emb_val->embval_index;
  }
  {
    ec_1.set_msg("attr': ");
  if ((p_td.xer_bits & UNTAGGED) && 0 != emb_val_parent) {
    if (p_reader.NodeType() == XML_READER_TYPE_TEXT) {
      UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
      if (0 != emb_val_parent->embval_array_reg) {
        (*emb_val_parent->embval_array_reg)[emb_val_parent->embval_index] = emb_ustr;
      } else {
        (*emb_val_parent->embval_array_opt)[emb_val_parent->embval_index] = emb_ustr;
      }
      ++emb_val_parent->embval_index;
    }
  }
    field_attr.XER_decode(AnyType_attr_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : XER_NONE), p_flavor2, emb_val);
  }
  if (!field_attr.is_present()) {
    last_embval_index = -1;
  }
  if (0 != emb_val) {
    if (p_reader.NodeType()==XML_READER_TYPE_TEXT) {
      UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
      field_embed__values()[emb_val->embval_index] = emb_ustr;
    }
    if (last_embval_index == emb_val->embval_index) {
      ++emb_val->embval_index;
    }
    last_embval_index = emb_val->embval_index;
  }
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_elem__list = *static_cast<const AnyType_elem__list*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("elem_list': ");
  if ((p_td.xer_bits & UNTAGGED) && 0 != emb_val_parent) {
    if (p_reader.NodeType() == XML_READER_TYPE_TEXT) {
      UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
      if (0 != emb_val_parent->embval_array_reg) {
        (*emb_val_parent->embval_array_reg)[emb_val_parent->embval_index] = emb_ustr;
      } else {
        (*emb_val_parent->embval_array_opt)[emb_val_parent->embval_index] = emb_ustr;
      }
      ++emb_val_parent->embval_index;
    }
  }
    field_elem__list.XER_decode(AnyType_elem__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : XER_NONE), p_flavor2, emb_val);
  }
  if (!field_elem__list.is_present()) {
    last_embval_index = -1;
  }
  if (field_elem__list.is_bound()) {
    p_flavor &= ~XER_OPTIONAL;
  }
  if (0 != emb_val) {
    if (p_reader.NodeType()==XML_READER_TYPE_TEXT) {
      UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
      field_embed__values()[emb_val->embval_index] = emb_ustr;
    }
    if (last_embval_index == emb_val->embval_index) {
      ++emb_val->embval_index;
    }
  }
  boolean all_unbound = TRUE;
  if (0 != emb_val) {
    AnyType_embed__values::of_type empty_string("");
    for (int j_j = 0; j_j < emb_val->embval_index; ++j_j) {
      if (!field_embed__values()[j_j].is_bound()) {
        field_embed__values()[j_j] = empty_string;
      } else if(field_embed__values()[j_j] != empty_string) {
        all_unbound = FALSE;
      }
    }
    delete emb_val;
  }
  if (e_xer && (p_td.xer_bits & EMBED_VALUES) && all_unbound) {
    field_embed__values = OMIT_VALUE;
  }
  } // errorcontext
  if (!field_elem__list.is_bound()) {
    if (p_flavor & XER_OPTIONAL) {
      clean_up();
      return -1;
    }
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INCOMPL_MSG,
      "No data found for non-optional field 'elem_list'");
  }
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int AnyType::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @XSD.AnyType.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_embed__values.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "embed_values");
    enc_len += field_embed__values.JSON_encode(AnyType_embed__values_descr_, p_tok);
  }

  if (field_attr.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "attr");
    enc_len += field_attr.JSON_encode(AnyType_attr_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "elem_list");
    enc_len += field_elem__list.JSON_encode(AnyType_elem__list_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int AnyType::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  size_t dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  boolean embed__values_found = FALSE;
  boolean attr_found = FALSE;
  boolean elem__list_found = FALSE;

  while (TRUE) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (12 == name_len && 0 == strncmp(fld_name, "embed_values", name_len)) {
        embed__values_found = TRUE;
         int ret_val = field_embed__values.JSON_decode(AnyType_embed__values_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 12, "embed_values");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (4 == name_len && 0 == strncmp(fld_name, "attr", name_len)) {
        attr_found = TRUE;
         int ret_val = field_attr.JSON_decode(AnyType_attr_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 4, "attr");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (9 == name_len && 0 == strncmp(fld_name, "elem_list", name_len)) {
        elem__list_found = TRUE;
         int ret_val = field_elem__list.JSON_decode(AnyType_elem__list_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 9, "elem_list");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else {
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, (int)name_len, fld_name);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, (int)name_len, fld_name);
          return JSON_ERROR_FATAL;
        }
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

    if (!embed__values_found) {
    field_embed__values = OMIT_VALUE;
  }
  if (!attr_found) {
    field_attr = OMIT_VALUE;
  }
  if (!elem__list_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "elem_list");
    return JSON_ERROR_FATAL;
  }

  return (int)dec_len;
}

struct AnyType_template::single_value_struct {
AnyType_embed__values_template field_embed__values;
AnyType_attr_template field_attr;
AnyType_elem__list_template field_elem__list;
};

void AnyType_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_embed__values = ANY_OR_OMIT;
single_value->field_attr = ANY_OR_OMIT;
single_value->field_elem__list = ANY_VALUE;
}
}
}

void AnyType_template::copy_value(const AnyType& other_value)
{
single_value = new single_value_struct;
if (other_value.embed__values().is_bound()) {
  if (other_value.embed__values().ispresent()) single_value->field_embed__values = other_value.embed__values()();
  else single_value->field_embed__values = OMIT_VALUE;
} else {
  single_value->field_embed__values.clean_up();
}
if (other_value.attr().is_bound()) {
  if (other_value.attr().ispresent()) single_value->field_attr = other_value.attr()();
  else single_value->field_attr = OMIT_VALUE;
} else {
  single_value->field_attr.clean_up();
}
if (other_value.elem__list().is_bound()) {
  single_value->field_elem__list = other_value.elem__list();
} else {
  single_value->field_elem__list.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void AnyType_template::copy_template(const AnyType_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.embed__values().get_selection()) {
single_value->field_embed__values = other_value.embed__values();
} else {
single_value->field_embed__values.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.attr().get_selection()) {
single_value->field_attr = other_value.attr();
} else {
single_value->field_attr.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.elem__list().get_selection()) {
single_value->field_elem__list = other_value.elem__list();
} else {
single_value->field_elem__list.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new AnyType_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @XSD.AnyType.");
break;
}
set_selection(other_value);
}

AnyType_template::AnyType_template()
{
}

AnyType_template::AnyType_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

AnyType_template::AnyType_template(const AnyType& other_value)
{
copy_value(other_value);
}

AnyType_template::AnyType_template(const OPTIONAL<AnyType>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const AnyType&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @XSD.AnyType from an unbound optional field.");
}
}

AnyType_template::AnyType_template(const AnyType_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

AnyType_template::~AnyType_template()
{
clean_up();
}

AnyType_template& AnyType_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

AnyType_template& AnyType_template::operator=(const AnyType& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

AnyType_template& AnyType_template::operator=(const OPTIONAL<AnyType>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const AnyType&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @XSD.AnyType.");
}
return *this;
}

AnyType_template& AnyType_template::operator=(const AnyType_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean AnyType_template::match(const AnyType& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.embed__values().is_bound()) return FALSE;
if((other_value.embed__values().ispresent() ? !single_value->field_embed__values.match((const AnyType_embed__values&)other_value.embed__values(), legacy) : !single_value->field_embed__values.match_omit(legacy)))return FALSE;
if(!other_value.attr().is_bound()) return FALSE;
if((other_value.attr().ispresent() ? !single_value->field_attr.match((const AnyType_attr&)other_value.attr(), legacy) : !single_value->field_attr.match_omit(legacy)))return FALSE;
if(!other_value.elem__list().is_bound()) return FALSE;
if(!single_value->field_elem__list.match(other_value.elem__list(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @XSD.AnyType.");
}
return FALSE;
}

boolean AnyType_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_embed__values.is_omit() || single_value->field_embed__values.is_bound()) return TRUE;
if (single_value->field_attr.is_omit() || single_value->field_attr.is_bound()) return TRUE;
if (single_value->field_elem__list.is_bound()) return TRUE;
return FALSE;
}

boolean AnyType_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_embed__values.is_omit() && !single_value->field_embed__values.is_value()) return FALSE;
if (!single_value->field_attr.is_omit() && !single_value->field_attr.is_value()) return FALSE;
if (!single_value->field_elem__list.is_value()) return FALSE;
return TRUE;
}

void AnyType_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

AnyType AnyType_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @XSD.AnyType.");
AnyType ret_val;
if (single_value->field_embed__values.is_omit()) ret_val.embed__values() = OMIT_VALUE;
else if (single_value->field_embed__values.is_bound()) {
ret_val.embed__values() = single_value->field_embed__values.valueof();
}
if (single_value->field_attr.is_omit()) ret_val.attr() = OMIT_VALUE;
else if (single_value->field_attr.is_bound()) {
ret_val.attr() = single_value->field_attr.valueof();
}
if (single_value->field_elem__list.is_bound()) {
ret_val.elem__list() = single_value->field_elem__list.valueof();
}
return ret_val;
}

void AnyType_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @XSD.AnyType.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new AnyType_template[list_length];
}

AnyType_template& AnyType_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @XSD.AnyType.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @XSD.AnyType.");
return value_list.list_value[list_index];
}

AnyType_embed__values_template& AnyType_template::embed__values()
{
set_specific();
return single_value->field_embed__values;
}

const AnyType_embed__values_template& AnyType_template::embed__values() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field embed_values of a non-specific template of type @XSD.AnyType.");
return single_value->field_embed__values;
}

AnyType_attr_template& AnyType_template::attr()
{
set_specific();
return single_value->field_attr;
}

const AnyType_attr_template& AnyType_template::attr() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field attr of a non-specific template of type @XSD.AnyType.");
return single_value->field_attr;
}

AnyType_elem__list_template& AnyType_template::elem__list()
{
set_specific();
return single_value->field_elem__list;
}

const AnyType_elem__list_template& AnyType_template::elem__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field elem_list of a non-specific template of type @XSD.AnyType.");
return single_value->field_elem__list;
}

int AnyType_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @XSD.AnyType which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_embed__values.is_present()) ret_val++;
      if (single_value->field_attr.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @XSD.AnyType containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @XSD.AnyType containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @XSD.AnyType containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @XSD.AnyType containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @XSD.AnyType containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @XSD.AnyType.");
  }
  return 0;
}

void AnyType_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ embed_values := ");
single_value->field_embed__values.log();
TTCN_Logger::log_event_str(", attr := ");
single_value->field_attr.log();
TTCN_Logger::log_event_str(", elem_list := ");
single_value->field_elem__list.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void AnyType_template::log_match(const AnyType& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.embed__values().ispresent()){
if(!single_value->field_embed__values.match(match_value.embed__values(), legacy)){
TTCN_Logger::log_logmatch_info(".embed_values");
single_value->field_embed__values.log_match(match_value.embed__values(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_embed__values.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".embed_values := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_embed__values.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.attr().ispresent()){
if(!single_value->field_attr.match(match_value.attr(), legacy)){
TTCN_Logger::log_logmatch_info(".attr");
single_value->field_attr.log_match(match_value.attr(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_attr.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".attr := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_attr.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_elem__list.match(match_value.elem__list(), legacy)){
TTCN_Logger::log_logmatch_info(".elem_list");
single_value->field_elem__list.log_match(match_value.elem__list(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ embed_values := ");
if (match_value.embed__values().ispresent()) single_value->field_embed__values.log_match(match_value.embed__values(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_embed__values.log();
if (single_value->field_embed__values.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", attr := ");
if (match_value.attr().ispresent()) single_value->field_attr.log_match(match_value.attr(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_attr.log();
if (single_value->field_attr.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", elem_list := ");
single_value->field_elem__list.log_match(match_value.elem__list(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void AnyType_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_embed__values.encode_text(text_buf);
single_value->field_attr.encode_text(text_buf);
single_value->field_elem__list.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @XSD.AnyType.");
}
}

void AnyType_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_embed__values.decode_text(text_buf);
single_value->field_attr.decode_text(text_buf);
single_value->field_elem__list.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new AnyType_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @XSD.AnyType.");
}
}

void AnyType_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    AnyType_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record template of type @XSD.AnyType has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) embed__values().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) attr().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) elem__list().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "embed_values")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          embed__values().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "attr")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          attr().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem__list().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @XSD.AnyType: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@XSD.AnyType");
  }
  is_ifpresent = param.get_ifpresent();
}

void AnyType_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_embed__values.check_restriction(t_res, t_name ? t_name : "@XSD.AnyType");
single_value->field_attr.check_restriction(t_res, t_name ? t_name : "@XSD.AnyType");
single_value->field_elem__list.check_restriction(t_res, t_name ? t_name : "@XSD.AnyType");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@XSD.AnyType");
}

boolean AnyType_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean AnyType_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

QName::QName()
{
}

QName::QName(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_uri,
    const UNIVERSAL_CHARSTRING& par_name)
  :   field_uri(par_uri),
  field_name(par_name)
{
}

QName::QName(const QName& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @XSD.QName.");
if (other_value.uri().is_bound()) field_uri = other_value.uri();
else field_uri.clean_up();
if (other_value.name().is_bound()) field_name = other_value.name();
else field_name.clean_up();
}

void QName::clean_up()
{
field_uri.clean_up();
field_name.clean_up();
}

QName& QName::operator=(const QName& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @XSD.QName.");
  if (other_value.uri().is_bound()) field_uri = other_value.uri();
  else field_uri.clean_up();
  if (other_value.name().is_bound()) field_name = other_value.name();
  else field_name.clean_up();
}
return *this;
}

boolean QName::operator==(const QName& other_value) const
{
return field_uri==other_value.field_uri
  && field_name==other_value.field_name;
}

boolean QName::is_bound() const
{
if(OPTIONAL_OMIT == field_uri.get_selection() || field_uri.is_bound()) return TRUE;
if(field_name.is_bound()) return TRUE;
return FALSE;
}
boolean QName::is_value() const
{
if(OPTIONAL_OMIT != field_uri.get_selection() && !field_uri.is_value()) return FALSE;
if(!field_name.is_value()) return FALSE;
return TRUE;
}
int QName::size_of() const
{
  int ret_val = 1;
  if (field_uri.ispresent()) ret_val++;
  return ret_val;
}

void QName::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ uri := ");
field_uri.log();
TTCN_Logger::log_event_str(", name := ");
field_name.log();
TTCN_Logger::log_event_str(" }");
}

void QName::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @XSD.QName has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) uri().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) name().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "uri")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          uri().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @XSD.QName: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@XSD.QName");
  }
}

void QName::set_implicit_omit()
{
if (!uri().is_bound()) uri() = OMIT_VALUE;
else uri().set_implicit_omit();
if (name().is_bound()) name().set_implicit_omit();
}

void QName::encode_text(Text_Buf& text_buf) const
{
field_uri.encode_text(text_buf);
field_name.encode_text(text_buf);
}

void QName::decode_text(Text_Buf& text_buf)
{
field_uri.decode_text(text_buf);
field_name.decode_text(text_buf);
}

void QName::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void QName::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, XER_NONE, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, FALSE)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** QName::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns, unsigned int flavor) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns, flavor);
  try {
  char **new_ns;
  size_t num_new;
  boolean def_ns_1 = FALSE;
  new_ns = field_uri.collect_ns(QName_uri_xer_, num_new, def_ns, flavor);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_name.collect_ns(QName_name_xer_, num_new, def_ns, flavor);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean QName::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor, unsigned int flavor2) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, QName_uri_xer_, flavor, flavor2)) return TRUE;
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, QName_name_xer_, flavor, flavor2)) return TRUE;
  return FALSE;
}

int QName::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, unsigned int p_flavor2, int p_indent, embed_values_enc_struct_t* emb_val_parent) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  boolean def_ns = FALSE;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns, p_flavor2);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns((size_t)p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns, p_flavor2);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns((size_t)p_td.ns_index)->px == '\0';
  boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & (USE_NIL|USE_TYPE_ATTR)) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
    delay_close = TRUE;
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  if (e_xer && (p_td.xer_bits & USE_QNAME)) {
    if (field_uri.is_value()) {
      p_buf.put_s(11, (cbyte*)" xmlns:b0='");
      field_uri.XER_encode(QName_uri_xer_, p_buf, p_flavor | XER_LIST, p_flavor2, p_indent+1, 0);
      p_buf.put_c('\'');
    }
    if (p_td.xer_bits & XER_ATTRIBUTE) begin_attribute(p_td, p_buf);
    else  p_buf.put_c('>');
    if (field_uri.is_value()) {
      p_buf.put_s(3, (cbyte*)"b0:");
      sub_len += 3;
    }
    sub_len += field_name.XER_encode(QName_name_xer_, p_buf, p_flavor | XER_LIST, p_flavor2, p_indent+1, 0);
    if (p_td.xer_bits & XER_ATTRIBUTE) p_buf.put_c('\'');
  } else  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("uri': ");
  sub_len += field_uri.XER_encode(QName_uri_xer_, p_buf, p_flavor, p_flavor2, p_indent+!omit_tag, 0);
  ec_1.set_msg("name': ");
if (e_xer && ((p_td.xer_bits & UNTAGGED) && !(p_td.xer_bits & EMBED_VALUES) && 0 != emb_val_parent
  && field_uri.ispresent())) {
  if (0 != emb_val_parent->embval_array_reg) {
    if (emb_val_parent->embval_index < emb_val_parent->embval_array_reg->size_of()) {
      (*emb_val_parent->embval_array_reg)[emb_val_parent->embval_index].XER_encode(UNIVERSAL_CHARSTRING_xer_      , p_buf, p_flavor | EMBED_VALUES, p_flavor2, p_indent+1, 0);
      ++emb_val_parent->embval_index;
    }
  } else {
   if (emb_val_parent->embval_index < emb_val_parent->embval_array_opt->size_of()) {
      (*emb_val_parent->embval_array_opt)[emb_val_parent->embval_index].XER_encode(UNIVERSAL_CHARSTRING_xer_      , p_buf, p_flavor | EMBED_VALUES, p_flavor2, p_indent+1, 0);
      ++emb_val_parent->embval_index;
    }
  }
}
  sub_len += field_name.XER_encode(QName_name_xer_, p_buf, p_flavor, p_flavor2, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int QName::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, unsigned int p_flavor2, embed_values_dec_struct_t* emb_val_parent)
{
  boolean e_xer = is_exer(p_flavor);
  unsigned long xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && ((p_flavor & USE_TYPE_ATTR)|| (p_flavor2 & USE_NIL_PARENT_TAG));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  p_flavor2 = XER_NONE;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
  if (e_xer && (p_td.xer_bits & USE_QNAME)) {
    if (p_td.xer_bits & XER_ATTRIBUTE) rd_ok = 1;
    else for (rd_ok = p_reader.Read(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if (type == XML_READER_TYPE_TEXT) break;
    }
    if (rd_ok==1) {
      xmlChar *new_val = p_reader.NewValue();
      xmlChar *v_npfx = (xmlChar*)strchr((char*)new_val, ':');
      xmlChar *v_pfx;
      if (v_npfx != NULL) {
        *v_npfx++ = '\0';
        v_pfx = new_val;
      }
      else {
        v_npfx = new_val;
        v_pfx  = NULL;
      }
      xmlChar *q_ns = p_reader.LookupNamespace(v_pfx);
      if (q_ns) field_uri = (const char*)q_ns;
      else      field_uri = OMIT_VALUE;
      field_name = (const char*)v_npfx;
      xmlFree(q_ns);
      xmlFree(new_val);
    }
  } else {
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  {
    ec_1.set_msg("uri': ");
  if ((p_td.xer_bits & UNTAGGED) && 0 != emb_val_parent) {
    if (p_reader.NodeType() == XML_READER_TYPE_TEXT) {
      UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
      if (0 != emb_val_parent->embval_array_reg) {
        (*emb_val_parent->embval_array_reg)[emb_val_parent->embval_index] = emb_ustr;
      } else {
        (*emb_val_parent->embval_array_opt)[emb_val_parent->embval_index] = emb_ustr;
      }
      ++emb_val_parent->embval_index;
    }
  }
    field_uri.XER_decode(QName_uri_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : XER_NONE), p_flavor2, 0);
  }
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_name = *static_cast<const UNIVERSAL_CHARSTRING*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("name': ");
  if ((p_td.xer_bits & UNTAGGED) && 0 != emb_val_parent) {
    if (p_reader.NodeType() == XML_READER_TYPE_TEXT) {
      UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
      if (0 != emb_val_parent->embval_array_reg) {
        (*emb_val_parent->embval_array_reg)[emb_val_parent->embval_index] = emb_ustr;
      } else {
        (*emb_val_parent->embval_array_opt)[emb_val_parent->embval_index] = emb_ustr;
      }
      ++emb_val_parent->embval_index;
    }
  }
    field_name.XER_decode(QName_name_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : XER_NONE), p_flavor2, 0);
  }
  if (field_name.is_bound()) {
    p_flavor &= ~XER_OPTIONAL;
  }
  } // qn
  } // errorcontext
  if (!field_name.is_bound()) {
    if (p_flavor & XER_OPTIONAL) {
      clean_up();
      return -1;
    }
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INCOMPL_MSG,
      "No data found for non-optional field 'name'");
  }
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int QName::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @XSD.QName.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_uri.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "uri");
    enc_len += field_uri.JSON_encode(QName_uri_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "name");
    enc_len += field_name.JSON_encode(QName_name_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int QName::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  size_t dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  boolean uri_found = FALSE;
  boolean name_found = FALSE;

  while (TRUE) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (3 == name_len && 0 == strncmp(fld_name, "uri", name_len)) {
        uri_found = TRUE;
         int ret_val = field_uri.JSON_decode(QName_uri_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 3, "uri");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (4 == name_len && 0 == strncmp(fld_name, "name", name_len)) {
        name_found = TRUE;
         int ret_val = field_name.JSON_decode(QName_name_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 4, "name");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else {
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, (int)name_len, fld_name);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, (int)name_len, fld_name);
          return JSON_ERROR_FATAL;
        }
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

    if (!uri_found) {
    field_uri = OMIT_VALUE;
  }
  if (!name_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "name");
    return JSON_ERROR_FATAL;
  }

  return (int)dec_len;
}

struct QName_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_uri;
UNIVERSAL_CHARSTRING_template field_name;
};

void QName_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_uri = ANY_OR_OMIT;
single_value->field_name = ANY_VALUE;
}
}
}

void QName_template::copy_value(const QName& other_value)
{
single_value = new single_value_struct;
if (other_value.uri().is_bound()) {
  if (other_value.uri().ispresent()) single_value->field_uri = other_value.uri()();
  else single_value->field_uri = OMIT_VALUE;
} else {
  single_value->field_uri.clean_up();
}
if (other_value.name().is_bound()) {
  single_value->field_name = other_value.name();
} else {
  single_value->field_name.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void QName_template::copy_template(const QName_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.uri().get_selection()) {
single_value->field_uri = other_value.uri();
} else {
single_value->field_uri.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.name().get_selection()) {
single_value->field_name = other_value.name();
} else {
single_value->field_name.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new QName_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @XSD.QName.");
break;
}
set_selection(other_value);
}

QName_template::QName_template()
{
}

QName_template::QName_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

QName_template::QName_template(const QName& other_value)
{
copy_value(other_value);
}

QName_template::QName_template(const OPTIONAL<QName>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const QName&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @XSD.QName from an unbound optional field.");
}
}

QName_template::QName_template(const QName_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

QName_template::~QName_template()
{
clean_up();
}

QName_template& QName_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

QName_template& QName_template::operator=(const QName& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

QName_template& QName_template::operator=(const OPTIONAL<QName>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const QName&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @XSD.QName.");
}
return *this;
}

QName_template& QName_template::operator=(const QName_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean QName_template::match(const QName& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.uri().is_bound()) return FALSE;
if((other_value.uri().ispresent() ? !single_value->field_uri.match((const UNIVERSAL_CHARSTRING&)other_value.uri(), legacy) : !single_value->field_uri.match_omit(legacy)))return FALSE;
if(!other_value.name().is_bound()) return FALSE;
if(!single_value->field_name.match(other_value.name(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @XSD.QName.");
}
return FALSE;
}

boolean QName_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_uri.is_omit() || single_value->field_uri.is_bound()) return TRUE;
if (single_value->field_name.is_bound()) return TRUE;
return FALSE;
}

boolean QName_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_uri.is_omit() && !single_value->field_uri.is_value()) return FALSE;
if (!single_value->field_name.is_value()) return FALSE;
return TRUE;
}

void QName_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

QName QName_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @XSD.QName.");
QName ret_val;
if (single_value->field_uri.is_omit()) ret_val.uri() = OMIT_VALUE;
else if (single_value->field_uri.is_bound()) {
ret_val.uri() = single_value->field_uri.valueof();
}
if (single_value->field_name.is_bound()) {
ret_val.name() = single_value->field_name.valueof();
}
return ret_val;
}

void QName_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @XSD.QName.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new QName_template[list_length];
}

QName_template& QName_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @XSD.QName.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @XSD.QName.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& QName_template::uri()
{
set_specific();
return single_value->field_uri;
}

const UNIVERSAL_CHARSTRING_template& QName_template::uri() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field uri of a non-specific template of type @XSD.QName.");
return single_value->field_uri;
}

UNIVERSAL_CHARSTRING_template& QName_template::name()
{
set_specific();
return single_value->field_name;
}

const UNIVERSAL_CHARSTRING_template& QName_template::name() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field name of a non-specific template of type @XSD.QName.");
return single_value->field_name;
}

int QName_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @XSD.QName which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_uri.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @XSD.QName containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @XSD.QName containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @XSD.QName containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @XSD.QName containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @XSD.QName containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @XSD.QName.");
  }
  return 0;
}

void QName_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ uri := ");
single_value->field_uri.log();
TTCN_Logger::log_event_str(", name := ");
single_value->field_name.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void QName_template::log_match(const QName& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.uri().ispresent()){
if(!single_value->field_uri.match(match_value.uri(), legacy)){
TTCN_Logger::log_logmatch_info(".uri");
single_value->field_uri.log_match(match_value.uri(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_uri.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".uri := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_uri.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_name.match(match_value.name(), legacy)){
TTCN_Logger::log_logmatch_info(".name");
single_value->field_name.log_match(match_value.name(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ uri := ");
if (match_value.uri().ispresent()) single_value->field_uri.log_match(match_value.uri(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_uri.log();
if (single_value->field_uri.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", name := ");
single_value->field_name.log_match(match_value.name(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void QName_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_uri.encode_text(text_buf);
single_value->field_name.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @XSD.QName.");
}
}

void QName_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_uri.decode_text(text_buf);
single_value->field_name.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new QName_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @XSD.QName.");
}
}

void QName_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    QName_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @XSD.QName has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) uri().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) name().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "uri")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          uri().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @XSD.QName: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@XSD.QName");
  }
  is_ifpresent = param.get_ifpresent();
}

void QName_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_uri.check_restriction(t_res, t_name ? t_name : "@XSD.QName");
single_value->field_name.check_restriction(t_res, t_name ? t_name : "@XSD.QName");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@XSD.QName");
}

boolean QName_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean QName_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "XSD");
UsefulTtcn3Types::module_object.pre_init_module();
current_location.update_lineno(20);
#line 20 "../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn"
const_dash = cs_0;
current_location.update_lineno(21);
#line 21 "../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn"
const_cln = cs_1;
current_location.update_lineno(22);
#line 22 "../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn"
const_year = cs_2;
current_location.update_lineno(23);
#line 23 "../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn"
const_yearExpansion = cs_3;
current_location.update_lineno(24);
#line 24 "../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn"
const_month = cs_4;
current_location.update_lineno(25);
#line 25 "../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn"
const_dayOfMonth = cs_5;
current_location.update_lineno(26);
#line 26 "../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn"
const_hour = cs_6;
current_location.update_lineno(27);
#line 27 "../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn"
const_minute = cs_7;
current_location.update_lineno(28);
#line 28 "../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn"
const_second = cs_7;
current_location.update_lineno(29);
#line 29 "../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn"
const_sFraction = cs_8;
current_location.update_lineno(30);
#line 30 "../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn"
const_endOfDayExt = cs_9;
current_location.update_lineno(31);
#line 31 "../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn"
const_nums = cs_10;
current_location.update_lineno(32);
#line 32 "../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn"
const_ZorTimeZoneExt = cs_11;
current_location.update_lineno(33);
#line 33 "../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn"
const_durTime = cs_12;
}

static void post_init_module()
{
TTCN_Location current_location("../oneM2MTester/AbstractTestSuite/LibOneM2M/XSD.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "XSD");
UsefulTtcn3Types::module_object.post_init_module();
}


} /* end of namespace */
