// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for jaeyounghwang (jaeyounghwang@ubuntu) on Mon Sep 18 04:04:30 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "OneM2M_TestSystem.hh"

namespace OneM2M__TestSystem {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x3e, 0xbc, 0x53, 0x3f, 0xbf, 0xf1, 0x55, 0xac, 0x01, 0x20, 0xd1, 0x8f, 0x94, 0x0b, 0xe6, 0x20 };

/* Global variable definitions */

const TTCN_Typedescriptor_t& Tester_descr_ = COMPONENT_descr_;
OneM2M__Ports::AdapterControlPort Tester_component_acPort("acPort");
TIMER Tester_component_tc__ac("tc_ac");
TIMER Tester_component_tc__wait("tc_wait");
OneM2M__Types::Configurations Tester_component_vc__config;
OneM2M__Types::MyResourcesList Tester_component_vc__resourcesList;
OneM2M__Types::IntegerList Tester_component_vc__resourcesIndexToBeDeleted;
OneM2M__Types::PrimitiveScope Tester_component_vc__primitiveScope;
OneM2M__Types::AddressingMethod Tester_component_vc__addressingMethod;
const TTCN_Typedescriptor_t& CseTester_descr_ = COMPONENT_descr_;
OneM2M__Ports::OneM2MPort CseTester_component_mcaPort("mcaPort");
OneM2M__Ports::OneM2MPort CseTester_component_mccPort("mccPort");
OneM2M__Types::AE__optional CseTester_component_vc__aeAux;
OneM2M__Types::RemoteCSE__optional CseTester_component_vc__remoteCSEAux;
OneM2M__Types::AccessControlPolicy__optional CseTester_component_vc__acpAux;
INTEGER CseTester_component_vc__acpAuxIndex;
const TTCN_Typedescriptor_t& AeTester_descr_ = COMPONENT_descr_;
OneM2M__Ports::OneM2MPort AeTester_component_mcaPort("mcaPort");
const TTCN_Typedescriptor_t& CseSystem_descr_ = COMPONENT_descr_;
OneM2M__Ports::OneM2MPort CseSystem_component_mcaPort("mcaPort");
OneM2M__Ports::OneM2MPort CseSystem_component_mccPort("mccPort");
OneM2M__Ports::AdapterControlPort CseSystem_component_acPort("acPort");
const TTCN_Typedescriptor_t& AeSystem_descr_ = COMPONENT_descr_;
OneM2M__Ports::OneM2MPort AeSystem_component_mcaPort("mcaPort");
OneM2M__Ports::AdapterControlPort AeSystem_component_acPort("acPort");
TTCN_Module module_object("OneM2M_TestSystem", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, init_comp_type, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_1,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("../oneM2MTester/AbstractTestSuite/LibOneM2M/OneM2M_TestSystem.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "OneM2M_TestSystem");
LibCommon__Time::module_object.pre_init_module();
OneM2M__Ports::module_object.pre_init_module();
}

static void post_init_module()
{
TTCN_Location current_location("../oneM2MTester/AbstractTestSuite/LibOneM2M/OneM2M_TestSystem.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "OneM2M_TestSystem");
LibCommon__Time::module_object.post_init_module();
OneM2M__Ports::module_object.post_init_module();
Tester_component_tc__ac.set_default_duration(LibCommon__Time::PX__TAC);
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "Tester")) {
Tester_component_acPort.activate_port();
Tester_component_vc__config.clean_up();
Tester_component_vc__resourcesList.clean_up();
Tester_component_vc__resourcesIndexToBeDeleted = NULL_VALUE;
Tester_component_vc__primitiveScope = OneM2M__Pixits::PX__PRIMITIVE__SCOPE;
Tester_component_vc__addressingMethod = OneM2M__Pixits::PX__ADDRESSING__METHOD;
return TRUE;
} else if (!strcmp(component_type, "CseTester")) {
if (init_base_comps) {
init_comp_type("Tester", FALSE);
}
CseTester_component_mcaPort.activate_port();
CseTester_component_mccPort.activate_port();
CseTester_component_vc__aeAux.clean_up();
CseTester_component_vc__remoteCSEAux.clean_up();
CseTester_component_vc__acpAux.clean_up();
CseTester_component_vc__acpAuxIndex = -1;
return TRUE;
} else if (!strcmp(component_type, "AeTester")) {
if (init_base_comps) {
init_comp_type("Tester", FALSE);
}
AeTester_component_mcaPort.activate_port();
return TRUE;
} else if (!strcmp(component_type, "CseSystem")) {
CseSystem_component_mcaPort.activate_port();
CseSystem_component_mccPort.activate_port();
CseSystem_component_acPort.activate_port();
return TRUE;
} else if (!strcmp(component_type, "AeSystem")) {
AeSystem_component_mcaPort.activate_port();
AeSystem_component_acPort.activate_port();
return TRUE;
} else return FALSE;
}


} /* end of namespace */
