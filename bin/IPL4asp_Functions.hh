// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for jaeyounghwang (jaeyounghwang@ubuntu) on Mon Sep 18 04:04:30 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef IPL4asp__Functions_HH
#define IPL4asp__Functions_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "IPL4asp_PortType.hh"
#include "TCCInterface_Functions.hh"

#if TTCN3_VERSION != 60100
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

namespace IPL4asp__Functions {

/* Function prototypes */

extern void f__setUpInterface(const CHARSTRING& startIPAddress, const CHARSTRING& netmask, const CHARSTRING& broadcast, const INTEGER& count, const CHARSTRING& ifname, const INTEGER& virtualIfaceStart);
extern void f__setDownInterface(const CHARSTRING& ifname, const INTEGER& count, const INTEGER& virtualIfaceStart);
extern BOOLEAN f__hasColon(const CHARSTRING& str);
extern Socket__API__Definitions::ro__charstring f__tokenizeIP(const CHARSTRING& addr);
extern Socket__API__Definitions::ro__integer f__splitIpAddress(const CHARSTRING& addr);
extern CHARSTRING f__presentIpAddress(const Socket__API__Definitions::ro__integer& addr);
extern void f__nextIpAddress(Socket__API__Definitions::ro__integer& addr);
extern BOOLEAN f__findIpAddressesWithDhcp(IPL4asp__PortType::IPL4asp__PT& portRef, const CHARSTRING& expIfName, const CHARSTRING& expIfIpAddress, const CHARSTRING& exclIfIpAddress, const CHARSTRING& ethernetAddress, const INTEGER& leaseTime, const CHARSTRING& leaseFile, const INTEGER& nOfAddresses, Socket__API__Definitions::ro__charstring& ipAddresses, CHARSTRING& netMask, CHARSTRING& broadcastAddr, CHARSTRING& ifName);
extern BOOLEAN f__releaseIpAddressesFromDhcp(IPL4asp__PortType::IPL4asp__PT& portRef);
extern BOOLEAN f__findIpAddressesWithARP(IPL4asp__PortType::IPL4asp__PT& portRef, const CHARSTRING& expIfName, const CHARSTRING& expIfIpAddress, const CHARSTRING& exclIfIpAddress, const INTEGER& nOfAddresses, Socket__API__Definitions::ro__charstring& ipAddresses, CHARSTRING& netMask, CHARSTRING& broadcastAddr, CHARSTRING& ifName);
extern BOOLEAN f__findIpAddresses(IPL4asp__PortType::IPL4asp__PT& portRef, Socket__API__Definitions::ro__charstring& ipAddresses, CHARSTRING& netMask, CHARSTRING& broadcastAddr, CHARSTRING& ifName);

/* Global variable declarations */

extern TTCN_Module module_object;

} /* end of namespace */

#endif
