// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for jaeyounghwang (jaeyounghwang@ubuntu) on Mon Sep 18 04:04:30 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "OneM2M_DualFaceMapping.hh"

namespace OneM2M__DualFaceMapping {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const BITSTRING bs_0(0, NULL);
static const CHARSTRING cs_0(0, NULL),
cs_3('/'),
cs_4(2, "/_"),
cs_2(2, "/~"),
cs_7(4, ";ty="),
cs_5(5, "\?rcn="),
cs_9(8, "X-M2M-RI"),
cs_8(9, "X-M2M-RSC"),
cs_6(4, "rcn="),
cs_1(15, "{UNINITIALIZED}");
static const unsigned char module_checksum[] = { 0x9c, 0xbb, 0x37, 0xaf, 0xdc, 0x57, 0xcc, 0x60, 0x24, 0x45, 0x6e, 0x04, 0xcb, 0x8c, 0xb1, 0x4f };

/* Global variable definitions */

TTCN_Module module_object("OneM2M_DualFaceMapping", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_1,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

void f__enc__M2MPrimitive__to__ASPSend(const OneM2M__Types::MsgOut& p__msgout, IPL4asp__Types::ASP__Send& p__asp__Send)
{
TTCN_Location current_location("../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn", 45, TTCN_Location::LOCATION_FUNCTION, "f_enc_M2MPrimitive_to_ASPSend");
p__asp__Send.clean_up();
current_location.update_lineno(46);
#line 46 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__protocol__type(cs_0);
current_location.update_lineno(47);
#line 47 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__serial__type(cs_0);
current_location.update_lineno(48);
#line 48 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__payload(cs_0);
current_location.update_lineno(49);
#line 49 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
OCTETSTRING v__encoded__msg;
current_location.update_lineno(50);
#line 50 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
OneM2M__Types::RequestPrimitive v__reqPrimitive;
current_location.update_lineno(51);
#line 51 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER v__resultContent;
current_location.update_lineno(52);
#line 52 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER v__operation;
current_location.update_lineno(53);
#line 53 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__from(cs_0);
current_location.update_lineno(54);
#line 54 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__to(cs_0);
current_location.update_lineno(55);
#line 55 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__reqID(cs_0);
current_location.update_lineno(56);
#line 56 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER v__ty;
current_location.update_lineno(57);
#line 57 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__uri(cs_1);
current_location.update_lineno(58);
#line 58 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER v__len(0);
current_location.update_lineno(59);
#line 59 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CoAP__Types::Charstring__List csList;
current_location.update_lineno(60);
#line 60 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__contentType;
current_location.update_lineno(61);
#line 61 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER connectId__init(-1);
current_location.update_lineno(64);
#line 64 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_3;
{
boolean tmp_0 = p__msgout.is_bound();
if(tmp_0) {
const OPTIONAL<CHARSTRING>& tmp_1 = p__msgout.protocolBinding();
switch (tmp_1.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_0 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_0 = FALSE;
break;
default:
{
const CHARSTRING& tmp_2 = (const CHARSTRING&) tmp_1;
tmp_0 = tmp_2.is_present();
break;}
}
}
tmp_3 = tmp_0;
}
if (tmp_3) {
current_location.update_lineno(65);
#line 65 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__protocol__type = f__upper2lower(const_cast< const OneM2M__Types::MsgOut&>(p__msgout).protocolBinding());
current_location.update_lineno(66);
#line 66 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-Input Protocol Type: ");
v__protocol__type.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
current_location.update_lineno(70);
#line 70 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_8;
{
boolean tmp_5 = p__msgout.is_bound();
if(tmp_5) {
const OPTIONAL<CHARSTRING>& tmp_6 = p__msgout.serialization();
switch (tmp_6.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_5 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_5 = FALSE;
break;
default:
{
const CHARSTRING& tmp_7 = (const CHARSTRING&) tmp_6;
tmp_5 = tmp_7.is_present();
break;}
}
}
tmp_8 = tmp_5;
}
if (tmp_8) {
current_location.update_lineno(71);
#line 71 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__serial__type = f__upper2lower(const_cast< const OneM2M__Types::MsgOut&>(p__msgout).serialization());
current_location.update_lineno(72);
#line 72 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-Input Serial Type: ");
v__serial__type.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
current_location.update_lineno(75);
#line 75 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_13;
{
boolean tmp_10 = p__msgout.is_bound();
if(tmp_10) {
const OneM2M__Types::MsgOut& tmp_11 = p__msgout;
const OneM2M__Types::MsgOut_primitive& tmp_12 = tmp_11.primitive();
tmp_10 = tmp_12.is_present();
}
tmp_13 = tmp_10;
}
if (tmp_13) {
current_location.update_lineno(76);
#line 76 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if (const_cast< const OneM2M__Types::MsgOut&>(p__msgout).primitive().ischosen(OneM2M__Types::MsgOut_primitive::ALT_requestPrimitive)) {
current_location.update_lineno(78);
#line 78 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__reqPrimitive = const_cast< const OneM2M__Types::MsgOut&>(p__msgout).primitive().requestPrimitive();
current_location.update_lineno(81);
#line 81 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_18;
{
boolean tmp_15 = v__reqPrimitive.is_bound();
if(tmp_15) {
const OPTIONAL<OneM2M__Types::PrimitiveContent>& tmp_16 = v__reqPrimitive.primitiveContent();
switch (tmp_16.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_15 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_15 = FALSE;
break;
default:
{
const OneM2M__Types::PrimitiveContent& tmp_17 = (const OneM2M__Types::PrimitiveContent&) tmp_16;
tmp_15 = tmp_17.is_present();
break;}
}
}
tmp_18 = tmp_15;
}
if (tmp_18) {
current_location.update_lineno(82);
#line 82 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
BITSTRING v__bit__stream;
{
OCTETSTRING tmp_19;
TTCN_Buffer tmp_20;
OneM2M__Types::PrimitiveContent const& tmp_21 = const_cast< const OneM2M__Types::RequestPrimitive&>(v__reqPrimitive).primitiveContent()();
tmp_21.encode(OneM2M__Types::PrimitiveContent_descr_, tmp_20, TTCN_EncDec::CT_XER, XER_EXTENDED);
tmp_20.get_string(tmp_19);
v__bit__stream = oct2bit(tmp_19);
}
current_location.update_lineno(84);
#line 84 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((v__bit__stream != bs_0)) {
current_location.update_lineno(85);
#line 85 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__char__streamTest(oct2char(bit2oct(v__bit__stream)));
current_location.update_lineno(86);
#line 86 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend v_char_streamTest ");
v__char__streamTest.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
}
current_location.update_lineno(91);
#line 91 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_25;
{
boolean tmp_22 = v__reqPrimitive.is_bound();
if(tmp_22) {
const OneM2M__Types::RequestPrimitive& tmp_23 = v__reqPrimitive;
const OneM2M__Types::Operation& tmp_24 = tmp_23.operation();
tmp_22 = tmp_24.is_present();
}
tmp_25 = tmp_22;
}
if (tmp_25) {
current_location.update_lineno(92);
#line 92 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__operation = OneM2M__Types::Operation::enum2int(const_cast< const OneM2M__Types::RequestPrimitive&>(v__reqPrimitive).operation());
}
}
current_location.update_lineno(96);
#line 96 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_30;
{
boolean tmp_27 = v__reqPrimitive.is_bound();
if(tmp_27) {
const OPTIONAL<UNIVERSAL_CHARSTRING>& tmp_28 = v__reqPrimitive.from__();
switch (tmp_28.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_27 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_27 = FALSE;
break;
default:
{
const UNIVERSAL_CHARSTRING& tmp_29 = (const UNIVERSAL_CHARSTRING&) tmp_28;
tmp_27 = tmp_29.is_present();
break;}
}
}
tmp_30 = tmp_27;
}
if (tmp_30) {
current_location.update_lineno(97);
#line 97 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__from = oct2char(unichar2oct(const_cast< const OneM2M__Types::RequestPrimitive&>(v__reqPrimitive).from__()()));
}
}
current_location.update_lineno(101);
#line 101 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_35;
{
boolean tmp_32 = v__reqPrimitive.is_bound();
if(tmp_32) {
const OneM2M__Types::RequestPrimitive& tmp_33 = v__reqPrimitive;
const UNIVERSAL_CHARSTRING& tmp_34 = tmp_33.to__();
tmp_32 = tmp_34.is_present();
}
tmp_35 = tmp_32;
}
if (tmp_35) {
current_location.update_lineno(102);
#line 102 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__to = oct2char(unichar2oct(const_cast< const OneM2M__Types::RequestPrimitive&>(v__reqPrimitive).to__()));
current_location.update_lineno(103);
#line 103 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__uri = v__to;
current_location.update_lineno(105);
#line 105 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((OneM2M__Pixits::PX__PRIMITIVE__SCOPE == OneM2M__Types::PrimitiveScope::e__spRelative)) {
current_location.update_lineno(106);
#line 106 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__uri = (cs_2 + v__to);
current_location.update_lineno(107);
#line 107 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-f_adressingFormatter(Sp-relative):");
v__uri.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
else {
current_location.update_lineno(108);
#line 108 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((OneM2M__Pixits::PX__PRIMITIVE__SCOPE == OneM2M__Types::PrimitiveScope::e__cseRelative)) {
current_location.update_lineno(109);
#line 109 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__uri = (cs_3 + v__to);
current_location.update_lineno(110);
#line 110 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-f_adressingFormatter(CSE-relative):");
v__uri.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
else {
current_location.update_lineno(111);
#line 111 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((OneM2M__Pixits::PX__PRIMITIVE__SCOPE == OneM2M__Types::PrimitiveScope::e__absolute)) {
current_location.update_lineno(112);
#line 112 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__uri = f__adressingFormatter(v__to, cs_3, cs_4);
current_location.update_lineno(113);
#line 113 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-f_adressingFormatter(Absolute-relative):");
v__uri.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
}
}
}
current_location.update_lineno(118);
#line 118 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_44;
{
boolean tmp_41 = v__reqPrimitive.is_bound();
if(tmp_41) {
const OPTIONAL<OneM2M__Types::ResourceType>& tmp_42 = v__reqPrimitive.resourceType();
switch (tmp_42.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_41 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_41 = FALSE;
break;
default:
{
const OneM2M__Types::ResourceType& tmp_43 = (const OneM2M__Types::ResourceType&) tmp_42;
tmp_41 = tmp_43.is_present();
break;}
}
}
tmp_44 = tmp_41;
}
if (tmp_44) {
current_location.update_lineno(119);
#line 119 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__ty = OneM2M__Types::ResourceType::enum2int(const_cast< const OneM2M__Types::RequestPrimitive&>(v__reqPrimitive).resourceType()());
}
}
current_location.update_lineno(123);
#line 123 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_49;
{
boolean tmp_46 = v__reqPrimitive.is_bound();
if(tmp_46) {
const OneM2M__Types::RequestPrimitive& tmp_47 = v__reqPrimitive;
const UNIVERSAL_CHARSTRING& tmp_48 = tmp_47.requestIdentifier();
tmp_46 = tmp_48.is_present();
}
tmp_49 = tmp_46;
}
if (tmp_49) {
current_location.update_lineno(124);
#line 124 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__reqID = oct2char(unichar2oct(const_cast< const OneM2M__Types::RequestPrimitive&>(v__reqPrimitive).requestIdentifier()));
}
}
current_location.update_lineno(128);
#line 128 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_54;
{
boolean tmp_51 = v__reqPrimitive.is_bound();
if(tmp_51) {
const OPTIONAL<OneM2M__Types::ResultContent>& tmp_52 = v__reqPrimitive.resultContent();
switch (tmp_52.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_51 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_51 = FALSE;
break;
default:
{
const OneM2M__Types::ResultContent& tmp_53 = (const OneM2M__Types::ResultContent&) tmp_52;
tmp_51 = tmp_53.is_present();
break;}
}
}
tmp_54 = tmp_51;
}
if (tmp_54) {
current_location.update_lineno(129);
#line 129 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__resultContent = OneM2M__Types::ResultContent::enum2int(const_cast< const OneM2M__Types::RequestPrimitive&>(v__reqPrimitive).resultContent()());
current_location.update_lineno(131);
#line 131 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((OneM2M__Constants::HTTP__BINDING == v__protocol__type)) {
current_location.update_lineno(132);
#line 132 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
CHARSTRING tmp_56;
tmp_56 = ((v__uri + cs_5) + int2str(v__resultContent));
v__uri = tmp_56;
}
}
}
}
current_location.update_lineno(136);
#line 136 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_57;
tmp_57 = (OneM2M__Constants::COAP__BINDING == v__protocol__type);
if (!tmp_57) tmp_57 = (OneM2M__Constants::HTTP__BINDING == v__protocol__type);
if (tmp_57) {
current_location.update_lineno(137);
#line 137 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CoAP__Types::CoAP__Message v__CoapMsgToSend;
current_location.update_lineno(138);
#line 138 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CoAP__Types::CoAP__ReqResp v__CoapMsg;
current_location.update_lineno(140);
#line 140 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER v__contentFormat(0);
current_location.update_lineno(142);
#line 142 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((OneM2M__Constants::XML__SERIAL == v__serial__type)) {
current_location.update_lineno(143);
#line 143 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__contentFormat = OneM2M__Constants::APPLICATION__XML__COAP;
}
else {
current_location.update_lineno(144);
#line 144 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((OneM2M__Constants::JSON__SERIAL == v__serial__type)) {
current_location.update_lineno(145);
#line 145 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__contentFormat = OneM2M__Constants::APPLICATION__JSON__COAP;
}
}
current_location.update_lineno(148);
#line 148 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((OneM2M__Constants::COAP__BINDING == v__protocol__type)) {
current_location.update_lineno(151);
#line 151 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
csList = f__split__uri(v__uri, cs_3);
current_location.update_lineno(153);
#line 153 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((1 == v__operation)) {
current_location.update_lineno(156);
#line 156 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__payload = OneM2M__Primitive__EncDec::f__encode__requestPrimitive(v__reqPrimitive, v__serial__type);
current_location.update_lineno(159);
#line 159 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((v__payload != cs_0)) {
current_location.update_lineno(160);
#line 160 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__payload = f__serialization__Enc(v__payload, v__serial__type);
}
current_location.update_lineno(164);
#line 164 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__CoapMsg = oneM2MTester__Template::t__COAP__POST__request(v__contentFormat, v__ty, v__from, v__reqID, v__payload).valueof();
{
current_location.update_lineno(167);
#line 167 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER i(0);
current_location.update_lineno(167);
#line 167 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
for ( ; ; ) {
current_location.update_lineno(167);
#line 167 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if (!(i < csList.lengthof())) break;
current_location.update_lineno(168);
#line 168 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((const_cast< const CoAP__Types::Charstring__List&>(csList)[i] != cs_0)) {
current_location.update_lineno(169);
#line 169 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
CoAP__Types::CoAP__Options& tmp_65 = v__CoapMsg.options()()[(i + 6)]; /* 7388 */
tmp_65.uri__path() = const_cast< const CoAP__Types::Charstring__List&>(csList)[i];
}
current_location.update_lineno(170);
#line 170 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-outprint elements of Coap options");
const_cast< const CoAP__Types::CoAP__ReqResp&>(v__CoapMsg).options()()[(i + 6)].log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(171);
#line 171 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__len = i;
}
current_location.update_lineno(167);
#line 167 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
INTEGER tmp_67;
++i;
}
}
}
current_location.update_lineno(177);
#line 177 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_71;
{
boolean tmp_68 = v__reqPrimitive.is_bound();
if(tmp_68) {
const OPTIONAL<OneM2M__Types::ResultContent>& tmp_69 = v__reqPrimitive.resultContent();
switch (tmp_69.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_68 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_68 = FALSE;
break;
default:
{
const OneM2M__Types::ResultContent& tmp_70 = (const OneM2M__Types::ResultContent&) tmp_69;
tmp_68 = tmp_70.is_present();
break;}
}
}
tmp_71 = tmp_68;
}
if (tmp_71) {
current_location.update_lineno(178);
#line 178 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
CoAP__Types::CoAP__Options& tmp_73 = v__CoapMsg.options()()[(v__len + 7)]; /* 7388 */
tmp_73.uri__query() = (cs_6 + int2str(v__resultContent));
}
}
}
}
else {
current_location.update_lineno(180);
#line 180 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
boolean tmp_74;
{
boolean tmp_75;
tmp_75 = (2 == v__operation);
if (!tmp_75) tmp_75 = (3 == v__operation);
tmp_74 = tmp_75;
}
if (!tmp_74) tmp_74 = (4 == v__operation);
if (tmp_74) {
current_location.update_lineno(183);
#line 183 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((2 == v__operation)) {
current_location.update_lineno(184);
#line 184 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__CoapMsg = oneM2MTester__Template::t__COAP__GET__request(v__contentFormat, v__from, v__reqID).valueof();
}
else {
current_location.update_lineno(185);
#line 185 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((3 == v__operation)) {
current_location.update_lineno(187);
#line 187 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__payload = OneM2M__Primitive__EncDec::f__encode__requestPrimitive(v__reqPrimitive, v__serial__type);
current_location.update_lineno(190);
#line 190 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((v__payload != cs_0)) {
current_location.update_lineno(191);
#line 191 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__payload = f__serialization__Enc(v__payload, v__serial__type);
}
current_location.update_lineno(193);
#line 193 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__CoapMsg = oneM2MTester__Template::t__COAP__PUT__request(v__contentFormat, v__from, v__reqID, v__payload).valueof();
}
else {
current_location.update_lineno(194);
#line 194 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((4 == v__operation)) {
current_location.update_lineno(195);
#line 195 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__CoapMsg = oneM2MTester__Template::t__COAP__DELETE__request(v__contentFormat, v__from, v__reqID).valueof();
}
}
}
{
current_location.update_lineno(199);
#line 199 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER i(0);
current_location.update_lineno(199);
#line 199 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
for ( ; ; ) {
current_location.update_lineno(199);
#line 199 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if (!(i < csList.lengthof())) break;
current_location.update_lineno(200);
#line 200 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((const_cast< const CoAP__Types::Charstring__List&>(csList)[i] != cs_0)) {
current_location.update_lineno(201);
#line 201 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
CoAP__Types::CoAP__Options& tmp_82 = v__CoapMsg.options()()[(i + 5)]; /* 7388 */
tmp_82.uri__path() = const_cast< const CoAP__Types::Charstring__List&>(csList)[i];
}
current_location.update_lineno(202);
#line 202 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-outprint elements of Coap options");
const_cast< const CoAP__Types::CoAP__ReqResp&>(v__CoapMsg).options()()[(i + 5)].log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(203);
#line 203 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__len = i;
}
current_location.update_lineno(199);
#line 199 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
INTEGER tmp_84;
++i;
}
}
}
current_location.update_lineno(208);
#line 208 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_88;
{
boolean tmp_85 = v__reqPrimitive.is_bound();
if(tmp_85) {
const OPTIONAL<OneM2M__Types::ResultContent>& tmp_86 = v__reqPrimitive.resultContent();
switch (tmp_86.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_85 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_85 = FALSE;
break;
default:
{
const OneM2M__Types::ResultContent& tmp_87 = (const OneM2M__Types::ResultContent&) tmp_86;
tmp_85 = tmp_87.is_present();
break;}
}
}
tmp_88 = tmp_85;
}
if (tmp_88) {
current_location.update_lineno(209);
#line 209 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
CoAP__Types::CoAP__Options& tmp_90 = v__CoapMsg.options()()[(v__len + 6)]; /* 7388 */
tmp_90.uri__query() = (cs_6 + int2str(v__resultContent));
}
}
}
}
else {
current_location.update_lineno(212);
#line 212 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSendNot supported operation type!");
v__operation.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
current_location.update_lineno(216);
#line 216 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__CoapMsgToSend.msg() = v__CoapMsg;
current_location.update_lineno(219);
#line 219 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-v_CoapMsgToSend-CoAP Message: ");
v__CoapMsgToSend.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(222);
#line 222 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER int__debug(CoAP__Types::f__CoAP__enc(v__CoapMsgToSend, v__encoded__msg));
current_location.update_lineno(223);
#line 223 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-f_CoAP_enc: encoded CoAP message:\n");
v__encoded__msg.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
else {
current_location.update_lineno(225);
#line 225 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((OneM2M__Constants::HTTP__BINDING == v__protocol__type)) {
current_location.update_lineno(226);
#line 226 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
HTTPmsg__Types::HTTPRequest v__httpReqMsg;
current_location.update_lineno(227);
#line 227 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
HTTPmsg__Types::HTTPMessage v__httpMsgToSend;
current_location.update_lineno(228);
#line 228 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__accept;
current_location.update_lineno(231);
#line 231 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__accept = (OneM2M__Constants::ACCEPT__BASE + v__serial__type);
current_location.update_lineno(233);
#line 233 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((1 == v__operation)) {
current_location.update_lineno(235);
#line 235 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__contentType = (((OneM2M__Constants::CONTENT__TYPE__BASE + v__serial__type) + cs_7) + int2str(v__ty));
current_location.update_lineno(238);
#line 238 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__payload = OneM2M__Primitive__EncDec::f__encode__requestPrimitive(v__reqPrimitive, v__serial__type);
current_location.update_lineno(238);
#line 238 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-v_payload: ");
v__payload.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(241);
#line 241 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((v__payload != cs_0)) {
current_location.update_lineno(241);
#line 241 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_enc_M2MPrimitive_to_ASPSend[DEBUG] _____CHECK HERE !!!_____________________");
current_location.update_lineno(242);
#line 242 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__payload = f__serialization__Enc(v__payload, v__serial__type);
}
else {
current_location.update_lineno(244);
#line 244 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_enc_M2MPrimitive_to_ASPSend-[]WARNING]f_encode_requestPrimitive: payload is NULL\n");
}
current_location.update_lineno(247);
#line 247 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__httpReqMsg = oneM2MTester__Template::t__HTTP__POST__request(connectId__init, v__uri, v__accept, v__from, v__reqID, v__contentType, v__payload).valueof();
}
else {
current_location.update_lineno(249);
#line 249 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((2 == v__operation)) {
current_location.update_lineno(250);
#line 250 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__httpReqMsg = oneM2MTester__Template::t__HTTP__GET__request(connectId__init, v__uri, v__accept, v__from, v__reqID).valueof();
}
else {
current_location.update_lineno(251);
#line 251 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((3 == v__operation)) {
current_location.update_lineno(253);
#line 253 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__payload = OneM2M__Primitive__EncDec::f__encode__requestPrimitive(v__reqPrimitive, v__serial__type);
current_location.update_lineno(256);
#line 256 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((v__payload != cs_0)) {
current_location.update_lineno(257);
#line 257 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__payload = f__serialization__Enc(v__payload, v__serial__type);
}
current_location.update_lineno(260);
#line 260 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__contentType = (OneM2M__Constants::CONTENT__TYPE__BASE + v__serial__type);
current_location.update_lineno(261);
#line 261 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__httpReqMsg = oneM2MTester__Template::t__HTTP__PUT__request(connectId__init, v__uri, v__accept, v__from, v__reqID, v__contentType, v__payload).valueof();
}
else {
current_location.update_lineno(263);
#line 263 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((4 == v__operation)) {
current_location.update_lineno(264);
#line 264 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__httpReqMsg = oneM2MTester__Template::t__HTTP__DELETE__request(connectId__init, v__uri, v__accept, v__from, v__reqID).valueof();
}
else {
current_location.update_lineno(266);
#line 266 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-Not supported operation type!");
v__operation.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
}
}
current_location.update_lineno(270);
#line 270 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__httpMsgToSend.request() = v__httpReqMsg;
current_location.update_lineno(273);
#line 273 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-HTTP Message to send ");
v__httpMsgToSend.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(275);
#line 275 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__encoded__msg = HTTPmsg__Types::enc__HTTPMessage(v__httpMsgToSend);
current_location.update_lineno(276);
#line 276 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-Encoded HTTP Message to send ");
v__encoded__msg.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
}
else {
current_location.update_lineno(279);
#line 279 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_enc_M2MPrimitive_to_ASPSend-[warning]NOT SUPPORTED Serialization or Protocol binding TYPE !! ");
}
}
}
else {
current_location.update_lineno(281);
#line 281 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if (const_cast< const OneM2M__Types::MsgOut&>(p__msgout).primitive().ischosen(OneM2M__Types::MsgOut_primitive::ALT_responsePrimitive)) {
}
}
current_location.update_lineno(287);
#line 287 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
p__asp__Send.connId() = connectId__init;
current_location.update_lineno(289);
#line 289 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((OneM2M__Constants::HTTP__BINDING == v__protocol__type)) {
current_location.update_lineno(290);
#line 290 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
Socket__API__Definitions::ProtoTuple& tmp_107 = p__asp__Send.proto(); /* 7388 */
tmp_107.tcp() = NULL_VALUE;
}
}
else {
current_location.update_lineno(291);
#line 291 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((OneM2M__Constants::COAP__BINDING == v__protocol__type)) {
current_location.update_lineno(292);
#line 292 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
Socket__API__Definitions::ProtoTuple& tmp_109 = p__asp__Send.proto(); /* 7388 */
tmp_109.udp() = NULL_VALUE;
}
}
}
current_location.update_lineno(294);
#line 294 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
p__asp__Send.msg() = v__encoded__msg;
}
}
}

INTEGER f__dec__ASPRecvFrom__to__M2MPrimitive(const IPL4asp__Types::ASP__RecvFrom& p__aspRecvFrom, OneM2M__Types::MsgIn& p__msgin)
{
TTCN_Location current_location("../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn", 302, TTCN_Location::LOCATION_FUNCTION, "f_dec_ASPRecvFrom_to_M2MPrimitive");
p__msgin.clean_up();
current_location.update_lineno(303);
#line 303 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
OneM2M__Types::MsgIn v__msgIn;
current_location.update_lineno(304);
#line 304 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
OneM2M__Types::ResponsePrimitive v__responsePrimitive;
current_location.update_lineno(305);
#line 305 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
OneM2M__Types::ResponseStatusCode v__responseStatusCode;
current_location.update_lineno(307);
#line 307 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
Mqtt__v3__1__1__Types::MQTT__v3__1__1__Message v__mqttMsg;
current_location.update_lineno(308);
#line 308 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
IPL4asp__Types::ASP__RecvFrom v__ipl4Recv(p__aspRecvFrom);
current_location.update_lineno(309);
#line 309 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
OCTETSTRING v__aspRecv__msg;
current_location.update_lineno(310);
#line 310 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
OCTETSTRING v__mqtt__payload;
current_location.update_lineno(311);
#line 311 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__protocol__type(f__upper2lower(OneM2M__Pixits::PX__PROTOCOL__BINDING));
current_location.update_lineno(312);
#line 312 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__serial__type(f__upper2lower(OneM2M__Pixits::PX__SERIALIZATION));
current_location.update_lineno(313);
#line 313 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__encoded__primitiveContent(cs_0);
current_location.update_lineno(314);
#line 314 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
BOOLEAN enable__rsp__decode(TRUE);
current_location.update_lineno(315);
#line 315 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
BITSTRING v__bitStream(bs_0);
current_location.update_lineno(317);
#line 317 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_114;
{
boolean tmp_111 = v__ipl4Recv.is_bound();
if(tmp_111) {
const IPL4asp__Types::ASP__RecvFrom& tmp_112 = v__ipl4Recv;
const OCTETSTRING& tmp_113 = tmp_112.msg();
tmp_111 = tmp_113.is_present();
}
tmp_114 = tmp_111;
}
if (tmp_114) {
current_location.update_lineno(318);
#line 318 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__aspRecv__msg = const_cast< const IPL4asp__Types::ASP__RecvFrom&>(v__ipl4Recv).msg();
current_location.update_lineno(319);
#line 319 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitivev_ipl4Recv.msg(ispresent)");
current_location.update_lineno(321);
#line 321 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_116;
tmp_116 = (OneM2M__Constants::HTTP__BINDING == v__protocol__type);
if (!tmp_116) tmp_116 = (OneM2M__Constants::COAP__BINDING == v__protocol__type);
if (tmp_116) {
current_location.update_lineno(323);
#line 323 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((OneM2M__Constants::HTTP__BINDING == v__protocol__type)) {
current_location.update_lineno(324);
#line 324 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
HTTPmsg__Types::HTTPMessage v__httpMsg;
current_location.update_lineno(325);
#line 325 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
HTTPmsg__Types::HTTPResponse v__httpResp;
current_location.update_lineno(326);
#line 326 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
HTTPmsg__Types::HeaderLines v__headerLines;
current_location.update_lineno(327);
#line 327 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
HTTPmsg__Types::HeaderLine v__header;
current_location.update_lineno(328);
#line 328 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__headerName(cs_0);
current_location.update_lineno(329);
#line 329 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__headerValue(cs_0);
current_location.update_lineno(330);
#line 330 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__httpRespBody(cs_0);
current_location.update_lineno(333);
#line 333 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER decode__state(HTTPmsg__Types::dec__HTTPMessage(v__aspRecv__msg, v__httpMsg, HTTPmsg__Types::tsp__socket__debugging));
current_location.update_lineno(334);
#line 334 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitivedec_HTTPMessage: return value (if equal to zero then all response are decoded): ");
decode__state.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(336);
#line 336 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((0 == decode__state)) {
current_location.update_lineno(337);
#line 337 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitiveAll message are decoded!!");
current_location.update_lineno(339);
#line 339 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if (v__httpMsg.ischosen(HTTPmsg__Types::HTTPMessage::ALT_response)) {
current_location.update_lineno(340);
#line 340 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__httpResp = const_cast< const HTTPmsg__Types::HTTPMessage&>(v__httpMsg).response();
current_location.update_lineno(342);
#line 342 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_121;
{
boolean tmp_118 = v__httpResp.is_bound();
if(tmp_118) {
const HTTPmsg__Types::HTTPResponse& tmp_119 = v__httpResp;
const HTTPmsg__Types::HeaderLines& tmp_120 = tmp_119.header();
tmp_118 = tmp_120.is_present();
}
tmp_121 = tmp_118;
}
if (tmp_121) {
current_location.update_lineno(343);
#line 343 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__headerLines = const_cast< const HTTPmsg__Types::HTTPResponse&>(v__httpResp).header();
}
else {
current_location.update_lineno(345);
#line 345 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
return 1;
}
}
current_location.update_lineno(348);
#line 348 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_126;
{
boolean tmp_123 = v__httpResp.is_bound();
if(tmp_123) {
const HTTPmsg__Types::HTTPResponse& tmp_124 = v__httpResp;
const CHARSTRING& tmp_125 = tmp_124.body();
tmp_123 = tmp_125.is_present();
}
tmp_126 = tmp_123;
}
if (tmp_126) {
current_location.update_lineno(349);
#line 349 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__httpRespBody = const_cast< const HTTPmsg__Types::HTTPResponse&>(v__httpResp).body();
}
else {
current_location.update_lineno(351);
#line 351 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-no http body is received!!");
}
}
}
else {
current_location.update_lineno(353);
#line 353 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[ERROR]v_httpMsg.response(): No Response is included in the HTTPMessage !!");
current_location.update_lineno(354);
#line 354 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.primitiveContent() = OMIT_VALUE;
}
{
current_location.update_lineno(359);
#line 359 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER i(0);
current_location.update_lineno(359);
#line 359 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
for ( ; ; ) {
current_location.update_lineno(359);
#line 359 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if (!(i < v__headerLines.lengthof())) break;
current_location.update_lineno(360);
#line 360 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__header = const_cast< const HTTPmsg__Types::HeaderLines&>(v__headerLines)[i];
current_location.update_lineno(361);
#line 361 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__headerName = const_cast< const HTTPmsg__Types::HeaderLine&>(v__header).header__name();
current_location.update_lineno(362);
#line 362 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__headerValue = const_cast< const HTTPmsg__Types::HeaderLine&>(v__header).header__value();
current_location.update_lineno(364);
#line 364 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((cs_8 == v__headerName)) {
current_location.update_lineno(365);
#line 365 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[DEBUG] ENTER PARSING HTTP HEADERS!!");
current_location.update_lineno(367);
#line 367 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_135;
{
boolean tmp_132;
{
boolean tmp_133;
{
boolean tmp_134;
tmp_134 = (OneM2M__Constants::RSC__OK == v__headerValue);
if (!tmp_134) tmp_134 = (OneM2M__Constants::RSC__CREATED == v__headerValue);
tmp_133 = tmp_134;
}
if (!tmp_133) tmp_133 = (OneM2M__Constants::RSC__UPDATED == v__headerValue);
tmp_132 = tmp_133;
}
if (!tmp_132) tmp_132 = (OneM2M__Constants::RSC__DELETED == v__headerValue);
tmp_135 = (!(tmp_132));
}
if (tmp_135) {
current_location.update_lineno(368);
#line 368 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
enable__rsp__decode = FALSE;
}
}
current_location.update_lineno(371);
#line 371 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER v__rsc__int(str2int(v__headerValue));
current_location.update_lineno(372);
#line 372 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responseStatusCode.int2enum(v__rsc__int);
current_location.update_lineno(373);
#line 373 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.responseStatusCode() = v__responseStatusCode;
}
current_location.update_lineno(376);
#line 376 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((cs_9 == v__headerName)) {
current_location.update_lineno(377);
#line 377 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.requestIdentifier() = v__headerValue;
}
current_location.update_lineno(359);
#line 359 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
INTEGER tmp_139;
++i;
}
}
}
current_location.update_lineno(381);
#line 381 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_140;
tmp_140 = (v__httpRespBody != cs_0);
if (tmp_140) tmp_140 = (!(enable__rsp__decode));
if (tmp_140) {
current_location.update_lineno(382);
#line 382 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[ERROR]ERROR HTTP MESSAGE!!");
}
}
current_location.update_lineno(385);
#line 385 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_141;
tmp_141 = (v__httpRespBody != cs_0);
if (tmp_141) tmp_141 = (v__serial__type != cs_0);
if ((tmp_141 && enable__rsp__decode)) {
current_location.update_lineno(386);
#line 386 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__encoded__primitiveContent = f__primitiveContent__Dec(v__httpRespBody, v__serial__type);
current_location.update_lineno(387);
#line 387 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitive-v_serial_type: ");
v__serial__type.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
}
else {
current_location.update_lineno(390);
#line 390 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.primitiveContent() = OMIT_VALUE;
current_location.update_lineno(391);
#line 391 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[ERROR]dec_HTTPMessage(): fail to decode HTTP message!!");
}
}
else {
current_location.update_lineno(393);
#line 393 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((OneM2M__Constants::COAP__BINDING == v__protocol__type)) {
current_location.update_lineno(394);
#line 394 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CoAP__Types::CoAP__Message v__coapMsg;
current_location.update_lineno(395);
#line 395 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CoAP__Types::CoAP__ReqResp v__coapReqResp;
current_location.update_lineno(396);
#line 396 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CoAP__Types::Header v__coapHeaderList;
current_location.update_lineno(397);
#line 397 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CoAP__Types::CoAP__OptionsList v__coapOptionList;
current_location.update_lineno(398);
#line 398 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
OCTETSTRING v__coapPayload;
current_location.update_lineno(399);
#line 399 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__coapRespBody(cs_0);
current_location.update_lineno(401);
#line 401 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER decode__state(CoAP__Types::f__CoAP__dec(v__aspRecv__msg, v__coapMsg));
current_location.update_lineno(402);
#line 402 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitivef_CoAP_dec: return value (if equal to zero then means all response are decoded): ");
decode__state.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(404);
#line 404 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((0 == decode__state)) {
current_location.update_lineno(405);
#line 405 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive[f_CoAP_dec]-All message are decoded!!");
current_location.update_lineno(407);
#line 407 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if (v__coapMsg.ischosen(CoAP__Types::CoAP__Message::ALT_msg)) {
current_location.update_lineno(408);
#line 408 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__coapReqResp = const_cast< const CoAP__Types::CoAP__Message&>(v__coapMsg).msg();
current_location.update_lineno(411);
#line 411 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_148;
{
boolean tmp_145 = v__coapReqResp.is_bound();
if(tmp_145) {
const CoAP__Types::CoAP__ReqResp& tmp_146 = v__coapReqResp;
const CoAP__Types::Header& tmp_147 = tmp_146.header();
tmp_145 = tmp_147.is_present();
}
tmp_148 = tmp_145;
}
if (tmp_148) {
current_location.update_lineno(412);
#line 412 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__coapHeaderList = const_cast< const CoAP__Types::CoAP__ReqResp&>(v__coapReqResp).header();
}
else {
current_location.update_lineno(414);
#line 414 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[oneM2MTester-WARNING] No CoAP_Types.Header is returned!!");
}
}
current_location.update_lineno(418);
#line 418 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_153;
{
boolean tmp_150 = v__coapReqResp.is_bound();
if(tmp_150) {
const OPTIONAL<CoAP__Types::CoAP__OptionsList>& tmp_151 = v__coapReqResp.options();
switch (tmp_151.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_150 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_150 = FALSE;
break;
default:
{
const CoAP__Types::CoAP__OptionsList& tmp_152 = (const CoAP__Types::CoAP__OptionsList&) tmp_151;
tmp_150 = tmp_152.is_present();
break;}
}
}
tmp_153 = tmp_150;
}
if (tmp_153) {
current_location.update_lineno(419);
#line 419 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
BOOLEAN RQI__option__flag(FALSE);
current_location.update_lineno(420);
#line 420 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
BOOLEAN RSC__option__flag(FALSE);
current_location.update_lineno(422);
#line 422 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__coapOptionList = const_cast< const CoAP__Types::CoAP__ReqResp&>(v__coapReqResp).options();
{
current_location.update_lineno(424);
#line 424 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER i(0);
current_location.update_lineno(424);
#line 424 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
for ( ; ; ) {
current_location.update_lineno(424);
#line 424 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if (!(i < v__coapOptionList.lengthof())) break;
current_location.update_lineno(426);
#line 426 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if (const_cast< const CoAP__Types::CoAP__OptionsList&>(v__coapOptionList)[i].ischosen(CoAP__Types::CoAP__Options::ALT_oneM2M__RQI)) {
current_location.update_lineno(427);
#line 427 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.requestIdentifier() = const_cast< const CoAP__Types::CoAP__OptionsList&>(v__coapOptionList)[i].oneM2M__RQI();
current_location.update_lineno(428);
#line 428 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
RQI__option__flag = TRUE;
}
current_location.update_lineno(431);
#line 431 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if (const_cast< const CoAP__Types::CoAP__OptionsList&>(v__coapOptionList)[i].ischosen(CoAP__Types::CoAP__Options::ALT_oneM2M__RSC)) {
current_location.update_lineno(432);
#line 432 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
RSC__option__flag = TRUE;
current_location.update_lineno(434);
#line 434 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER v__coapRSC(const_cast< const CoAP__Types::CoAP__OptionsList&>(v__coapOptionList)[i].oneM2M__RSC());
current_location.update_lineno(435);
#line 435 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responseStatusCode.int2enum(v__coapRSC);
current_location.update_lineno(436);
#line 436 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.responseStatusCode() = v__responseStatusCode;
current_location.update_lineno(438);
#line 438 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
CHARSTRING v__coapRSC__tmp(int2str(v__coapRSC));
current_location.update_lineno(440);
#line 440 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_162;
{
boolean tmp_159;
{
boolean tmp_160;
{
boolean tmp_161;
tmp_161 = (OneM2M__Constants::RSC__OK == v__coapRSC__tmp);
if (!tmp_161) tmp_161 = (OneM2M__Constants::RSC__CREATED == v__coapRSC__tmp);
tmp_160 = tmp_161;
}
if (!tmp_160) tmp_160 = (OneM2M__Constants::RSC__UPDATED == v__coapRSC__tmp);
tmp_159 = tmp_160;
}
if (!tmp_159) tmp_159 = (OneM2M__Constants::RSC__DELETED == v__coapRSC__tmp);
tmp_162 = (!(tmp_159));
}
if (tmp_162) {
current_location.update_lineno(441);
#line 441 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
enable__rsp__decode = FALSE;
}
}
}
current_location.update_lineno(424);
#line 424 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
INTEGER tmp_164;
++i;
}
}
}
current_location.update_lineno(446);
#line 446 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_165;
{
boolean tmp_166;
tmp_166 = (!(RSC__option__flag));
if (!tmp_166) tmp_166 = (!(RQI__option__flag));
tmp_165 = tmp_166;
}
if (!tmp_165) tmp_165 = (!((RQI__option__flag && RSC__option__flag)));
if (tmp_165) {
current_location.update_lineno(447);
#line 447 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[oneM2MTester-WARNING]-Mandatory option oneM2M_RQI option or oneM2M_RSC is missing!!");
current_location.update_lineno(448);
#line 448 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("[oneM2MTester]-Mandatory CoAP option is not returned"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(449);
#line 449 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Runtime::stop_component(MTC_COMPREF);
}
}
}
}
current_location.update_lineno(454);
#line 454 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_170;
{
boolean tmp_167 = v__coapReqResp.is_bound();
if(tmp_167) {
const OPTIONAL<OCTETSTRING>& tmp_168 = v__coapReqResp.payload();
switch (tmp_168.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_167 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_167 = FALSE;
break;
default:
{
const OCTETSTRING& tmp_169 = (const OCTETSTRING&) tmp_168;
tmp_167 = tmp_169.is_present();
break;}
}
}
tmp_170 = tmp_167;
}
if (tmp_170) {
current_location.update_lineno(455);
#line 455 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__coapPayload = const_cast< const CoAP__Types::CoAP__ReqResp&>(v__coapReqResp).payload();
current_location.update_lineno(457);
#line 457 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__coapRespBody = oct2char(v__coapPayload);
current_location.update_lineno(459);
#line 459 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
{
boolean tmp_173;
tmp_173 = (v__coapRespBody != cs_0);
if (tmp_173) tmp_173 = (v__serial__type != cs_0);
if ((tmp_173 && enable__rsp__decode)) {
current_location.update_lineno(460);
#line 460 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__encoded__primitiveContent = f__primitiveContent__Dec(v__coapRespBody, v__serial__type);
}
}
}
else {
current_location.update_lineno(463);
#line 463 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-No Coap body!!!!");
}
}
}
else {
current_location.update_lineno(466);
#line 466 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[ERROR]v_coapMsg.msg(): No CoAP_ReqResp is included in the CoAP_Message response !!");
current_location.update_lineno(467);
#line 467 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.primitiveContent() = OMIT_VALUE;
}
}
else {
current_location.update_lineno(471);
#line 471 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[ERROR]f_CoAP_dec(): fail to decode coap message!!");
current_location.update_lineno(472);
#line 472 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.primitiveContent() = OMIT_VALUE;
}
}
}
current_location.update_lineno(477);
#line 477 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((v__encoded__primitiveContent != cs_0)) {
current_location.update_lineno(478);
#line 478 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitive-v_encoded_primitiveContent(): ");
v__encoded__primitiveContent.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(479);
#line 479 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__bitStream = oct2bit(char2oct(v__encoded__primitiveContent));
current_location.update_lineno(481);
#line 481 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitive-v_bitStream(): : ");
v__bitStream.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(483);
#line 483 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
INTEGER dec__state__int(-1);
current_location.update_lineno(485);
#line 485 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if (enable__rsp__decode) {
current_location.update_lineno(486);
#line 486 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((OneM2M__Constants::JSON__SERIAL == v__serial__type)) {
current_location.update_lineno(487);
#line 487 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
dec__state__int = OneM2M__Primitive__EncDec::f__dec__JSON__resourcePrimitive(char2oct(v__encoded__primitiveContent), v__responsePrimitive.primitiveContent());
current_location.update_lineno(489);
#line 489 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((0 == dec__state__int)) {
current_location.update_lineno(490);
#line 490 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitive-f_dec_JSON_resourcePrimitive(): decode suceeded!!: ");
dec__state__int.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
else {
current_location.update_lineno(492);
#line 492 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitive-f_dec_JSON_resourcePrimitive(): decode failed!!: ");
dec__state__int.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(493);
#line 493 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("[Titan Codec]Received protocol messages could not be decoded successfully"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(494);
#line 494 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Runtime::stop_component(MTC_COMPREF);
}
}
else {
current_location.update_lineno(496);
#line 496 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((OneM2M__Constants::XML__SERIAL == v__serial__type)) {
current_location.update_lineno(498);
#line 498 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
dec__state__int = OneM2M__Primitive__EncDec::f__dec__XER__resourcePrimitive(char2oct(v__encoded__primitiveContent), v__responsePrimitive.primitiveContent());
current_location.update_lineno(500);
#line 500 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
if ((0 == dec__state__int)) {
current_location.update_lineno(501);
#line 501 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitive-f_dec_XER_resourcePrimitive(): decode suceeded!!: ");
dec__state__int.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
else {
current_location.update_lineno(503);
#line 503 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitive-f_dec_XER_resourcePrimitive(): decode failed!!: ");
dec__state__int.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(504);
#line 504 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("[Titan Codec]Received protocol messages could not be decoded successfully"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(505);
#line 505 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Runtime::stop_component(MTC_COMPREF);
}
}
}
}
else {
current_location.update_lineno(509);
#line 509 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[oneM2MTester_DEBUG]enable_rsp_decode(false): Not decode oneM2M resource primitive!!");
current_location.update_lineno(510);
#line 510 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.primitiveContent() = OMIT_VALUE;
}
}
else {
current_location.update_lineno(513);
#line 513 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[Decoding Parsing ERROR]f_primitiveContent_Dec(): PrimitiveContent object parsing failed!!");
current_location.update_lineno(514);
#line 514 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.primitiveContent() = OMIT_VALUE;
}
}
else {
current_location.update_lineno(518);
#line 518 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
return 1;
}
}
current_location.update_lineno(522);
#line 522 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.to__() = OneM2M__Pixits::PX__AE1__ID__STEM;
current_location.update_lineno(523);
#line 523 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.from__() = OneM2M__Pixits::PX__CSE__NAME;
current_location.update_lineno(524);
#line 524 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.originatingTimestamp() = OMIT_VALUE;
current_location.update_lineno(525);
#line 525 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.resultExpirationTimestamp() = OMIT_VALUE;
current_location.update_lineno(526);
#line 526 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.eventCategory() = OMIT_VALUE;
current_location.update_lineno(527);
#line 527 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.contentStatus() = OMIT_VALUE;
current_location.update_lineno(528);
#line 528 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.contentOffset() = OMIT_VALUE;
current_location.update_lineno(529);
#line 529 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.assignedTokenIdentifiers() = OMIT_VALUE;
current_location.update_lineno(530);
#line 530 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__responsePrimitive.tokenRequestInformation() = OMIT_VALUE;
current_location.update_lineno(533);
#line 533 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
v__msgIn.primitive().responsePrimitive() = v__responsePrimitive;
current_location.update_lineno(534);
#line 534 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
p__msgin = v__msgIn;
current_location.update_lineno(535);
#line 535 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
return 0;
}
else {
current_location.update_lineno(537);
#line 537 "../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn"
return 1;
}
}
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "OneM2M_DualFaceMapping");
IPL4asp__Types::module_object.pre_init_module();
OneM2M__Primitive__EncDec::module_object.pre_init_module();
OneM2M__Pixits::module_object.pre_init_module();
oneM2MTester__Template::module_object.pre_init_module();
module_object.add_function("f_primitiveContent_Dec", (genericfunc_t)&f__primitiveContent__Dec, NULL);
module_object.add_function("f_upper2lower", (genericfunc_t)&f__upper2lower, NULL);
module_object.add_function("f_serialization_Enc", (genericfunc_t)&f__serialization__Enc, NULL);
module_object.add_function("f_split", (genericfunc_t)&f__split, NULL);
module_object.add_function("f_split_uri", (genericfunc_t)&f__split__uri, NULL);
module_object.add_function("f_replace", (genericfunc_t)&f__replace, NULL);
module_object.add_function("f_adressingFormatter", (genericfunc_t)&f__adressingFormatter, NULL);
module_object.add_function("f_enc_M2MPrimitive_to_ASPSend", (genericfunc_t)&f__enc__M2MPrimitive__to__ASPSend, NULL);
module_object.add_function("f_dec_ASPRecvFrom_to_M2MPrimitive", (genericfunc_t)&f__dec__ASPRecvFrom__to__M2MPrimitive, NULL);
}

static void post_init_module()
{
TTCN_Location current_location("../oneM2MTester/src/TestSystemFramework/OneM2M_DualFaceMapping.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "OneM2M_DualFaceMapping");
IPL4asp__Types::module_object.post_init_module();
OneM2M__Primitive__EncDec::module_object.post_init_module();
OneM2M__Pixits::module_object.post_init_module();
oneM2MTester__Template::module_object.post_init_module();
}


} /* end of namespace */
