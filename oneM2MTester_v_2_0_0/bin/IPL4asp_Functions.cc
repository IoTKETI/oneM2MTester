// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for oneM2MTester (martin@ubuntu) on Wed May 31 13:52:13 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "IPL4asp_Functions.hh"

namespace IPL4asp__Functions {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const CHARSTRING cs_2(0, NULL),
cs_1('.'),
cs_0(':');
static const unsigned char module_checksum[] = { 0x60, 0x0e, 0xa9, 0x4f, 0xd5, 0x5b, 0x40, 0x7e, 0x8a, 0x7b, 0x60, 0xdd, 0xc2, 0xc0, 0x16, 0x0d };

/* Global variable definitions */

static const size_t num_namespaces = 1;
static const namespace_t xml_namespaces[num_namespaces+1] = {
  { NULL, NULL },
  { "", "" }
};

TTCN_Module module_object("IPL4asp_Functions", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 1LU, xml_namespaces, post_init_module, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_1,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

void f__setUpInterface(const CHARSTRING& startIPAddress, const CHARSTRING& netmask, const CHARSTRING& broadcast, const INTEGER& count, const CHARSTRING& ifname, const INTEGER& virtualIfaceStart)
{
TTCN_Location current_location("IPL4asp_Functions.ttcn", 25, TTCN_Location::LOCATION_FUNCTION, "f_setUpInterface");
current_location.update_lineno(33);
/* IPL4asp_Functions.ttcn, line 33 */
Socket__API__Definitions::ro__integer startIPAddress__Record(f__splitIpAddress(startIPAddress));
{
current_location.update_lineno(37);
/* IPL4asp_Functions.ttcn, line 37 */
INTEGER i(virtualIfaceStart);
current_location.update_lineno(37);
/* IPL4asp_Functions.ttcn, line 37 */
for ( ; ; ) {
current_location.update_lineno(38);
/* IPL4asp_Functions.ttcn, line 38 */
if (!(i < (virtualIfaceStart + count))) break;
current_location.update_lineno(39);
/* IPL4asp_Functions.ttcn, line 39 */
TCCInterface__Functions::f__setIP(((ifname + cs_0) + int2str(i)), f__presentIpAddress(startIPAddress__Record), netmask, broadcast, TCCInterface__Functions::f__setIP_number_defval);
current_location.update_lineno(41);
/* IPL4asp_Functions.ttcn, line 41 */
f__nextIpAddress(startIPAddress__Record);
current_location.update_lineno(38);
/* IPL4asp_Functions.ttcn, line 38 */
{
INTEGER tmp_0;
++i;
}
}
}
}

void f__setDownInterface(const CHARSTRING& ifname, const INTEGER& count, const INTEGER& virtualIfaceStart)
{
TTCN_Location current_location("IPL4asp_Functions.ttcn", 45, TTCN_Location::LOCATION_FUNCTION, "f_setDownInterface");
{
current_location.update_lineno(50);
/* IPL4asp_Functions.ttcn, line 50 */
INTEGER i(virtualIfaceStart);
current_location.update_lineno(50);
/* IPL4asp_Functions.ttcn, line 50 */
for ( ; ; ) {
current_location.update_lineno(51);
/* IPL4asp_Functions.ttcn, line 51 */
if (!(i < (virtualIfaceStart + count))) break;
current_location.update_lineno(52);
/* IPL4asp_Functions.ttcn, line 52 */
TCCInterface__Functions::f__deleteIP(((ifname + cs_0) + int2str(i)));
current_location.update_lineno(51);
/* IPL4asp_Functions.ttcn, line 51 */
{
INTEGER tmp_1;
++i;
}
}
}
}

BOOLEAN f__hasColon(const CHARSTRING& str)
{
TTCN_Location current_location("IPL4asp_Functions.ttcn", 56, TTCN_Location::LOCATION_FUNCTION, "f_hasColon");
current_location.update_lineno(57);
/* IPL4asp_Functions.ttcn, line 57 */
if ((!(str.is_value()))) {
current_location.update_lineno(57);
/* IPL4asp_Functions.ttcn, line 57 */
return FALSE;
}
{
current_location.update_lineno(58);
/* IPL4asp_Functions.ttcn, line 58 */
INTEGER i(0);
current_location.update_lineno(58);
/* IPL4asp_Functions.ttcn, line 58 */
for ( ; ; ) {
current_location.update_lineno(58);
/* IPL4asp_Functions.ttcn, line 58 */
if (!(i < str.lengthof())) break;
current_location.update_lineno(59);
/* IPL4asp_Functions.ttcn, line 59 */
if ((const_cast< const CHARSTRING&>(str)[i] == cs_0)) {
current_location.update_lineno(59);
/* IPL4asp_Functions.ttcn, line 59 */
return TRUE;
}
current_location.update_lineno(58);
/* IPL4asp_Functions.ttcn, line 58 */
{
INTEGER tmp_2;
++i;
}
}
}
current_location.update_lineno(61);
/* IPL4asp_Functions.ttcn, line 61 */
return FALSE;
}

Socket__API__Definitions::ro__charstring f__tokenizeIP(const CHARSTRING& addr)
{
TTCN_Location current_location("IPL4asp_Functions.ttcn", 64, TTCN_Location::LOCATION_FUNCTION, "f_tokenizeIP");
current_location.update_lineno(65);
/* IPL4asp_Functions.ttcn, line 65 */
Socket__API__Definitions::ro__charstring tokens(NULL_VALUE);
current_location.update_lineno(66);
/* IPL4asp_Functions.ttcn, line 66 */
CHARSTRING l__delim(cs_1);
current_location.update_lineno(67);
/* IPL4asp_Functions.ttcn, line 67 */
if (f__hasColon(addr)) {
current_location.update_lineno(67);
/* IPL4asp_Functions.ttcn, line 67 */
l__delim = cs_0;
}
current_location.update_lineno(68);
/* IPL4asp_Functions.ttcn, line 68 */
CHARSTRING l__token(cs_2);
current_location.update_lineno(69);
/* IPL4asp_Functions.ttcn, line 69 */
INTEGER addrlen(addr.lengthof());
{
current_location.update_lineno(70);
/* IPL4asp_Functions.ttcn, line 70 */
INTEGER i(0);
current_location.update_lineno(70);
/* IPL4asp_Functions.ttcn, line 70 */
for ( ; ; ) {
current_location.update_lineno(70);
/* IPL4asp_Functions.ttcn, line 70 */
if (!(i < addrlen)) break;
current_location.update_lineno(72);
/* IPL4asp_Functions.ttcn, line 72 */
if ((const_cast< const CHARSTRING&>(addr)[i] == l__delim)) {
current_location.update_lineno(73);
/* IPL4asp_Functions.ttcn, line 73 */
tokens[tokens.size_of()] = l__token;
current_location.update_lineno(74);
/* IPL4asp_Functions.ttcn, line 74 */
l__token = cs_2;
}
else {
current_location.update_lineno(76);
/* IPL4asp_Functions.ttcn, line 76 */
{
CHARSTRING tmp_6;
tmp_6 = (l__token + const_cast< const CHARSTRING&>(addr)[i]);
l__token = tmp_6;
}
}
current_location.update_lineno(70);
/* IPL4asp_Functions.ttcn, line 70 */
{
INTEGER tmp_7;
++i;
}
}
}
current_location.update_lineno(79);
/* IPL4asp_Functions.ttcn, line 79 */
if ((l__token != cs_2)) {
current_location.update_lineno(80);
/* IPL4asp_Functions.ttcn, line 80 */
tokens[tokens.size_of()] = l__token;
}
current_location.update_lineno(82);
/* IPL4asp_Functions.ttcn, line 82 */
return tokens;
}

Socket__API__Definitions::ro__integer f__splitIpAddress(const CHARSTRING& addr)
{
TTCN_Location current_location("IPL4asp_Functions.ttcn", 85, TTCN_Location::LOCATION_FUNCTION, "f_splitIpAddress");
current_location.update_lineno(88);
/* IPL4asp_Functions.ttcn, line 88 */
Socket__API__Definitions::ro__integer segAddr(NULL_VALUE);
current_location.update_lineno(89);
/* IPL4asp_Functions.ttcn, line 89 */
Socket__API__Definitions::ro__charstring ip(f__tokenizeIP(addr));
current_location.update_lineno(90);
/* IPL4asp_Functions.ttcn, line 90 */
if (f__hasColon(addr)) {
current_location.update_lineno(92);
/* IPL4asp_Functions.ttcn, line 92 */
INTEGER i(0);
for ( ; ; ) {
current_location.update_lineno(93);
/* IPL4asp_Functions.ttcn, line 93 */
if (!(const_cast< const Socket__API__Definitions::ro__charstring&>(ip)[i] != cs_2)) break;
current_location.update_lineno(94);
/* IPL4asp_Functions.ttcn, line 94 */
segAddr[i] = hex2int(str2hex(const_cast< const Socket__API__Definitions::ro__charstring&>(ip)[i]));
current_location.update_lineno(95);
/* IPL4asp_Functions.ttcn, line 95 */
{
INTEGER tmp_10;
++i;
}
current_location.update_lineno(96);
/* IPL4asp_Functions.ttcn, line 96 */
if ((i == ip.size_of())) {
current_location.update_lineno(97);
/* IPL4asp_Functions.ttcn, line 97 */
return segAddr;
}
}
current_location.update_lineno(100);
/* IPL4asp_Functions.ttcn, line 100 */
INTEGER memo((i + 1));
current_location.update_lineno(101);
/* IPL4asp_Functions.ttcn, line 101 */
INTEGER zs(((8 - ip.size_of()) + 1));
{
current_location.update_lineno(102);
/* IPL4asp_Functions.ttcn, line 102 */
INTEGER k(i);
current_location.update_lineno(102);
/* IPL4asp_Functions.ttcn, line 102 */
for ( ; ; ) {
current_location.update_lineno(102);
/* IPL4asp_Functions.ttcn, line 102 */
if (!(k < (zs + i))) break;
current_location.update_lineno(103);
/* IPL4asp_Functions.ttcn, line 103 */
segAddr[k] = 0;
current_location.update_lineno(102);
/* IPL4asp_Functions.ttcn, line 102 */
{
INTEGER tmp_12;
++k;
}
}
}
current_location.update_lineno(105);
/* IPL4asp_Functions.ttcn, line 105 */
{
INTEGER tmp_13;
tmp_13 = (i + zs);
i = tmp_13;
}
for ( ; ; ) {
current_location.update_lineno(106);
/* IPL4asp_Functions.ttcn, line 106 */
{
boolean tmp_14;
tmp_14 = (i < 8);
if (tmp_14) tmp_14 = (memo < ip.size_of());
if (!tmp_14) break;
}
current_location.update_lineno(107);
/* IPL4asp_Functions.ttcn, line 107 */
segAddr[i] = hex2int(str2hex(const_cast< const Socket__API__Definitions::ro__charstring&>(ip)[memo]));
current_location.update_lineno(108);
/* IPL4asp_Functions.ttcn, line 108 */
{
INTEGER tmp_16;
++i;
}
current_location.update_lineno(108);
/* IPL4asp_Functions.ttcn, line 108 */
{
INTEGER tmp_17;
++memo;
}
}
}
else {
{
current_location.update_lineno(112);
/* IPL4asp_Functions.ttcn, line 112 */
INTEGER i(0);
current_location.update_lineno(112);
/* IPL4asp_Functions.ttcn, line 112 */
for ( ; ; ) {
current_location.update_lineno(112);
/* IPL4asp_Functions.ttcn, line 112 */
if (!(i < 4)) break;
current_location.update_lineno(113);
/* IPL4asp_Functions.ttcn, line 113 */
segAddr[i] = str2int(const_cast< const Socket__API__Definitions::ro__charstring&>(ip)[i]);
current_location.update_lineno(112);
/* IPL4asp_Functions.ttcn, line 112 */
{
INTEGER tmp_19;
++i;
}
}
}
}
current_location.update_lineno(117);
/* IPL4asp_Functions.ttcn, line 117 */
return segAddr;
}

CHARSTRING f__presentIpAddress(const Socket__API__Definitions::ro__integer& addr)
{
TTCN_Location current_location("IPL4asp_Functions.ttcn", 120, TTCN_Location::LOCATION_FUNCTION, "f_presentIpAddress");
current_location.update_lineno(121);
/* IPL4asp_Functions.ttcn, line 121 */
if ((addr.size_of() == 4)) {
current_location.update_lineno(122);
/* IPL4asp_Functions.ttcn, line 122 */
return ((((((int2str(const_cast< const Socket__API__Definitions::ro__integer&>(addr)[0]) + cs_1) + int2str(const_cast< const Socket__API__Definitions::ro__integer&>(addr)[1])) + cs_1) + int2str(const_cast< const Socket__API__Definitions::ro__integer&>(addr)[2])) + cs_1) + int2str(const_cast< const Socket__API__Definitions::ro__integer&>(addr)[3]));
}
else {
current_location.update_lineno(127);
/* IPL4asp_Functions.ttcn, line 127 */
return ((((((((((((((hex2str(int2hex(const_cast< const Socket__API__Definitions::ro__integer&>(addr)[0], 4)) + cs_0) + hex2str(int2hex(const_cast< const Socket__API__Definitions::ro__integer&>(addr)[1], 4))) + cs_0) + hex2str(int2hex(const_cast< const Socket__API__Definitions::ro__integer&>(addr)[2], 4))) + cs_0) + hex2str(int2hex(const_cast< const Socket__API__Definitions::ro__integer&>(addr)[3], 4))) + cs_0) + hex2str(int2hex(const_cast< const Socket__API__Definitions::ro__integer&>(addr)[4], 4))) + cs_0) + hex2str(int2hex(const_cast< const Socket__API__Definitions::ro__integer&>(addr)[5], 4))) + cs_0) + hex2str(int2hex(const_cast< const Socket__API__Definitions::ro__integer&>(addr)[6], 4))) + cs_0) + hex2str(int2hex(const_cast< const Socket__API__Definitions::ro__integer&>(addr)[7], 4)));
}
}

void f__nextIpAddress(Socket__API__Definitions::ro__integer& addr)
{
TTCN_Location current_location("IPL4asp_Functions.ttcn", 140, TTCN_Location::LOCATION_FUNCTION, "f_nextIpAddress");
current_location.update_lineno(143);
/* IPL4asp_Functions.ttcn, line 143 */
INTEGER n(addr.size_of());
current_location.update_lineno(144);
/* IPL4asp_Functions.ttcn, line 144 */
INTEGER segMax(255);
current_location.update_lineno(145);
/* IPL4asp_Functions.ttcn, line 145 */
if ((n == 8)) {
current_location.update_lineno(146);
/* IPL4asp_Functions.ttcn, line 146 */
segMax = 65535;
}
{
current_location.update_lineno(149);
/* IPL4asp_Functions.ttcn, line 149 */
INTEGER i((n - 1));
current_location.update_lineno(149);
/* IPL4asp_Functions.ttcn, line 149 */
for ( ; ; ) {
current_location.update_lineno(149);
/* IPL4asp_Functions.ttcn, line 149 */
if (!(i >= 0)) break;
current_location.update_lineno(150);
/* IPL4asp_Functions.ttcn, line 150 */
if ((const_cast< const Socket__API__Definitions::ro__integer&>(addr)[i] < segMax)) {
current_location.update_lineno(151);
/* IPL4asp_Functions.ttcn, line 151 */
{
INTEGER tmp_21;
tmp_21 = (const_cast< const Socket__API__Definitions::ro__integer&>(addr)[i] + 1);
addr[i] = tmp_21;
}
current_location.update_lineno(152);
/* IPL4asp_Functions.ttcn, line 152 */
return;
}
else {
current_location.update_lineno(154);
/* IPL4asp_Functions.ttcn, line 154 */
addr[i] = 0;
}
current_location.update_lineno(149);
/* IPL4asp_Functions.ttcn, line 149 */
{
INTEGER tmp_23;
--i;
}
}
}
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("IPL4asp_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "IPL4asp_Functions");
IPL4asp__PortType::module_object.pre_init_module();
TCCInterface__Functions::module_object.pre_init_module();
module_object.add_function("f_setUpInterface", (genericfunc_t)&f__setUpInterface, NULL);
module_object.add_function("f_setDownInterface", (genericfunc_t)&f__setDownInterface, NULL);
module_object.add_function("f_hasColon", (genericfunc_t)&f__hasColon, NULL);
module_object.add_function("f_tokenizeIP", (genericfunc_t)&f__tokenizeIP, NULL);
module_object.add_function("f_splitIpAddress", (genericfunc_t)&f__splitIpAddress, NULL);
module_object.add_function("f_presentIpAddress", (genericfunc_t)&f__presentIpAddress, NULL);
module_object.add_function("f_nextIpAddress", (genericfunc_t)&f__nextIpAddress, NULL);
module_object.add_function("f_findIpAddressesWithDhcp", (genericfunc_t)&f__findIpAddressesWithDhcp, NULL);
module_object.add_function("f_releaseIpAddressesFromDhcp", (genericfunc_t)&f__releaseIpAddressesFromDhcp, NULL);
module_object.add_function("f_findIpAddressesWithARP", (genericfunc_t)&f__findIpAddressesWithARP, NULL);
module_object.add_function("f_findIpAddresses", (genericfunc_t)&f__findIpAddresses, NULL);
}

static void post_init_module()
{
TTCN_Location current_location("IPL4asp_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "IPL4asp_Functions");
IPL4asp__PortType::module_object.post_init_module();
TCCInterface__Functions::module_object.post_init_module();
}


} /* end of namespace */
