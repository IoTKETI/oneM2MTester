// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for oneM2MTester (martin@ubuntu) on Wed May 31 13:52:14 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef OneM2M__TypesAndValues_HH
#define OneM2M__TypesAndValues_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "OneM2M_Types.hh"

#if TTCN3_VERSION != 60100
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef OneM2M__TypesAndValues_HH
#endif

namespace OneM2M__TypesAndValues {

/* Forward declarations of classes */

class RequestPrimitiveList;
class RequestPrimitiveList_template;
class RequestPrimitiveMatrix;
class RequestPrimitiveMatrix_template;
class Configurations;
class Configurations_template;

} /* end of namespace */

#ifndef OneM2M__TypesAndValues_HH
#define OneM2M__TypesAndValues_HH

namespace OneM2M__TypesAndValues {

/* Type definitions */

typedef UNIVERSAL_CHARSTRING ParentID;
typedef UNIVERSAL_CHARSTRING_template ParentID_template;

/* Class definitions */

class RequestPrimitiveList : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
OneM2M__Types::RequestPrimitive **value_elements;
} *val_ptr;

static const OneM2M__Types::RequestPrimitive UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const RequestPrimitiveList& other_value);

public:
  typedef OneM2M__Types::RequestPrimitive of_type;
RequestPrimitiveList();
RequestPrimitiveList(null_type other_value);
RequestPrimitiveList(const RequestPrimitiveList& other_value);
~RequestPrimitiveList();

void clean_up();
RequestPrimitiveList& operator=(null_type other_value);
RequestPrimitiveList& operator=(const RequestPrimitiveList& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const RequestPrimitiveList& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const RequestPrimitiveList& other_value) const { return !(*this == other_value); }

OneM2M__Types::RequestPrimitive& operator[](int index_value);
OneM2M__Types::RequestPrimitive& operator[](const INTEGER& index_value);
const OneM2M__Types::RequestPrimitive& operator[](int index_value) const;
const OneM2M__Types::RequestPrimitive& operator[](const INTEGER& index_value) const;

RequestPrimitiveList operator<<=(int rotate_count) const;
RequestPrimitiveList operator<<=(const INTEGER& rotate_count) const;
RequestPrimitiveList operator>>=(int rotate_count) const;
RequestPrimitiveList operator>>=(const INTEGER& rotate_count) const;

RequestPrimitiveList operator+(const RequestPrimitiveList& other_value) const;

RequestPrimitiveList substr(int index, int returncount) const;

RequestPrimitiveList replace(int index, int len, const RequestPrimitiveList& repl) const;

RequestPrimitiveList replace(int index, int len, const RequestPrimitiveList_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class RequestPrimitiveList_template : public Record_Of_Template {
union {
struct {
int n_elements;
OneM2M__Types::RequestPrimitive_template **value_elements;
} single_value;
struct {
unsigned int n_values;
RequestPrimitiveList_template *list_value;
} value_list;
};
void copy_value(const RequestPrimitiveList& other_value);
void copy_template(const RequestPrimitiveList_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy);

public:
RequestPrimitiveList_template();
RequestPrimitiveList_template(template_sel other_value);
RequestPrimitiveList_template(null_type other_value);
RequestPrimitiveList_template(const RequestPrimitiveList& other_value);
RequestPrimitiveList_template(const OPTIONAL<RequestPrimitiveList>& other_value);
RequestPrimitiveList_template(const RequestPrimitiveList_template& other_value);
~RequestPrimitiveList_template();

void clean_up();
RequestPrimitiveList_template& operator=(template_sel other_value);
RequestPrimitiveList_template& operator=(null_type other_value);
RequestPrimitiveList_template& operator=(const RequestPrimitiveList& other_value);
RequestPrimitiveList_template& operator=(const OPTIONAL<RequestPrimitiveList>& other_value);
RequestPrimitiveList_template& operator=(const RequestPrimitiveList_template& other_value);

OneM2M__Types::RequestPrimitive_template& operator[](int index_value);
OneM2M__Types::RequestPrimitive_template& operator[](const INTEGER& index_value);
const OneM2M__Types::RequestPrimitive_template& operator[](int index_value) const;
const OneM2M__Types::RequestPrimitive_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const RequestPrimitiveList& other_value, boolean legacy = FALSE) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
RequestPrimitiveList valueof() const;
RequestPrimitiveList substr(int index, int returncount) const;

RequestPrimitiveList replace(int index, int len, const RequestPrimitiveList_template& repl) const;

RequestPrimitiveList replace(int index, int len, const RequestPrimitiveList& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
RequestPrimitiveList_template& list_item(unsigned int list_index);
void log() const;
void log_match(const RequestPrimitiveList& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean get_istemplate_kind(const char* type) const;
};

class RequestPrimitiveMatrix : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
RequestPrimitiveList **value_elements;
} *val_ptr;

static const RequestPrimitiveList UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const RequestPrimitiveMatrix& other_value);

public:
  typedef RequestPrimitiveList of_type;
RequestPrimitiveMatrix();
RequestPrimitiveMatrix(null_type other_value);
RequestPrimitiveMatrix(const RequestPrimitiveMatrix& other_value);
~RequestPrimitiveMatrix();

void clean_up();
RequestPrimitiveMatrix& operator=(null_type other_value);
RequestPrimitiveMatrix& operator=(const RequestPrimitiveMatrix& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const RequestPrimitiveMatrix& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const RequestPrimitiveMatrix& other_value) const { return !(*this == other_value); }

RequestPrimitiveList& operator[](int index_value);
RequestPrimitiveList& operator[](const INTEGER& index_value);
const RequestPrimitiveList& operator[](int index_value) const;
const RequestPrimitiveList& operator[](const INTEGER& index_value) const;

RequestPrimitiveMatrix operator<<=(int rotate_count) const;
RequestPrimitiveMatrix operator<<=(const INTEGER& rotate_count) const;
RequestPrimitiveMatrix operator>>=(int rotate_count) const;
RequestPrimitiveMatrix operator>>=(const INTEGER& rotate_count) const;

RequestPrimitiveMatrix operator+(const RequestPrimitiveMatrix& other_value) const;

RequestPrimitiveMatrix substr(int index, int returncount) const;

RequestPrimitiveMatrix replace(int index, int len, const RequestPrimitiveMatrix& repl) const;

RequestPrimitiveMatrix replace(int index, int len, const RequestPrimitiveMatrix_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class RequestPrimitiveMatrix_template : public Record_Of_Template {
union {
struct {
int n_elements;
RequestPrimitiveList_template **value_elements;
} single_value;
struct {
unsigned int n_values;
RequestPrimitiveMatrix_template *list_value;
} value_list;
};
void copy_value(const RequestPrimitiveMatrix& other_value);
void copy_template(const RequestPrimitiveMatrix_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy);

public:
RequestPrimitiveMatrix_template();
RequestPrimitiveMatrix_template(template_sel other_value);
RequestPrimitiveMatrix_template(null_type other_value);
RequestPrimitiveMatrix_template(const RequestPrimitiveMatrix& other_value);
RequestPrimitiveMatrix_template(const OPTIONAL<RequestPrimitiveMatrix>& other_value);
RequestPrimitiveMatrix_template(const RequestPrimitiveMatrix_template& other_value);
~RequestPrimitiveMatrix_template();

void clean_up();
RequestPrimitiveMatrix_template& operator=(template_sel other_value);
RequestPrimitiveMatrix_template& operator=(null_type other_value);
RequestPrimitiveMatrix_template& operator=(const RequestPrimitiveMatrix& other_value);
RequestPrimitiveMatrix_template& operator=(const OPTIONAL<RequestPrimitiveMatrix>& other_value);
RequestPrimitiveMatrix_template& operator=(const RequestPrimitiveMatrix_template& other_value);

RequestPrimitiveList_template& operator[](int index_value);
RequestPrimitiveList_template& operator[](const INTEGER& index_value);
const RequestPrimitiveList_template& operator[](int index_value) const;
const RequestPrimitiveList_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const RequestPrimitiveMatrix& other_value, boolean legacy = FALSE) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
RequestPrimitiveMatrix valueof() const;
RequestPrimitiveMatrix substr(int index, int returncount) const;

RequestPrimitiveMatrix replace(int index, int len, const RequestPrimitiveMatrix_template& repl) const;

RequestPrimitiveMatrix replace(int index, int len, const RequestPrimitiveMatrix& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
RequestPrimitiveMatrix_template& list_item(unsigned int list_index);
void log() const;
void log_match(const RequestPrimitiveMatrix& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean get_istemplate_kind(const char* type) const;
};

class Configurations : public Base_Type { // enum
friend class Configurations_template;
public:
enum enum_type { e__cf01 = 0, e__cf02 = 1, e__cf03 = 2, UNKNOWN_VALUE = 3, UNBOUND_VALUE = 4 };
private:
enum_type enum_value;

public:
Configurations();
Configurations(int other_value);
Configurations(enum_type other_value);
Configurations(const Configurations& other_value);

Configurations& operator=(int other_value);
Configurations& operator=(enum_type other_value);
Configurations& operator=(const Configurations& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Configurations& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Configurations& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Configurations& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Configurations& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Configurations& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Configurations& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Configurations& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class Configurations_template : public Base_Template {
union {
Configurations::enum_type single_value;
struct {
unsigned int n_values;
Configurations_template *list_value;
} value_list;
};

void copy_template(const Configurations_template& other_value);

public:
Configurations_template();
Configurations_template(template_sel other_value);
Configurations_template(int other_value);
Configurations_template(Configurations::enum_type other_value);
Configurations_template(const Configurations& other_value);
Configurations_template(const OPTIONAL<Configurations>& other_value);
Configurations_template(const Configurations_template& other_value);
~Configurations_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Configurations_template& operator=(template_sel other_value);
Configurations_template& operator=(int other_value);
Configurations_template& operator=(Configurations::enum_type other_value);
Configurations_template& operator=(const Configurations& other_value);
Configurations_template& operator=(const OPTIONAL<Configurations>& other_value);
Configurations_template& operator=(const Configurations_template& other_value);

boolean match(Configurations::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const Configurations& other_value, boolean legacy = FALSE) const;
Configurations::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Configurations_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Configurations& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};


/* Function prototypes */

extern boolean operator==(null_type null_value, const RequestPrimitiveList& other_value);
inline boolean operator!=(null_type null_value, const RequestPrimitiveList& other_value) { return !(null_value == other_value); }
extern boolean operator==(null_type null_value, const RequestPrimitiveMatrix& other_value);
inline boolean operator!=(null_type null_value, const RequestPrimitiveMatrix& other_value) { return !(null_value == other_value); }

/* Global variable declarations */

extern const UNIVERSAL_CHARSTRING& c__defaultResourceName;
extern const UNIVERSAL_CHARSTRING& c__defaultGroupResourceName;
extern const UNIVERSAL_CHARSTRING& c__defaultAccessControlPolicyResourceName;
extern const UNIVERSAL_CHARSTRING& c__defaultScheduleResourceName;
extern const UNIVERSAL_CHARSTRING& c__defaultPollingChannelResourceName;
extern const UNIVERSAL_CHARSTRING& c__defaultSubscriptionResourceName;
extern const UNIVERSAL_CHARSTRING& c__defaultContentInstanceResourceName;
extern const UNIVERSAL_CHARSTRING& c__defaultContainerResourceName;
extern const UNIVERSAL_CHARSTRING& c__defaultMgmtObjResourceName;
extern const UNIVERSAL_CHARSTRING& c__defaultAeResourceName;
extern const UNIVERSAL_CHARSTRING& c__defaultLocationPolicyResourceName;
extern const UNIVERSAL_CHARSTRING& c__defaultNodeResourceName;
extern const UNIVERSAL_CHARSTRING& c__aeAuxName;
extern const UNIVERSAL_CHARSTRING& c__acpAuxName;
extern const CHARSTRING& c__invalid__location__update__period;
extern const UNIVERSAL_CHARSTRING& c__resourceShortNameLatest;
extern const UNIVERSAL_CHARSTRING& c__resourceShortNameOldest;
extern const INTEGER& c__C;
extern const INTEGER& c__R;
extern const INTEGER& c__CR;
extern const INTEGER& c__U;
extern const INTEGER& c__CU;
extern const INTEGER& c__RU;
extern const INTEGER& c__CRU;
extern const INTEGER& c__D;
extern const INTEGER& c__CD;
extern const INTEGER& c__RD;
extern const INTEGER& c__CRD;
extern const INTEGER& c__UD;
extern const INTEGER& c__CUD;
extern const INTEGER& c__RUD;
extern const INTEGER& c__CRUD;
extern const INTEGER& c__N;
extern const INTEGER& c__CN;
extern const INTEGER& c__RN;
extern const INTEGER& c__CRN;
extern const INTEGER& c__UN;
extern const INTEGER& c__CUN;
extern const INTEGER& c__RUN;
extern const INTEGER& c__CRUN;
extern const INTEGER& c__DN;
extern const INTEGER& c__CDN;
extern const INTEGER& c__RDN;
extern const INTEGER& c__CRDN;
extern const INTEGER& c__UDN;
extern const INTEGER& c__CUDN;
extern const INTEGER& c__RUDN;
extern const INTEGER& c__CRUDN;
extern const INTEGER& c__Di;
extern const INTEGER& c__CDi;
extern const INTEGER& c__RDi;
extern const INTEGER& c__CRDi;
extern const INTEGER& c__UDi;
extern const INTEGER& c__CUDi;
extern const INTEGER& c__RUDi;
extern const INTEGER& c__CRUDi;
extern const INTEGER& c__DDi;
extern const INTEGER& c__CDDi;
extern const INTEGER& c__RDDi;
extern const INTEGER& c__CRDDi;
extern const INTEGER& c__UDDi;
extern const INTEGER& c__CUDDi;
extern const INTEGER& c__RUDDi;
extern const INTEGER& c__CRUDDi;
extern const INTEGER& c__NDi;
extern const INTEGER& c__CNDi;
extern const INTEGER& c__RNDi;
extern const INTEGER& c__CRNDi;
extern const INTEGER& c__UNDi;
extern const INTEGER& c__CUNDi;
extern const INTEGER& c__RUNDi;
extern const INTEGER& c__CRUNDi;
extern const INTEGER& c__DNDi;
extern const INTEGER& c__CDNDi;
extern const INTEGER& c__RDNDi;
extern const INTEGER& c__CRDNDi;
extern const INTEGER& c__UDNDi;
extern const INTEGER& c__CUDNDi;
extern const INTEGER& c__RUDNDi;
extern const INTEGER& c__CRUDNDi;
extern const XERdescriptor_t ParentID_xer_;
extern const TTCN_Typedescriptor_t ParentID_descr_;
extern const TTCN_Typedescriptor_t RequestPrimitiveList_descr_;
extern const XERdescriptor_t RequestPrimitiveList_0_xer_;
extern const TTCN_Typedescriptor_t RequestPrimitiveList_0_descr_;
extern const TTCN_Typedescriptor_t RequestPrimitiveMatrix_descr_;
extern const TTCN_Typedescriptor_t Configurations_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
