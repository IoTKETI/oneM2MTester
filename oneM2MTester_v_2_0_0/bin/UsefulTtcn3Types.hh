// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for oneM2MTester (martin@ubuntu) on Wed May 31 13:52:14 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef UsefulTtcn3Types_HH
#define UsefulTtcn3Types_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 60100
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef UsefulTtcn3Types_HH
#endif

namespace UsefulTtcn3Types {

/* Forward declarations of classes */

class IDLfixed;
class IDLfixed_template;

} /* end of namespace */

#ifndef UsefulTtcn3Types_HH
#define UsefulTtcn3Types_HH

namespace UsefulTtcn3Types {

/* Type definitions */

typedef INTEGER byte;
typedef INTEGER_template byte_template;
typedef INTEGER unsignedbyte;
typedef INTEGER_template unsignedbyte_template;
typedef INTEGER short_;
typedef INTEGER_template short__template;
typedef INTEGER unsignedshort;
typedef INTEGER_template unsignedshort_template;
typedef INTEGER long_;
typedef INTEGER_template long__template;
typedef INTEGER unsignedlong;
typedef INTEGER_template unsignedlong_template;
typedef INTEGER longlong;
typedef INTEGER_template longlong_template;
typedef INTEGER unsignedlonglong;
typedef INTEGER_template unsignedlonglong_template;
typedef FLOAT IEEE754float;
typedef FLOAT_template IEEE754float_template;
typedef FLOAT IEEE754double;
typedef FLOAT_template IEEE754double_template;
typedef FLOAT IEEE754extfloat;
typedef FLOAT_template IEEE754extfloat_template;
typedef FLOAT IEEE754extdouble;
typedef FLOAT_template IEEE754extdouble_template;
typedef UNIVERSAL_CHARSTRING utf8string;
typedef UNIVERSAL_CHARSTRING_template utf8string_template;
typedef UNIVERSAL_CHARSTRING bmpstring;
typedef UNIVERSAL_CHARSTRING_template bmpstring_template;
typedef UNIVERSAL_CHARSTRING utf16string;
typedef UNIVERSAL_CHARSTRING_template utf16string_template;
typedef UNIVERSAL_CHARSTRING iso8859string;
typedef UNIVERSAL_CHARSTRING_template iso8859string_template;
typedef UNIVERSAL_CHARSTRING uchar;
typedef UNIVERSAL_CHARSTRING_template uchar_template;
typedef BITSTRING bit;
typedef BITSTRING_template bit_template;
typedef HEXSTRING hex;
typedef HEXSTRING_template hex_template;
typedef OCTETSTRING octet;
typedef OCTETSTRING_template octet_template;

/* Class definitions */

class IDLfixed : public Base_Type {
  INTEGER field_digits;
  INTEGER field_scale;
  CHARSTRING field_value__;
public:
  IDLfixed();
  IDLfixed(const INTEGER& par_digits,
    const INTEGER& par_scale,
    const CHARSTRING& par_value__);
  IDLfixed(const IDLfixed& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  IDLfixed& operator=(const IDLfixed& other_value);
  boolean operator==(const IDLfixed& other_value) const;
  inline boolean operator!=(const IDLfixed& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline INTEGER& digits()
    {return field_digits;}
  inline const INTEGER& digits() const
    {return field_digits;}
  inline INTEGER& scale()
    {return field_scale;}
  inline const INTEGER& scale() const
    {return field_scale;}
  inline CHARSTRING& value__()
    {return field_value__;}
  inline const CHARSTRING& value__() const
    {return field_value__;}
  inline int size_of() const
    {return 3;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int,unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns, unsigned int flavor = 0) const;
};

class IDLfixed_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
IDLfixed_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const IDLfixed& other_value);
void copy_template(const IDLfixed_template& other_value);

public:
IDLfixed_template();
IDLfixed_template(template_sel other_value);
IDLfixed_template(const IDLfixed& other_value);
IDLfixed_template(const OPTIONAL<IDLfixed>& other_value);
IDLfixed_template(const IDLfixed_template& other_value);
~IDLfixed_template();
IDLfixed_template& operator=(template_sel other_value);
IDLfixed_template& operator=(const IDLfixed& other_value);
IDLfixed_template& operator=(const OPTIONAL<IDLfixed>& other_value);
IDLfixed_template& operator=(const IDLfixed_template& other_value);
boolean match(const IDLfixed& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
IDLfixed valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
IDLfixed_template& list_item(unsigned int list_index) const;
INTEGER_template& digits();
const INTEGER_template& digits() const;
INTEGER_template& scale();
const INTEGER_template& scale() const;
CHARSTRING_template& value__();
const CHARSTRING_template& value__() const;
int size_of() const;
void log() const;
void log_match(const IDLfixed& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};


/* Global variable declarations */

extern const TTCN_RAWdescriptor_t byte_raw_;
extern const XERdescriptor_t byte_xer_;
extern const TTCN_Typedescriptor_t byte_descr_;
extern const TTCN_RAWdescriptor_t unsignedbyte_raw_;
extern const XERdescriptor_t unsignedbyte_xer_;
extern const TTCN_Typedescriptor_t unsignedbyte_descr_;
extern const TTCN_RAWdescriptor_t short__raw_;
extern const XERdescriptor_t short__xer_;
extern const TTCN_Typedescriptor_t short__descr_;
extern const TTCN_RAWdescriptor_t unsignedshort_raw_;
extern const XERdescriptor_t unsignedshort_xer_;
extern const TTCN_Typedescriptor_t unsignedshort_descr_;
extern const TTCN_RAWdescriptor_t long__raw_;
extern const XERdescriptor_t long__xer_;
extern const TTCN_Typedescriptor_t long__descr_;
extern const TTCN_RAWdescriptor_t unsignedlong_raw_;
extern const XERdescriptor_t unsignedlong_xer_;
extern const TTCN_Typedescriptor_t unsignedlong_descr_;
extern const TTCN_RAWdescriptor_t longlong_raw_;
extern const XERdescriptor_t longlong_xer_;
extern const TTCN_Typedescriptor_t longlong_descr_;
extern const TTCN_RAWdescriptor_t unsignedlonglong_raw_;
extern const XERdescriptor_t unsignedlonglong_xer_;
extern const TTCN_Typedescriptor_t unsignedlonglong_descr_;
extern const TTCN_RAWdescriptor_t IEEE754float_raw_;
extern const XERdescriptor_t IEEE754float_xer_;
extern const TTCN_Typedescriptor_t IEEE754float_descr_;
extern const TTCN_RAWdescriptor_t IEEE754double_raw_;
extern const XERdescriptor_t IEEE754double_xer_;
extern const TTCN_Typedescriptor_t IEEE754double_descr_;
extern const TTCN_RAWdescriptor_t IEEE754extfloat_raw_;
extern const XERdescriptor_t IEEE754extfloat_xer_;
extern const TTCN_Typedescriptor_t IEEE754extfloat_descr_;
extern const TTCN_RAWdescriptor_t IEEE754extdouble_raw_;
extern const XERdescriptor_t IEEE754extdouble_xer_;
extern const TTCN_Typedescriptor_t IEEE754extdouble_descr_;
extern const TTCN_RAWdescriptor_t utf8string_raw_;
extern const XERdescriptor_t utf8string_xer_;
extern const TTCN_Typedescriptor_t utf8string_descr_;
extern const TTCN_RAWdescriptor_t bmpstring_raw_;
extern const XERdescriptor_t bmpstring_xer_;
extern const TTCN_Typedescriptor_t bmpstring_descr_;
extern const TTCN_RAWdescriptor_t utf16string_raw_;
extern const XERdescriptor_t utf16string_xer_;
extern const TTCN_Typedescriptor_t utf16string_descr_;
extern const TTCN_RAWdescriptor_t iso8859string_raw_;
extern const XERdescriptor_t iso8859string_xer_;
extern const TTCN_Typedescriptor_t iso8859string_descr_;
extern const XERdescriptor_t IDLfixed_digits_xer_;
extern const TTCN_Typedescriptor_t IDLfixed_digits_descr_;
extern const XERdescriptor_t IDLfixed_scale_xer_;
extern const TTCN_Typedescriptor_t IDLfixed_scale_descr_;
extern const XERdescriptor_t IDLfixed_value___xer_;
extern const TTCN_Typedescriptor_t IDLfixed_value___descr_;
extern const TTCN_RAWdescriptor_t IDLfixed_raw_;
extern const XERdescriptor_t IDLfixed_xer_;
extern const TTCN_JSONdescriptor_t IDLfixed_json_;
extern const TTCN_Typedescriptor_t IDLfixed_descr_;
extern const XERdescriptor_t uchar_xer_;
extern const TTCN_Typedescriptor_t uchar_descr_;
extern const TTCN_RAWdescriptor_t bit_raw_;
extern const XERdescriptor_t bit_xer_;
extern const TTCN_Typedescriptor_t bit_descr_;
extern const TTCN_RAWdescriptor_t hex_raw_;
extern const XERdescriptor_t hex_xer_;
extern const TTCN_Typedescriptor_t hex_descr_;
extern const TTCN_RAWdescriptor_t octet_raw_;
extern const XERdescriptor_t octet_xer_;
extern const TTCN_Typedescriptor_t octet_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
