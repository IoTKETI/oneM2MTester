// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for oneM2MTester (martin@ubuntu) on Wed May 31 13:52:14 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "OneM2M_TypesAndValues.hh"

namespace OneM2M__TypesAndValues {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const CHARSTRING cs_14(9, "-PT30M10S"),
cs_2(29, "MyAccessControlPolicyResource"),
cs_13(5, "MyAcp"),
cs_12(4, "MyAe"),
cs_9(12, "MyAeResource"),
cs_7(19, "MyContainerResource"),
cs_6(25, "MyContentInstanceResource"),
cs_1(15, "MyGroupResource"),
cs_10(24, "MyLocationPolicyResource"),
cs_8(17, "MyMgmtObjResource"),
cs_11(14, "MyNodeResource"),
cs_4(24, "MyPollingChannelResource"),
cs_0(10, "MyResource"),
cs_3(18, "MyScheduleResource"),
cs_5(22, "MySubscriptionResource"),
cs_15(2, "la"),
cs_16(2, "ol");
static const unsigned char module_checksum[] = { 0x62, 0x29, 0x01, 0x27, 0x3e, 0x42, 0x4f, 0x0a, 0x36, 0xf2, 0x0b, 0x55, 0x5a, 0xc0, 0x74, 0x44 };

/* Global variable definitions */

static UNIVERSAL_CHARSTRING const_c__defaultResourceName;
const UNIVERSAL_CHARSTRING& c__defaultResourceName = const_c__defaultResourceName;
static UNIVERSAL_CHARSTRING const_c__defaultGroupResourceName;
const UNIVERSAL_CHARSTRING& c__defaultGroupResourceName = const_c__defaultGroupResourceName;
static UNIVERSAL_CHARSTRING const_c__defaultAccessControlPolicyResourceName;
const UNIVERSAL_CHARSTRING& c__defaultAccessControlPolicyResourceName = const_c__defaultAccessControlPolicyResourceName;
static UNIVERSAL_CHARSTRING const_c__defaultScheduleResourceName;
const UNIVERSAL_CHARSTRING& c__defaultScheduleResourceName = const_c__defaultScheduleResourceName;
static UNIVERSAL_CHARSTRING const_c__defaultPollingChannelResourceName;
const UNIVERSAL_CHARSTRING& c__defaultPollingChannelResourceName = const_c__defaultPollingChannelResourceName;
static UNIVERSAL_CHARSTRING const_c__defaultSubscriptionResourceName;
const UNIVERSAL_CHARSTRING& c__defaultSubscriptionResourceName = const_c__defaultSubscriptionResourceName;
static UNIVERSAL_CHARSTRING const_c__defaultContentInstanceResourceName;
const UNIVERSAL_CHARSTRING& c__defaultContentInstanceResourceName = const_c__defaultContentInstanceResourceName;
static UNIVERSAL_CHARSTRING const_c__defaultContainerResourceName;
const UNIVERSAL_CHARSTRING& c__defaultContainerResourceName = const_c__defaultContainerResourceName;
static UNIVERSAL_CHARSTRING const_c__defaultMgmtObjResourceName;
const UNIVERSAL_CHARSTRING& c__defaultMgmtObjResourceName = const_c__defaultMgmtObjResourceName;
static UNIVERSAL_CHARSTRING const_c__defaultAeResourceName;
const UNIVERSAL_CHARSTRING& c__defaultAeResourceName = const_c__defaultAeResourceName;
static UNIVERSAL_CHARSTRING const_c__defaultLocationPolicyResourceName;
const UNIVERSAL_CHARSTRING& c__defaultLocationPolicyResourceName = const_c__defaultLocationPolicyResourceName;
static UNIVERSAL_CHARSTRING const_c__defaultNodeResourceName;
const UNIVERSAL_CHARSTRING& c__defaultNodeResourceName = const_c__defaultNodeResourceName;
static UNIVERSAL_CHARSTRING const_c__aeAuxName;
const UNIVERSAL_CHARSTRING& c__aeAuxName = const_c__aeAuxName;
static UNIVERSAL_CHARSTRING const_c__acpAuxName;
const UNIVERSAL_CHARSTRING& c__acpAuxName = const_c__acpAuxName;
static CHARSTRING const_c__invalid__location__update__period;
const CHARSTRING& c__invalid__location__update__period = const_c__invalid__location__update__period;
static UNIVERSAL_CHARSTRING const_c__resourceShortNameLatest;
const UNIVERSAL_CHARSTRING& c__resourceShortNameLatest = const_c__resourceShortNameLatest;
static UNIVERSAL_CHARSTRING const_c__resourceShortNameOldest;
const UNIVERSAL_CHARSTRING& c__resourceShortNameOldest = const_c__resourceShortNameOldest;
static INTEGER const_c__C;
const INTEGER& c__C = const_c__C;
static INTEGER const_c__R;
const INTEGER& c__R = const_c__R;
static INTEGER const_c__CR;
const INTEGER& c__CR = const_c__CR;
static INTEGER const_c__U;
const INTEGER& c__U = const_c__U;
static INTEGER const_c__CU;
const INTEGER& c__CU = const_c__CU;
static INTEGER const_c__RU;
const INTEGER& c__RU = const_c__RU;
static INTEGER const_c__CRU;
const INTEGER& c__CRU = const_c__CRU;
static INTEGER const_c__D;
const INTEGER& c__D = const_c__D;
static INTEGER const_c__CD;
const INTEGER& c__CD = const_c__CD;
static INTEGER const_c__RD;
const INTEGER& c__RD = const_c__RD;
static INTEGER const_c__CRD;
const INTEGER& c__CRD = const_c__CRD;
static INTEGER const_c__UD;
const INTEGER& c__UD = const_c__UD;
static INTEGER const_c__CUD;
const INTEGER& c__CUD = const_c__CUD;
static INTEGER const_c__RUD;
const INTEGER& c__RUD = const_c__RUD;
static INTEGER const_c__CRUD;
const INTEGER& c__CRUD = const_c__CRUD;
static INTEGER const_c__N;
const INTEGER& c__N = const_c__N;
static INTEGER const_c__CN;
const INTEGER& c__CN = const_c__CN;
static INTEGER const_c__RN;
const INTEGER& c__RN = const_c__RN;
static INTEGER const_c__CRN;
const INTEGER& c__CRN = const_c__CRN;
static INTEGER const_c__UN;
const INTEGER& c__UN = const_c__UN;
static INTEGER const_c__CUN;
const INTEGER& c__CUN = const_c__CUN;
static INTEGER const_c__RUN;
const INTEGER& c__RUN = const_c__RUN;
static INTEGER const_c__CRUN;
const INTEGER& c__CRUN = const_c__CRUN;
static INTEGER const_c__DN;
const INTEGER& c__DN = const_c__DN;
static INTEGER const_c__CDN;
const INTEGER& c__CDN = const_c__CDN;
static INTEGER const_c__RDN;
const INTEGER& c__RDN = const_c__RDN;
static INTEGER const_c__CRDN;
const INTEGER& c__CRDN = const_c__CRDN;
static INTEGER const_c__UDN;
const INTEGER& c__UDN = const_c__UDN;
static INTEGER const_c__CUDN;
const INTEGER& c__CUDN = const_c__CUDN;
static INTEGER const_c__RUDN;
const INTEGER& c__RUDN = const_c__RUDN;
static INTEGER const_c__CRUDN;
const INTEGER& c__CRUDN = const_c__CRUDN;
static INTEGER const_c__Di;
const INTEGER& c__Di = const_c__Di;
static INTEGER const_c__CDi;
const INTEGER& c__CDi = const_c__CDi;
static INTEGER const_c__RDi;
const INTEGER& c__RDi = const_c__RDi;
static INTEGER const_c__CRDi;
const INTEGER& c__CRDi = const_c__CRDi;
static INTEGER const_c__UDi;
const INTEGER& c__UDi = const_c__UDi;
static INTEGER const_c__CUDi;
const INTEGER& c__CUDi = const_c__CUDi;
static INTEGER const_c__RUDi;
const INTEGER& c__RUDi = const_c__RUDi;
static INTEGER const_c__CRUDi;
const INTEGER& c__CRUDi = const_c__CRUDi;
static INTEGER const_c__DDi;
const INTEGER& c__DDi = const_c__DDi;
static INTEGER const_c__CDDi;
const INTEGER& c__CDDi = const_c__CDDi;
static INTEGER const_c__RDDi;
const INTEGER& c__RDDi = const_c__RDDi;
static INTEGER const_c__CRDDi;
const INTEGER& c__CRDDi = const_c__CRDDi;
static INTEGER const_c__UDDi;
const INTEGER& c__UDDi = const_c__UDDi;
static INTEGER const_c__CUDDi;
const INTEGER& c__CUDDi = const_c__CUDDi;
static INTEGER const_c__RUDDi;
const INTEGER& c__RUDDi = const_c__RUDDi;
static INTEGER const_c__CRUDDi;
const INTEGER& c__CRUDDi = const_c__CRUDDi;
static INTEGER const_c__NDi;
const INTEGER& c__NDi = const_c__NDi;
static INTEGER const_c__CNDi;
const INTEGER& c__CNDi = const_c__CNDi;
static INTEGER const_c__RNDi;
const INTEGER& c__RNDi = const_c__RNDi;
static INTEGER const_c__CRNDi;
const INTEGER& c__CRNDi = const_c__CRNDi;
static INTEGER const_c__UNDi;
const INTEGER& c__UNDi = const_c__UNDi;
static INTEGER const_c__CUNDi;
const INTEGER& c__CUNDi = const_c__CUNDi;
static INTEGER const_c__RUNDi;
const INTEGER& c__RUNDi = const_c__RUNDi;
static INTEGER const_c__CRUNDi;
const INTEGER& c__CRUNDi = const_c__CRUNDi;
static INTEGER const_c__DNDi;
const INTEGER& c__DNDi = const_c__DNDi;
static INTEGER const_c__CDNDi;
const INTEGER& c__CDNDi = const_c__CDNDi;
static INTEGER const_c__RDNDi;
const INTEGER& c__RDNDi = const_c__RDNDi;
static INTEGER const_c__CRDNDi;
const INTEGER& c__CRDNDi = const_c__CRDNDi;
static INTEGER const_c__UDNDi;
const INTEGER& c__UDNDi = const_c__UDNDi;
static INTEGER const_c__CUDNDi;
const INTEGER& c__CUDNDi = const_c__CUDNDi;
static INTEGER const_c__RUDNDi;
const INTEGER& c__RUDNDi = const_c__RUDNDi;
static INTEGER const_c__CRUDNDi;
const INTEGER& c__CRUDNDi = const_c__CRUDNDi;
const XERdescriptor_t       ParentID_xer_ = { {"ParentID>\n", "ParentID>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 0, 0, NULL, NULL, -1, XSD_ANYURI };
const TTCN_Typedescriptor_t ParentID_descr_ = { "@OneM2M_TypesAndValues.ParentID", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &ParentID_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for RequestPrimitiveList
const TTCN_Typedescriptor_t RequestPrimitiveList_descr_ = { "@OneM2M_TypesAndValues.RequestPrimitiveList", NULL, NULL, NULL, NULL, NULL, &RequestPrimitiveList_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RequestPrimitiveList_0_xer_ = { {"RequestPrimitive>\n", "requestPrimitive>\n"}, {18, 18}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 0, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t RequestPrimitiveList_0_descr_ = { "@OneM2M_TypesAndValues.RequestPrimitiveList.<oftype>", NULL, NULL, NULL, &RequestPrimitiveList_0_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for RequestPrimitiveMatrix
const TTCN_Typedescriptor_t RequestPrimitiveMatrix_descr_ = { "@OneM2M_TypesAndValues.RequestPrimitiveMatrix", NULL, NULL, NULL, NULL, NULL, &RequestPrimitiveList_descr_, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Configurations
const TTCN_Typedescriptor_t Configurations_descr_ = { "@OneM2M_TypesAndValues.Configurations", NULL, NULL, NULL, NULL, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const size_t num_namespaces = 1;
static const namespace_t xml_namespaces[num_namespaces+1] = {
  { "http://www.onem2m.org/xml/protocols", "" },
  { "", "" }
};

TTCN_Module module_object("OneM2M_TypesAndValues", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 1LU, xml_namespaces, post_init_module, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_1,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */


const OneM2M__Types::RequestPrimitive RequestPrimitiveList::UNBOUND_ELEM;
RequestPrimitiveList::RequestPrimitiveList()
{
val_ptr = NULL;
}

RequestPrimitiveList::RequestPrimitiveList(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

RequestPrimitiveList::RequestPrimitiveList(const RequestPrimitiveList& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

RequestPrimitiveList::~RequestPrimitiveList()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void RequestPrimitiveList::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

RequestPrimitiveList& RequestPrimitiveList::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

RequestPrimitiveList& RequestPrimitiveList::operator=(const RequestPrimitiveList& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean RequestPrimitiveList::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
return val_ptr->n_elements == 0 ;
}

boolean RequestPrimitiveList::operator==(const RequestPrimitiveList& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

OneM2M__Types::RequestPrimitive& RequestPrimitiveList::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @OneM2M_TypesAndValues.RequestPrimitiveList using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (OneM2M__Types::RequestPrimitive**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new OneM2M__Types::RequestPrimitive(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new OneM2M__Types::RequestPrimitive;
}
return *val_ptr->value_elements[index_value];
}

OneM2M__Types::RequestPrimitive& RequestPrimitiveList::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
return (*this)[(int)index_value];
}

const OneM2M__Types::RequestPrimitive& RequestPrimitiveList::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
if (index_value < 0) TTCN_error("Accessing an element of type @OneM2M_TypesAndValues.RequestPrimitiveList using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @OneM2M_TypesAndValues.RequestPrimitiveList: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const OneM2M__Types::RequestPrimitive& RequestPrimitiveList::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
return (*this)[(int)index_value];
}

RequestPrimitiveList RequestPrimitiveList::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

RequestPrimitiveList RequestPrimitiveList::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

RequestPrimitiveList RequestPrimitiveList::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

RequestPrimitiveList RequestPrimitiveList::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
RequestPrimitiveList ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new OneM2M__Types::RequestPrimitive(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

RequestPrimitiveList RequestPrimitiveList::operator+(const RequestPrimitiveList& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @OneM2M_TypesAndValues.RequestPrimitiveList concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
RequestPrimitiveList ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new OneM2M__Types::RequestPrimitive(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new OneM2M__Types::RequestPrimitive(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

RequestPrimitiveList RequestPrimitiveList::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@OneM2M_TypesAndValues.RequestPrimitiveList","element");
RequestPrimitiveList ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new OneM2M__Types::RequestPrimitive(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

RequestPrimitiveList RequestPrimitiveList::replace(int index, int len, const RequestPrimitiveList& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
check_replace_arguments(val_ptr->n_elements, index, len, "@OneM2M_TypesAndValues.RequestPrimitiveList","element");
RequestPrimitiveList ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new OneM2M__Types::RequestPrimitive(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new OneM2M__Types::RequestPrimitive(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new OneM2M__Types::RequestPrimitive(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

RequestPrimitiveList RequestPrimitiveList::replace(int index, int len, const RequestPrimitiveList_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void RequestPrimitiveList::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (OneM2M__Types::RequestPrimitive**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new OneM2M__Types::RequestPrimitive(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (OneM2M__Types::RequestPrimitive**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @OneM2M_TypesAndValues.RequestPrimitiveList: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (OneM2M__Types::RequestPrimitive**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean RequestPrimitiveList::is_value() const
{
if (val_ptr == NULL) return FALSE;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int RequestPrimitiveList::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
return val_ptr->n_elements;
}

int RequestPrimitiveList::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void RequestPrimitiveList::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void RequestPrimitiveList::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
          if (!(*this)[i].is_bound()) {
            delete val_ptr->value_elements[i];
            val_ptr->value_elements[i] = NULL;
          }
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
        if (!(*this)[curr->get_id()->get_index()].is_bound()) {
          delete val_ptr->value_elements[curr->get_id()->get_index()];
          val_ptr->value_elements[curr->get_id()->get_index()] = NULL;
        }
      }
      break;
    default:
      param.type_error("record of value", "@OneM2M_TypesAndValues.RequestPrimitiveList");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@OneM2M_TypesAndValues.RequestPrimitiveList");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

void RequestPrimitiveList::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void RequestPrimitiveList::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void RequestPrimitiveList::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
val_ptr->value_elements = (OneM2M__Types::RequestPrimitive**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new OneM2M__Types::RequestPrimitive;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void RequestPrimitiveList_template::copy_value(const RequestPrimitiveList& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @OneM2M_TypesAndValues.RequestPrimitiveList with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (OneM2M__Types::RequestPrimitive_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new OneM2M__Types::RequestPrimitive_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new OneM2M__Types::RequestPrimitive_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void RequestPrimitiveList_template::copy_template(const RequestPrimitiveList_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (OneM2M__Types::RequestPrimitive_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new OneM2M__Types::RequestPrimitive_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new OneM2M__Types::RequestPrimitive_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new RequestPrimitiveList_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
break;
}
set_selection(other_value);
}

boolean RequestPrimitiveList_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const RequestPrimitiveList_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const RequestPrimitiveList*)value_ptr)[value_index], legacy);
else return ((const RequestPrimitiveList_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

RequestPrimitiveList_template::RequestPrimitiveList_template()
{
}

RequestPrimitiveList_template::RequestPrimitiveList_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

RequestPrimitiveList_template::RequestPrimitiveList_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

RequestPrimitiveList_template::RequestPrimitiveList_template(const RequestPrimitiveList& other_value)
{
copy_value(other_value);
}

RequestPrimitiveList_template::RequestPrimitiveList_template(const OPTIONAL<RequestPrimitiveList>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RequestPrimitiveList&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @OneM2M_TypesAndValues.RequestPrimitiveList from an unbound optional field.");
}
}

RequestPrimitiveList_template::RequestPrimitiveList_template(const RequestPrimitiveList_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

RequestPrimitiveList_template::~RequestPrimitiveList_template()
{
clean_up();
}

void RequestPrimitiveList_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

RequestPrimitiveList_template& RequestPrimitiveList_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

RequestPrimitiveList_template& RequestPrimitiveList_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

RequestPrimitiveList_template& RequestPrimitiveList_template::operator=(const RequestPrimitiveList& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

RequestPrimitiveList_template& RequestPrimitiveList_template::operator=(const OPTIONAL<RequestPrimitiveList>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RequestPrimitiveList&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
}
return *this;
}

RequestPrimitiveList_template& RequestPrimitiveList_template::operator=(const RequestPrimitiveList_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

OneM2M__Types::RequestPrimitive_template& RequestPrimitiveList_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @OneM2M_TypesAndValues.RequestPrimitiveList using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @OneM2M_TypesAndValues.RequestPrimitiveList.");
    break;
}
return *single_value.value_elements[index_value];
}

OneM2M__Types::RequestPrimitive_template& RequestPrimitiveList_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
return (*this)[(int)index_value];
}

const OneM2M__Types::RequestPrimitive_template& RequestPrimitiveList_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @OneM2M_TypesAndValues.RequestPrimitiveList using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @OneM2M_TypesAndValues.RequestPrimitiveList.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @OneM2M_TypesAndValues.RequestPrimitiveList: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const OneM2M__Types::RequestPrimitive_template& RequestPrimitiveList_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
return (*this)[(int)index_value];
}

void RequestPrimitiveList_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (OneM2M__Types::RequestPrimitive_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new OneM2M__Types::RequestPrimitive_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new OneM2M__Types::RequestPrimitive_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (OneM2M__Types::RequestPrimitive_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int RequestPrimitiveList_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int RequestPrimitiveList_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @OneM2M_TypesAndValues.RequestPrimitiveList which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @OneM2M_TypesAndValues.RequestPrimitiveList containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @OneM2M_TypesAndValues.RequestPrimitiveList containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @OneM2M_TypesAndValues.RequestPrimitiveList containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @OneM2M_TypesAndValues.RequestPrimitiveList containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @OneM2M_TypesAndValues.RequestPrimitiveList containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @OneM2M_TypesAndValues.RequestPrimitiveList.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @OneM2M_TypesAndValues.RequestPrimitiveList");
}

boolean RequestPrimitiveList_template::match(const RequestPrimitiveList& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
}
return FALSE;
}

boolean RequestPrimitiveList_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return FALSE;
return TRUE;
}

RequestPrimitiveList RequestPrimitiveList_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
RequestPrimitiveList ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

RequestPrimitiveList RequestPrimitiveList_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

RequestPrimitiveList RequestPrimitiveList_template::replace(int index, int len, const RequestPrimitiveList_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

RequestPrimitiveList RequestPrimitiveList_template::replace(int index, int len, const RequestPrimitiveList& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void RequestPrimitiveList_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new RequestPrimitiveList_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
}
set_selection(template_type);
}

RequestPrimitiveList_template& RequestPrimitiveList_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
return value_list.list_value[list_index];
}

void RequestPrimitiveList_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void RequestPrimitiveList_template::log_match(const RequestPrimitiveList& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void RequestPrimitiveList_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
}
}

void RequestPrimitiveList_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
single_value.value_elements = (OneM2M__Types::RequestPrimitive_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new OneM2M__Types::RequestPrimitive_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new RequestPrimitiveList_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
}
}

boolean RequestPrimitiveList_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean RequestPrimitiveList_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void RequestPrimitiveList_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    RequestPrimitiveList_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@OneM2M_TypesAndValues.RequestPrimitiveList");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void RequestPrimitiveList_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@OneM2M_TypesAndValues.RequestPrimitiveList");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@OneM2M_TypesAndValues.RequestPrimitiveList");
}

boolean RequestPrimitiveList_template::get_istemplate_kind(const char* type) const {
if (!strcmp(type, "AnyElement")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_VALUE) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "AnyElementsOrNone")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_OR_OMIT) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "permutation")) {
  return number_of_permutations;
} else if (!strcmp(type, "length")) {
  return length_restriction_type != NO_LENGTH_RESTRICTION;
} else {
  return Base_Template::get_istemplate_kind(type);
}
}

const RequestPrimitiveList RequestPrimitiveMatrix::UNBOUND_ELEM;
RequestPrimitiveMatrix::RequestPrimitiveMatrix()
{
val_ptr = NULL;
}

RequestPrimitiveMatrix::RequestPrimitiveMatrix(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

RequestPrimitiveMatrix::RequestPrimitiveMatrix(const RequestPrimitiveMatrix& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

RequestPrimitiveMatrix::~RequestPrimitiveMatrix()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void RequestPrimitiveMatrix::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

RequestPrimitiveMatrix& RequestPrimitiveMatrix::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

RequestPrimitiveMatrix& RequestPrimitiveMatrix::operator=(const RequestPrimitiveMatrix& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean RequestPrimitiveMatrix::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
return val_ptr->n_elements == 0 ;
}

boolean RequestPrimitiveMatrix::operator==(const RequestPrimitiveMatrix& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

RequestPrimitiveList& RequestPrimitiveMatrix::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (RequestPrimitiveList**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new RequestPrimitiveList(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new RequestPrimitiveList;
}
return *val_ptr->value_elements[index_value];
}

RequestPrimitiveList& RequestPrimitiveMatrix::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
return (*this)[(int)index_value];
}

const RequestPrimitiveList& RequestPrimitiveMatrix::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
if (index_value < 0) TTCN_error("Accessing an element of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const RequestPrimitiveList& RequestPrimitiveMatrix::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
return (*this)[(int)index_value];
}

RequestPrimitiveMatrix RequestPrimitiveMatrix::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

RequestPrimitiveMatrix RequestPrimitiveMatrix::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

RequestPrimitiveMatrix RequestPrimitiveMatrix::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

RequestPrimitiveMatrix RequestPrimitiveMatrix::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
RequestPrimitiveMatrix ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new RequestPrimitiveList(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

RequestPrimitiveMatrix RequestPrimitiveMatrix::operator+(const RequestPrimitiveMatrix& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @OneM2M_TypesAndValues.RequestPrimitiveMatrix concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
RequestPrimitiveMatrix ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new RequestPrimitiveList(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new RequestPrimitiveList(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

RequestPrimitiveMatrix RequestPrimitiveMatrix::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@OneM2M_TypesAndValues.RequestPrimitiveMatrix","element");
RequestPrimitiveMatrix ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new RequestPrimitiveList(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

RequestPrimitiveMatrix RequestPrimitiveMatrix::replace(int index, int len, const RequestPrimitiveMatrix& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
check_replace_arguments(val_ptr->n_elements, index, len, "@OneM2M_TypesAndValues.RequestPrimitiveMatrix","element");
RequestPrimitiveMatrix ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new RequestPrimitiveList(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new RequestPrimitiveList(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new RequestPrimitiveList(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

RequestPrimitiveMatrix RequestPrimitiveMatrix::replace(int index, int len, const RequestPrimitiveMatrix_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void RequestPrimitiveMatrix::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (RequestPrimitiveList**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new RequestPrimitiveList(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (RequestPrimitiveList**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (RequestPrimitiveList**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean RequestPrimitiveMatrix::is_value() const
{
if (val_ptr == NULL) return FALSE;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int RequestPrimitiveMatrix::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
return val_ptr->n_elements;
}

int RequestPrimitiveMatrix::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void RequestPrimitiveMatrix::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void RequestPrimitiveMatrix::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
          if (!(*this)[i].is_bound()) {
            delete val_ptr->value_elements[i];
            val_ptr->value_elements[i] = NULL;
          }
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
        if (!(*this)[curr->get_id()->get_index()].is_bound()) {
          delete val_ptr->value_elements[curr->get_id()->get_index()];
          val_ptr->value_elements[curr->get_id()->get_index()] = NULL;
        }
      }
      break;
    default:
      param.type_error("record of value", "@OneM2M_TypesAndValues.RequestPrimitiveMatrix");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@OneM2M_TypesAndValues.RequestPrimitiveMatrix");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

void RequestPrimitiveMatrix::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void RequestPrimitiveMatrix::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void RequestPrimitiveMatrix::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
val_ptr->value_elements = (RequestPrimitiveList**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new RequestPrimitiveList;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void RequestPrimitiveMatrix_template::copy_value(const RequestPrimitiveMatrix& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (RequestPrimitiveList_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new RequestPrimitiveList_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new RequestPrimitiveList_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void RequestPrimitiveMatrix_template::copy_template(const RequestPrimitiveMatrix_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (RequestPrimitiveList_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new RequestPrimitiveList_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new RequestPrimitiveList_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new RequestPrimitiveMatrix_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
break;
}
set_selection(other_value);
}

boolean RequestPrimitiveMatrix_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const RequestPrimitiveMatrix_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const RequestPrimitiveMatrix*)value_ptr)[value_index], legacy);
else return ((const RequestPrimitiveMatrix_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

RequestPrimitiveMatrix_template::RequestPrimitiveMatrix_template()
{
}

RequestPrimitiveMatrix_template::RequestPrimitiveMatrix_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

RequestPrimitiveMatrix_template::RequestPrimitiveMatrix_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

RequestPrimitiveMatrix_template::RequestPrimitiveMatrix_template(const RequestPrimitiveMatrix& other_value)
{
copy_value(other_value);
}

RequestPrimitiveMatrix_template::RequestPrimitiveMatrix_template(const OPTIONAL<RequestPrimitiveMatrix>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RequestPrimitiveMatrix&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix from an unbound optional field.");
}
}

RequestPrimitiveMatrix_template::RequestPrimitiveMatrix_template(const RequestPrimitiveMatrix_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

RequestPrimitiveMatrix_template::~RequestPrimitiveMatrix_template()
{
clean_up();
}

void RequestPrimitiveMatrix_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

RequestPrimitiveMatrix_template& RequestPrimitiveMatrix_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

RequestPrimitiveMatrix_template& RequestPrimitiveMatrix_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

RequestPrimitiveMatrix_template& RequestPrimitiveMatrix_template::operator=(const RequestPrimitiveMatrix& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

RequestPrimitiveMatrix_template& RequestPrimitiveMatrix_template::operator=(const OPTIONAL<RequestPrimitiveMatrix>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RequestPrimitiveMatrix&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
}
return *this;
}

RequestPrimitiveMatrix_template& RequestPrimitiveMatrix_template::operator=(const RequestPrimitiveMatrix_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

RequestPrimitiveList_template& RequestPrimitiveMatrix_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @OneM2M_TypesAndValues.RequestPrimitiveMatrix using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
    break;
}
return *single_value.value_elements[index_value];
}

RequestPrimitiveList_template& RequestPrimitiveMatrix_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
return (*this)[(int)index_value];
}

const RequestPrimitiveList_template& RequestPrimitiveMatrix_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @OneM2M_TypesAndValues.RequestPrimitiveMatrix using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const RequestPrimitiveList_template& RequestPrimitiveMatrix_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
return (*this)[(int)index_value];
}

void RequestPrimitiveMatrix_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (RequestPrimitiveList_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new RequestPrimitiveList_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new RequestPrimitiveList_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (RequestPrimitiveList_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int RequestPrimitiveMatrix_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int RequestPrimitiveMatrix_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix");
}

boolean RequestPrimitiveMatrix_template::match(const RequestPrimitiveMatrix& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
}
return FALSE;
}

boolean RequestPrimitiveMatrix_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return FALSE;
return TRUE;
}

RequestPrimitiveMatrix RequestPrimitiveMatrix_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
RequestPrimitiveMatrix ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

RequestPrimitiveMatrix RequestPrimitiveMatrix_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

RequestPrimitiveMatrix RequestPrimitiveMatrix_template::replace(int index, int len, const RequestPrimitiveMatrix_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

RequestPrimitiveMatrix RequestPrimitiveMatrix_template::replace(int index, int len, const RequestPrimitiveMatrix& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void RequestPrimitiveMatrix_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new RequestPrimitiveMatrix_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
}
set_selection(template_type);
}

RequestPrimitiveMatrix_template& RequestPrimitiveMatrix_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
return value_list.list_value[list_index];
}

void RequestPrimitiveMatrix_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void RequestPrimitiveMatrix_template::log_match(const RequestPrimitiveMatrix& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void RequestPrimitiveMatrix_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
}
}

void RequestPrimitiveMatrix_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
single_value.value_elements = (RequestPrimitiveList_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new RequestPrimitiveList_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new RequestPrimitiveMatrix_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
}
}

boolean RequestPrimitiveMatrix_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean RequestPrimitiveMatrix_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void RequestPrimitiveMatrix_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    RequestPrimitiveMatrix_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@OneM2M_TypesAndValues.RequestPrimitiveMatrix");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void RequestPrimitiveMatrix_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@OneM2M_TypesAndValues.RequestPrimitiveMatrix");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@OneM2M_TypesAndValues.RequestPrimitiveMatrix");
}

boolean RequestPrimitiveMatrix_template::get_istemplate_kind(const char* type) const {
if (!strcmp(type, "AnyElement")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_VALUE) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "AnyElementsOrNone")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_OR_OMIT) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "permutation")) {
  return number_of_permutations;
} else if (!strcmp(type, "length")) {
  return length_restriction_type != NO_LENGTH_RESTRICTION;
} else {
  return Base_Template::get_istemplate_kind(type);
}
}
Configurations::Configurations()
{
enum_value = UNBOUND_VALUE;
}

Configurations::Configurations(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @OneM2M_TypesAndValues.Configurations with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Configurations::Configurations(enum_type other_value)
{
enum_value = other_value;
}

Configurations::Configurations(const Configurations& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @OneM2M_TypesAndValues.Configurations.");
enum_value = other_value.enum_value;
}

Configurations& Configurations::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @OneM2M_TypesAndValues.Configurations.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Configurations& Configurations::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Configurations& Configurations::operator=(const Configurations& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @OneM2M_TypesAndValues.Configurations.");
enum_value = other_value.enum_value;
return *this;
}

boolean Configurations::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @OneM2M_TypesAndValues.Configurations.");
return enum_value == other_value;
}

boolean Configurations::operator==(const Configurations& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @OneM2M_TypesAndValues.Configurations.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @OneM2M_TypesAndValues.Configurations.");
return enum_value == other_value.enum_value;
}

boolean Configurations::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @OneM2M_TypesAndValues.Configurations.");
return enum_value < other_value;
}

boolean Configurations::operator<(const Configurations& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @OneM2M_TypesAndValues.Configurations.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @OneM2M_TypesAndValues.Configurations.");
return enum_value < other_value.enum_value;
}

boolean Configurations::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @OneM2M_TypesAndValues.Configurations.");
return enum_value > other_value;
}

boolean Configurations::operator>(const Configurations& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @OneM2M_TypesAndValues.Configurations.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @OneM2M_TypesAndValues.Configurations.");
return enum_value > other_value.enum_value;
}

const char *Configurations::enum_to_str(enum_type enum_par)
{
switch (enum_par) {
case e__cf01: return "e_cf01";
case e__cf02: return "e_cf02";
case e__cf03: return "e_cf03";
default: return "<unknown>";
}
}

Configurations::enum_type Configurations::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "e_cf01")) return e__cf01;
else if (!strcmp(str_par, "e_cf02")) return e__cf02;
else if (!strcmp(str_par, "e_cf03")) return e__cf03;
else return UNKNOWN_VALUE;
}

boolean Configurations::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
case 2:
return TRUE;
default:
return FALSE;
}
}

int Configurations::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @OneM2M_TypesAndValues.Configurations.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Configurations::enum2int(const Configurations& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @OneM2M_TypesAndValues.Configurations.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

void Configurations::int2enum(int int_val)
{
if (!is_valid_enum(int_val)) TTCN_error("Assigning invalid numeric value %d to a variable of enumerated type @OneM2M_TypesAndValues.Configurations.", int_val);
enum_value = (enum_type)int_val;
}

Configurations::operator Configurations::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @OneM2M_TypesAndValues.Configurations.");
return enum_value;
}

void Configurations::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Configurations::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@OneM2M_TypesAndValues.Configurations");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
    param.error("Invalid enumerated value for type @OneM2M_TypesAndValues.Configurations.");
  }
}

void Configurations::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @OneM2M_TypesAndValues.Configurations.");
text_buf.push_int(enum_value);
}

void Configurations::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @OneM2M_TypesAndValues.Configurations.", enum_value);
}

void Configurations_template::copy_template(const Configurations_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Configurations_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @OneM2M_TypesAndValues.Configurations.");
}
}

Configurations_template::Configurations_template()
{
}

Configurations_template::Configurations_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Configurations_template::Configurations_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Configurations::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @OneM2M_TypesAndValues.Configurations with unknown numeric value %d.", other_value);
single_value = (Configurations::enum_type)other_value;
}

Configurations_template::Configurations_template(Configurations::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Configurations_template::Configurations_template(const Configurations& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Configurations::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @OneM2M_TypesAndValues.Configurations.");
single_value = other_value.enum_value;
}

Configurations_template::Configurations_template(const OPTIONAL<Configurations>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Configurations::enum_type)(const Configurations&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @OneM2M_TypesAndValues.Configurations from an unbound optional field.");
}
}

Configurations_template::Configurations_template(const Configurations_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Configurations_template::~Configurations_template()
{
clean_up();
}

boolean Configurations_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Configurations_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Configurations::UNBOUND_VALUE;
}

void Configurations_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Configurations_template& Configurations_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Configurations_template& Configurations_template::operator=(int other_value)
{
if (!Configurations::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @OneM2M_TypesAndValues.Configurations.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Configurations::enum_type)other_value;
return *this;
}

Configurations_template& Configurations_template::operator=(Configurations::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Configurations_template& Configurations_template::operator=(const Configurations& other_value)
{
if (other_value.enum_value == Configurations::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @OneM2M_TypesAndValues.Configurations to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Configurations_template& Configurations_template::operator=(const OPTIONAL<Configurations>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Configurations::enum_type)(const Configurations&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @OneM2M_TypesAndValues.Configurations.");
}
return *this;
}

Configurations_template& Configurations_template::operator=(const Configurations_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Configurations_template::match(Configurations::enum_type other_value, boolean) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @OneM2M_TypesAndValues.Configurations.");
}
return FALSE;
}

boolean Configurations_template::match(const Configurations& other_value, boolean) const
{
if (other_value.enum_value == Configurations::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @OneM2M_TypesAndValues.Configurations with an unbound value.");
return match(other_value.enum_value);
}

Configurations::enum_type Configurations_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @OneM2M_TypesAndValues.Configurations.");
return single_value;
}

void Configurations_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @OneM2M_TypesAndValues.Configurations.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Configurations_template[list_length];
}

Configurations_template& Configurations_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @OneM2M_TypesAndValues.Configurations.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @OneM2M_TypesAndValues.Configurations.");
return value_list.list_value[list_index];
}

void Configurations_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Configurations::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Configurations_template::log_match(const Configurations& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Configurations_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @OneM2M_TypesAndValues.Configurations.");
}
}

void Configurations_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Configurations::enum_type)text_buf.pull_int().get_val();
if (!Configurations::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @OneM2M_TypesAndValues.Configurations.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Configurations_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @OneM2M_TypesAndValues.Configurations.");
}
}

boolean Configurations_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Configurations_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void Configurations_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Configurations_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Enumerated: {
    Configurations::enum_type enum_val = Configurations::str_to_enum(m_p->get_enumerated());
    if (!Configurations::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @OneM2M_TypesAndValues.Configurations.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@OneM2M_TypesAndValues.Configurations");
  }
  is_ifpresent = param.get_ifpresent();
}

void Configurations_template::check_restriction(template_res t_res, const char* t_name,
boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@OneM2M_TypesAndValues.Configurations");
}


/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const RequestPrimitiveList& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveList.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const RequestPrimitiveMatrix& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @OneM2M_TypesAndValues.RequestPrimitiveMatrix.");
return other_value.val_ptr->n_elements == 0;
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("OneM2M_TypesAndValues.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "OneM2M_TypesAndValues");
OneM2M__Types::module_object.pre_init_module();
current_location.update_lineno(20);
/* OneM2M_TypesAndValues.ttcn, line 20 */
const_c__defaultResourceName = cs_0;
current_location.update_lineno(21);
/* OneM2M_TypesAndValues.ttcn, line 21 */
const_c__defaultGroupResourceName = cs_1;
current_location.update_lineno(22);
/* OneM2M_TypesAndValues.ttcn, line 22 */
const_c__defaultAccessControlPolicyResourceName = cs_2;
current_location.update_lineno(23);
/* OneM2M_TypesAndValues.ttcn, line 23 */
const_c__defaultScheduleResourceName = cs_3;
current_location.update_lineno(24);
/* OneM2M_TypesAndValues.ttcn, line 24 */
const_c__defaultPollingChannelResourceName = cs_4;
current_location.update_lineno(25);
/* OneM2M_TypesAndValues.ttcn, line 25 */
const_c__defaultSubscriptionResourceName = cs_5;
current_location.update_lineno(26);
/* OneM2M_TypesAndValues.ttcn, line 26 */
const_c__defaultContentInstanceResourceName = cs_6;
current_location.update_lineno(27);
/* OneM2M_TypesAndValues.ttcn, line 27 */
const_c__defaultContainerResourceName = cs_7;
current_location.update_lineno(28);
/* OneM2M_TypesAndValues.ttcn, line 28 */
const_c__defaultMgmtObjResourceName = cs_8;
current_location.update_lineno(29);
/* OneM2M_TypesAndValues.ttcn, line 29 */
const_c__defaultAeResourceName = cs_9;
current_location.update_lineno(30);
/* OneM2M_TypesAndValues.ttcn, line 30 */
const_c__defaultLocationPolicyResourceName = cs_10;
current_location.update_lineno(31);
/* OneM2M_TypesAndValues.ttcn, line 31 */
const_c__defaultNodeResourceName = cs_11;
current_location.update_lineno(32);
/* OneM2M_TypesAndValues.ttcn, line 32 */
const_c__aeAuxName = cs_12;
current_location.update_lineno(33);
/* OneM2M_TypesAndValues.ttcn, line 33 */
const_c__acpAuxName = cs_13;
current_location.update_lineno(34);
/* OneM2M_TypesAndValues.ttcn, line 34 */
const_c__invalid__location__update__period = cs_14;
current_location.update_lineno(35);
/* OneM2M_TypesAndValues.ttcn, line 35 */
const_c__resourceShortNameLatest = cs_15;
current_location.update_lineno(36);
/* OneM2M_TypesAndValues.ttcn, line 36 */
const_c__resourceShortNameOldest = cs_16;
current_location.update_lineno(39);
/* OneM2M_TypesAndValues.ttcn, line 39 */
const_c__C = 1;
current_location.update_lineno(40);
/* OneM2M_TypesAndValues.ttcn, line 40 */
const_c__R = 2;
current_location.update_lineno(41);
/* OneM2M_TypesAndValues.ttcn, line 41 */
const_c__CR = 3;
current_location.update_lineno(42);
/* OneM2M_TypesAndValues.ttcn, line 42 */
const_c__U = 4;
current_location.update_lineno(43);
/* OneM2M_TypesAndValues.ttcn, line 43 */
const_c__CU = 5;
current_location.update_lineno(44);
/* OneM2M_TypesAndValues.ttcn, line 44 */
const_c__RU = 6;
current_location.update_lineno(45);
/* OneM2M_TypesAndValues.ttcn, line 45 */
const_c__CRU = 7;
current_location.update_lineno(46);
/* OneM2M_TypesAndValues.ttcn, line 46 */
const_c__D = 8;
current_location.update_lineno(47);
/* OneM2M_TypesAndValues.ttcn, line 47 */
const_c__CD = 9;
current_location.update_lineno(48);
/* OneM2M_TypesAndValues.ttcn, line 48 */
const_c__RD = 10;
current_location.update_lineno(49);
/* OneM2M_TypesAndValues.ttcn, line 49 */
const_c__CRD = 11;
current_location.update_lineno(50);
/* OneM2M_TypesAndValues.ttcn, line 50 */
const_c__UD = 12;
current_location.update_lineno(51);
/* OneM2M_TypesAndValues.ttcn, line 51 */
const_c__CUD = 13;
current_location.update_lineno(52);
/* OneM2M_TypesAndValues.ttcn, line 52 */
const_c__RUD = 14;
current_location.update_lineno(53);
/* OneM2M_TypesAndValues.ttcn, line 53 */
const_c__CRUD = 15;
current_location.update_lineno(54);
/* OneM2M_TypesAndValues.ttcn, line 54 */
const_c__N = 16;
current_location.update_lineno(55);
/* OneM2M_TypesAndValues.ttcn, line 55 */
const_c__CN = 17;
current_location.update_lineno(56);
/* OneM2M_TypesAndValues.ttcn, line 56 */
const_c__RN = 18;
current_location.update_lineno(57);
/* OneM2M_TypesAndValues.ttcn, line 57 */
const_c__CRN = 19;
current_location.update_lineno(58);
/* OneM2M_TypesAndValues.ttcn, line 58 */
const_c__UN = 20;
current_location.update_lineno(59);
/* OneM2M_TypesAndValues.ttcn, line 59 */
const_c__CUN = 21;
current_location.update_lineno(60);
/* OneM2M_TypesAndValues.ttcn, line 60 */
const_c__RUN = 22;
current_location.update_lineno(61);
/* OneM2M_TypesAndValues.ttcn, line 61 */
const_c__CRUN = 23;
current_location.update_lineno(62);
/* OneM2M_TypesAndValues.ttcn, line 62 */
const_c__DN = 24;
current_location.update_lineno(63);
/* OneM2M_TypesAndValues.ttcn, line 63 */
const_c__CDN = 25;
current_location.update_lineno(64);
/* OneM2M_TypesAndValues.ttcn, line 64 */
const_c__RDN = 26;
current_location.update_lineno(65);
/* OneM2M_TypesAndValues.ttcn, line 65 */
const_c__CRDN = 27;
current_location.update_lineno(66);
/* OneM2M_TypesAndValues.ttcn, line 66 */
const_c__UDN = 28;
current_location.update_lineno(67);
/* OneM2M_TypesAndValues.ttcn, line 67 */
const_c__CUDN = 29;
current_location.update_lineno(68);
/* OneM2M_TypesAndValues.ttcn, line 68 */
const_c__RUDN = 30;
current_location.update_lineno(69);
/* OneM2M_TypesAndValues.ttcn, line 69 */
const_c__CRUDN = 31;
current_location.update_lineno(70);
/* OneM2M_TypesAndValues.ttcn, line 70 */
const_c__Di = 32;
current_location.update_lineno(71);
/* OneM2M_TypesAndValues.ttcn, line 71 */
const_c__CDi = 33;
current_location.update_lineno(72);
/* OneM2M_TypesAndValues.ttcn, line 72 */
const_c__RDi = 34;
current_location.update_lineno(73);
/* OneM2M_TypesAndValues.ttcn, line 73 */
const_c__CRDi = 35;
current_location.update_lineno(74);
/* OneM2M_TypesAndValues.ttcn, line 74 */
const_c__UDi = 36;
current_location.update_lineno(75);
/* OneM2M_TypesAndValues.ttcn, line 75 */
const_c__CUDi = 37;
current_location.update_lineno(76);
/* OneM2M_TypesAndValues.ttcn, line 76 */
const_c__RUDi = 38;
current_location.update_lineno(77);
/* OneM2M_TypesAndValues.ttcn, line 77 */
const_c__CRUDi = 39;
current_location.update_lineno(78);
/* OneM2M_TypesAndValues.ttcn, line 78 */
const_c__DDi = 40;
current_location.update_lineno(79);
/* OneM2M_TypesAndValues.ttcn, line 79 */
const_c__CDDi = 41;
current_location.update_lineno(80);
/* OneM2M_TypesAndValues.ttcn, line 80 */
const_c__RDDi = 42;
current_location.update_lineno(81);
/* OneM2M_TypesAndValues.ttcn, line 81 */
const_c__CRDDi = 43;
current_location.update_lineno(82);
/* OneM2M_TypesAndValues.ttcn, line 82 */
const_c__UDDi = 44;
current_location.update_lineno(83);
/* OneM2M_TypesAndValues.ttcn, line 83 */
const_c__CUDDi = 45;
current_location.update_lineno(84);
/* OneM2M_TypesAndValues.ttcn, line 84 */
const_c__RUDDi = 46;
current_location.update_lineno(85);
/* OneM2M_TypesAndValues.ttcn, line 85 */
const_c__CRUDDi = 47;
current_location.update_lineno(86);
/* OneM2M_TypesAndValues.ttcn, line 86 */
const_c__NDi = 48;
current_location.update_lineno(87);
/* OneM2M_TypesAndValues.ttcn, line 87 */
const_c__CNDi = 49;
current_location.update_lineno(88);
/* OneM2M_TypesAndValues.ttcn, line 88 */
const_c__RNDi = 50;
current_location.update_lineno(89);
/* OneM2M_TypesAndValues.ttcn, line 89 */
const_c__CRNDi = 51;
current_location.update_lineno(90);
/* OneM2M_TypesAndValues.ttcn, line 90 */
const_c__UNDi = 52;
current_location.update_lineno(91);
/* OneM2M_TypesAndValues.ttcn, line 91 */
const_c__CUNDi = 53;
current_location.update_lineno(92);
/* OneM2M_TypesAndValues.ttcn, line 92 */
const_c__RUNDi = 54;
current_location.update_lineno(93);
/* OneM2M_TypesAndValues.ttcn, line 93 */
const_c__CRUNDi = 55;
current_location.update_lineno(94);
/* OneM2M_TypesAndValues.ttcn, line 94 */
const_c__DNDi = 56;
current_location.update_lineno(95);
/* OneM2M_TypesAndValues.ttcn, line 95 */
const_c__CDNDi = 57;
current_location.update_lineno(96);
/* OneM2M_TypesAndValues.ttcn, line 96 */
const_c__RDNDi = 58;
current_location.update_lineno(97);
/* OneM2M_TypesAndValues.ttcn, line 97 */
const_c__CRDNDi = 59;
current_location.update_lineno(98);
/* OneM2M_TypesAndValues.ttcn, line 98 */
const_c__UDNDi = 60;
current_location.update_lineno(99);
/* OneM2M_TypesAndValues.ttcn, line 99 */
const_c__CUDNDi = 61;
current_location.update_lineno(100);
/* OneM2M_TypesAndValues.ttcn, line 100 */
const_c__RUDNDi = 62;
current_location.update_lineno(101);
/* OneM2M_TypesAndValues.ttcn, line 101 */
const_c__CRUDNDi = 63;
}

static void post_init_module()
{
TTCN_Location current_location("OneM2M_TypesAndValues.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "OneM2M_TypesAndValues");
OneM2M__Types::module_object.post_init_module();
}


} /* end of namespace */
