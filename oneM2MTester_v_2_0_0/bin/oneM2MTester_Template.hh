// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for oneM2MTester (martin@ubuntu) on Wed May 31 13:52:14 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef oneM2MTester__Template_HH
#define oneM2MTester__Template_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "Mqtt_v3_1_1_Types.hh"
#include "CoAP_Types.hh"
#include "HTTPmsg_Types.hh"
#include "Socket_API_Definitions.hh"
#include "OneM2M_Constants.hh"

#if TTCN3_VERSION != 60100
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef oneM2MTester__Template_HH
#endif

namespace oneM2MTester__Template {

/* Forward declarations of classes */

class ConfigurationFields;
class ConfigurationFields_template;

} /* end of namespace */

#ifndef oneM2MTester__Template_HH
#define oneM2MTester__Template_HH

namespace oneM2MTester__Template {

/* Class definitions */

class ConfigurationFields {
  Socket__API__Definitions::ProtoTuple field_protoTuple;
  INTEGER field_connectionId;
public:
  ConfigurationFields();
  ConfigurationFields(const Socket__API__Definitions::ProtoTuple& par_protoTuple,
    const INTEGER& par_connectionId);
  ConfigurationFields(const ConfigurationFields& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  ConfigurationFields& operator=(const ConfigurationFields& other_value);
  boolean operator==(const ConfigurationFields& other_value) const;
  inline boolean operator!=(const ConfigurationFields& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Socket__API__Definitions::ProtoTuple& protoTuple()
    {return field_protoTuple;}
  inline const Socket__API__Definitions::ProtoTuple& protoTuple() const
    {return field_protoTuple;}
  inline INTEGER& connectionId()
    {return field_connectionId;}
  inline const INTEGER& connectionId() const
    {return field_connectionId;}
  inline int size_of() const
    {return 2;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class ConfigurationFields_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
ConfigurationFields_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const ConfigurationFields& other_value);
void copy_template(const ConfigurationFields_template& other_value);

public:
ConfigurationFields_template();
ConfigurationFields_template(template_sel other_value);
ConfigurationFields_template(const ConfigurationFields& other_value);
ConfigurationFields_template(const OPTIONAL<ConfigurationFields>& other_value);
ConfigurationFields_template(const ConfigurationFields_template& other_value);
~ConfigurationFields_template();
ConfigurationFields_template& operator=(template_sel other_value);
ConfigurationFields_template& operator=(const ConfigurationFields& other_value);
ConfigurationFields_template& operator=(const OPTIONAL<ConfigurationFields>& other_value);
ConfigurationFields_template& operator=(const ConfigurationFields_template& other_value);
boolean match(const ConfigurationFields& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
ConfigurationFields valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ConfigurationFields_template& list_item(unsigned int list_index) const;
Socket__API__Definitions::ProtoTuple_template& protoTuple();
const Socket__API__Definitions::ProtoTuple_template& protoTuple() const;
INTEGER_template& connectionId();
const INTEGER_template& connectionId() const;
int size_of() const;
void log() const;
void log_match(const ConfigurationFields& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};


/* Function prototypes */

extern INTEGER f__randomInteger(const INTEGER& p__lower, const INTEGER& p__upper);
extern ConfigurationFields_template m__configs(const Socket__API__Definitions::ProtoTuple_template& p__proTuple, const INTEGER_template& p__connId);
extern Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template t__connect(const INTEGER& p__id, const Mqtt__v3__1__1__Types::QoS& p__qos);
extern Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template t__subscribe(const CHARSTRING& p__topic, const INTEGER& p__id, const Mqtt__v3__1__1__Types::QoS& p__qos);
extern Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template tr__suback(const Mqtt__v3__1__1__Types::IntegerList_template& p__code, const INTEGER_template& p__id);
extern Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template t__unsubscribe(const CHARSTRING& p__topic, const INTEGER& p__id);
extern Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template tr__unsuback(const INTEGER_template& p__id);
extern Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template t__publish(const CHARSTRING& p__topic, const INTEGER_template& p__id, const Mqtt__v3__1__1__Types::QoS& p__qos, const CHARSTRING& p__payload);
extern Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template t__puback(const INTEGER_template& p__id);
extern CoAP__Types::CoAP__ReqResp_template t__COAP__TEST(const CoAP__Types::CoAP__OptionsList_template& p__option, const CoAP__Types::Code& p__requestMethod, const CHARSTRING& p__payload);
extern CoAP__Types::CoAP__ReqResp_template t__COAP__POST__request(const INTEGER& p__content__format, const INTEGER& p__resource__type, const UNIVERSAL_CHARSTRING& p__from, const UNIVERSAL_CHARSTRING& p__request__id, const CHARSTRING& p__payload);
extern CoAP__Types::CoAP__ReqResp_template t__COAP__GET__request(const INTEGER& p__content__format, const UNIVERSAL_CHARSTRING& p__from, const UNIVERSAL_CHARSTRING& p__request__id);
extern CoAP__Types::CoAP__ReqResp_template t__COAP__PUT__request(const INTEGER& p__content__format, const UNIVERSAL_CHARSTRING& p__from, const UNIVERSAL_CHARSTRING& p__request__id, const CHARSTRING& p__payload);
extern CoAP__Types::CoAP__ReqResp_template t__COAP__DELETE__request(const INTEGER& p__content__format, const UNIVERSAL_CHARSTRING& p__from, const UNIVERSAL_CHARSTRING& p__request__id);
extern HTTPmsg__Types::HTTPRequest_template t__utTrigger__HTTP__POST__request(const INTEGER& p__clientId, const CHARSTRING& p__uri, const CHARSTRING& p__accept, const CHARSTRING& p__contentType, const CHARSTRING& p__payload);
extern HTTPmsg__Types::HTTPRequest_template t__HTTP__POST__request(const INTEGER& p__clientId, const CHARSTRING& p__uri, const CHARSTRING& p__accept, const CHARSTRING& p__from, const CHARSTRING& p__requestId, const CHARSTRING& p__contentType, const CHARSTRING& p__payload);
extern HTTPmsg__Types::HTTPRequest_template t__HTTP__GET__request(const INTEGER& p__clientId, const CHARSTRING& p__uri, const CHARSTRING& p__accept, const CHARSTRING& p__from, const CHARSTRING& p__requestId);
extern HTTPmsg__Types::HTTPRequest_template t__HTTP__PUT__request(const INTEGER& p__clientId, const CHARSTRING& p__uri, const CHARSTRING& p__accept, const CHARSTRING& p__from, const CHARSTRING& p__requestId, const CHARSTRING& p__contentType, const CHARSTRING& p__payload);
extern HTTPmsg__Types::HTTPRequest_template t__HTTP__DELETE__request(const INTEGER& p__clientId, const CHARSTRING& p__uri, const CHARSTRING& p__accept, const CHARSTRING& p__from, const CHARSTRING& p__requestId);

/* Global variable declarations */

extern const XERdescriptor_t ConfigurationFields_connectionId_xer_;
extern const TTCN_Typedescriptor_t ConfigurationFields_connectionId_descr_;
extern const TTCN_Typedescriptor_t ConfigurationFields_descr_;
extern const Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template& t__pingReq;
extern const Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template& tw__pingResp;
extern const Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template& tr__connectAck;
extern const Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template& t__disconnect;
extern const Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template& tw__publish;
extern const CoAP__Types::CoAP__OptionsList_template& t__COAP__TEST_p__option_defval;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
