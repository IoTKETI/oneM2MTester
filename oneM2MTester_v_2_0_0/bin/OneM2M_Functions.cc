// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for oneM2MTester (martin@ubuntu) on Wed May 31 13:52:13 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "OneM2M_Functions.hh"

namespace OneM2M__Functions {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments);

/* Literal string constants */

static const CHARSTRING cs_3(0, NULL),
cs_13(20, " created successfuly"),
cs_8(8, " deleted"),
cs_33(16, " not implemented"),
cs_23(9, " resource"),
cs_21(29, " resource updated successfuly"),
cs_6('/'),
cs_47(7, "//SpId/"),
cs_46(14, "/CseBaseTester"),
cs_1('0'),
cs_27(27, ":  No announcement received"),
cs_30(27, ":  No notification received"),
cs_25(23, ": Announcement received"),
cs_26(36, ": Error, unexpected message received"),
cs_35(26, ": No notification received"),
cs_28(23, ": Notification received"),
cs_34(53, ": Notification received but the content doesn't match"),
cs_29(65, ": Notification received but verificationRequest isn't set to TRUE"),
cs_11(34, ": Notify verification not received"),
cs_0(13, "AE-ID_changed"),
cs_41(4, "COAP"),
cs_40(4, "HTTP"),
cs_43(4, "MQTT"),
cs_4(5, "MyAe2"),
cs_16(14, "MyContainerAux"),
cs_2(4, "None"),
cs_37(14, "NotInitialized"),
cs_36(2, "ae"),
cs_42(7, "coap://"),
cs_31(100, "f_checkAttributesToBeSaved: Info: resourceName not returned. Using the one provided in the request: "),
cs_32(50, "f_checkAttributesToBeSaved:WARNING: Resource Type "),
cs_14(62, "f_cse_createResource:INFO: Error while creating resource type "),
cs_15(66, "f_cse_createResource:INFO: No answer while creating resource type "),
cs_12(41, "f_cse_createResource:INFO: Resource type "),
cs_18(57, "f_cse_deleteResource INFO: Error while deleting resource "),
cs_19(61, "f_cse_deleteResource INFO: No answer while deleting resource "),
cs_17(35, "f_cse_deleteResource INFO: Resource"),
cs_9(68, "f_cse_postamble_deleteResources INFO: Error while deleting resource "),
cs_10(72, "f_cse_postamble_deleteResources INFO: No answer while deleting resource "),
cs_7(46, "f_cse_postamble_deleteResources INFO: Resource"),
cs_22(55, "f_cse_updateAcpAuxResource:ERROR: Error while updating "),
cs_20(33, "f_cse_updateAcpAuxResource:INFO: "),
cs_24(58, "f_cse_updateAcpAuxResource:INFO: No answer while updating "),
cs_5(7, "http://"),
cs_44(7, "mqtt://"),
cs_38(18, "resourceIDNotFound"),
cs_39(20, "resourceNameNotFound"),
cs_45(5, "ws://");
static const unsigned char module_checksum[] = { 0xaa, 0xef, 0x37, 0x82, 0x06, 0x99, 0xe6, 0x09, 0xdf, 0x4f, 0x85, 0x8b, 0x3b, 0xc7, 0x34, 0x31 };

/* Class definitions for internal use */

class a__cse__cf01_Default : public Default_Base {
public:
a__cse__cf01_Default();
alt_status call_altstep();
};

class a__cse__cf02_Default : public Default_Base {
public:
a__cse__cf02_Default();
alt_status call_altstep();
};

class a__ae__default_Default : public Default_Base {
public:
a__ae__default_Default();
alt_status call_altstep();
};

class a__ae__cf03_Default : public Default_Base {
public:
a__ae__cf03_Default();
alt_status call_altstep();
};

class a__default_Default : public Default_Base {
public:
a__default_Default();
alt_status call_altstep();
};


/* Global variable definitions */

static UNIVERSAL_CHARSTRING_template template_f__cse__preamble__createAcpAux_p__acpName_defval;
const UNIVERSAL_CHARSTRING_template& f__cse__preamble__createAcpAux_p__acpName_defval = template_f__cse__preamble__createAcpAux_p__acpName_defval;
static OneM2M__Types::AccessControlOperations_template template_f__cse__preamble__createAcpAux_p__allowedOperations_defval;
const OneM2M__Types::AccessControlOperations_template& f__cse__preamble__createAcpAux_p__allowedOperations_defval = template_f__cse__preamble__createAcpAux_p__allowedOperations_defval;
static OneM2M__Types::AcpType_template template_f__cse__preamble__registerAe_p__accessControlPolicyIDs_defval;
const OneM2M__Types::AcpType_template& f__cse__preamble__registerAe_p__accessControlPolicyIDs_defval = template_f__cse__preamble__registerAe_p__accessControlPolicyIDs_defval;
static OneM2M__Types::PoaList_template template_f__cse__preamble__registerAe_p__poaList_defval;
const OneM2M__Types::PoaList_template& f__cse__preamble__registerAe_p__poaList_defval = template_f__cse__preamble__registerAe_p__poaList_defval;
static OneM2M__Types::AccessControlOperations_template template_f__cse__preamble__registerAeWithId_p__allowedOperations_defval;
const OneM2M__Types::AccessControlOperations_template& f__cse__preamble__registerAeWithId_p__allowedOperations_defval = template_f__cse__preamble__registerAeWithId_p__allowedOperations_defval;
static OneM2M__Types::ListOfM2MID_template template_f__cse__preamble__createServiceSubscribedAppRule_p__allowedAEs_defval;
const OneM2M__Types::ListOfM2MID_template& f__cse__preamble__createServiceSubscribedAppRule_p__allowedAEs_defval = template_f__cse__preamble__createServiceSubscribedAppRule_p__allowedAEs_defval;
static OneM2M__Types::RequestPrimitive_template template_f__cse__createResource_p__requestPrimitive_defval;
const OneM2M__Types::RequestPrimitive_template& f__cse__createResource_p__requestPrimitive_defval = template_f__cse__createResource_p__requestPrimitive_defval;
static INTEGER const_f__cse__createResource_p__parentIndex_defval;
const INTEGER& f__cse__createResource_p__parentIndex_defval = const_f__cse__createResource_p__parentIndex_defval;
static UNIVERSAL_CHARSTRING_template template_f__cse__createAccessControlPolicyAux_p__acpName_defval;
const UNIVERSAL_CHARSTRING_template& f__cse__createAccessControlPolicyAux_p__acpName_defval = template_f__cse__createAccessControlPolicyAux_p__acpName_defval;
static OneM2M__Types::AccessControlOperations_template template_f__cse__createAccessControlPolicyAux_p__allowedOperations_defval;
const OneM2M__Types::AccessControlOperations_template& f__cse__createAccessControlPolicyAux_p__allowedOperations_defval = template_f__cse__createAccessControlPolicyAux_p__allowedOperations_defval;
static INTEGER const_f__cse__createContainerResourceAux_p__parentIndex_defval;
const INTEGER& f__cse__createContainerResourceAux_p__parentIndex_defval = const_f__cse__createContainerResourceAux_p__parentIndex_defval;
static UNIVERSAL_CHARSTRING_template template_f__cse__resourceAnnouncementHandler_p__from_defval;
const UNIVERSAL_CHARSTRING_template& f__cse__resourceAnnouncementHandler_p__from_defval = template_f__cse__resourceAnnouncementHandler_p__from_defval;
static UNIVERSAL_CHARSTRING_template template_f__cse__resourceAnnouncementHandler_p__to_defval;
const UNIVERSAL_CHARSTRING_template& f__cse__resourceAnnouncementHandler_p__to_defval = template_f__cse__resourceAnnouncementHandler_p__to_defval;
static OneM2M__Types::ResponseStatusCode const_f__subscriptionVerificationHandler_p__responseStatusCode_defval;
const OneM2M__Types::ResponseStatusCode& f__subscriptionVerificationHandler_p__responseStatusCode_defval = const_f__subscriptionVerificationHandler_p__responseStatusCode_defval;
static OneM2M__Types::RequestPrimitive_template template_f__getCreateRequestPrimitive_p__request_defval;
const OneM2M__Types::RequestPrimitive_template& f__getCreateRequestPrimitive_p__request_defval = template_f__getCreateRequestPrimitive_p__request_defval;
static OneM2M__Types::RequestPrimitive_template template_f__getCreateResponsePrimitive_p__request_defval;
const OneM2M__Types::RequestPrimitive_template& f__getCreateResponsePrimitive_p__request_defval = template_f__getCreateResponsePrimitive_p__request_defval;
static INTEGER const_f__getOriginator_p__targetResourceIndex_defval;
const INTEGER& f__getOriginator_p__targetResourceIndex_defval = const_f__getOriginator_p__targetResourceIndex_defval;
static INTEGER const_f__getCreator_p__targetResourceIndex_defval;
const INTEGER& f__getCreator_p__targetResourceIndex_defval = const_f__getCreator_p__targetResourceIndex_defval;
static CHARSTRING const_f__getAnnouncementTargetPoA_p__protocolBinding_defval;
const CHARSTRING& f__getAnnouncementTargetPoA_p__protocolBinding_defval = const_f__getAnnouncementTargetPoA_p__protocolBinding_defval;
static CHARSTRING const_f__getAnnouncementTargetPoA_p__announcementTargetAddress_defval;
const CHARSTRING& f__getAnnouncementTargetPoA_p__announcementTargetAddress_defval = const_f__getAnnouncementTargetPoA_p__announcementTargetAddress_defval;
static CHARSTRING const_f__getAnnouncementTargetPoA_p__announcementTargetResource_defval;
const CHARSTRING& f__getAnnouncementTargetPoA_p__announcementTargetResource_defval = const_f__getAnnouncementTargetPoA_p__announcementTargetResource_defval;
static INTEGER const_f__getResourceAddress_p__targetResourceIndex_defval;
const INTEGER& f__getResourceAddress_p__targetResourceIndex_defval = const_f__getResourceAddress_p__targetResourceIndex_defval;
static INTEGER const_f__setResource_p__parentIndex_defval;
const INTEGER& f__setResource_p__parentIndex_defval = const_f__setResource_p__parentIndex_defval;
static INTEGER const_f__getAeId_p__targetResourceIndex_defval;
const INTEGER& f__getAeId_p__targetResourceIndex_defval = const_f__getAeId_p__targetResourceIndex_defval;
static const size_t num_namespaces = 1;
static const namespace_t xml_namespaces[num_namespaces+1] = {
  { NULL, NULL },
  { "", "" }
};

TTCN_Module module_object("OneM2M_Functions", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 1LU, xml_namespaces, post_init_module, NULL, NULL, NULL, NULL, start_ptc_function, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_1,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

a__cse__cf01_Default::a__cse__cf01_Default()
 : Default_Base("a_cse_cf01")
{
}

alt_status a__cse__cf01_Default::call_altstep()
{
return a__cse__cf01_instance();
}

a__cse__cf02_Default::a__cse__cf02_Default()
 : Default_Base("a_cse_cf02")
{
}

alt_status a__cse__cf02_Default::call_altstep()
{
return a__cse__cf02_instance();
}

a__ae__default_Default::a__ae__default_Default()
 : Default_Base("a_ae_default")
{
}

alt_status a__ae__default_Default::call_altstep()
{
return a__ae__default_instance();
}

a__ae__cf03_Default::a__ae__cf03_Default()
 : Default_Base("a_ae_cf03")
{
}

alt_status a__ae__cf03_Default::call_altstep()
{
return a__ae__cf03_instance();
}

a__default_Default::a__default_Default()
 : Default_Base("a_default")
{
}

alt_status a__default_Default::call_altstep()
{
return a__default_instance();
}


/* Bodies of functions, altsteps and testcases */

void f__cf01Up()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 32, TTCN_Location::LOCATION_FUNCTION, "f_cf01Up");
current_location.update_lineno(35);
/* OneM2M_Functions.ttcn, line 35 */
OneM2M__TestSystem::Tester_component_vc__config = OneM2M__TypesAndValues::Configurations::e__cf01;
current_location.update_lineno(38);
/* OneM2M_Functions.ttcn, line 38 */
TTCN_Runtime::map_port(self, OneM2M__TestSystem::CseTester_component_mcaPort.get_name(), SYSTEM_COMPREF, "mcaPort");
current_location.update_lineno(39);
/* OneM2M_Functions.ttcn, line 39 */
TTCN_Runtime::map_port(self, OneM2M__TestSystem::Tester_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(40);
/* OneM2M_Functions.ttcn, line 40 */
activate_a__default();
current_location.update_lineno(41);
/* OneM2M_Functions.ttcn, line 41 */
activate_a__cse__cf01();
}

void start_f__cf01Up(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf01Up(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cf01Up", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf02Up()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 49, TTCN_Location::LOCATION_FUNCTION, "f_cf02Up");
current_location.update_lineno(52);
/* OneM2M_Functions.ttcn, line 52 */
OneM2M__TestSystem::Tester_component_vc__config = OneM2M__TypesAndValues::Configurations::e__cf02;
current_location.update_lineno(55);
/* OneM2M_Functions.ttcn, line 55 */
TTCN_Runtime::map_port(self, OneM2M__TestSystem::CseTester_component_mcaPort.get_name(), SYSTEM_COMPREF, "mcaPort");
current_location.update_lineno(56);
/* OneM2M_Functions.ttcn, line 56 */
TTCN_Runtime::map_port(self, OneM2M__TestSystem::CseTester_component_mccPort.get_name(), SYSTEM_COMPREF, "mccPort");
current_location.update_lineno(57);
/* OneM2M_Functions.ttcn, line 57 */
TTCN_Runtime::map_port(self, OneM2M__TestSystem::Tester_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(58);
/* OneM2M_Functions.ttcn, line 58 */
activate_a__default();
current_location.update_lineno(59);
/* OneM2M_Functions.ttcn, line 59 */
activate_a__cse__cf02();
}

void start_f__cf02Up(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf02Up(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cf02Up", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf03Up()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 70, TTCN_Location::LOCATION_FUNCTION, "f_cf03Up");
current_location.update_lineno(73);
/* OneM2M_Functions.ttcn, line 73 */
OneM2M__TestSystem::Tester_component_vc__config = OneM2M__TypesAndValues::Configurations::e__cf03;
current_location.update_lineno(76);
/* OneM2M_Functions.ttcn, line 76 */
TTCN_Runtime::map_port(self, OneM2M__TestSystem::AeTester_component_mcaPort.get_name(), SYSTEM_COMPREF, "mcaPort");
current_location.update_lineno(77);
/* OneM2M_Functions.ttcn, line 77 */
TTCN_Runtime::map_port(self, OneM2M__TestSystem::Tester_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(78);
/* OneM2M_Functions.ttcn, line 78 */
activate_a__default();
current_location.update_lineno(79);
/* OneM2M_Functions.ttcn, line 79 */
activate_a__ae__cf03();
}

void start_f__cf03Up(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf03Up(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cf03Up", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cfCseTesterDown()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 91, TTCN_Location::LOCATION_FUNCTION, "f_cfCseTesterDown");
current_location.update_lineno(93);
/* OneM2M_Functions.ttcn, line 93 */
if ((OneM2M__TestSystem::Tester_component_vc__config == OneM2M__TypesAndValues::Configurations::e__cf01)) {
current_location.update_lineno(94);
/* OneM2M_Functions.ttcn, line 94 */
f__cf01Down();
}
else {
current_location.update_lineno(95);
/* OneM2M_Functions.ttcn, line 95 */
if ((OneM2M__TestSystem::Tester_component_vc__config == OneM2M__TypesAndValues::Configurations::e__cf02)) {
current_location.update_lineno(96);
/* OneM2M_Functions.ttcn, line 96 */
f__cf02Down();
}
}
}

void start_f__cfCseTesterDown(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cfCseTesterDown(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cfCseTesterDown", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cfAeTesterDown()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 103, TTCN_Location::LOCATION_FUNCTION, "f_cfAeTesterDown");
current_location.update_lineno(105);
/* OneM2M_Functions.ttcn, line 105 */
if ((OneM2M__TestSystem::Tester_component_vc__config == OneM2M__TypesAndValues::Configurations::e__cf03)) {
current_location.update_lineno(106);
/* OneM2M_Functions.ttcn, line 106 */
f__cf03Down();
}
}

void start_f__cfAeTesterDown(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cfAeTesterDown(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cfAeTesterDown", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf01Down()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 113, TTCN_Location::LOCATION_FUNCTION, "f_cf01Down");
current_location.update_lineno(115);
/* OneM2M_Functions.ttcn, line 115 */
TTCN_Runtime::unmap_port(self, OneM2M__TestSystem::CseTester_component_mcaPort.get_name(), SYSTEM_COMPREF, "mcaPort");
current_location.update_lineno(116);
/* OneM2M_Functions.ttcn, line 116 */
TTCN_Runtime::unmap_port(self, OneM2M__TestSystem::Tester_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
}

void start_f__cf01Down(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf01Down(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cf01Down", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf02Down()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 122, TTCN_Location::LOCATION_FUNCTION, "f_cf02Down");
current_location.update_lineno(124);
/* OneM2M_Functions.ttcn, line 124 */
TTCN_Runtime::unmap_port(self, OneM2M__TestSystem::CseTester_component_mcaPort.get_name(), SYSTEM_COMPREF, "mcaPort");
current_location.update_lineno(125);
/* OneM2M_Functions.ttcn, line 125 */
TTCN_Runtime::unmap_port(self, OneM2M__TestSystem::CseTester_component_mccPort.get_name(), SYSTEM_COMPREF, "mccPort");
current_location.update_lineno(126);
/* OneM2M_Functions.ttcn, line 126 */
TTCN_Runtime::unmap_port(self, OneM2M__TestSystem::Tester_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
}

void start_f__cf02Down(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf02Down(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cf02Down", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf03Down()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 131, TTCN_Location::LOCATION_FUNCTION, "f_cf03Down");
current_location.update_lineno(133);
/* OneM2M_Functions.ttcn, line 133 */
TTCN_Runtime::unmap_port(self, OneM2M__TestSystem::AeTester_component_mcaPort.get_name(), SYSTEM_COMPREF, "mcaPort");
current_location.update_lineno(134);
/* OneM2M_Functions.ttcn, line 134 */
TTCN_Runtime::unmap_port(self, OneM2M__TestSystem::Tester_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
}

void start_f__cf03Down(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf03Down(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cf03Down", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

INTEGER f__cse__preamble__createAcpAux(const UNIVERSAL_CHARSTRING_template& p__acpName, const OneM2M__Types::AccessControlOperations_template& p__allowedOperations)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 149, TTCN_Location::LOCATION_FUNCTION, "f_cse_preamble_createAcpAux");
current_location.update_lineno(151);
/* OneM2M_Functions.ttcn, line 151 */
return f__cse__createAccessControlPolicyAux(p__acpName, p__allowedOperations);
}

void start_f__cse__preamble__createAcpAux(const COMPONENT& component_reference, const UNIVERSAL_CHARSTRING_template& p__acpName, const OneM2M__Types::AccessControlOperations_template& p__allowedOperations)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_preamble_createAcpAux(");
p__acpName.log();
TTCN_Logger::log_event_str(", ");
p__allowedOperations.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_preamble_createAcpAux", text_buf);
p__acpName.encode_text(text_buf);
p__allowedOperations.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

INTEGER f__cse__preamble__registerAe(const OneM2M__Types::AcpType_template& p__accessControlPolicyIDs, const OneM2M__Types::PoaList_template& p__poaList)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 162, TTCN_Location::LOCATION_FUNCTION, "f_cse_preamble_registerAe");
current_location.update_lineno(164);
/* OneM2M_Functions.ttcn, line 164 */
OneM2M__Types::RequestPrimitive v__request;
current_location.update_lineno(165);
/* OneM2M_Functions.ttcn, line 165 */
OneM2M__Types::MsgIn v__response;
current_location.update_lineno(166);
/* OneM2M_Functions.ttcn, line 166 */
INTEGER v__aeAuxIndex(-1);
current_location.update_lineno(168);
/* OneM2M_Functions.ttcn, line 168 */
v__request = OneM2M__Templates::m__createAeAux(p__accessControlPolicyIDs, p__poaList).valueof();
current_location.update_lineno(169);
/* OneM2M_Functions.ttcn, line 169 */
v__request.to__() = f__getResourceAddress(f__getResourceAddress_p__targetResourceIndex_defval);
current_location.update_lineno(171);
/* OneM2M_Functions.ttcn, line 171 */
OneM2M__TestSystem::CseTester_component_mcaPort.send(OneM2M__Templates::m__request(OneM2M__Types::RequestPrimitive_template(v__request), OneM2M__Templates::m__request_p__forcedFields_defval));
current_location.update_lineno(173);
/* OneM2M_Functions.ttcn, line 173 */
OneM2M__TestSystem::Tester_component_tc__ac.start();
current_location.update_lineno(174);
/* OneM2M_Functions.ttcn, line 174 */
{
tmp_5:
alt_status tmp_5_alt_flag_0 = ALT_MAYBE;
alt_status tmp_5_alt_flag_1 = ALT_MAYBE;
alt_status tmp_5_alt_flag_2 = ALT_MAYBE;
alt_status tmp_5_alt_flag_3 = ALT_MAYBE;
alt_status tmp_5_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_5_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(175);
/* OneM2M_Functions.ttcn, line 175 */
tmp_5_alt_flag_0 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveOK(OneM2M__Templates::mw__responsePrimitiveOK_p__content_defval)), &(v__response), any_compref, NULL, NULL);
if (tmp_5_alt_flag_0 == ALT_YES) {
current_location.update_lineno(176);
/* OneM2M_Functions.ttcn, line 176 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(177);
/* OneM2M_Functions.ttcn, line 177 */
TTCN_Runtime::setverdict(PASS,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_preamble_registerAe:INFO: Application registered successfuly"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(178);
/* OneM2M_Functions.ttcn, line 178 */
if (const_cast< const OneM2M__Types::MsgIn&>(v__response).primitive().responsePrimitive().primitiveContent()().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AE__optional)) {
current_location.update_lineno(179);
/* OneM2M_Functions.ttcn, line 179 */
OneM2M__TestSystem::CseTester_component_vc__aeAux = const_cast< const OneM2M__Types::MsgIn&>(v__response).primitive().responsePrimitive().primitiveContent()().any__1()[0].AT_AE__optional();
current_location.update_lineno(181);
/* OneM2M_Functions.ttcn, line 181 */
f__checkAttributesToBeSaved(OneM2M__Types::ResourceType::int2, v__request, v__response.primitive().responsePrimitive());
current_location.update_lineno(183);
/* OneM2M_Functions.ttcn, line 183 */
v__aeAuxIndex = f__setResource(const_cast< const OneM2M__Types::MsgIn&>(v__response).primitive().responsePrimitive().primitiveContent(), f__setResource_p__parentIndex_defval);
current_location.update_lineno(184);
/* OneM2M_Functions.ttcn, line 184 */
{
OneM2M__Types::IntegerList tmp_8;
{
OneM2M__Types::IntegerList tmp_9;
tmp_9.set_size(1);
tmp_9[0] = v__aeAuxIndex;
tmp_8 = (OneM2M__TestSystem::Tester_component_vc__resourcesIndexToBeDeleted + tmp_9);
}
OneM2M__TestSystem::Tester_component_vc__resourcesIndexToBeDeleted = tmp_8;
}
current_location.update_lineno(186);
/* OneM2M_Functions.ttcn, line 186 */
{
boolean tmp_13;
{
boolean tmp_10 = OneM2M__TestSystem::CseTester_component_vc__aeAux.is_bound();
if(tmp_10) {
const OPTIONAL<UNIVERSAL_CHARSTRING>& tmp_11 = OneM2M__TestSystem::CseTester_component_vc__aeAux.aE__ID();
switch (tmp_11.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_10 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_10 = FALSE;
break;
default:
{
const UNIVERSAL_CHARSTRING& tmp_12 = (const UNIVERSAL_CHARSTRING&) tmp_11;
tmp_10 = tmp_12.is_present();
break;}
}
}
tmp_13 = tmp_10;
}
if (tmp_13) {
current_location.update_lineno(187);
/* OneM2M_Functions.ttcn, line 187 */
f__sendAcPrimitive(cs_0, oct2char(unichar2oct(const_cast< const OneM2M__Types::AE__optional&>(OneM2M__TestSystem::CseTester_component_vc__aeAux).aE__ID()())));
}
else {
current_location.update_lineno(189);
/* OneM2M_Functions.ttcn, line 189 */
f__sendAcPrimitive(cs_0, cs_1);
}
}
}
break;
}
}
if (tmp_5_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(193);
/* OneM2M_Functions.ttcn, line 193 */
tmp_5_alt_flag_1 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveKO), NULL, any_compref, NULL, NULL);
if (tmp_5_alt_flag_1 == ALT_YES) {
current_location.update_lineno(194);
/* OneM2M_Functions.ttcn, line 194 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(195);
/* OneM2M_Functions.ttcn, line 195 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_preamble_registerAe:INFO: Error while registering application"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(196);
/* OneM2M_Functions.ttcn, line 196 */
TTCN_Runtime::stop_execution();
}
}
if (tmp_5_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(198);
/* OneM2M_Functions.ttcn, line 198 */
tmp_5_alt_flag_2 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(any_compref, NULL, NULL);
if (tmp_5_alt_flag_2 == ALT_YES) {
current_location.update_lineno(199);
/* OneM2M_Functions.ttcn, line 199 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(200);
/* OneM2M_Functions.ttcn, line 200 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_preamble_registerAe:INFO: Unexpected message received"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(201);
/* OneM2M_Functions.ttcn, line 201 */
TTCN_Runtime::stop_execution();
}
}
if (tmp_5_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(203);
/* OneM2M_Functions.ttcn, line 203 */
tmp_5_alt_flag_3 = OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL);
if (tmp_5_alt_flag_3 == ALT_YES) {
current_location.update_lineno(204);
/* OneM2M_Functions.ttcn, line 204 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_preamble_registerAe:INFO: No answer while registering resource"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(205);
/* OneM2M_Functions.ttcn, line 205 */
TTCN_Runtime::stop_execution();
}
}
if (tmp_5_default_flag == ALT_MAYBE) {
tmp_5_default_flag = TTCN_Default::try_altsteps();
if (tmp_5_default_flag == ALT_YES || tmp_5_default_flag == ALT_BREAK) break;
else if (tmp_5_default_flag == ALT_REPEAT) goto tmp_5;
}
current_location.update_lineno(174);
/* OneM2M_Functions.ttcn, line 174 */
if (tmp_5_alt_flag_0 == ALT_NO && tmp_5_alt_flag_1 == ALT_NO && tmp_5_alt_flag_2 == ALT_NO && tmp_5_alt_flag_3 == ALT_NO && tmp_5_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file OneM2M_Functions.ttcn between lines 174 and 207.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(209);
/* OneM2M_Functions.ttcn, line 209 */
f__checkCseTesterStatus();
current_location.update_lineno(210);
/* OneM2M_Functions.ttcn, line 210 */
return v__aeAuxIndex;
}

void start_f__cse__preamble__registerAe(const COMPONENT& component_reference, const OneM2M__Types::AcpType_template& p__accessControlPolicyIDs, const OneM2M__Types::PoaList_template& p__poaList)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_preamble_registerAe(");
p__accessControlPolicyIDs.log();
TTCN_Logger::log_event_str(", ");
p__poaList.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_preamble_registerAe", text_buf);
p__accessControlPolicyIDs.encode_text(text_buf);
p__poaList.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

INTEGER f__cse__preamble__registerAeWithId(const UNIVERSAL_CHARSTRING& p__appId, const OneM2M__Types::AccessControlOperations_template& p__allowedOperations)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 220, TTCN_Location::LOCATION_FUNCTION, "f_cse_preamble_registerAeWithId");
current_location.update_lineno(222);
/* OneM2M_Functions.ttcn, line 222 */
OneM2M__Types::RequestPrimitive v__request;
current_location.update_lineno(223);
/* OneM2M_Functions.ttcn, line 223 */
OneM2M__Types::MsgIn v__response;
current_location.update_lineno(224);
/* OneM2M_Functions.ttcn, line 224 */
INTEGER v__aeAuxIndex(-1);
current_location.update_lineno(225);
/* OneM2M_Functions.ttcn, line 225 */
INTEGER v__acpAuxIndex(-1);
current_location.update_lineno(227);
/* OneM2M_Functions.ttcn, line 227 */
if (OneM2M__Pics::PICS__ACP__SUPPORT) {
current_location.update_lineno(228);
/* OneM2M_Functions.ttcn, line 228 */
v__acpAuxIndex = f__cse__createAccessControlPolicyAux(f__cse__createAccessControlPolicyAux_p__acpName_defval, p__allowedOperations);
current_location.update_lineno(229);
/* OneM2M_Functions.ttcn, line 229 */
OneM2M__TestSystem::CseTester_component_vc__acpAuxIndex = v__acpAuxIndex;
}
current_location.update_lineno(232);
/* OneM2M_Functions.ttcn, line 232 */
if ((v__acpAuxIndex != -1)) {
current_location.update_lineno(233);
/* OneM2M_Functions.ttcn, line 233 */
OneM2M__TestSystem::Tester_component_vc__resourcesIndexToBeDeleted.set_size(1);
OneM2M__TestSystem::Tester_component_vc__resourcesIndexToBeDeleted[0] = v__acpAuxIndex;
current_location.update_lineno(234);
/* OneM2M_Functions.ttcn, line 234 */
{
OneM2M__Types::AcpType_template tmp_18;
tmp_18.set_size(1);
tmp_18[0] = f__getResourceId(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[v__acpAuxIndex].resource());
v__request = OneM2M__Templates::m__createAe(p__appId, tmp_18, OneM2M__Templates::m__createAe_p__from_defval, OneM2M__Templates::m__createAe_p__resourceName_defval, OneM2M__Templates::m__createAe_p__poaList_defval).valueof();
}
current_location.update_lineno(237);
/* OneM2M_Functions.ttcn, line 237 */
v__request.to__() = f__getResourceAddress(f__getResourceAddress_p__targetResourceIndex_defval);
current_location.update_lineno(239);
/* OneM2M_Functions.ttcn, line 239 */
OneM2M__TestSystem::CseTester_component_mcaPort.send(OneM2M__Templates::m__request(OneM2M__Types::RequestPrimitive_template(v__request), OneM2M__Templates::m__request_p__forcedFields_defval));
}
else {
current_location.update_lineno(242);
/* OneM2M_Functions.ttcn, line 242 */
OneM2M__TestSystem::CseTester_component_mcaPort.send(OneM2M__Templates::m__request(OneM2M__Templates::m__createAe(p__appId, OneM2M__Templates::m__createAe_p__accessControlPolicyIds_defval, OneM2M__Templates::m__createAe_p__from_defval, OneM2M__Templates::m__createAe_p__resourceName_defval, OneM2M__Templates::m__createAe_p__poaList_defval), OneM2M__Templates::m__request_p__forcedFields_defval));
}
current_location.update_lineno(244);
/* OneM2M_Functions.ttcn, line 244 */
OneM2M__TestSystem::Tester_component_tc__ac.start();
current_location.update_lineno(245);
/* OneM2M_Functions.ttcn, line 245 */
{
tmp_20:
alt_status tmp_20_alt_flag_0 = ALT_MAYBE;
alt_status tmp_20_alt_flag_1 = ALT_MAYBE;
alt_status tmp_20_alt_flag_2 = ALT_MAYBE;
alt_status tmp_20_alt_flag_3 = ALT_MAYBE;
alt_status tmp_20_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_20_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(246);
/* OneM2M_Functions.ttcn, line 246 */
tmp_20_alt_flag_0 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveOK(OneM2M__Templates::mw__responsePrimitiveOK_p__content_defval)), &(v__response), any_compref, NULL, NULL);
if (tmp_20_alt_flag_0 == ALT_YES) {
current_location.update_lineno(247);
/* OneM2M_Functions.ttcn, line 247 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(248);
/* OneM2M_Functions.ttcn, line 248 */
TTCN_Runtime::setverdict(PASS,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_preamble_registerAeWithId: INFO: Application registered successfuly"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(249);
/* OneM2M_Functions.ttcn, line 249 */
if (const_cast< const OneM2M__Types::MsgIn&>(v__response).primitive().responsePrimitive().primitiveContent()().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AE__optional)) {
current_location.update_lineno(250);
/* OneM2M_Functions.ttcn, line 250 */
OneM2M__TestSystem::CseTester_component_vc__aeAux = const_cast< const OneM2M__Types::MsgIn&>(v__response).primitive().responsePrimitive().primitiveContent()().any__1()[0].AT_AE__optional();
current_location.update_lineno(252);
/* OneM2M_Functions.ttcn, line 252 */
v__aeAuxIndex = f__setResource(const_cast< const OneM2M__Types::MsgIn&>(v__response).primitive().responsePrimitive().primitiveContent(), f__setResource_p__parentIndex_defval);
current_location.update_lineno(253);
/* OneM2M_Functions.ttcn, line 253 */
{
OneM2M__Types::IntegerList tmp_23;
{
OneM2M__Types::IntegerList tmp_24;
tmp_24.set_size(1);
tmp_24[0] = v__aeAuxIndex;
tmp_23 = (OneM2M__TestSystem::Tester_component_vc__resourcesIndexToBeDeleted + tmp_24);
}
OneM2M__TestSystem::Tester_component_vc__resourcesIndexToBeDeleted = tmp_23;
}
current_location.update_lineno(255);
/* OneM2M_Functions.ttcn, line 255 */
{
boolean tmp_28;
{
boolean tmp_25 = OneM2M__TestSystem::CseTester_component_vc__aeAux.is_bound();
if(tmp_25) {
const OPTIONAL<UNIVERSAL_CHARSTRING>& tmp_26 = OneM2M__TestSystem::CseTester_component_vc__aeAux.aE__ID();
switch (tmp_26.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_25 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_25 = FALSE;
break;
default:
{
const UNIVERSAL_CHARSTRING& tmp_27 = (const UNIVERSAL_CHARSTRING&) tmp_26;
tmp_25 = tmp_27.is_present();
break;}
}
}
tmp_28 = tmp_25;
}
if (tmp_28) {
current_location.update_lineno(256);
/* OneM2M_Functions.ttcn, line 256 */
f__sendAcPrimitive(cs_0, oct2char(unichar2oct(const_cast< const OneM2M__Types::AE__optional&>(OneM2M__TestSystem::CseTester_component_vc__aeAux).aE__ID()())));
}
else {
current_location.update_lineno(258);
/* OneM2M_Functions.ttcn, line 258 */
f__sendAcPrimitive(cs_0, cs_1);
}
}
}
break;
}
}
if (tmp_20_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(262);
/* OneM2M_Functions.ttcn, line 262 */
tmp_20_alt_flag_1 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveKO), NULL, any_compref, NULL, NULL);
if (tmp_20_alt_flag_1 == ALT_YES) {
current_location.update_lineno(264);
/* OneM2M_Functions.ttcn, line 264 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(265);
/* OneM2M_Functions.ttcn, line 265 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_preamble_registerAeWithId:INFO: Error while registering application"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(266);
/* OneM2M_Functions.ttcn, line 266 */
TTCN_Runtime::stop_execution();
}
}
if (tmp_20_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(268);
/* OneM2M_Functions.ttcn, line 268 */
tmp_20_alt_flag_2 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(any_compref, NULL, NULL);
if (tmp_20_alt_flag_2 == ALT_YES) {
current_location.update_lineno(269);
/* OneM2M_Functions.ttcn, line 269 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(270);
/* OneM2M_Functions.ttcn, line 270 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_preamble_registerAeWithId:INFO: Unexpected message received"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(271);
/* OneM2M_Functions.ttcn, line 271 */
TTCN_Runtime::stop_execution();
}
}
if (tmp_20_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(273);
/* OneM2M_Functions.ttcn, line 273 */
tmp_20_alt_flag_3 = OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL);
if (tmp_20_alt_flag_3 == ALT_YES) {
current_location.update_lineno(274);
/* OneM2M_Functions.ttcn, line 274 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_preamble_registerAeWithId:INFO: No answer while registering resource"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(275);
/* OneM2M_Functions.ttcn, line 275 */
TTCN_Runtime::stop_execution();
}
}
if (tmp_20_default_flag == ALT_MAYBE) {
tmp_20_default_flag = TTCN_Default::try_altsteps();
if (tmp_20_default_flag == ALT_YES || tmp_20_default_flag == ALT_BREAK) break;
else if (tmp_20_default_flag == ALT_REPEAT) goto tmp_20;
}
current_location.update_lineno(245);
/* OneM2M_Functions.ttcn, line 245 */
if (tmp_20_alt_flag_0 == ALT_NO && tmp_20_alt_flag_1 == ALT_NO && tmp_20_alt_flag_2 == ALT_NO && tmp_20_alt_flag_3 == ALT_NO && tmp_20_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file OneM2M_Functions.ttcn between lines 245 and 277.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(279);
/* OneM2M_Functions.ttcn, line 279 */
f__checkCseTesterStatus();
current_location.update_lineno(280);
/* OneM2M_Functions.ttcn, line 280 */
return v__aeAuxIndex;
}

void start_f__cse__preamble__registerAeWithId(const COMPONENT& component_reference, const UNIVERSAL_CHARSTRING& p__appId, const OneM2M__Types::AccessControlOperations_template& p__allowedOperations)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_preamble_registerAeWithId(");
p__appId.log();
TTCN_Logger::log_event_str(", ");
p__allowedOperations.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_preamble_registerAeWithId", text_buf);
p__appId.encode_text(text_buf);
p__allowedOperations.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

INTEGER f__cse__preamble__createServiceSubscribedAppRule(const OneM2M__Types::ListOfM2MID_template& p__allowedAEs)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 284, TTCN_Location::LOCATION_FUNCTION, "f_cse_preamble_createServiceSubscribedAppRule");
current_location.update_lineno(286);
/* OneM2M_Functions.ttcn, line 286 */
INTEGER v__serviceSubscribedAppRuleIndex(-1);
current_location.update_lineno(288);
/* OneM2M_Functions.ttcn, line 288 */
{
OneM2M__Types::ListOfM2MID tmp_30;
tmp_30.set_size(1);
tmp_30[0] = cs_2;
OneM2M__Types::ListOfM2MID tmp_31;
tmp_31.set_size(1);
tmp_31[0] = OneM2M__Pixits::PX__APP__ID;
v__serviceSubscribedAppRuleIndex = f__cse__createResource(OneM2M__Types::ResourceType::int19, OneM2M__Templates::m__createServiceSubscribedAppRule(tmp_30, tmp_31, p__allowedAEs.valueof()), f__cse__createResource_p__parentIndex_defval);
}
current_location.update_lineno(290);
/* OneM2M_Functions.ttcn, line 290 */
return v__serviceSubscribedAppRuleIndex;
}

void start_f__cse__preamble__createServiceSubscribedAppRule(const COMPONENT& component_reference, const OneM2M__Types::ListOfM2MID_template& p__allowedAEs)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_preamble_createServiceSubscribedAppRule(");
p__allowedAEs.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_preamble_createServiceSubscribedAppRule", text_buf);
p__allowedAEs.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cse__preamble__subscriptionVerification(COMPONENT& p__notifyHandler, const INTEGER& p__aeIndex, INTEGER& p__ae2Index, OneM2M__Types::RequestPrimitive_template& p__createRequestPrimitive, const OneM2M__Types::ResourceType& p__resourceType)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 294, TTCN_Location::LOCATION_FUNCTION, "f_cse_preamble_subscriptionVerification");
p__notifyHandler.clean_up();
current_location.update_lineno(295);
/* OneM2M_Functions.ttcn, line 295 */
if ((p__resourceType == OneM2M__Types::ResourceType::int23)) {
current_location.update_lineno(296);
/* OneM2M_Functions.ttcn, line 296 */
p__notifyHandler = TTCN_Runtime::create_component("OneM2M_TestSystem", "CseTester", "NotifyHandler", NULL, TRUE);
current_location.update_lineno(297);
/* OneM2M_Functions.ttcn, line 297 */
{
OneM2M__Types::PoaList_template tmp_34;
tmp_34.set_size(1);
tmp_34[0] = ((cs_5 + OneM2M__Pixits::PX__AE2__ADDRESS) + cs_6);
p__ae2Index = f__cse__createResource(OneM2M__Types::ResourceType::int2, OneM2M__Templates::m__createAe(OneM2M__Pixits::PX__APP__ID, OneM2M__Templates::m__createAe_p__accessControlPolicyIds_defval, UNIVERSAL_CHARSTRING_template(OneM2M__Pixits::PX__AE2__ID__STEM), UNIVERSAL_CHARSTRING_template(cs_4), tmp_34), -1);
}
current_location.update_lineno(298);
/* OneM2M_Functions.ttcn, line 298 */
if (p__createRequestPrimitive.primitiveContent().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Subscription__optional)) {
current_location.update_lineno(299);
/* OneM2M_Functions.ttcn, line 299 */
{
OneM2M__Types::ListOfURIs_template& tmp_36 = p__createRequestPrimitive.primitiveContent().any__1()[0].AT_Subscription__optional().notificationURI();
tmp_36.remove_all_permutations();
tmp_36.set_size(1);
tmp_36[0] = f__getResourceAddress(INTEGER(p__ae2Index));
}
}
current_location.update_lineno(301);
/* OneM2M_Functions.ttcn, line 301 */
start_f__subscriptionVerificationHandler(p__notifyHandler, f__getResourceAddress(p__aeIndex), f__subscriptionVerificationHandler_p__responseStatusCode_defval);
}
}

void f__cse__postamble__deleteResources()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 313, TTCN_Location::LOCATION_FUNCTION, "f_cse_postamble_deleteResources");
current_location.update_lineno(314);
/* OneM2M_Functions.ttcn, line 314 */
INTEGER i;
current_location.update_lineno(315);
/* OneM2M_Functions.ttcn, line 315 */
UNIVERSAL_CHARSTRING v__resourceAddress;
current_location.update_lineno(316);
/* OneM2M_Functions.ttcn, line 316 */
OneM2M__Types::RequestPrimitive v__request;
current_location.update_lineno(318);
/* OneM2M_Functions.ttcn, line 318 */
if (OneM2M__Pixits::PX__RUN__POSTAMBLE) {
current_location.update_lineno(320);
/* OneM2M_Functions.ttcn, line 320 */
i = (OneM2M__TestSystem::Tester_component_vc__resourcesIndexToBeDeleted.lengthof() - 1);
current_location.update_lineno(320);
/* OneM2M_Functions.ttcn, line 320 */
for ( ; ; ) {
current_location.update_lineno(320);
/* OneM2M_Functions.ttcn, line 320 */
if (!(i >= 0)) break;
current_location.update_lineno(322);
/* OneM2M_Functions.ttcn, line 322 */
v__resourceAddress = f__getResourceAddress(INTEGER(const_cast< const OneM2M__Types::IntegerList&>(OneM2M__TestSystem::Tester_component_vc__resourcesIndexToBeDeleted)[i]));
current_location.update_lineno(324);
/* OneM2M_Functions.ttcn, line 324 */
v__request = OneM2M__Templates::m__deleteRequest(v__resourceAddress, OneM2M__Templates::m__deleteRequest_p__originator_defval).valueof();
current_location.update_lineno(328);
/* OneM2M_Functions.ttcn, line 328 */
if (OneM2M__Pixits::PX__FROM__IS__AE__ID) {
current_location.update_lineno(329);
/* OneM2M_Functions.ttcn, line 329 */
if (const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[const_cast< const OneM2M__Types::IntegerList&>(OneM2M__TestSystem::Tester_component_vc__resourcesIndexToBeDeleted)[i]].resource().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AE__optional)) {
current_location.update_lineno(330);
/* OneM2M_Functions.ttcn, line 330 */
v__request.from__() = const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[const_cast< const OneM2M__Types::IntegerList&>(OneM2M__TestSystem::Tester_component_vc__resourcesIndexToBeDeleted)[i]].resource().any__1()[0].AT_AE__optional().aE__ID();
}
}
current_location.update_lineno(334);
/* OneM2M_Functions.ttcn, line 334 */
OneM2M__TestSystem::CseTester_component_mcaPort.send(OneM2M__Templates::m__request(OneM2M__Types::RequestPrimitive_template(v__request), OneM2M__Templates::m__request_p__forcedFields_defval));
current_location.update_lineno(336);
/* OneM2M_Functions.ttcn, line 336 */
OneM2M__TestSystem::Tester_component_tc__ac.start();
current_location.update_lineno(337);
/* OneM2M_Functions.ttcn, line 337 */
{
tmp_41:
alt_status tmp_41_alt_flag_0 = ALT_MAYBE;
alt_status tmp_41_alt_flag_1 = ALT_MAYBE;
alt_status tmp_41_alt_flag_2 = ALT_MAYBE;
alt_status tmp_41_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_41_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(338);
/* OneM2M_Functions.ttcn, line 338 */
tmp_41_alt_flag_0 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveOK(OneM2M__Templates::mw__responsePrimitiveOK_p__content_defval)), NULL, any_compref, NULL, NULL);
if (tmp_41_alt_flag_0 == ALT_YES) {
current_location.update_lineno(339);
/* OneM2M_Functions.ttcn, line 339 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(340);
/* OneM2M_Functions.ttcn, line 340 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_7 + const_cast< const OneM2M__Types::RequestPrimitive&>(v__request).to__()) + cs_8).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_41_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(342);
/* OneM2M_Functions.ttcn, line 342 */
tmp_41_alt_flag_1 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveKO), NULL, any_compref, NULL, NULL);
if (tmp_41_alt_flag_1 == ALT_YES) {
current_location.update_lineno(343);
/* OneM2M_Functions.ttcn, line 343 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(344);
/* OneM2M_Functions.ttcn, line 344 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_9 + const_cast< const OneM2M__Types::RequestPrimitive&>(v__request).to__()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_41_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(346);
/* OneM2M_Functions.ttcn, line 346 */
tmp_41_alt_flag_2 = OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL);
if (tmp_41_alt_flag_2 == ALT_YES) {
current_location.update_lineno(347);
/* OneM2M_Functions.ttcn, line 347 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_10 + const_cast< const OneM2M__Types::RequestPrimitive&>(v__request).to__()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_41_default_flag == ALT_MAYBE) {
tmp_41_default_flag = TTCN_Default::try_altsteps();
if (tmp_41_default_flag == ALT_YES || tmp_41_default_flag == ALT_BREAK) break;
else if (tmp_41_default_flag == ALT_REPEAT) goto tmp_41;
}
current_location.update_lineno(337);
/* OneM2M_Functions.ttcn, line 337 */
if (tmp_41_alt_flag_0 == ALT_NO && tmp_41_alt_flag_1 == ALT_NO && tmp_41_alt_flag_2 == ALT_NO && tmp_41_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file OneM2M_Functions.ttcn between lines 337 and 349.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(320);
/* OneM2M_Functions.ttcn, line 320 */
{
INTEGER tmp_42;
--i;
}
}
}
current_location.update_lineno(354);
/* OneM2M_Functions.ttcn, line 354 */
f__cse__postamble__default();
}

void start_f__cse__postamble__deleteResources(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_postamble_deleteResources(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_postamble_deleteResources", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cse__postamble__default()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 361, TTCN_Location::LOCATION_FUNCTION, "f_cse_postamble_default");
}

void start_f__cse__postamble__default(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_postamble_default(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_postamble_default", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__is__component__done(const COMPONENT& p__notifyHandler)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 364, TTCN_Location::LOCATION_FUNCTION, "f_is_component_done");
current_location.update_lineno(366);
/* OneM2M_Functions.ttcn, line 366 */
OneM2M__TestSystem::Tester_component_tc__ac.start(1.0e1);
current_location.update_lineno(367);
/* OneM2M_Functions.ttcn, line 367 */
{
tmp_43:
alt_status tmp_43_alt_flag_0 = ALT_MAYBE;
alt_status tmp_43_alt_flag_1 = ALT_MAYBE;
alt_status tmp_43_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_43_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(368);
/* OneM2M_Functions.ttcn, line 368 */
tmp_43_alt_flag_0 = p__notifyHandler.done(NULL);
if (tmp_43_alt_flag_0 == ALT_REPEAT) goto tmp_43;
if (tmp_43_alt_flag_0 == ALT_YES) {
current_location.update_lineno(369);
/* OneM2M_Functions.ttcn, line 369 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
break;
}
}
if (tmp_43_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(371);
/* OneM2M_Functions.ttcn, line 371 */
tmp_43_alt_flag_1 = OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL);
if (tmp_43_alt_flag_1 == ALT_YES) {
current_location.update_lineno(372);
/* OneM2M_Functions.ttcn, line 372 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),(TTCN_Runtime::get_testcasename() + cs_11).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_43_default_flag == ALT_MAYBE) {
tmp_43_default_flag = TTCN_Default::try_altsteps();
if (tmp_43_default_flag == ALT_YES || tmp_43_default_flag == ALT_BREAK) break;
else if (tmp_43_default_flag == ALT_REPEAT) goto tmp_43;
}
current_location.update_lineno(367);
/* OneM2M_Functions.ttcn, line 367 */
if (tmp_43_alt_flag_0 == ALT_NO && tmp_43_alt_flag_1 == ALT_NO && tmp_43_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file OneM2M_Functions.ttcn between lines 367 and 374.");
TTCN_Snapshot::take_new(TRUE);
}
}
}

void start_f__is__component__done(const COMPONENT& component_reference, const COMPONENT& p__notifyHandler)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_is_component_done(");
p__notifyHandler.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_is_component_done", text_buf);
p__notifyHandler.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

INTEGER f__cse__createResource(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const INTEGER& p__parentIndex)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 390, TTCN_Location::LOCATION_FUNCTION, "f_cse_createResource");
current_location.update_lineno(392);
/* OneM2M_Functions.ttcn, line 392 */
OneM2M__Types::MsgIn v__response;
current_location.update_lineno(393);
/* OneM2M_Functions.ttcn, line 393 */
OneM2M__Types::RequestPrimitive v__request;
current_location.update_lineno(394);
/* OneM2M_Functions.ttcn, line 394 */
INTEGER v__resourceIndex(-1);
current_location.update_lineno(396);
/* OneM2M_Functions.ttcn, line 396 */
v__request = f__getCreateRequestPrimitive(p__resourceType, p__requestPrimitive, p__parentIndex);
current_location.update_lineno(398);
/* OneM2M_Functions.ttcn, line 398 */
OneM2M__TestSystem::CseTester_component_mcaPort.send(OneM2M__Templates::m__request(OneM2M__Types::RequestPrimitive_template(v__request), OneM2M__Templates::m__request_p__forcedFields_defval));
current_location.update_lineno(399);
/* OneM2M_Functions.ttcn, line 399 */
OneM2M__TestSystem::Tester_component_tc__ac.start();
current_location.update_lineno(400);
/* OneM2M_Functions.ttcn, line 400 */
{
tmp_45:
alt_status tmp_45_alt_flag_0 = ALT_MAYBE;
alt_status tmp_45_alt_flag_1 = ALT_MAYBE;
alt_status tmp_45_alt_flag_2 = ALT_MAYBE;
alt_status tmp_45_alt_flag_3 = ALT_MAYBE;
alt_status tmp_45_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_45_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(401);
/* OneM2M_Functions.ttcn, line 401 */
tmp_45_alt_flag_0 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveOK(OneM2M__Templates::mw__responsePrimitiveOK_p__content_defval)), &(v__response), any_compref, NULL, NULL);
if (tmp_45_alt_flag_0 == ALT_YES) {
current_location.update_lineno(402);
/* OneM2M_Functions.ttcn, line 402 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(403);
/* OneM2M_Functions.ttcn, line 403 */
TTCN_Runtime::setverdict(PASS,(TTCN_Logger::begin_event_log2str(),((cs_12 + int2str(OneM2M__Types::ResourceType::enum2int(p__resourceType))) + cs_13).log(),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(404);
/* OneM2M_Functions.ttcn, line 404 */
f__checkAttributesToBeSaved(p__resourceType, v__request, v__response.primitive().responsePrimitive());
current_location.update_lineno(405);
/* OneM2M_Functions.ttcn, line 405 */
v__resourceIndex = f__setResource(const_cast< const OneM2M__Types::MsgIn&>(v__response).primitive().responsePrimitive().primitiveContent(), p__parentIndex);
current_location.update_lineno(406);
/* OneM2M_Functions.ttcn, line 406 */
{
boolean tmp_47;
tmp_47 = OneM2M__Types::ResourceType_template(p__resourceType).match(OneM2M__Types::ResourceType::int2);
if (!tmp_47) tmp_47 = INTEGER_template(p__parentIndex).match(-1);
if (tmp_47) {
current_location.update_lineno(407);
/* OneM2M_Functions.ttcn, line 407 */
{
OneM2M__Types::IntegerList tmp_48;
{
OneM2M__Types::IntegerList tmp_49;
tmp_49.set_size(1);
tmp_49[0] = v__resourceIndex;
tmp_48 = (OneM2M__TestSystem::Tester_component_vc__resourcesIndexToBeDeleted + tmp_49);
}
OneM2M__TestSystem::Tester_component_vc__resourcesIndexToBeDeleted = tmp_48;
}
}
}
break;
}
}
if (tmp_45_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(410);
/* OneM2M_Functions.ttcn, line 410 */
tmp_45_alt_flag_1 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveKO), NULL, any_compref, NULL, NULL);
if (tmp_45_alt_flag_1 == ALT_YES) {
current_location.update_lineno(411);
/* OneM2M_Functions.ttcn, line 411 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(412);
/* OneM2M_Functions.ttcn, line 412 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),(cs_14 + int2str(OneM2M__Types::ResourceType::enum2int(p__resourceType))).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_45_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(414);
/* OneM2M_Functions.ttcn, line 414 */
tmp_45_alt_flag_2 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(any_compref, NULL, NULL);
if (tmp_45_alt_flag_2 == ALT_YES) {
current_location.update_lineno(415);
/* OneM2M_Functions.ttcn, line 415 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(416);
/* OneM2M_Functions.ttcn, line 416 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_createResource:INFO: Unexpected message received"),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_45_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(418);
/* OneM2M_Functions.ttcn, line 418 */
tmp_45_alt_flag_3 = OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL);
if (tmp_45_alt_flag_3 == ALT_YES) {
current_location.update_lineno(419);
/* OneM2M_Functions.ttcn, line 419 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),(cs_15 + int2str(OneM2M__Types::ResourceType::enum2int(p__resourceType))).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_45_default_flag == ALT_MAYBE) {
tmp_45_default_flag = TTCN_Default::try_altsteps();
if (tmp_45_default_flag == ALT_YES || tmp_45_default_flag == ALT_BREAK) break;
else if (tmp_45_default_flag == ALT_REPEAT) goto tmp_45;
}
current_location.update_lineno(400);
/* OneM2M_Functions.ttcn, line 400 */
if (tmp_45_alt_flag_0 == ALT_NO && tmp_45_alt_flag_1 == ALT_NO && tmp_45_alt_flag_2 == ALT_NO && tmp_45_alt_flag_3 == ALT_NO && tmp_45_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file OneM2M_Functions.ttcn between lines 400 and 421.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(423);
/* OneM2M_Functions.ttcn, line 423 */
f__checkCseTesterStatus();
current_location.update_lineno(425);
/* OneM2M_Functions.ttcn, line 425 */
return v__resourceIndex;
}

void start_f__cse__createResource(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const INTEGER& p__parentIndex)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_createResource(");
p__resourceType.log();
TTCN_Logger::log_event_str(", ");
p__requestPrimitive.log();
TTCN_Logger::log_event_str(", ");
p__parentIndex.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_createResource", text_buf);
p__resourceType.encode_text(text_buf);
p__requestPrimitive.encode_text(text_buf);
p__parentIndex.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

INTEGER f__cse__createAccessControlPolicyAux(const UNIVERSAL_CHARSTRING_template& p__acpName, const OneM2M__Types::AccessControlOperations_template& p__allowedOperations)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 436, TTCN_Location::LOCATION_FUNCTION, "f_cse_createAccessControlPolicyAux");
current_location.update_lineno(437);
/* OneM2M_Functions.ttcn, line 437 */
OneM2M__Types::RequestPrimitive v__request;
current_location.update_lineno(438);
/* OneM2M_Functions.ttcn, line 438 */
OneM2M__Types::MsgIn v__response;
current_location.update_lineno(439);
/* OneM2M_Functions.ttcn, line 439 */
INTEGER v__acpAuxIndex(-1);
current_location.update_lineno(441);
/* OneM2M_Functions.ttcn, line 441 */
v__request = OneM2M__Templates::m__createAcpAux(p__acpName, OneM2M__Templates::m__createAcpAux_p__acor_defval, p__allowedOperations).valueof();
current_location.update_lineno(443);
/* OneM2M_Functions.ttcn, line 443 */
v__request.to__() = f__getResourceAddress(f__getResourceAddress_p__targetResourceIndex_defval);
current_location.update_lineno(445);
/* OneM2M_Functions.ttcn, line 445 */
OneM2M__TestSystem::CseTester_component_mcaPort.send(OneM2M__Templates::m__request(OneM2M__Types::RequestPrimitive_template(v__request), OneM2M__Templates::m__request_p__forcedFields_defval));
current_location.update_lineno(446);
/* OneM2M_Functions.ttcn, line 446 */
OneM2M__TestSystem::Tester_component_tc__ac.start();
current_location.update_lineno(447);
/* OneM2M_Functions.ttcn, line 447 */
{
tmp_52:
alt_status tmp_52_alt_flag_0 = ALT_MAYBE;
alt_status tmp_52_alt_flag_1 = ALT_MAYBE;
alt_status tmp_52_alt_flag_2 = ALT_MAYBE;
alt_status tmp_52_alt_flag_3 = ALT_MAYBE;
alt_status tmp_52_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_52_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(448);
/* OneM2M_Functions.ttcn, line 448 */
tmp_52_alt_flag_0 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveOK(OneM2M__Templates::mw__responsePrimitiveOK_p__content_defval)), &(v__response), any_compref, NULL, NULL);
if (tmp_52_alt_flag_0 == ALT_YES) {
current_location.update_lineno(449);
/* OneM2M_Functions.ttcn, line 449 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(450);
/* OneM2M_Functions.ttcn, line 450 */
TTCN_Runtime::setverdict(PASS,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_createAccessControlPolicyAux:INFO: Resource type 1 created successfuly"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(451);
/* OneM2M_Functions.ttcn, line 451 */
f__checkAttributesToBeSaved(OneM2M__Types::ResourceType::int1, v__request, v__response.primitive().responsePrimitive());
current_location.update_lineno(452);
/* OneM2M_Functions.ttcn, line 452 */
v__acpAuxIndex = f__setResource(const_cast< const OneM2M__Types::MsgIn&>(v__response).primitive().responsePrimitive().primitiveContent(), f__setResource_p__parentIndex_defval);
current_location.update_lineno(453);
/* OneM2M_Functions.ttcn, line 453 */
OneM2M__TestSystem::CseTester_component_vc__acpAuxIndex = v__acpAuxIndex;
current_location.update_lineno(454);
/* OneM2M_Functions.ttcn, line 454 */
{
OneM2M__Types::IntegerList tmp_55;
{
OneM2M__Types::IntegerList tmp_56;
tmp_56.set_size(1);
tmp_56[0] = v__acpAuxIndex;
tmp_55 = (OneM2M__TestSystem::Tester_component_vc__resourcesIndexToBeDeleted + tmp_56);
}
OneM2M__TestSystem::Tester_component_vc__resourcesIndexToBeDeleted = tmp_55;
}
break;
}
}
if (tmp_52_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(456);
/* OneM2M_Functions.ttcn, line 456 */
tmp_52_alt_flag_1 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveKO), NULL, any_compref, NULL, NULL);
if (tmp_52_alt_flag_1 == ALT_YES) {
current_location.update_lineno(457);
/* OneM2M_Functions.ttcn, line 457 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(458);
/* OneM2M_Functions.ttcn, line 458 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_createAccessControlPolicyAux:INFO: Error while creating resource type 1"),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_52_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(460);
/* OneM2M_Functions.ttcn, line 460 */
tmp_52_alt_flag_2 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(any_compref, NULL, NULL);
if (tmp_52_alt_flag_2 == ALT_YES) {
current_location.update_lineno(461);
/* OneM2M_Functions.ttcn, line 461 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(462);
/* OneM2M_Functions.ttcn, line 462 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_createAccessControlPolicyAux:INFO: Unexpected message received"),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_52_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(464);
/* OneM2M_Functions.ttcn, line 464 */
tmp_52_alt_flag_3 = OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL);
if (tmp_52_alt_flag_3 == ALT_YES) {
current_location.update_lineno(465);
/* OneM2M_Functions.ttcn, line 465 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_createAccessControlPolicyAux:INFO: No answer while creating resource type 1"),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_52_default_flag == ALT_MAYBE) {
tmp_52_default_flag = TTCN_Default::try_altsteps();
if (tmp_52_default_flag == ALT_YES || tmp_52_default_flag == ALT_BREAK) break;
else if (tmp_52_default_flag == ALT_REPEAT) goto tmp_52;
}
current_location.update_lineno(447);
/* OneM2M_Functions.ttcn, line 447 */
if (tmp_52_alt_flag_0 == ALT_NO && tmp_52_alt_flag_1 == ALT_NO && tmp_52_alt_flag_2 == ALT_NO && tmp_52_alt_flag_3 == ALT_NO && tmp_52_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file OneM2M_Functions.ttcn between lines 447 and 467.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(469);
/* OneM2M_Functions.ttcn, line 469 */
f__checkCseTesterStatus();
current_location.update_lineno(471);
/* OneM2M_Functions.ttcn, line 471 */
return v__acpAuxIndex;
}

void start_f__cse__createAccessControlPolicyAux(const COMPONENT& component_reference, const UNIVERSAL_CHARSTRING_template& p__acpName, const OneM2M__Types::AccessControlOperations_template& p__allowedOperations)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_createAccessControlPolicyAux(");
p__acpName.log();
TTCN_Logger::log_event_str(", ");
p__allowedOperations.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_createAccessControlPolicyAux", text_buf);
p__acpName.encode_text(text_buf);
p__allowedOperations.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

INTEGER f__cse__createContainerResourceAux(const INTEGER& p__parentIndex)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 482, TTCN_Location::LOCATION_FUNCTION, "f_cse_createContainerResourceAux");
current_location.update_lineno(484);
/* OneM2M_Functions.ttcn, line 484 */
OneM2M__Types::RequestPrimitive v__request;
current_location.update_lineno(485);
/* OneM2M_Functions.ttcn, line 485 */
INTEGER v__acpAuxIndex(-1);
current_location.update_lineno(486);
/* OneM2M_Functions.ttcn, line 486 */
INTEGER v__containerResourceIndex(-1);
current_location.update_lineno(488);
/* OneM2M_Functions.ttcn, line 488 */
v__acpAuxIndex = f__cse__createAccessControlPolicyAux(UNIVERSAL_CHARSTRING_template(OneM2M__TypesAndValues::c__acpAuxName), f__cse__createAccessControlPolicyAux_p__allowedOperations_defval);
current_location.update_lineno(490);
/* OneM2M_Functions.ttcn, line 490 */
v__request = OneM2M__Templates::m__createContainerBase.valueof();
current_location.update_lineno(491);
/* OneM2M_Functions.ttcn, line 491 */
{
OneM2M__Types::AcpType& tmp_60 = v__request.primitiveContent()().any__1()[0].AT_Container__optional().accessControlPolicyIDs(); /* 7388 */
tmp_60.set_size(1);
tmp_60[0] = f__getResourceId(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[v__acpAuxIndex].resource());
}
current_location.update_lineno(492);
/* OneM2M_Functions.ttcn, line 492 */
v__request.primitiveContent()().any__1()[0].AT_Container__optional().resourceName() = cs_16;
current_location.update_lineno(494);
/* OneM2M_Functions.ttcn, line 494 */
v__containerResourceIndex = f__cse__createResource(OneM2M__Types::ResourceType::int3, OneM2M__Types::RequestPrimitive_template(v__request), p__parentIndex);
current_location.update_lineno(496);
/* OneM2M_Functions.ttcn, line 496 */
return v__containerResourceIndex;
}

void start_f__cse__createContainerResourceAux(const COMPONENT& component_reference, const INTEGER& p__parentIndex)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_createContainerResourceAux(");
p__parentIndex.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_createContainerResourceAux", text_buf);
p__parentIndex.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cse__updateResource(const OneM2M__Types::RequestPrimitive& p__requestPrimitive)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 505, TTCN_Location::LOCATION_FUNCTION, "f_cse_updateResource");
current_location.update_lineno(506);
/* OneM2M_Functions.ttcn, line 506 */
OneM2M__Types::MsgIn v__response;
current_location.update_lineno(508);
/* OneM2M_Functions.ttcn, line 508 */
OneM2M__TestSystem::CseTester_component_mcaPort.send(OneM2M__Templates::m__request(OneM2M__Types::RequestPrimitive_template(p__requestPrimitive), OneM2M__Templates::m__request_p__forcedFields_defval));
current_location.update_lineno(509);
/* OneM2M_Functions.ttcn, line 509 */
OneM2M__TestSystem::Tester_component_tc__ac.start();
current_location.update_lineno(510);
/* OneM2M_Functions.ttcn, line 510 */
{
tmp_63:
alt_status tmp_63_alt_flag_0 = ALT_MAYBE;
alt_status tmp_63_alt_flag_1 = ALT_MAYBE;
alt_status tmp_63_alt_flag_2 = ALT_MAYBE;
alt_status tmp_63_alt_flag_3 = ALT_MAYBE;
alt_status tmp_63_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_63_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(511);
/* OneM2M_Functions.ttcn, line 511 */
tmp_63_alt_flag_0 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveOK(OneM2M__Templates::mw__responsePrimitiveOK_p__content_defval)), &(v__response), any_compref, NULL, NULL);
if (tmp_63_alt_flag_0 == ALT_YES) {
current_location.update_lineno(512);
/* OneM2M_Functions.ttcn, line 512 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(513);
/* OneM2M_Functions.ttcn, line 513 */
TTCN_Runtime::setverdict(PASS,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_updateResource:INFO: Attribute of resource updated successfuly"),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_63_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(515);
/* OneM2M_Functions.ttcn, line 515 */
tmp_63_alt_flag_1 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveKO), &(v__response), any_compref, NULL, NULL);
if (tmp_63_alt_flag_1 == ALT_YES) {
current_location.update_lineno(516);
/* OneM2M_Functions.ttcn, line 516 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(517);
/* OneM2M_Functions.ttcn, line 517 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_updateResource:ERROR: Error while updating resource"),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_63_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(519);
/* OneM2M_Functions.ttcn, line 519 */
tmp_63_alt_flag_2 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(any_compref, NULL, NULL);
if (tmp_63_alt_flag_2 == ALT_YES) {
current_location.update_lineno(520);
/* OneM2M_Functions.ttcn, line 520 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(521);
/* OneM2M_Functions.ttcn, line 521 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_updateResource:ERROR: Unexpected message received"),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_63_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(523);
/* OneM2M_Functions.ttcn, line 523 */
tmp_63_alt_flag_3 = OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL);
if (tmp_63_alt_flag_3 == ALT_YES) {
current_location.update_lineno(524);
/* OneM2M_Functions.ttcn, line 524 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_updateResource:INFO: No answer while updating resource"),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_63_default_flag == ALT_MAYBE) {
tmp_63_default_flag = TTCN_Default::try_altsteps();
if (tmp_63_default_flag == ALT_YES || tmp_63_default_flag == ALT_BREAK) break;
else if (tmp_63_default_flag == ALT_REPEAT) goto tmp_63;
}
current_location.update_lineno(510);
/* OneM2M_Functions.ttcn, line 510 */
if (tmp_63_alt_flag_0 == ALT_NO && tmp_63_alt_flag_1 == ALT_NO && tmp_63_alt_flag_2 == ALT_NO && tmp_63_alt_flag_3 == ALT_NO && tmp_63_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file OneM2M_Functions.ttcn between lines 510 and 526.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(528);
/* OneM2M_Functions.ttcn, line 528 */
f__checkCseTesterStatus();
}

void start_f__cse__updateResource(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive& p__requestPrimitive)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_updateResource(");
p__requestPrimitive.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_updateResource", text_buf);
p__requestPrimitive.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

OneM2M__Types::PrimitiveContent f__cse__retrieveResource(const INTEGER& p__resourceIndex)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 537, TTCN_Location::LOCATION_FUNCTION, "f_cse_retrieveResource");
current_location.update_lineno(538);
/* OneM2M_Functions.ttcn, line 538 */
OneM2M__Types::MsgIn v__response;
current_location.update_lineno(540);
/* OneM2M_Functions.ttcn, line 540 */
OneM2M__TestSystem::CseTester_component_mcaPort.send(OneM2M__Templates::m__request(OneM2M__Templates::m__retrieveResource(f__getResourceAddress(p__resourceIndex), f__getOriginator(p__resourceIndex)), OneM2M__Templates::m__request_p__forcedFields_defval));
current_location.update_lineno(541);
/* OneM2M_Functions.ttcn, line 541 */
OneM2M__TestSystem::Tester_component_tc__ac.start();
current_location.update_lineno(542);
/* OneM2M_Functions.ttcn, line 542 */
{
tmp_64:
alt_status tmp_64_alt_flag_0 = ALT_MAYBE;
alt_status tmp_64_alt_flag_1 = ALT_MAYBE;
alt_status tmp_64_alt_flag_2 = ALT_MAYBE;
alt_status tmp_64_alt_flag_3 = ALT_MAYBE;
alt_status tmp_64_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_64_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(543);
/* OneM2M_Functions.ttcn, line 543 */
tmp_64_alt_flag_0 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveOK(OneM2M__Templates::mw__responsePrimitiveOK_p__content_defval)), &(v__response), any_compref, NULL, NULL);
if (tmp_64_alt_flag_0 == ALT_YES) {
current_location.update_lineno(544);
/* OneM2M_Functions.ttcn, line 544 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(545);
/* OneM2M_Functions.ttcn, line 545 */
TTCN_Runtime::setverdict(PASS,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_retrieveResource:INFO: Resource retrieved successfuly"),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_64_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(547);
/* OneM2M_Functions.ttcn, line 547 */
tmp_64_alt_flag_1 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveKO), &(v__response), any_compref, NULL, NULL);
if (tmp_64_alt_flag_1 == ALT_YES) {
current_location.update_lineno(548);
/* OneM2M_Functions.ttcn, line 548 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(549);
/* OneM2M_Functions.ttcn, line 549 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_retrieveResource:ERROR: Error while retrieving resource"),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_64_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(551);
/* OneM2M_Functions.ttcn, line 551 */
tmp_64_alt_flag_2 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(any_compref, NULL, NULL);
if (tmp_64_alt_flag_2 == ALT_YES) {
current_location.update_lineno(552);
/* OneM2M_Functions.ttcn, line 552 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(553);
/* OneM2M_Functions.ttcn, line 553 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_retrieveResource:ERROR: Unexpected message received"),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_64_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(555);
/* OneM2M_Functions.ttcn, line 555 */
tmp_64_alt_flag_3 = OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL);
if (tmp_64_alt_flag_3 == ALT_YES) {
current_location.update_lineno(556);
/* OneM2M_Functions.ttcn, line 556 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_cse_retrieveResource:INFO: No answer while retrieving resource"),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_64_default_flag == ALT_MAYBE) {
tmp_64_default_flag = TTCN_Default::try_altsteps();
if (tmp_64_default_flag == ALT_YES || tmp_64_default_flag == ALT_BREAK) break;
else if (tmp_64_default_flag == ALT_REPEAT) goto tmp_64;
}
current_location.update_lineno(542);
/* OneM2M_Functions.ttcn, line 542 */
if (tmp_64_alt_flag_0 == ALT_NO && tmp_64_alt_flag_1 == ALT_NO && tmp_64_alt_flag_2 == ALT_NO && tmp_64_alt_flag_3 == ALT_NO && tmp_64_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file OneM2M_Functions.ttcn between lines 542 and 558.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(560);
/* OneM2M_Functions.ttcn, line 560 */
f__checkCseTesterStatus();
current_location.update_lineno(562);
/* OneM2M_Functions.ttcn, line 562 */
return const_cast< const OneM2M__Types::MsgIn&>(v__response).primitive().responsePrimitive().primitiveContent()();
}

void start_f__cse__retrieveResource(const COMPONENT& component_reference, const INTEGER& p__resourceIndex)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_retrieveResource(");
p__resourceIndex.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_retrieveResource", text_buf);
p__resourceIndex.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cse__deleteResource(const OneM2M__Types::RequestPrimitive& p__requestPrimitive)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 571, TTCN_Location::LOCATION_FUNCTION, "f_cse_deleteResource");
current_location.update_lineno(572);
/* OneM2M_Functions.ttcn, line 572 */
OneM2M__Types::MsgIn v__response;
current_location.update_lineno(574);
/* OneM2M_Functions.ttcn, line 574 */
OneM2M__TestSystem::CseTester_component_mcaPort.send(OneM2M__Templates::m__request(OneM2M__Types::RequestPrimitive_template(p__requestPrimitive), OneM2M__Templates::m__request_p__forcedFields_defval));
current_location.update_lineno(576);
/* OneM2M_Functions.ttcn, line 576 */
OneM2M__TestSystem::Tester_component_tc__ac.start();
current_location.update_lineno(577);
/* OneM2M_Functions.ttcn, line 577 */
{
tmp_65:
alt_status tmp_65_alt_flag_0 = ALT_MAYBE;
alt_status tmp_65_alt_flag_1 = ALT_MAYBE;
alt_status tmp_65_alt_flag_2 = ALT_MAYBE;
alt_status tmp_65_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_65_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(578);
/* OneM2M_Functions.ttcn, line 578 */
tmp_65_alt_flag_0 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveOK(OneM2M__Templates::mw__responsePrimitiveOK_p__content_defval)), NULL, any_compref, NULL, NULL);
if (tmp_65_alt_flag_0 == ALT_YES) {
current_location.update_lineno(579);
/* OneM2M_Functions.ttcn, line 579 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(580);
/* OneM2M_Functions.ttcn, line 580 */
TTCN_Runtime::setverdict(PASS,(TTCN_Logger::begin_event_log2str(),((cs_17 + const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).to__()) + cs_8).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_65_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(582);
/* OneM2M_Functions.ttcn, line 582 */
tmp_65_alt_flag_1 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveKO), NULL, any_compref, NULL, NULL);
if (tmp_65_alt_flag_1 == ALT_YES) {
current_location.update_lineno(583);
/* OneM2M_Functions.ttcn, line 583 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(584);
/* OneM2M_Functions.ttcn, line 584 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),(cs_18 + const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).to__()).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_65_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(586);
/* OneM2M_Functions.ttcn, line 586 */
tmp_65_alt_flag_2 = OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL);
if (tmp_65_alt_flag_2 == ALT_YES) {
current_location.update_lineno(587);
/* OneM2M_Functions.ttcn, line 587 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),(cs_19 + const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).to__()).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_65_default_flag == ALT_MAYBE) {
tmp_65_default_flag = TTCN_Default::try_altsteps();
if (tmp_65_default_flag == ALT_YES || tmp_65_default_flag == ALT_BREAK) break;
else if (tmp_65_default_flag == ALT_REPEAT) goto tmp_65;
}
current_location.update_lineno(577);
/* OneM2M_Functions.ttcn, line 577 */
if (tmp_65_alt_flag_0 == ALT_NO && tmp_65_alt_flag_1 == ALT_NO && tmp_65_alt_flag_2 == ALT_NO && tmp_65_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file OneM2M_Functions.ttcn between lines 577 and 589.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(591);
/* OneM2M_Functions.ttcn, line 591 */
f__checkCseTesterStatus();
}

void start_f__cse__deleteResource(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive& p__requestPrimitive)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_deleteResource(");
p__requestPrimitive.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_deleteResource", text_buf);
p__requestPrimitive.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cse__updateAcpAuxResource(const OneM2M__Types::AccessControlOperations_template& p__allowedOperations)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 600, TTCN_Location::LOCATION_FUNCTION, "f_cse_updateAcpAuxResource");
current_location.update_lineno(601);
/* OneM2M_Functions.ttcn, line 601 */
OneM2M__Types::RequestPrimitive v__request;
current_location.update_lineno(603);
/* OneM2M_Functions.ttcn, line 603 */
v__request = OneM2M__Templates::m__updateAcpBase.valueof();
current_location.update_lineno(605);
/* OneM2M_Functions.ttcn, line 605 */
v__request.to__() = f__getResourceAddress(INTEGER(OneM2M__TestSystem::CseTester_component_vc__acpAuxIndex));
current_location.update_lineno(606);
/* OneM2M_Functions.ttcn, line 606 */
v__request.from__() = f__getOriginator(INTEGER(OneM2M__TestSystem::CseTester_component_vc__acpAuxIndex));
current_location.update_lineno(607);
/* OneM2M_Functions.ttcn, line 607 */
{
OneM2M__Types::SetOfAcrs_accessControlRule__list& tmp_70 = v__request.primitiveContent()().any__1()[0].AT_AccessControlPolicy__optional().privileges()().accessControlRule__list(); /* 7388 */
tmp_70.set_size(1);
{
OneM2M__Types::AccessControlRule& tmp_71 = tmp_70[0];
tmp_71.accessControlOriginators() = OneM2M__Pixits::PX__ACOR;
tmp_71.accessControlOperations() = p__allowedOperations.valueof();
tmp_71.accessControlContexts__list() = NULL_VALUE;
tmp_71.accessControlAuthenticationFlag() = OMIT_VALUE;
tmp_71.accessControlObjectDetails__list() = NULL_VALUE;
}
}
current_location.update_lineno(617);
/* OneM2M_Functions.ttcn, line 617 */
OneM2M__TestSystem::CseTester_component_mcaPort.send(OneM2M__Templates::m__request(OneM2M__Types::RequestPrimitive_template(v__request), OneM2M__Templates::m__request_p__forcedFields_defval));
current_location.update_lineno(618);
/* OneM2M_Functions.ttcn, line 618 */
OneM2M__TestSystem::Tester_component_tc__ac.start();
current_location.update_lineno(619);
/* OneM2M_Functions.ttcn, line 619 */
{
tmp_72:
alt_status tmp_72_alt_flag_0 = ALT_MAYBE;
alt_status tmp_72_alt_flag_1 = ALT_MAYBE;
alt_status tmp_72_alt_flag_2 = ALT_MAYBE;
alt_status tmp_72_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_72_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(620);
/* OneM2M_Functions.ttcn, line 620 */
tmp_72_alt_flag_0 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveOK(OneM2M__Templates::mw__responsePrimitiveOK_p__content_defval)), NULL, any_compref, NULL, NULL);
if (tmp_72_alt_flag_0 == ALT_YES) {
current_location.update_lineno(621);
/* OneM2M_Functions.ttcn, line 621 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(622);
/* OneM2M_Functions.ttcn, line 622 */
TTCN_Runtime::setverdict(PASS,(TTCN_Logger::begin_event_log2str(),((cs_20 + const_cast< const OneM2M__Types::RequestPrimitive&>(v__request).to__()) + cs_21).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_72_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(624);
/* OneM2M_Functions.ttcn, line 624 */
tmp_72_alt_flag_1 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__response(OneM2M__Templates::mw__responsePrimitiveKO), NULL, any_compref, NULL, NULL);
if (tmp_72_alt_flag_1 == ALT_YES) {
current_location.update_lineno(625);
/* OneM2M_Functions.ttcn, line 625 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(626);
/* OneM2M_Functions.ttcn, line 626 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),((cs_22 + const_cast< const OneM2M__Types::RequestPrimitive&>(v__request).to__()) + cs_23).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_72_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(628);
/* OneM2M_Functions.ttcn, line 628 */
tmp_72_alt_flag_2 = OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL);
if (tmp_72_alt_flag_2 == ALT_YES) {
current_location.update_lineno(629);
/* OneM2M_Functions.ttcn, line 629 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),((cs_24 + const_cast< const OneM2M__Types::RequestPrimitive&>(v__request).to__()) + cs_23).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_72_default_flag == ALT_MAYBE) {
tmp_72_default_flag = TTCN_Default::try_altsteps();
if (tmp_72_default_flag == ALT_YES || tmp_72_default_flag == ALT_BREAK) break;
else if (tmp_72_default_flag == ALT_REPEAT) goto tmp_72;
}
current_location.update_lineno(619);
/* OneM2M_Functions.ttcn, line 619 */
if (tmp_72_alt_flag_0 == ALT_NO && tmp_72_alt_flag_1 == ALT_NO && tmp_72_alt_flag_2 == ALT_NO && tmp_72_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file OneM2M_Functions.ttcn between lines 619 and 631.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(633);
/* OneM2M_Functions.ttcn, line 633 */
f__checkCseTesterStatus();
}

void start_f__cse__updateAcpAuxResource(const COMPONENT& component_reference, const OneM2M__Types::AccessControlOperations_template& p__allowedOperations)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_updateAcpAuxResource(");
p__allowedOperations.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_updateAcpAuxResource", text_buf);
p__allowedOperations.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cse__resourceAnnouncementHandler(const UNIVERSAL_CHARSTRING_template& p__from, const UNIVERSAL_CHARSTRING_template& p__to)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 643, TTCN_Location::LOCATION_FUNCTION, "f_cse_resourceAnnouncementHandler");
current_location.update_lineno(645);
/* OneM2M_Functions.ttcn, line 645 */
OneM2M__Types::MsgIn v__request;
current_location.update_lineno(646);
/* OneM2M_Functions.ttcn, line 646 */
OneM2M__Types::ResponsePrimitive v__responsePrimitive;
current_location.update_lineno(648);
/* OneM2M_Functions.ttcn, line 648 */
TTCN_Runtime::map_port(self, OneM2M__TestSystem::CseTester_component_mccPort.get_name(), SYSTEM_COMPREF, "mccPort");
current_location.update_lineno(649);
/* OneM2M_Functions.ttcn, line 649 */
TTCN_Runtime::map_port(self, OneM2M__TestSystem::Tester_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(651);
/* OneM2M_Functions.ttcn, line 651 */
OneM2M__TestSystem::Tester_component_tc__ac.start();
current_location.update_lineno(652);
/* OneM2M_Functions.ttcn, line 652 */
{
tmp_73:
alt_status tmp_73_alt_flag_0 = ALT_MAYBE;
alt_status tmp_73_alt_flag_1 = ALT_MAYBE;
alt_status tmp_73_alt_flag_2 = ALT_MAYBE;
alt_status tmp_73_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_73_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(653);
/* OneM2M_Functions.ttcn, line 653 */
tmp_73_alt_flag_0 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__request(OneM2M__Templates::mw__create(p__from, p__to)), &(v__request), any_compref, NULL, NULL);
if (tmp_73_alt_flag_0 == ALT_YES) {
current_location.update_lineno(654);
/* OneM2M_Functions.ttcn, line 654 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(655);
/* OneM2M_Functions.ttcn, line 655 */
TTCN_Runtime::setverdict(PASS,(TTCN_Logger::begin_event_log2str(),(TTCN_Runtime::get_testcasename() + cs_25).log(),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(656);
/* OneM2M_Functions.ttcn, line 656 */
v__responsePrimitive = f__getCreateResponsePrimitive(const_cast< const OneM2M__Types::MsgIn&>(v__request).primitive().requestPrimitive().resourceType(), OneM2M__Types::RequestPrimitive_template(const_cast< const OneM2M__Types::MsgIn&>(v__request).primitive().requestPrimitive()));
current_location.update_lineno(657);
/* OneM2M_Functions.ttcn, line 657 */
OneM2M__TestSystem::CseTester_component_mcaPort.send(OneM2M__Templates::m__response(OneM2M__Types::ResponsePrimitive_template(v__responsePrimitive), OneM2M__Templates::m__response_p__forcedFields_defval));
break;
}
}
if (tmp_73_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(659);
/* OneM2M_Functions.ttcn, line 659 */
tmp_73_alt_flag_1 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(any_compref, NULL, NULL);
if (tmp_73_alt_flag_1 == ALT_YES) {
current_location.update_lineno(660);
/* OneM2M_Functions.ttcn, line 660 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(661);
/* OneM2M_Functions.ttcn, line 661 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),(TTCN_Runtime::get_testcasename() + cs_26).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_73_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(663);
/* OneM2M_Functions.ttcn, line 663 */
tmp_73_alt_flag_2 = OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL);
if (tmp_73_alt_flag_2 == ALT_YES) {
current_location.update_lineno(664);
/* OneM2M_Functions.ttcn, line 664 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),(TTCN_Runtime::get_testcasename() + cs_27).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_73_default_flag == ALT_MAYBE) {
tmp_73_default_flag = TTCN_Default::try_altsteps();
if (tmp_73_default_flag == ALT_YES || tmp_73_default_flag == ALT_BREAK) break;
else if (tmp_73_default_flag == ALT_REPEAT) goto tmp_73;
}
current_location.update_lineno(652);
/* OneM2M_Functions.ttcn, line 652 */
if (tmp_73_alt_flag_0 == ALT_NO && tmp_73_alt_flag_1 == ALT_NO && tmp_73_alt_flag_2 == ALT_NO && tmp_73_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file OneM2M_Functions.ttcn between lines 652 and 666.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(668);
/* OneM2M_Functions.ttcn, line 668 */
TTCN_Runtime::unmap_port(self, OneM2M__TestSystem::CseTester_component_mccPort.get_name(), SYSTEM_COMPREF, "mccPort");
current_location.update_lineno(669);
/* OneM2M_Functions.ttcn, line 669 */
TTCN_Runtime::unmap_port(self, OneM2M__TestSystem::Tester_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
}

void start_f__cse__resourceAnnouncementHandler(const COMPONENT& component_reference, const UNIVERSAL_CHARSTRING_template& p__from, const UNIVERSAL_CHARSTRING_template& p__to)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_resourceAnnouncementHandler(");
p__from.log();
TTCN_Logger::log_event_str(", ");
p__to.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_resourceAnnouncementHandler", text_buf);
p__from.encode_text(text_buf);
p__to.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__subscriptionVerificationHandler(const UNIVERSAL_CHARSTRING& , const OneM2M__Types::ResponseStatusCode& p__responseStatusCode)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 673, TTCN_Location::LOCATION_FUNCTION, "f_subscriptionVerificationHandler");
current_location.update_lineno(675);
/* OneM2M_Functions.ttcn, line 675 */
OneM2M__Types::MsgIn v__response;
current_location.update_lineno(676);
/* OneM2M_Functions.ttcn, line 676 */
OneM2M__Types::ResponsePrimitive v__responsePrimitive;
current_location.update_lineno(677);
/* OneM2M_Functions.ttcn, line 677 */
OneM2M__Types::Notification__1_template v__notificationRequest(OneM2M__Templates::mw__contentNotificationBase);
current_location.update_lineno(678);
/* OneM2M_Functions.ttcn, line 678 */
OneM2M__Types::PrimitiveContent v__notificationResponse;
current_location.update_lineno(680);
/* OneM2M_Functions.ttcn, line 680 */
TTCN_Runtime::map_port(self, OneM2M__TestSystem::CseTester_component_mcaPort.get_name(), SYSTEM_COMPREF, "mcaPort");
current_location.update_lineno(681);
/* OneM2M_Functions.ttcn, line 681 */
TTCN_Runtime::map_port(self, OneM2M__TestSystem::Tester_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(683);
/* OneM2M_Functions.ttcn, line 683 */
{
OneM2M__Types::Contents& tmp_76 = v__notificationResponse.any__1(); /* 7388 */
tmp_76.set_size(1);
tmp_76[0].AT_Notification() = OneM2M__Templates::m__contentNotification__allOmit.valueof();
}
current_location.update_lineno(685);
/* OneM2M_Functions.ttcn, line 685 */
v__notificationRequest.verificationRequest() = TRUE;
current_location.update_lineno(689);
/* OneM2M_Functions.ttcn, line 689 */
v__responsePrimitive = OneM2M__Templates::m__responseNotification(p__responseStatusCode, OneM2M__Types::PrimitiveContent_template(v__notificationResponse)).valueof();
current_location.update_lineno(691);
/* OneM2M_Functions.ttcn, line 691 */
if ((p__responseStatusCode != OneM2M__Types::ResponseStatusCode::int2001)) {
current_location.update_lineno(692);
/* OneM2M_Functions.ttcn, line 692 */
v__responsePrimitive.primitiveContent() = OMIT_VALUE;
}
current_location.update_lineno(695);
/* OneM2M_Functions.ttcn, line 695 */
OneM2M__TestSystem::Tester_component_tc__ac.start();
current_location.update_lineno(696);
/* OneM2M_Functions.ttcn, line 696 */
{
tmp_80:
alt_status tmp_80_alt_flag_0 = ALT_MAYBE;
alt_status tmp_80_alt_flag_1 = ALT_MAYBE;
alt_status tmp_80_alt_flag_2 = ALT_MAYBE;
alt_status tmp_80_alt_flag_3 = ALT_MAYBE;
alt_status tmp_80_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_80_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(697);
/* OneM2M_Functions.ttcn, line 697 */
tmp_80_alt_flag_0 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__request(OneM2M__Templates::mw__notify(v__notificationRequest)), &(v__response), any_compref, NULL, NULL);
if (tmp_80_alt_flag_0 == ALT_YES) {
current_location.update_lineno(698);
/* OneM2M_Functions.ttcn, line 698 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(699);
/* OneM2M_Functions.ttcn, line 699 */
TTCN_Runtime::setverdict(PASS,(TTCN_Logger::begin_event_log2str(),(TTCN_Runtime::get_testcasename() + cs_28).log(),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(700);
/* OneM2M_Functions.ttcn, line 700 */
v__responsePrimitive.requestIdentifier() = const_cast< const OneM2M__Types::MsgIn&>(v__response).primitive().requestPrimitive().requestIdentifier();
current_location.update_lineno(701);
/* OneM2M_Functions.ttcn, line 701 */
OneM2M__TestSystem::CseTester_component_mcaPort.send(OneM2M__Templates::m__httpResponse(OneM2M__Types::ResponsePrimitive_template(v__responsePrimitive), OneM2M__Templates::m__httpResponse_p__forcedFields_defval));
break;
}
}
if (tmp_80_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(703);
/* OneM2M_Functions.ttcn, line 703 */
tmp_80_alt_flag_1 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__request(OneM2M__Templates::mw__notify(OneM2M__Templates::mw__contentNotification(OneM2M__Types::Representation_template(ANY_VALUE)))), &(v__response), any_compref, NULL, NULL);
if (tmp_80_alt_flag_1 == ALT_YES) {
current_location.update_lineno(704);
/* OneM2M_Functions.ttcn, line 704 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(705);
/* OneM2M_Functions.ttcn, line 705 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),(TTCN_Runtime::get_testcasename() + cs_29).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_80_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(707);
/* OneM2M_Functions.ttcn, line 707 */
tmp_80_alt_flag_2 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(any_compref, NULL, NULL);
if (tmp_80_alt_flag_2 == ALT_YES) {
current_location.update_lineno(708);
/* OneM2M_Functions.ttcn, line 708 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(709);
/* OneM2M_Functions.ttcn, line 709 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),(TTCN_Runtime::get_testcasename() + cs_26).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_80_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(711);
/* OneM2M_Functions.ttcn, line 711 */
tmp_80_alt_flag_3 = OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL);
if (tmp_80_alt_flag_3 == ALT_YES) {
current_location.update_lineno(712);
/* OneM2M_Functions.ttcn, line 712 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),(TTCN_Runtime::get_testcasename() + cs_30).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_80_default_flag == ALT_MAYBE) {
tmp_80_default_flag = TTCN_Default::try_altsteps();
if (tmp_80_default_flag == ALT_YES || tmp_80_default_flag == ALT_BREAK) break;
else if (tmp_80_default_flag == ALT_REPEAT) goto tmp_80;
}
current_location.update_lineno(696);
/* OneM2M_Functions.ttcn, line 696 */
if (tmp_80_alt_flag_0 == ALT_NO && tmp_80_alt_flag_1 == ALT_NO && tmp_80_alt_flag_2 == ALT_NO && tmp_80_alt_flag_3 == ALT_NO && tmp_80_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file OneM2M_Functions.ttcn between lines 696 and 714.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(718);
/* OneM2M_Functions.ttcn, line 718 */
TTCN_Runtime::unmap_port(self, OneM2M__TestSystem::CseTester_component_mcaPort.get_name(), SYSTEM_COMPREF, "mcaPort");
current_location.update_lineno(719);
/* OneM2M_Functions.ttcn, line 719 */
TTCN_Runtime::unmap_port(self, OneM2M__TestSystem::Tester_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
}

void start_f__subscriptionVerificationHandler(const COMPONENT& component_reference, const UNIVERSAL_CHARSTRING& p__creator, const OneM2M__Types::ResponseStatusCode& p__responseStatusCode)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_subscriptionVerificationHandler(");
p__creator.log();
TTCN_Logger::log_event_str(", ");
p__responseStatusCode.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_subscriptionVerificationHandler", text_buf);
p__creator.encode_text(text_buf);
p__responseStatusCode.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__checkAttributesToBeSaved(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive& p__request, OneM2M__Types::ResponsePrimitive& p__response)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 723, TTCN_Location::LOCATION_FUNCTION, "f_checkAttributesToBeSaved");
{
const OneM2M__Types::ResourceType &tmp_83 = p__resourceType;
current_location.update_lineno(725);
/* OneM2M_Functions.ttcn, line 725 */
if(tmp_83 == OneM2M__Types::ResourceType::int1) goto tmp_82_0;
current_location.update_lineno(732);
/* OneM2M_Functions.ttcn, line 732 */
if(tmp_83 == OneM2M__Types::ResourceType::int2) goto tmp_82_1;
current_location.update_lineno(739);
/* OneM2M_Functions.ttcn, line 739 */
if(tmp_83 == OneM2M__Types::ResourceType::int3) goto tmp_82_2;
current_location.update_lineno(746);
/* OneM2M_Functions.ttcn, line 746 */
if(tmp_83 == OneM2M__Types::ResourceType::int4) goto tmp_82_3;
current_location.update_lineno(753);
/* OneM2M_Functions.ttcn, line 753 */
if(tmp_83 == OneM2M__Types::ResourceType::int15) goto tmp_82_4;
current_location.update_lineno(760);
/* OneM2M_Functions.ttcn, line 760 */
if(tmp_83 == OneM2M__Types::ResourceType::int18) goto tmp_82_5;
current_location.update_lineno(767);
/* OneM2M_Functions.ttcn, line 767 */
if(tmp_83 == OneM2M__Types::ResourceType::int23) goto tmp_82_6;
current_location.update_lineno(774);
/* OneM2M_Functions.ttcn, line 774 */
if(tmp_83 == OneM2M__Types::ResourceType::int9) goto tmp_82_7;
goto tmp_82_8;
tmp_82_0:
{
current_location.update_lineno(726);
/* OneM2M_Functions.ttcn, line 726 */
{
boolean tmp_84;
tmp_84 = const_cast< const OneM2M__Types::ResponsePrimitive&>(p__response).primitiveContent()().any__1()[0].AT_AccessControlPolicy__optional().is_value();
if (tmp_84) {
boolean tmp_85 = p__response.is_bound();
if(tmp_85) {
const OPTIONAL<OneM2M__Types::PrimitiveContent>& tmp_86 = p__response.primitiveContent();
switch (tmp_86.get_selection()) {
case OPTIONAL_UNBOUND:
case OPTIONAL_OMIT:
tmp_85 = FALSE;
break;
default:
break;
}
if(tmp_85) {
const OneM2M__Types::PrimitiveContent& tmp_87 = (const OneM2M__Types::PrimitiveContent&) tmp_86;
tmp_85 = tmp_87.is_bound();
if(tmp_85) {
const OneM2M__Types::PrimitiveContent& tmp_88 = tmp_87;
const OneM2M__Types::Contents& tmp_89 = tmp_88.any__1();
tmp_85 = tmp_89.is_bound();
if(tmp_85) {
const int tmp_90 = 0;
tmp_85 = (tmp_90 >= 0) && (tmp_89.size_of() > tmp_90);
if(tmp_85) {
const OneM2M__Types::anytype& tmp_91 = tmp_89[tmp_90];
tmp_85 = tmp_91.is_bound();
if(tmp_85) {
const OneM2M__Types::anytype& tmp_92 = tmp_91;
const OneM2M__Types::AccessControlPolicy__optional& tmp_93 = tmp_92.AT_AccessControlPolicy__optional();
tmp_85 = tmp_93.is_bound();
if(tmp_85) {
const OPTIONAL<UNIVERSAL_CHARSTRING>& tmp_94 = tmp_93.resourceName();
switch (tmp_94.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_85 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_85 = FALSE;
break;
default:
{
const UNIVERSAL_CHARSTRING& tmp_95 = (const UNIVERSAL_CHARSTRING&) tmp_94;
tmp_85 = tmp_95.is_present();
break;}
}
}
}
}
}
}
}
}
tmp_84 = (!(tmp_85));
}
if (tmp_84) {
current_location.update_lineno(728);
/* OneM2M_Functions.ttcn, line 728 */
p__response.primitiveContent()().any__1()[0].AT_AccessControlPolicy__optional().resourceName() = const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_AccessControlPolicy__optional().resourceName();
current_location.update_lineno(729);
/* OneM2M_Functions.ttcn, line 729 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_31 + const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_AccessControlPolicy__optional().resourceName()()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
goto tmp_82_end;
}
tmp_82_1:
{
current_location.update_lineno(733);
/* OneM2M_Functions.ttcn, line 733 */
{
boolean tmp_97;
tmp_97 = const_cast< const OneM2M__Types::ResponsePrimitive&>(p__response).primitiveContent()().any__1()[0].AT_AE__optional().is_value();
if (tmp_97) {
boolean tmp_98 = p__response.is_bound();
if(tmp_98) {
const OPTIONAL<OneM2M__Types::PrimitiveContent>& tmp_99 = p__response.primitiveContent();
switch (tmp_99.get_selection()) {
case OPTIONAL_UNBOUND:
case OPTIONAL_OMIT:
tmp_98 = FALSE;
break;
default:
break;
}
if(tmp_98) {
const OneM2M__Types::PrimitiveContent& tmp_100 = (const OneM2M__Types::PrimitiveContent&) tmp_99;
tmp_98 = tmp_100.is_bound();
if(tmp_98) {
const OneM2M__Types::PrimitiveContent& tmp_101 = tmp_100;
const OneM2M__Types::Contents& tmp_102 = tmp_101.any__1();
tmp_98 = tmp_102.is_bound();
if(tmp_98) {
const int tmp_103 = 0;
tmp_98 = (tmp_103 >= 0) && (tmp_102.size_of() > tmp_103);
if(tmp_98) {
const OneM2M__Types::anytype& tmp_104 = tmp_102[tmp_103];
tmp_98 = tmp_104.is_bound();
if(tmp_98) {
const OneM2M__Types::anytype& tmp_105 = tmp_104;
const OneM2M__Types::AE__optional& tmp_106 = tmp_105.AT_AE__optional();
tmp_98 = tmp_106.is_bound();
if(tmp_98) {
const OPTIONAL<UNIVERSAL_CHARSTRING>& tmp_107 = tmp_106.resourceName();
switch (tmp_107.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_98 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_98 = FALSE;
break;
default:
{
const UNIVERSAL_CHARSTRING& tmp_108 = (const UNIVERSAL_CHARSTRING&) tmp_107;
tmp_98 = tmp_108.is_present();
break;}
}
}
}
}
}
}
}
}
tmp_97 = (!(tmp_98));
}
if (tmp_97) {
current_location.update_lineno(735);
/* OneM2M_Functions.ttcn, line 735 */
p__response.primitiveContent()().any__1()[0].AT_AE__optional().resourceName() = const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_AE__optional().resourceName();
current_location.update_lineno(736);
/* OneM2M_Functions.ttcn, line 736 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_31 + const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_AE__optional().resourceName()()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
goto tmp_82_end;
}
tmp_82_2:
{
current_location.update_lineno(740);
/* OneM2M_Functions.ttcn, line 740 */
{
boolean tmp_110;
tmp_110 = const_cast< const OneM2M__Types::ResponsePrimitive&>(p__response).primitiveContent()().any__1()[0].AT_Container__optional().is_value();
if (tmp_110) {
boolean tmp_111 = p__response.is_bound();
if(tmp_111) {
const OPTIONAL<OneM2M__Types::PrimitiveContent>& tmp_112 = p__response.primitiveContent();
switch (tmp_112.get_selection()) {
case OPTIONAL_UNBOUND:
case OPTIONAL_OMIT:
tmp_111 = FALSE;
break;
default:
break;
}
if(tmp_111) {
const OneM2M__Types::PrimitiveContent& tmp_113 = (const OneM2M__Types::PrimitiveContent&) tmp_112;
tmp_111 = tmp_113.is_bound();
if(tmp_111) {
const OneM2M__Types::PrimitiveContent& tmp_114 = tmp_113;
const OneM2M__Types::Contents& tmp_115 = tmp_114.any__1();
tmp_111 = tmp_115.is_bound();
if(tmp_111) {
const int tmp_116 = 0;
tmp_111 = (tmp_116 >= 0) && (tmp_115.size_of() > tmp_116);
if(tmp_111) {
const OneM2M__Types::anytype& tmp_117 = tmp_115[tmp_116];
tmp_111 = tmp_117.is_bound();
if(tmp_111) {
const OneM2M__Types::anytype& tmp_118 = tmp_117;
const OneM2M__Types::Container__optional& tmp_119 = tmp_118.AT_Container__optional();
tmp_111 = tmp_119.is_bound();
if(tmp_111) {
const OPTIONAL<UNIVERSAL_CHARSTRING>& tmp_120 = tmp_119.resourceName();
switch (tmp_120.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_111 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_111 = FALSE;
break;
default:
{
const UNIVERSAL_CHARSTRING& tmp_121 = (const UNIVERSAL_CHARSTRING&) tmp_120;
tmp_111 = tmp_121.is_present();
break;}
}
}
}
}
}
}
}
}
tmp_110 = (!(tmp_111));
}
if (tmp_110) {
current_location.update_lineno(742);
/* OneM2M_Functions.ttcn, line 742 */
p__response.primitiveContent()().any__1()[0].AT_Container__optional().resourceName() = const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_Container__optional().resourceName();
current_location.update_lineno(743);
/* OneM2M_Functions.ttcn, line 743 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_31 + const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_Container__optional().resourceName()()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
goto tmp_82_end;
}
tmp_82_3:
{
current_location.update_lineno(747);
/* OneM2M_Functions.ttcn, line 747 */
{
boolean tmp_123;
tmp_123 = const_cast< const OneM2M__Types::ResponsePrimitive&>(p__response).primitiveContent()().any__1()[0].AT_ContentInstance__optional().is_value();
if (tmp_123) {
boolean tmp_124 = p__response.is_bound();
if(tmp_124) {
const OPTIONAL<OneM2M__Types::PrimitiveContent>& tmp_125 = p__response.primitiveContent();
switch (tmp_125.get_selection()) {
case OPTIONAL_UNBOUND:
case OPTIONAL_OMIT:
tmp_124 = FALSE;
break;
default:
break;
}
if(tmp_124) {
const OneM2M__Types::PrimitiveContent& tmp_126 = (const OneM2M__Types::PrimitiveContent&) tmp_125;
tmp_124 = tmp_126.is_bound();
if(tmp_124) {
const OneM2M__Types::PrimitiveContent& tmp_127 = tmp_126;
const OneM2M__Types::Contents& tmp_128 = tmp_127.any__1();
tmp_124 = tmp_128.is_bound();
if(tmp_124) {
const int tmp_129 = 0;
tmp_124 = (tmp_129 >= 0) && (tmp_128.size_of() > tmp_129);
if(tmp_124) {
const OneM2M__Types::anytype& tmp_130 = tmp_128[tmp_129];
tmp_124 = tmp_130.is_bound();
if(tmp_124) {
const OneM2M__Types::anytype& tmp_131 = tmp_130;
const OneM2M__Types::ContentInstance__optional& tmp_132 = tmp_131.AT_ContentInstance__optional();
tmp_124 = tmp_132.is_bound();
if(tmp_124) {
const OPTIONAL<UNIVERSAL_CHARSTRING>& tmp_133 = tmp_132.resourceName();
switch (tmp_133.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_124 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_124 = FALSE;
break;
default:
{
const UNIVERSAL_CHARSTRING& tmp_134 = (const UNIVERSAL_CHARSTRING&) tmp_133;
tmp_124 = tmp_134.is_present();
break;}
}
}
}
}
}
}
}
}
tmp_123 = (!(tmp_124));
}
if (tmp_123) {
current_location.update_lineno(749);
/* OneM2M_Functions.ttcn, line 749 */
p__response.primitiveContent()().any__1()[0].AT_ContentInstance__optional().resourceName() = const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_ContentInstance__optional().resourceName();
current_location.update_lineno(750);
/* OneM2M_Functions.ttcn, line 750 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_31 + const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_ContentInstance__optional().resourceName()()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
goto tmp_82_end;
}
tmp_82_4:
{
current_location.update_lineno(754);
/* OneM2M_Functions.ttcn, line 754 */
{
boolean tmp_136;
tmp_136 = const_cast< const OneM2M__Types::ResponsePrimitive&>(p__response).primitiveContent()().any__1()[0].AT_PollingChannel__optional().is_value();
if (tmp_136) {
boolean tmp_137 = p__response.is_bound();
if(tmp_137) {
const OPTIONAL<OneM2M__Types::PrimitiveContent>& tmp_138 = p__response.primitiveContent();
switch (tmp_138.get_selection()) {
case OPTIONAL_UNBOUND:
case OPTIONAL_OMIT:
tmp_137 = FALSE;
break;
default:
break;
}
if(tmp_137) {
const OneM2M__Types::PrimitiveContent& tmp_139 = (const OneM2M__Types::PrimitiveContent&) tmp_138;
tmp_137 = tmp_139.is_bound();
if(tmp_137) {
const OneM2M__Types::PrimitiveContent& tmp_140 = tmp_139;
const OneM2M__Types::Contents& tmp_141 = tmp_140.any__1();
tmp_137 = tmp_141.is_bound();
if(tmp_137) {
const int tmp_142 = 0;
tmp_137 = (tmp_142 >= 0) && (tmp_141.size_of() > tmp_142);
if(tmp_137) {
const OneM2M__Types::anytype& tmp_143 = tmp_141[tmp_142];
tmp_137 = tmp_143.is_bound();
if(tmp_137) {
const OneM2M__Types::anytype& tmp_144 = tmp_143;
const OneM2M__Types::PollingChannel__optional& tmp_145 = tmp_144.AT_PollingChannel__optional();
tmp_137 = tmp_145.is_bound();
if(tmp_137) {
const OPTIONAL<UNIVERSAL_CHARSTRING>& tmp_146 = tmp_145.resourceName();
switch (tmp_146.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_137 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_137 = FALSE;
break;
default:
{
const UNIVERSAL_CHARSTRING& tmp_147 = (const UNIVERSAL_CHARSTRING&) tmp_146;
tmp_137 = tmp_147.is_present();
break;}
}
}
}
}
}
}
}
}
tmp_136 = (!(tmp_137));
}
if (tmp_136) {
current_location.update_lineno(756);
/* OneM2M_Functions.ttcn, line 756 */
p__response.primitiveContent()().any__1()[0].AT_PollingChannel__optional().resourceName() = const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_PollingChannel__optional().resourceName();
current_location.update_lineno(757);
/* OneM2M_Functions.ttcn, line 757 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_31 + const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_PollingChannel__optional().resourceName()()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
goto tmp_82_end;
}
tmp_82_5:
{
current_location.update_lineno(761);
/* OneM2M_Functions.ttcn, line 761 */
{
boolean tmp_149;
tmp_149 = const_cast< const OneM2M__Types::ResponsePrimitive&>(p__response).primitiveContent()().any__1()[0].AT_Schedule__optional().is_value();
if (tmp_149) {
boolean tmp_150 = p__response.is_bound();
if(tmp_150) {
const OPTIONAL<OneM2M__Types::PrimitiveContent>& tmp_151 = p__response.primitiveContent();
switch (tmp_151.get_selection()) {
case OPTIONAL_UNBOUND:
case OPTIONAL_OMIT:
tmp_150 = FALSE;
break;
default:
break;
}
if(tmp_150) {
const OneM2M__Types::PrimitiveContent& tmp_152 = (const OneM2M__Types::PrimitiveContent&) tmp_151;
tmp_150 = tmp_152.is_bound();
if(tmp_150) {
const OneM2M__Types::PrimitiveContent& tmp_153 = tmp_152;
const OneM2M__Types::Contents& tmp_154 = tmp_153.any__1();
tmp_150 = tmp_154.is_bound();
if(tmp_150) {
const int tmp_155 = 0;
tmp_150 = (tmp_155 >= 0) && (tmp_154.size_of() > tmp_155);
if(tmp_150) {
const OneM2M__Types::anytype& tmp_156 = tmp_154[tmp_155];
tmp_150 = tmp_156.is_bound();
if(tmp_150) {
const OneM2M__Types::anytype& tmp_157 = tmp_156;
const OneM2M__Types::Schedule__optional& tmp_158 = tmp_157.AT_Schedule__optional();
tmp_150 = tmp_158.is_bound();
if(tmp_150) {
const OPTIONAL<UNIVERSAL_CHARSTRING>& tmp_159 = tmp_158.resourceName();
switch (tmp_159.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_150 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_150 = FALSE;
break;
default:
{
const UNIVERSAL_CHARSTRING& tmp_160 = (const UNIVERSAL_CHARSTRING&) tmp_159;
tmp_150 = tmp_160.is_present();
break;}
}
}
}
}
}
}
}
}
tmp_149 = (!(tmp_150));
}
if (tmp_149) {
current_location.update_lineno(763);
/* OneM2M_Functions.ttcn, line 763 */
p__response.primitiveContent()().any__1()[0].AT_Schedule__optional().resourceName() = const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_Schedule__optional().resourceName();
current_location.update_lineno(764);
/* OneM2M_Functions.ttcn, line 764 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_31 + const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_Schedule__optional().resourceName()()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
goto tmp_82_end;
}
tmp_82_6:
{
current_location.update_lineno(768);
/* OneM2M_Functions.ttcn, line 768 */
{
boolean tmp_162;
tmp_162 = const_cast< const OneM2M__Types::ResponsePrimitive&>(p__response).primitiveContent()().any__1()[0].AT_Subscription__optional().is_value();
if (tmp_162) {
boolean tmp_163 = p__response.is_bound();
if(tmp_163) {
const OPTIONAL<OneM2M__Types::PrimitiveContent>& tmp_164 = p__response.primitiveContent();
switch (tmp_164.get_selection()) {
case OPTIONAL_UNBOUND:
case OPTIONAL_OMIT:
tmp_163 = FALSE;
break;
default:
break;
}
if(tmp_163) {
const OneM2M__Types::PrimitiveContent& tmp_165 = (const OneM2M__Types::PrimitiveContent&) tmp_164;
tmp_163 = tmp_165.is_bound();
if(tmp_163) {
const OneM2M__Types::PrimitiveContent& tmp_166 = tmp_165;
const OneM2M__Types::Contents& tmp_167 = tmp_166.any__1();
tmp_163 = tmp_167.is_bound();
if(tmp_163) {
const int tmp_168 = 0;
tmp_163 = (tmp_168 >= 0) && (tmp_167.size_of() > tmp_168);
if(tmp_163) {
const OneM2M__Types::anytype& tmp_169 = tmp_167[tmp_168];
tmp_163 = tmp_169.is_bound();
if(tmp_163) {
const OneM2M__Types::anytype& tmp_170 = tmp_169;
const OneM2M__Types::Subscription__optional& tmp_171 = tmp_170.AT_Subscription__optional();
tmp_163 = tmp_171.is_bound();
if(tmp_163) {
const OPTIONAL<UNIVERSAL_CHARSTRING>& tmp_172 = tmp_171.resourceName();
switch (tmp_172.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_163 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_163 = FALSE;
break;
default:
{
const UNIVERSAL_CHARSTRING& tmp_173 = (const UNIVERSAL_CHARSTRING&) tmp_172;
tmp_163 = tmp_173.is_present();
break;}
}
}
}
}
}
}
}
}
tmp_162 = (!(tmp_163));
}
if (tmp_162) {
current_location.update_lineno(770);
/* OneM2M_Functions.ttcn, line 770 */
p__response.primitiveContent()().any__1()[0].AT_Subscription__optional().resourceName() = const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_Subscription__optional().resourceName();
current_location.update_lineno(771);
/* OneM2M_Functions.ttcn, line 771 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_31 + const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_Subscription__optional().resourceName()()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
goto tmp_82_end;
}
tmp_82_7:
{
current_location.update_lineno(775);
/* OneM2M_Functions.ttcn, line 775 */
{
boolean tmp_175;
tmp_175 = const_cast< const OneM2M__Types::ResponsePrimitive&>(p__response).primitiveContent()().any__1()[0].AT_Group__optional().is_value();
if (tmp_175) {
boolean tmp_176 = p__response.is_bound();
if(tmp_176) {
const OPTIONAL<OneM2M__Types::PrimitiveContent>& tmp_177 = p__response.primitiveContent();
switch (tmp_177.get_selection()) {
case OPTIONAL_UNBOUND:
case OPTIONAL_OMIT:
tmp_176 = FALSE;
break;
default:
break;
}
if(tmp_176) {
const OneM2M__Types::PrimitiveContent& tmp_178 = (const OneM2M__Types::PrimitiveContent&) tmp_177;
tmp_176 = tmp_178.is_bound();
if(tmp_176) {
const OneM2M__Types::PrimitiveContent& tmp_179 = tmp_178;
const OneM2M__Types::Contents& tmp_180 = tmp_179.any__1();
tmp_176 = tmp_180.is_bound();
if(tmp_176) {
const int tmp_181 = 0;
tmp_176 = (tmp_181 >= 0) && (tmp_180.size_of() > tmp_181);
if(tmp_176) {
const OneM2M__Types::anytype& tmp_182 = tmp_180[tmp_181];
tmp_176 = tmp_182.is_bound();
if(tmp_176) {
const OneM2M__Types::anytype& tmp_183 = tmp_182;
const OneM2M__Types::Group__optional& tmp_184 = tmp_183.AT_Group__optional();
tmp_176 = tmp_184.is_bound();
if(tmp_176) {
const OPTIONAL<UNIVERSAL_CHARSTRING>& tmp_185 = tmp_184.resourceName();
switch (tmp_185.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_176 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_176 = FALSE;
break;
default:
{
const UNIVERSAL_CHARSTRING& tmp_186 = (const UNIVERSAL_CHARSTRING&) tmp_185;
tmp_176 = tmp_186.is_present();
break;}
}
}
}
}
}
}
}
}
tmp_175 = (!(tmp_176));
}
if (tmp_175) {
current_location.update_lineno(777);
/* OneM2M_Functions.ttcn, line 777 */
p__response.primitiveContent()().any__1()[0].AT_Group__optional().resourceName() = const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_Group__optional().resourceName();
current_location.update_lineno(778);
/* OneM2M_Functions.ttcn, line 778 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_31 + const_cast< const OneM2M__Types::RequestPrimitive&>(p__request).primitiveContent()().any__1()[0].AT_Group__optional().resourceName()()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
goto tmp_82_end;
}
tmp_82_8:
{
current_location.update_lineno(782);
/* OneM2M_Functions.ttcn, line 782 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_32 + int2str(OneM2M__Types::ResourceType::enum2int(p__resourceType))) + cs_33).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
goto tmp_82_end;
}
tmp_82_end: /* empty */;
}
}

BOOLEAN f__check__notificationContent(const OneM2M__Types::RequestPrimitive& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__primitiveContent)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 789, TTCN_Location::LOCATION_FUNCTION, "f_check_notificationContent");
current_location.update_lineno(791);
/* OneM2M_Functions.ttcn, line 791 */
BOOLEAN v__matchResult(FALSE);
current_location.update_lineno(792);
/* OneM2M_Functions.ttcn, line 792 */
INTEGER i;
current_location.update_lineno(793);
/* OneM2M_Functions.ttcn, line 793 */
INTEGER v__numberOfAggregatedNotification;
current_location.update_lineno(795);
/* OneM2M_Functions.ttcn, line 795 */
if (p__primitiveContent.any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AE__optional)) {
current_location.update_lineno(796);
/* OneM2M_Functions.ttcn, line 796 */
if (const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).primitiveContent()().any__1()[0].AT_Notification().notificationEvent()().representation()().ischosen(OneM2M__Types::Representation::ALT_resource)) {
current_location.update_lineno(797);
/* OneM2M_Functions.ttcn, line 797 */
v__matchResult = p__primitiveContent.any__1()[0].AT_AE__optional().match(const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).primitiveContent()().any__1()[0].AT_Notification().notificationEvent()().representation()().resource().AT_AE__optional());
}
else {
current_location.update_lineno(799);
/* OneM2M_Functions.ttcn, line 799 */
if (const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).primitiveContent()().any__1()[0].AT_Notification().notificationEvent()().representation()().ischosen(OneM2M__Types::Representation::ALT_responsePrimitive)) {
current_location.update_lineno(800);
/* OneM2M_Functions.ttcn, line 800 */
v__matchResult = p__primitiveContent.any__1()[0].AT_AE__optional().match(const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).primitiveContent()().any__1()[0].AT_Notification().notificationEvent()().representation()().responsePrimitive().primitiveContent()().any__1()[0].AT_AE__optional());
}
else {
current_location.update_lineno(802);
/* OneM2M_Functions.ttcn, line 802 */
if (const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).primitiveContent()().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AggregatedNotification)) {
current_location.update_lineno(803);
/* OneM2M_Functions.ttcn, line 803 */
v__matchResult = TRUE;
current_location.update_lineno(804);
/* OneM2M_Functions.ttcn, line 804 */
v__numberOfAggregatedNotification = const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).primitiveContent()().any__1()[0].AT_AggregatedNotification().notification__list().lengthof();
current_location.update_lineno(805);
/* OneM2M_Functions.ttcn, line 805 */
i = 0;
current_location.update_lineno(805);
/* OneM2M_Functions.ttcn, line 805 */
for ( ; ; ) {
current_location.update_lineno(805);
/* OneM2M_Functions.ttcn, line 805 */
if (!(i < v__numberOfAggregatedNotification)) break;
current_location.update_lineno(806);
/* OneM2M_Functions.ttcn, line 806 */
if (const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).primitiveContent()().any__1()[0].AT_AggregatedNotification().notification__list()[i].notificationEvent()().representation()().ischosen(OneM2M__Types::Representation::ALT_resource)) {
current_location.update_lineno(807);
/* OneM2M_Functions.ttcn, line 807 */
if ((!(p__primitiveContent.any__1()[0].AT_AE__optional().match(const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).primitiveContent()().any__1()[0].AT_AggregatedNotification().notification__list()[i].notificationEvent()().representation()().resource().AT_AE__optional())))) {
current_location.update_lineno(808);
/* OneM2M_Functions.ttcn, line 808 */
v__matchResult = FALSE;
}
}
else {
current_location.update_lineno(811);
/* OneM2M_Functions.ttcn, line 811 */
if (const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).primitiveContent()().any__1()[0].AT_AggregatedNotification().notification__list()[i].notificationEvent()().representation()().ischosen(OneM2M__Types::Representation::ALT_responsePrimitive)) {
current_location.update_lineno(812);
/* OneM2M_Functions.ttcn, line 812 */
if ((!(p__primitiveContent.any__1()[0].AT_AE__optional().match(const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).primitiveContent()().any__1()[0].AT_AggregatedNotification().notification__list()[i].notificationEvent()().representation()().responsePrimitive().primitiveContent()().any__1()[0].AT_AE__optional())))) {
current_location.update_lineno(813);
/* OneM2M_Functions.ttcn, line 813 */
v__matchResult = FALSE;
}
}
}
current_location.update_lineno(805);
/* OneM2M_Functions.ttcn, line 805 */
{
INTEGER tmp_195;
++i;
}
}
current_location.update_lineno(817);
/* OneM2M_Functions.ttcn, line 817 */
if ((i == 0)) {
current_location.update_lineno(818);
/* OneM2M_Functions.ttcn, line 818 */
v__matchResult = FALSE;
}
}
}
}
}
current_location.update_lineno(824);
/* OneM2M_Functions.ttcn, line 824 */
if (p__primitiveContent.any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Container__optional)) {
current_location.update_lineno(825);
/* OneM2M_Functions.ttcn, line 825 */
if (const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).primitiveContent()().any__1()[0].AT_Notification().notificationEvent()().representation()().ischosen(OneM2M__Types::Representation::ALT_resource)) {
current_location.update_lineno(826);
/* OneM2M_Functions.ttcn, line 826 */
v__matchResult = p__primitiveContent.any__1()[0].AT_Container__optional().match(const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).primitiveContent()().any__1()[0].AT_Notification().notificationEvent()().representation()().resource().AT_Container__optional());
}
else {
current_location.update_lineno(828);
/* OneM2M_Functions.ttcn, line 828 */
if (const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).primitiveContent()().any__1()[0].AT_Notification().notificationEvent()().representation()().ischosen(OneM2M__Types::Representation::ALT_responsePrimitive)) {
current_location.update_lineno(829);
/* OneM2M_Functions.ttcn, line 829 */
v__matchResult = p__primitiveContent.any__1()[0].AT_Container__optional().match(const_cast< const OneM2M__Types::RequestPrimitive&>(p__requestPrimitive).primitiveContent()().any__1()[0].AT_Notification().notificationEvent()().representation()().responsePrimitive().primitiveContent()().any__1()[0].AT_Container__optional());
}
}
}
current_location.update_lineno(833);
/* OneM2M_Functions.ttcn, line 833 */
return v__matchResult;
}

void start_f__check__notificationContent(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive& p__requestPrimitive, const OneM2M__Types::PrimitiveContent_template& p__primitiveContent)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_check_notificationContent(");
p__requestPrimitive.log();
TTCN_Logger::log_event_str(", ");
p__primitiveContent.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_check_notificationContent", text_buf);
p__requestPrimitive.encode_text(text_buf);
p__primitiveContent.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cse__notifyProcedure(const OneM2M__Types::PrimitiveContent_template& p__primitiveContent)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 837, TTCN_Location::LOCATION_FUNCTION, "f_cse_notifyProcedure");
current_location.update_lineno(839);
/* OneM2M_Functions.ttcn, line 839 */
OneM2M__Types::MsgIn v__response;
current_location.update_lineno(841);
/* OneM2M_Functions.ttcn, line 841 */
TTCN_Runtime::map_port(self, OneM2M__TestSystem::CseTester_component_mcaPort.get_name(), SYSTEM_COMPREF, "mcaPort");
current_location.update_lineno(842);
/* OneM2M_Functions.ttcn, line 842 */
TTCN_Runtime::map_port(self, OneM2M__TestSystem::Tester_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(844);
/* OneM2M_Functions.ttcn, line 844 */
OneM2M__TestSystem::Tester_component_tc__ac.start();
current_location.update_lineno(845);
/* OneM2M_Functions.ttcn, line 845 */
{
tmp_199:
alt_status tmp_199_alt_flag_0 = ALT_MAYBE;
alt_status tmp_199_alt_flag_1 = ALT_MAYBE;
alt_status tmp_199_alt_flag_2 = ALT_MAYBE;
alt_status tmp_199_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_199_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(846);
/* OneM2M_Functions.ttcn, line 846 */
tmp_199_alt_flag_0 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(OneM2M__Templates::mw__request(OneM2M__Templates::mw__notify(OneM2M__Templates::mw__contentNotification(OneM2M__Types::Representation_template(ANY_VALUE)))), &(v__response), any_compref, NULL, NULL);
if (tmp_199_alt_flag_0 == ALT_YES) {
current_location.update_lineno(847);
/* OneM2M_Functions.ttcn, line 847 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(848);
/* OneM2M_Functions.ttcn, line 848 */
if (f__check__notificationContent(const_cast< const OneM2M__Types::MsgIn&>(v__response).primitive().requestPrimitive(), p__primitiveContent)) {
current_location.update_lineno(849);
/* OneM2M_Functions.ttcn, line 849 */
TTCN_Runtime::setverdict(PASS,(TTCN_Logger::begin_event_log2str(),(TTCN_Runtime::get_testcasename() + cs_28).log(),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(850);
/* OneM2M_Functions.ttcn, line 850 */
OneM2M__TestSystem::CseTester_component_mcaPort.send(OneM2M__Templates::m__response(OneM2M__Types::ResponsePrimitive_template(OneM2M__Templates::m__responseNotification(OneM2M__Types::ResponseStatusCode::int2001, OneM2M__Templates::m__responseNotification_p__notification_defval).valueof()), OneM2M__Templates::m__response_p__forcedFields_defval));
}
else {
current_location.update_lineno(853);
/* OneM2M_Functions.ttcn, line 853 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),(TTCN_Runtime::get_testcasename() + cs_34).log(),TTCN_Logger::end_event_log2str()));
}
break;
}
}
if (tmp_199_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(856);
/* OneM2M_Functions.ttcn, line 856 */
tmp_199_alt_flag_1 = OneM2M__TestSystem::CseTester_component_mcaPort.receive(any_compref, NULL, NULL);
if (tmp_199_alt_flag_1 == ALT_YES) {
current_location.update_lineno(857);
/* OneM2M_Functions.ttcn, line 857 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(858);
/* OneM2M_Functions.ttcn, line 858 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),(TTCN_Runtime::get_testcasename() + cs_26).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_199_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(860);
/* OneM2M_Functions.ttcn, line 860 */
tmp_199_alt_flag_2 = OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL);
if (tmp_199_alt_flag_2 == ALT_YES) {
current_location.update_lineno(861);
/* OneM2M_Functions.ttcn, line 861 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),(TTCN_Runtime::get_testcasename() + cs_35).log(),TTCN_Logger::end_event_log2str()));
break;
}
}
if (tmp_199_default_flag == ALT_MAYBE) {
tmp_199_default_flag = TTCN_Default::try_altsteps();
if (tmp_199_default_flag == ALT_YES || tmp_199_default_flag == ALT_BREAK) break;
else if (tmp_199_default_flag == ALT_REPEAT) goto tmp_199;
}
current_location.update_lineno(845);
/* OneM2M_Functions.ttcn, line 845 */
if (tmp_199_alt_flag_0 == ALT_NO && tmp_199_alt_flag_1 == ALT_NO && tmp_199_alt_flag_2 == ALT_NO && tmp_199_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file OneM2M_Functions.ttcn between lines 845 and 863.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(866);
/* OneM2M_Functions.ttcn, line 866 */
TTCN_Runtime::unmap_port(self, OneM2M__TestSystem::CseTester_component_mcaPort.get_name(), SYSTEM_COMPREF, "mcaPort");
current_location.update_lineno(867);
/* OneM2M_Functions.ttcn, line 867 */
TTCN_Runtime::unmap_port(self, OneM2M__TestSystem::Tester_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
}

void start_f__cse__notifyProcedure(const COMPONENT& component_reference, const OneM2M__Types::PrimitiveContent_template& p__primitiveContent)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_notifyProcedure(");
p__primitiveContent.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_cse_notifyProcedure", text_buf);
p__primitiveContent.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

alt_status a__cse__cf01_instance()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 879, TTCN_Location::LOCATION_ALTSTEP, "a_cse_cf01");
alt_status ret_val = ALT_NO;
current_location.update_lineno(881);
/* OneM2M_Functions.ttcn, line 881 */
switch (OneM2M__TestSystem::CseTester_component_mcaPort.receive(any_compref, NULL, NULL)) {
case ALT_YES:
{
current_location.update_lineno(882);
/* OneM2M_Functions.ttcn, line 882 */
TTCN_Logger::log_str(TTCN_USER, "a_cse_cf01: WARNING: Unexpected message received");
current_location.update_lineno(883);
/* OneM2M_Functions.ttcn, line 883 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__cse__cf01()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__cse__cf01_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_cse_cf01.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__cse__cf01()
{
return new a__cse__cf01_Default();
}

alt_status a__cse__cf02_instance()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 890, TTCN_Location::LOCATION_ALTSTEP, "a_cse_cf02");
alt_status ret_val = ALT_NO;
current_location.update_lineno(892);
/* OneM2M_Functions.ttcn, line 892 */
switch (OneM2M__TestSystem::CseTester_component_mcaPort.receive(any_compref, NULL, NULL)) {
case ALT_YES:
{
current_location.update_lineno(893);
/* OneM2M_Functions.ttcn, line 893 */
TTCN_Logger::log_str(TTCN_USER, "a_cse_cf02: WARNING: Unexpected message received");
current_location.update_lineno(894);
/* OneM2M_Functions.ttcn, line 894 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(896);
/* OneM2M_Functions.ttcn, line 896 */
switch (OneM2M__TestSystem::CseTester_component_mccPort.receive(any_compref, NULL, NULL)) {
case ALT_YES:
{
current_location.update_lineno(897);
/* OneM2M_Functions.ttcn, line 897 */
TTCN_Logger::log_str(TTCN_USER, "a_cse_cf02: WARNING: Unexpected message received");
current_location.update_lineno(898);
/* OneM2M_Functions.ttcn, line 898 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__cse__cf02()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__cse__cf02_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_cse_cf02.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__cse__cf02()
{
return new a__cse__cf02_Default();
}

INTEGER f__ae__preamble__registerAe()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 915, TTCN_Location::LOCATION_FUNCTION, "f_ae_preamble_registerAe");
current_location.update_lineno(917);
/* OneM2M_Functions.ttcn, line 917 */
OneM2M__Types::MsgIn v__request;
current_location.update_lineno(918);
/* OneM2M_Functions.ttcn, line 918 */
OneM2M__Types::anytype v__modifiedResource;
current_location.update_lineno(919);
/* OneM2M_Functions.ttcn, line 919 */
INTEGER v__resourceIndex;
current_location.update_lineno(919);
/* OneM2M_Functions.ttcn, line 919 */
INTEGER v__parentIndex;
current_location.update_lineno(920);
/* OneM2M_Functions.ttcn, line 920 */
OneM2M__Types::RequestPrimitive v__rp;
current_location.update_lineno(922);
/* OneM2M_Functions.ttcn, line 922 */
OneM2M__TestSystem::Tester_component_tc__ac.start();
current_location.update_lineno(923);
/* OneM2M_Functions.ttcn, line 923 */
{
tmp_200:
alt_status tmp_200_alt_flag_0 = ALT_MAYBE;
alt_status tmp_200_alt_flag_1 = ALT_MAYBE;
alt_status tmp_200_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_200_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(924);
/* OneM2M_Functions.ttcn, line 924 */
tmp_200_alt_flag_0 = OneM2M__TestSystem::AeTester_component_mcaPort.receive(OneM2M__Templates::mw__request(OneM2M__Templates::mw__createAe(OneM2M__Templates::mw__createAe_p__from_defval, OneM2M__Templates::mw__createAe_p__to_defval)), &(v__request), any_compref, NULL, NULL);
if (tmp_200_alt_flag_0 == ALT_YES) {
current_location.update_lineno(925);
/* OneM2M_Functions.ttcn, line 925 */
OneM2M__TestSystem::Tester_component_tc__ac.stop();
current_location.update_lineno(927);
/* OneM2M_Functions.ttcn, line 927 */
v__rp = const_cast< const OneM2M__Types::MsgIn&>(v__request).primitive().requestPrimitive();
current_location.update_lineno(928);
/* OneM2M_Functions.ttcn, line 928 */
v__parentIndex = f__getResourceIndex(const_cast< const OneM2M__Types::RequestPrimitive&>(v__rp).to__());
current_location.update_lineno(929);
/* OneM2M_Functions.ttcn, line 929 */
v__resourceIndex = f__ae__createResource(const_cast< const OneM2M__Types::RequestPrimitive&>(v__rp).primitiveContent(), v__parentIndex, const_cast< const OneM2M__Types::RequestPrimitive&>(v__rp).resourceType(), v__modifiedResource);
current_location.update_lineno(930);
/* OneM2M_Functions.ttcn, line 930 */
if ((v__resourceIndex != -1)) {
current_location.update_lineno(931);
/* OneM2M_Functions.ttcn, line 931 */
{
OneM2M__Types::PrimitiveContent_template tmp_204;
{
OneM2M__Types::Contents_template& tmp_205 = tmp_204.any__1();
tmp_205.set_size(1);
tmp_205[0] = v__modifiedResource;
}
OneM2M__TestSystem::AeTester_component_mcaPort.send(OneM2M__Templates::m__response(OneM2M__Templates::m__responsePrimitive__content(OneM2M__Types::ResponseStatusCode::int2001, const_cast< const OneM2M__Types::RequestPrimitive&>(v__rp).requestIdentifier(), tmp_204), OneM2M__Templates::m__response_p__forcedFields_defval));
}
current_location.update_lineno(932);
/* OneM2M_Functions.ttcn, line 932 */
TTCN_Runtime::setverdict(PASS,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_ae_preamble_registerAe:INFO: Application registered successfuly"),TTCN_Logger::end_event_log2str()));
}
else {
current_location.update_lineno(935);
/* OneM2M_Functions.ttcn, line 935 */
OneM2M__TestSystem::AeTester_component_mcaPort.send(OneM2M__Templates::m__response(OneM2M__Templates::m__responsePrimitive(OneM2M__Types::ResponseStatusCode::int5000, const_cast< const OneM2M__Types::MsgIn&>(v__request).primitive().requestPrimitive().requestIdentifier(), OneM2M__Templates::m__responsePrimitive_p__content_defval), OneM2M__Templates::m__response_p__forcedFields_defval));
current_location.update_lineno(936);
/* OneM2M_Functions.ttcn, line 936 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_ae_preamble_registerAe:INFO: AE registration failed"),TTCN_Logger::end_event_log2str()));
}
break;
}
}
if (tmp_200_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(940);
/* OneM2M_Functions.ttcn, line 940 */
tmp_200_alt_flag_1 = OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL);
if (tmp_200_alt_flag_1 == ALT_YES) {
current_location.update_lineno(941);
/* OneM2M_Functions.ttcn, line 941 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("f_ae_preamble_registerAe:INFO: AE registration request not received"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(942);
/* OneM2M_Functions.ttcn, line 942 */
TTCN_Runtime::stop_execution();
}
}
if (tmp_200_default_flag == ALT_MAYBE) {
tmp_200_default_flag = TTCN_Default::try_altsteps();
if (tmp_200_default_flag == ALT_YES || tmp_200_default_flag == ALT_BREAK) break;
else if (tmp_200_default_flag == ALT_REPEAT) goto tmp_200;
}
current_location.update_lineno(923);
/* OneM2M_Functions.ttcn, line 923 */
if (tmp_200_alt_flag_0 == ALT_NO && tmp_200_alt_flag_1 == ALT_NO && tmp_200_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file OneM2M_Functions.ttcn between lines 923 and 944.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(946);
/* OneM2M_Functions.ttcn, line 946 */
f__checkAeTesterStatus();
current_location.update_lineno(948);
/* OneM2M_Functions.ttcn, line 948 */
return v__resourceIndex;
}

void start_f__ae__preamble__registerAe(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_ae_preamble_registerAe(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_ae_preamble_registerAe", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

INTEGER f__ae__createResource(const OneM2M__Types::PrimitiveContent& p__resource, const INTEGER& p__parentIndex, const OneM2M__Types::ResourceType& p__resourceType, OneM2M__Types::anytype& p__modifiedResource)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 963, TTCN_Location::LOCATION_FUNCTION, "f_ae_createResource");
p__modifiedResource.clean_up();
OneM2M__Types::PrimitiveContent p__resource_shadow(p__resource);
current_location.update_lineno(965);
/* OneM2M_Functions.ttcn, line 965 */
INTEGER v__resourceIndex;
current_location.update_lineno(968);
/* OneM2M_Functions.ttcn, line 968 */
{
boolean tmp_206;
tmp_206 = (p__resourceType == OneM2M__Types::ResourceType::int2);
if (tmp_206) tmp_206 = p__resource_shadow.is_present();
if (tmp_206) {
current_location.update_lineno(969);
/* OneM2M_Functions.ttcn, line 969 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__resource_shadow).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AE__optional)) {
current_location.update_lineno(970);
/* OneM2M_Functions.ttcn, line 970 */
OneM2M__Types::AE__optional v__ae(const_cast< const OneM2M__Types::PrimitiveContent&>(p__resource_shadow).any__1()[0].AT_AE__optional());
current_location.update_lineno(971);
/* OneM2M_Functions.ttcn, line 971 */
OneM2M__Types::AE__optional v__aeModified;
current_location.update_lineno(973);
/* OneM2M_Functions.ttcn, line 973 */
v__resourceIndex = (OneM2M__TestSystem::Tester_component_vc__resourcesList.lengthof() - 1);
current_location.update_lineno(974);
/* OneM2M_Functions.ttcn, line 974 */
v__ae.resourceType() = p__resourceType;
current_location.update_lineno(976);
/* OneM2M_Functions.ttcn, line 976 */
v__ae.parentID() = int2str(p__parentIndex);
current_location.update_lineno(977);
/* OneM2M_Functions.ttcn, line 977 */
v__ae.creationTime() = fx__generateTimestamp();
current_location.update_lineno(978);
/* OneM2M_Functions.ttcn, line 978 */
{
OPTIONAL<UNIVERSAL_CHARSTRING> tmp_211;
tmp_211 = const_cast< const OneM2M__Types::AE__optional&>(v__ae).creationTime();
v__ae.lastModifiedTime() = tmp_211;
}
current_location.update_lineno(979);
/* OneM2M_Functions.ttcn, line 979 */
v__ae.resourceID() = (cs_36 + int2char(v__resourceIndex));
current_location.update_lineno(980);
/* OneM2M_Functions.ttcn, line 980 */
v__ae.aE__ID() = (cs_36 + int2char(v__resourceIndex));
current_location.update_lineno(981);
/* OneM2M_Functions.ttcn, line 981 */
v__ae.resourceName() = (cs_36 + int2char(v__resourceIndex));
current_location.update_lineno(983);
/* OneM2M_Functions.ttcn, line 983 */
v__aeModified.parentID() = const_cast< const OneM2M__Types::AE__optional&>(v__ae).parentID();
current_location.update_lineno(984);
/* OneM2M_Functions.ttcn, line 984 */
v__aeModified.creationTime() = const_cast< const OneM2M__Types::AE__optional&>(v__ae).creationTime();
current_location.update_lineno(985);
/* OneM2M_Functions.ttcn, line 985 */
v__aeModified.lastModifiedTime() = const_cast< const OneM2M__Types::AE__optional&>(v__ae).lastModifiedTime();
current_location.update_lineno(986);
/* OneM2M_Functions.ttcn, line 986 */
v__aeModified.resourceID() = const_cast< const OneM2M__Types::AE__optional&>(v__ae).resourceID();
current_location.update_lineno(987);
/* OneM2M_Functions.ttcn, line 987 */
v__aeModified.aE__ID() = const_cast< const OneM2M__Types::AE__optional&>(v__ae).aE__ID();
current_location.update_lineno(988);
/* OneM2M_Functions.ttcn, line 988 */
v__aeModified.resourceName() = const_cast< const OneM2M__Types::AE__optional&>(v__ae).resourceName();
current_location.update_lineno(990);
/* OneM2M_Functions.ttcn, line 990 */
p__resource_shadow.any__1()[0].AT_AE__optional() = v__ae;
current_location.update_lineno(991);
/* OneM2M_Functions.ttcn, line 991 */
p__modifiedResource.AT_AE__optional() = v__aeModified;
current_location.update_lineno(992);
/* OneM2M_Functions.ttcn, line 992 */
return f__setResource(p__resource_shadow, p__parentIndex);
}
}
}
current_location.update_lineno(1001);
/* OneM2M_Functions.ttcn, line 1001 */
return -1;
}

alt_status a__ae__default_instance()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1011, TTCN_Location::LOCATION_ALTSTEP, "a_ae_default");
current_location.update_lineno(1013);
/* OneM2M_Functions.ttcn, line 1013 */
OneM2M__Types::MsgIn v__request;
alt_status ret_val = ALT_NO;
current_location.update_lineno(1015);
/* OneM2M_Functions.ttcn, line 1015 */
switch (OneM2M__TestSystem::AeTester_component_mcaPort.receive(OneM2M__Templates::mw__request(OneM2M__Types::RequestPrimitive_template(ANY_VALUE)), &(v__request), any_compref, NULL, NULL)) {
case ALT_YES:
{
current_location.update_lineno(1016);
/* OneM2M_Functions.ttcn, line 1016 */
TTCN_Logger::log_str(TTCN_USER, "a_default: WARNING: Unexpected request received");
current_location.update_lineno(1017);
/* OneM2M_Functions.ttcn, line 1017 */
OneM2M__TestSystem::AeTester_component_mcaPort.send(OneM2M__Templates::m__response(OneM2M__Templates::m__responsePrimitive(OneM2M__Types::ResponseStatusCode::int5000, const_cast< const OneM2M__Types::MsgIn&>(v__request).primitive().requestPrimitive().requestIdentifier(), OneM2M__Templates::m__responsePrimitive_p__content_defval), OneM2M__Templates::m__response_p__forcedFields_defval));
current_location.update_lineno(1018);
/* OneM2M_Functions.ttcn, line 1018 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(1021);
/* OneM2M_Functions.ttcn, line 1021 */
switch (OneM2M__TestSystem::AeTester_component_mcaPort.receive(any_compref, NULL, NULL)) {
case ALT_YES:
{
current_location.update_lineno(1022);
/* OneM2M_Functions.ttcn, line 1022 */
TTCN_Logger::log_str(TTCN_USER, "a_ae_default: WARNING: Unexpected message received");
current_location.update_lineno(1023);
/* OneM2M_Functions.ttcn, line 1023 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__ae__default()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__ae__default_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_ae_default.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__ae__default()
{
return new a__ae__default_Default();
}

alt_status a__ae__cf03_instance()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1032, TTCN_Location::LOCATION_ALTSTEP, "a_ae_cf03");
current_location.update_lineno(1034);
/* OneM2M_Functions.ttcn, line 1034 */
OneM2M__Types::MsgIn v__request;
current_location.update_lineno(1035);
/* OneM2M_Functions.ttcn, line 1035 */
OneM2M__Types::anytype v__modifiedResource;
current_location.update_lineno(1036);
/* OneM2M_Functions.ttcn, line 1036 */
INTEGER v__resourceIndex;
current_location.update_lineno(1036);
/* OneM2M_Functions.ttcn, line 1036 */
INTEGER v__parentIndex;
current_location.update_lineno(1037);
/* OneM2M_Functions.ttcn, line 1037 */
OneM2M__Types::RequestPrimitive v__rp;
alt_status ret_val = ALT_NO;
current_location.update_lineno(1039);
/* OneM2M_Functions.ttcn, line 1039 */
switch (OneM2M__TestSystem::AeTester_component_mcaPort.receive(OneM2M__Templates::mw__request(OneM2M__Templates::mw__create(OneM2M__Templates::mw__create_p__from_defval, OneM2M__Templates::mw__create_p__to_defval)), &(v__request), any_compref, NULL, NULL)) {
case ALT_YES:
{
current_location.update_lineno(1040);
/* OneM2M_Functions.ttcn, line 1040 */
v__rp = const_cast< const OneM2M__Types::MsgIn&>(v__request).primitive().requestPrimitive();
current_location.update_lineno(1041);
/* OneM2M_Functions.ttcn, line 1041 */
v__parentIndex = f__getResourceIndex(const_cast< const OneM2M__Types::RequestPrimitive&>(v__rp).to__());
current_location.update_lineno(1042);
/* OneM2M_Functions.ttcn, line 1042 */
v__resourceIndex = f__ae__createResource(const_cast< const OneM2M__Types::RequestPrimitive&>(v__rp).primitiveContent(), v__parentIndex, const_cast< const OneM2M__Types::RequestPrimitive&>(v__rp).resourceType(), v__modifiedResource);
current_location.update_lineno(1043);
/* OneM2M_Functions.ttcn, line 1043 */
if ((v__resourceIndex != -1)) {
current_location.update_lineno(1044);
/* OneM2M_Functions.ttcn, line 1044 */
{
OneM2M__Types::PrimitiveContent_template tmp_226;
{
OneM2M__Types::Contents_template& tmp_227 = tmp_226.any__1();
tmp_227.set_size(1);
tmp_227[0] = v__modifiedResource;
}
OneM2M__TestSystem::AeTester_component_mcaPort.send(OneM2M__Templates::m__response(OneM2M__Templates::m__responsePrimitive__content(OneM2M__Types::ResponseStatusCode::int2001, const_cast< const OneM2M__Types::RequestPrimitive&>(v__rp).requestIdentifier(), tmp_226), OneM2M__Templates::m__response_p__forcedFields_defval));
}
}
else {
current_location.update_lineno(1047);
/* OneM2M_Functions.ttcn, line 1047 */
OneM2M__TestSystem::AeTester_component_mcaPort.send(OneM2M__Templates::m__response(OneM2M__Templates::m__responsePrimitive(OneM2M__Types::ResponseStatusCode::int5000, const_cast< const OneM2M__Types::MsgIn&>(v__request).primitive().requestPrimitive().requestIdentifier(), OneM2M__Templates::m__responsePrimitive_p__content_defval), OneM2M__Templates::m__response_p__forcedFields_defval));
}
current_location.update_lineno(1049);
/* OneM2M_Functions.ttcn, line 1049 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(1052);
/* OneM2M_Functions.ttcn, line 1052 */
switch (a__ae__default_instance()) {
case ALT_YES:
return ALT_YES;
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__ae__cf03()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__ae__cf03_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_ae_cf03.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__ae__cf03()
{
return new a__ae__cf03_Default();
}

OneM2M__Types::RequestPrimitive f__getCreateRequestPrimitive(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__request, const INTEGER& p__parentIndex)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1070, TTCN_Location::LOCATION_FUNCTION, "f_getCreateRequestPrimitive");
OneM2M__Types::RequestPrimitive_template p__request_shadow(p__request);
current_location.update_lineno(1071);
/* OneM2M_Functions.ttcn, line 1071 */
OneM2M__Types::ListOfURIs_template v__defaultListOfURIs;
v__defaultListOfURIs.set_size(1);
v__defaultListOfURIs[0] = cs_37;
current_location.update_lineno(1072);
/* OneM2M_Functions.ttcn, line 1072 */
OneM2M__Types::AcpType_template v__defaultAcpIDs;
v__defaultAcpIDs.set_size(1);
v__defaultAcpIDs[0] = cs_37;
current_location.update_lineno(1074);
/* OneM2M_Functions.ttcn, line 1074 */
if ((p__resourceType != OneM2M__Types::ResourceType::int2)) {
current_location.update_lineno(1075);
/* OneM2M_Functions.ttcn, line 1075 */
p__request_shadow.from__() = f__getOriginator(p__parentIndex);
}
current_location.update_lineno(1077);
/* OneM2M_Functions.ttcn, line 1077 */
p__request_shadow.to__() = f__getResourceAddress(p__parentIndex);
current_location.update_lineno(1079);
/* OneM2M_Functions.ttcn, line 1079 */
if ((p__resourceType == OneM2M__Types::ResourceType::int1)) {
}
current_location.update_lineno(1083);
/* OneM2M_Functions.ttcn, line 1083 */
if ((p__resourceType == OneM2M__Types::ResourceType::int9)) {
current_location.update_lineno(1084);
/* OneM2M_Functions.ttcn, line 1084 */
if (v__defaultListOfURIs.match(p__request_shadow.primitiveContent().any__1()[0].AT_Group__optional().memberIDs().valueof())) {
current_location.update_lineno(1085);
/* OneM2M_Functions.ttcn, line 1085 */
{
OneM2M__Types::ListOfURIs_template& tmp_231 = p__request_shadow.primitiveContent().any__1()[0].AT_Group__optional().memberIDs();
tmp_231.remove_all_permutations();
tmp_231.set_size(1);
tmp_231[0] = f__getResourceAddress(p__parentIndex);
}
}
}
current_location.update_lineno(1089);
/* OneM2M_Functions.ttcn, line 1089 */
if ((p__resourceType == OneM2M__Types::ResourceType::int3)) {
current_location.update_lineno(1091);
/* OneM2M_Functions.ttcn, line 1091 */
if (OneM2M__Pixits::PX__IS__LOC__CONTAINER) {
current_location.update_lineno(1092);
/* OneM2M_Functions.ttcn, line 1092 */
p__request_shadow.primitiveContent().any__1()[0].AT_Container__optional().locationID() = f__getResourceId(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__parentIndex].resource());
}
current_location.update_lineno(1094);
/* OneM2M_Functions.ttcn, line 1094 */
{
boolean tmp_244;
{
boolean tmp_233 = p__request_shadow.is_bound();
if(tmp_233) {
switch (p__request_shadow.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_233 = FALSE;
break;
case ANY_VALUE:
tmp_233 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_233) {
const OneM2M__Types::RequestPrimitive_template& tmp_234 = p__request_shadow;
const OneM2M__Types::PrimitiveContent_template& tmp_235 = tmp_234.primitiveContent();
tmp_233 = tmp_235.is_bound();
if(tmp_233) {
switch (tmp_235.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_233 = FALSE;
break;
case ANY_VALUE:
tmp_233 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_233) {
const OneM2M__Types::PrimitiveContent_template& tmp_236 = tmp_235;
const OneM2M__Types::Contents_template& tmp_237 = tmp_236.any__1();
tmp_233 = tmp_237.is_bound();
if(tmp_233) {
switch (tmp_237.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_233 = FALSE;
break;
case ANY_VALUE:
tmp_233 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_233) {
const int tmp_238 = 0;
tmp_233 = (tmp_238 >= 0) && (tmp_237.n_elem() > tmp_238);
if(tmp_233) {
const OneM2M__Types::anytype_template& tmp_239 = tmp_237[tmp_238];
tmp_233 = tmp_239.is_bound();
if(tmp_233) {
switch (tmp_239.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_233 = FALSE;
break;
case ANY_VALUE:
tmp_233 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_233) {
const OneM2M__Types::anytype_template& tmp_240 = tmp_239;
const OneM2M__Types::Container__optional_template& tmp_241 = tmp_240.AT_Container__optional();
tmp_233 = tmp_241.is_bound();
if(tmp_233) {
switch (tmp_241.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_233 = FALSE;
break;
case ANY_VALUE:
tmp_233 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_233) {
const OneM2M__Types::Container__optional_template& tmp_242 = tmp_241;
const OneM2M__Types::AcpType_template& tmp_243 = tmp_242.accessControlPolicyIDs();
tmp_233 = tmp_243.is_present();
}
break;}
default:
tmp_233 = FALSE;
break;
}
}
}
break;}
default:
tmp_233 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_233 = FALSE;
break;
}
}
}
break;}
default:
tmp_233 = FALSE;
break;
}
}
}
break;}
default:
tmp_233 = FALSE;
break;
}
}
tmp_244 = tmp_233;
}
if (tmp_244) {
current_location.update_lineno(1095);
/* OneM2M_Functions.ttcn, line 1095 */
if (v__defaultAcpIDs.match(p__request_shadow.primitiveContent().any__1()[0].AT_Container__optional().accessControlPolicyIDs().valueof())) {
current_location.update_lineno(1096);
/* OneM2M_Functions.ttcn, line 1096 */
{
OneM2M__Types::AcpType_template& tmp_246 = p__request_shadow.primitiveContent().any__1()[0].AT_Container__optional().accessControlPolicyIDs();
tmp_246.remove_all_permutations();
tmp_246.set_size(1);
tmp_246[0] = f__getResourceId(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[OneM2M__TestSystem::CseTester_component_vc__acpAuxIndex].resource());
}
}
}
}
}
current_location.update_lineno(1101);
/* OneM2M_Functions.ttcn, line 1101 */
if ((p__resourceType == OneM2M__Types::ResourceType::int15)) {
current_location.update_lineno(1102);
/* OneM2M_Functions.ttcn, line 1102 */
if (const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__parentIndex].resource().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AE__optional)) {
current_location.update_lineno(1103);
/* OneM2M_Functions.ttcn, line 1103 */
p__request_shadow.from__() = const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__parentIndex].resource().any__1()[0].AT_AE__optional().aE__ID();
}
}
current_location.update_lineno(1107);
/* OneM2M_Functions.ttcn, line 1107 */
if ((p__resourceType == OneM2M__Types::ResourceType::int18)) {
}
current_location.update_lineno(1110);
/* OneM2M_Functions.ttcn, line 1110 */
if ((p__resourceType == OneM2M__Types::ResourceType::int23)) {
current_location.update_lineno(1112);
/* OneM2M_Functions.ttcn, line 1112 */
if (v__defaultListOfURIs.match(p__request_shadow.primitiveContent().any__1()[0].AT_Subscription__optional().notificationURI().valueof())) {
current_location.update_lineno(1113);
/* OneM2M_Functions.ttcn, line 1113 */
{
OneM2M__Types::ListOfURIs_template& tmp_249 = p__request_shadow.primitiveContent().any__1()[0].AT_Subscription__optional().notificationURI();
tmp_249.remove_all_permutations();
tmp_249.set_size(1);
tmp_249[0] = f__getResourceAddress(p__parentIndex);
}
}
current_location.update_lineno(1116);
/* OneM2M_Functions.ttcn, line 1116 */
{
boolean tmp_261;
{
boolean tmp_250 = p__request_shadow.is_bound();
if(tmp_250) {
switch (p__request_shadow.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_250 = FALSE;
break;
case ANY_VALUE:
tmp_250 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_250) {
const OneM2M__Types::RequestPrimitive_template& tmp_251 = p__request_shadow;
const OneM2M__Types::PrimitiveContent_template& tmp_252 = tmp_251.primitiveContent();
tmp_250 = tmp_252.is_bound();
if(tmp_250) {
switch (tmp_252.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_250 = FALSE;
break;
case ANY_VALUE:
tmp_250 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_250) {
const OneM2M__Types::PrimitiveContent_template& tmp_253 = tmp_252;
const OneM2M__Types::Contents_template& tmp_254 = tmp_253.any__1();
tmp_250 = tmp_254.is_bound();
if(tmp_250) {
switch (tmp_254.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_250 = FALSE;
break;
case ANY_VALUE:
tmp_250 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_250) {
const int tmp_255 = 0;
tmp_250 = (tmp_255 >= 0) && (tmp_254.n_elem() > tmp_255);
if(tmp_250) {
const OneM2M__Types::anytype_template& tmp_256 = tmp_254[tmp_255];
tmp_250 = tmp_256.is_bound();
if(tmp_250) {
switch (tmp_256.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_250 = FALSE;
break;
case ANY_VALUE:
tmp_250 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_250) {
const OneM2M__Types::anytype_template& tmp_257 = tmp_256;
const OneM2M__Types::Subscription__optional_template& tmp_258 = tmp_257.AT_Subscription__optional();
tmp_250 = tmp_258.is_bound();
if(tmp_250) {
switch (tmp_258.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_250 = FALSE;
break;
case ANY_VALUE:
tmp_250 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_250) {
const OneM2M__Types::Subscription__optional_template& tmp_259 = tmp_258;
const UNIVERSAL_CHARSTRING_template& tmp_260 = tmp_259.creator();
tmp_250 = tmp_260.is_present();
}
break;}
default:
tmp_250 = FALSE;
break;
}
}
}
break;}
default:
tmp_250 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_250 = FALSE;
break;
}
}
}
break;}
default:
tmp_250 = FALSE;
break;
}
}
}
break;}
default:
tmp_250 = FALSE;
break;
}
}
tmp_261 = tmp_250;
}
if (tmp_261) {
current_location.update_lineno(1117);
/* OneM2M_Functions.ttcn, line 1117 */
p__request_shadow.primitiveContent().any__1()[0].AT_Subscription__optional().creator() = f__getCreator(p__parentIndex);
}
}
current_location.update_lineno(1120);
/* OneM2M_Functions.ttcn, line 1120 */
{
boolean tmp_274;
{
boolean tmp_263 = p__request_shadow.is_bound();
if(tmp_263) {
switch (p__request_shadow.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_263 = FALSE;
break;
case ANY_VALUE:
tmp_263 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_263) {
const OneM2M__Types::RequestPrimitive_template& tmp_264 = p__request_shadow;
const OneM2M__Types::PrimitiveContent_template& tmp_265 = tmp_264.primitiveContent();
tmp_263 = tmp_265.is_bound();
if(tmp_263) {
switch (tmp_265.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_263 = FALSE;
break;
case ANY_VALUE:
tmp_263 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_263) {
const OneM2M__Types::PrimitiveContent_template& tmp_266 = tmp_265;
const OneM2M__Types::Contents_template& tmp_267 = tmp_266.any__1();
tmp_263 = tmp_267.is_bound();
if(tmp_263) {
switch (tmp_267.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_263 = FALSE;
break;
case ANY_VALUE:
tmp_263 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_263) {
const int tmp_268 = 0;
tmp_263 = (tmp_268 >= 0) && (tmp_267.n_elem() > tmp_268);
if(tmp_263) {
const OneM2M__Types::anytype_template& tmp_269 = tmp_267[tmp_268];
tmp_263 = tmp_269.is_bound();
if(tmp_263) {
switch (tmp_269.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_263 = FALSE;
break;
case ANY_VALUE:
tmp_263 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_263) {
const OneM2M__Types::anytype_template& tmp_270 = tmp_269;
const OneM2M__Types::Subscription__optional_template& tmp_271 = tmp_270.AT_Subscription__optional();
tmp_263 = tmp_271.is_bound();
if(tmp_263) {
switch (tmp_271.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_263 = FALSE;
break;
case ANY_VALUE:
tmp_263 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_263) {
const OneM2M__Types::Subscription__optional_template& tmp_272 = tmp_271;
const OneM2M__Types::AcpType_template& tmp_273 = tmp_272.accessControlPolicyIDs();
tmp_263 = tmp_273.is_present();
}
break;}
default:
tmp_263 = FALSE;
break;
}
}
}
break;}
default:
tmp_263 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_263 = FALSE;
break;
}
}
}
break;}
default:
tmp_263 = FALSE;
break;
}
}
}
break;}
default:
tmp_263 = FALSE;
break;
}
}
tmp_274 = tmp_263;
}
if (tmp_274) {
current_location.update_lineno(1121);
/* OneM2M_Functions.ttcn, line 1121 */
if (v__defaultAcpIDs.match(p__request_shadow.primitiveContent().any__1()[0].AT_Subscription__optional().accessControlPolicyIDs().valueof())) {
current_location.update_lineno(1122);
/* OneM2M_Functions.ttcn, line 1122 */
{
OneM2M__Types::AcpType_template& tmp_276 = p__request_shadow.primitiveContent().any__1()[0].AT_Subscription__optional().accessControlPolicyIDs();
tmp_276.remove_all_permutations();
tmp_276.set_size(1);
tmp_276[0] = f__getResourceId(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[OneM2M__TestSystem::CseTester_component_vc__acpAuxIndex].resource());
}
}
}
}
}
current_location.update_lineno(1126);
/* OneM2M_Functions.ttcn, line 1126 */
if ((p__resourceType == OneM2M__Types::ResourceType::int4)) {
current_location.update_lineno(1128);
/* OneM2M_Functions.ttcn, line 1128 */
{
boolean tmp_288;
{
boolean tmp_277 = p__request_shadow.is_bound();
if(tmp_277) {
switch (p__request_shadow.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_277 = FALSE;
break;
case ANY_VALUE:
tmp_277 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_277) {
const OneM2M__Types::RequestPrimitive_template& tmp_278 = p__request_shadow;
const OneM2M__Types::PrimitiveContent_template& tmp_279 = tmp_278.primitiveContent();
tmp_277 = tmp_279.is_bound();
if(tmp_277) {
switch (tmp_279.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_277 = FALSE;
break;
case ANY_VALUE:
tmp_277 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_277) {
const OneM2M__Types::PrimitiveContent_template& tmp_280 = tmp_279;
const OneM2M__Types::Contents_template& tmp_281 = tmp_280.any__1();
tmp_277 = tmp_281.is_bound();
if(tmp_277) {
switch (tmp_281.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_277 = FALSE;
break;
case ANY_VALUE:
tmp_277 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_277) {
const int tmp_282 = 0;
tmp_277 = (tmp_282 >= 0) && (tmp_281.n_elem() > tmp_282);
if(tmp_277) {
const OneM2M__Types::anytype_template& tmp_283 = tmp_281[tmp_282];
tmp_277 = tmp_283.is_bound();
if(tmp_277) {
switch (tmp_283.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_277 = FALSE;
break;
case ANY_VALUE:
tmp_277 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_277) {
const OneM2M__Types::anytype_template& tmp_284 = tmp_283;
const OneM2M__Types::ContentInstance__optional_template& tmp_285 = tmp_284.AT_ContentInstance__optional();
tmp_277 = tmp_285.is_bound();
if(tmp_277) {
switch (tmp_285.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_277 = FALSE;
break;
case ANY_VALUE:
tmp_277 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_277) {
const OneM2M__Types::ContentInstance__optional_template& tmp_286 = tmp_285;
const UNIVERSAL_CHARSTRING_template& tmp_287 = tmp_286.creator();
tmp_277 = tmp_287.is_present();
}
break;}
default:
tmp_277 = FALSE;
break;
}
}
}
break;}
default:
tmp_277 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_277 = FALSE;
break;
}
}
}
break;}
default:
tmp_277 = FALSE;
break;
}
}
}
break;}
default:
tmp_277 = FALSE;
break;
}
}
tmp_288 = tmp_277;
}
if (tmp_288) {
current_location.update_lineno(1129);
/* OneM2M_Functions.ttcn, line 1129 */
p__request_shadow.primitiveContent().any__1()[0].AT_ContentInstance__optional().creator() = f__getCreator(p__parentIndex);
}
}
}
current_location.update_lineno(1133);
/* OneM2M_Functions.ttcn, line 1133 */
return p__request_shadow.valueof();
}

void start_f__getCreateRequestPrimitive(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__request, const INTEGER& p__parentIndex)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getCreateRequestPrimitive(");
p__resourceType.log();
TTCN_Logger::log_event_str(", ");
p__request.log();
TTCN_Logger::log_event_str(", ");
p__parentIndex.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_getCreateRequestPrimitive", text_buf);
p__resourceType.encode_text(text_buf);
p__request.encode_text(text_buf);
p__parentIndex.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

OneM2M__Types::ResponsePrimitive f__getCreateResponsePrimitive(const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__request)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1144, TTCN_Location::LOCATION_FUNCTION, "f_getCreateResponsePrimitive");
OneM2M__Types::RequestPrimitive_template p__request_shadow(p__request);
current_location.update_lineno(1145);
/* OneM2M_Functions.ttcn, line 1145 */
OneM2M__Types::ResponsePrimitive_template v__responsePrimitive;
current_location.update_lineno(1147);
/* OneM2M_Functions.ttcn, line 1147 */
if ((p__resourceType != OneM2M__Types::ResourceType::int2)) {
current_location.update_lineno(1148);
/* OneM2M_Functions.ttcn, line 1148 */
v__responsePrimitive.from__() = p__request_shadow.to__();
}
current_location.update_lineno(1150);
/* OneM2M_Functions.ttcn, line 1150 */
{
UNIVERSAL_CHARSTRING_template tmp_291;
tmp_291 = p__request_shadow.from__();
p__request_shadow.to__() = tmp_291;
}
current_location.update_lineno(1152);
/* OneM2M_Functions.ttcn, line 1152 */
if ((p__resourceType == OneM2M__Types::ResourceType::int1)) {
}
current_location.update_lineno(1156);
/* OneM2M_Functions.ttcn, line 1156 */
if ((p__resourceType == OneM2M__Types::ResourceType::int9)) {
}
current_location.update_lineno(1160);
/* OneM2M_Functions.ttcn, line 1160 */
if ((p__resourceType == OneM2M__Types::ResourceType::int3)) {
}
current_location.update_lineno(1164);
/* OneM2M_Functions.ttcn, line 1164 */
if ((p__resourceType == OneM2M__Types::ResourceType::int15)) {
}
current_location.update_lineno(1168);
/* OneM2M_Functions.ttcn, line 1168 */
if ((p__resourceType == OneM2M__Types::ResourceType::int18)) {
}
current_location.update_lineno(1171);
/* OneM2M_Functions.ttcn, line 1171 */
if ((p__resourceType == OneM2M__Types::ResourceType::int23)) {
}
current_location.update_lineno(1176);
/* OneM2M_Functions.ttcn, line 1176 */
return v__responsePrimitive.valueof();
}

void start_f__getCreateResponsePrimitive(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const OneM2M__Types::RequestPrimitive_template& p__request)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getCreateResponsePrimitive(");
p__resourceType.log();
TTCN_Logger::log_event_str(", ");
p__request.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_getCreateResponsePrimitive", text_buf);
p__resourceType.encode_text(text_buf);
p__request.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

OneM2M__Types::RequestPrimitive f__getUpdateRequestPrimitive(const OneM2M__Types::ResourceType& p__resourceType, const INTEGER& p__resourceIndex, const OneM2M__Types::RequestPrimitive_template& p__request)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1187, TTCN_Location::LOCATION_FUNCTION, "f_getUpdateRequestPrimitive");
OneM2M__Types::RequestPrimitive_template p__request_shadow(p__request);
current_location.update_lineno(1189);
/* OneM2M_Functions.ttcn, line 1189 */
p__request_shadow.from__() = f__getOriginator(p__resourceIndex);
current_location.update_lineno(1191);
/* OneM2M_Functions.ttcn, line 1191 */
p__request_shadow.to__() = f__getResourceAddress(p__resourceIndex);
current_location.update_lineno(1193);
/* OneM2M_Functions.ttcn, line 1193 */
if ((p__resourceType == OneM2M__Types::ResourceType::int3)) {
}
current_location.update_lineno(1198);
/* OneM2M_Functions.ttcn, line 1198 */
if ((p__resourceType == OneM2M__Types::ResourceType::int9)) {
}
current_location.update_lineno(1203);
/* OneM2M_Functions.ttcn, line 1203 */
if ((p__resourceType == OneM2M__Types::ResourceType::int18)) {
}
current_location.update_lineno(1208);
/* OneM2M_Functions.ttcn, line 1208 */
if ((p__resourceType == OneM2M__Types::ResourceType::int15)) {
}
current_location.update_lineno(1212);
/* OneM2M_Functions.ttcn, line 1212 */
if ((p__resourceType == OneM2M__Types::ResourceType::int23)) {
}
current_location.update_lineno(1216);
/* OneM2M_Functions.ttcn, line 1216 */
return p__request_shadow.valueof();
}

void start_f__getUpdateRequestPrimitive(const COMPONENT& component_reference, const OneM2M__Types::ResourceType& p__resourceType, const INTEGER& p__resourceIndex, const OneM2M__Types::RequestPrimitive_template& p__request)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getUpdateRequestPrimitive(");
p__resourceType.log();
TTCN_Logger::log_event_str(", ");
p__resourceIndex.log();
TTCN_Logger::log_event_str(", ");
p__request.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_getUpdateRequestPrimitive", text_buf);
p__resourceType.encode_text(text_buf);
p__resourceIndex.encode_text(text_buf);
p__request.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

UNIVERSAL_CHARSTRING f__getResourceId(const OneM2M__Types::PrimitiveContent& p__contentResource)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1225, TTCN_Location::LOCATION_FUNCTION, "f_getResourceId");
current_location.update_lineno(1227);
/* OneM2M_Functions.ttcn, line 1227 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AccessControlPolicy__optional)) {
current_location.update_lineno(1228);
/* OneM2M_Functions.ttcn, line 1228 */
return f__resourceIdCleaner(const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_AccessControlPolicy__optional().resourceID());
}
current_location.update_lineno(1230);
/* OneM2M_Functions.ttcn, line 1230 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Container__optional)) {
current_location.update_lineno(1231);
/* OneM2M_Functions.ttcn, line 1231 */
return f__resourceIdCleaner(const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_Container__optional().resourceID());
}
current_location.update_lineno(1233);
/* OneM2M_Functions.ttcn, line 1233 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_ContentInstance__optional)) {
current_location.update_lineno(1234);
/* OneM2M_Functions.ttcn, line 1234 */
return f__resourceIdCleaner(const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_ContentInstance__optional().resourceID());
}
current_location.update_lineno(1236);
/* OneM2M_Functions.ttcn, line 1236 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Schedule__optional)) {
current_location.update_lineno(1237);
/* OneM2M_Functions.ttcn, line 1237 */
return f__resourceIdCleaner(const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_Schedule__optional().resourceID());
}
current_location.update_lineno(1239);
/* OneM2M_Functions.ttcn, line 1239 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_PollingChannel__optional)) {
current_location.update_lineno(1240);
/* OneM2M_Functions.ttcn, line 1240 */
return f__resourceIdCleaner(const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_PollingChannel__optional().resourceID());
}
current_location.update_lineno(1242);
/* OneM2M_Functions.ttcn, line 1242 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Subscription__optional)) {
current_location.update_lineno(1243);
/* OneM2M_Functions.ttcn, line 1243 */
return f__resourceIdCleaner(const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_Subscription__optional().resourceID());
}
current_location.update_lineno(1245);
/* OneM2M_Functions.ttcn, line 1245 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Group__optional)) {
current_location.update_lineno(1246);
/* OneM2M_Functions.ttcn, line 1246 */
return f__resourceIdCleaner(const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_Group__optional().resourceID());
}
current_location.update_lineno(1248);
/* OneM2M_Functions.ttcn, line 1248 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AE__optional)) {
current_location.update_lineno(1249);
/* OneM2M_Functions.ttcn, line 1249 */
return f__resourceIdCleaner(const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_AE__optional().resourceID());
}
current_location.update_lineno(1251);
/* OneM2M_Functions.ttcn, line 1251 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_ServiceSubscribedAppRule__optional)) {
current_location.update_lineno(1252);
/* OneM2M_Functions.ttcn, line 1252 */
return f__resourceIdCleaner(const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_ServiceSubscribedAppRule__optional().resourceID());
}
current_location.update_lineno(1254);
/* OneM2M_Functions.ttcn, line 1254 */
TTCN_Logger::log_str(TTCN_USER, "f_getResourceId:WARNING: Primitive Content Kind not implemented");
current_location.update_lineno(1256);
/* OneM2M_Functions.ttcn, line 1256 */
return cs_38;
}

UNIVERSAL_CHARSTRING f__getResourceName(const OneM2M__Types::PrimitiveContent& p__contentResource)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1266, TTCN_Location::LOCATION_FUNCTION, "f_getResourceName");
current_location.update_lineno(1268);
/* OneM2M_Functions.ttcn, line 1268 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AccessControlPolicy__optional)) {
current_location.update_lineno(1269);
/* OneM2M_Functions.ttcn, line 1269 */
return const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_AccessControlPolicy__optional().resourceName()();
}
current_location.update_lineno(1271);
/* OneM2M_Functions.ttcn, line 1271 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Container__optional)) {
current_location.update_lineno(1272);
/* OneM2M_Functions.ttcn, line 1272 */
return const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_Container__optional().resourceName()();
}
current_location.update_lineno(1274);
/* OneM2M_Functions.ttcn, line 1274 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_ContentInstance__optional)) {
current_location.update_lineno(1275);
/* OneM2M_Functions.ttcn, line 1275 */
return const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_ContentInstance__optional().resourceName()();
}
current_location.update_lineno(1277);
/* OneM2M_Functions.ttcn, line 1277 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Schedule__optional)) {
current_location.update_lineno(1278);
/* OneM2M_Functions.ttcn, line 1278 */
return const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_Schedule__optional().resourceName()();
}
current_location.update_lineno(1280);
/* OneM2M_Functions.ttcn, line 1280 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_PollingChannel__optional)) {
current_location.update_lineno(1281);
/* OneM2M_Functions.ttcn, line 1281 */
return const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_PollingChannel__optional().resourceName()();
}
current_location.update_lineno(1283);
/* OneM2M_Functions.ttcn, line 1283 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Subscription__optional)) {
current_location.update_lineno(1284);
/* OneM2M_Functions.ttcn, line 1284 */
return const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_Subscription__optional().resourceName()();
}
current_location.update_lineno(1286);
/* OneM2M_Functions.ttcn, line 1286 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Group__optional)) {
current_location.update_lineno(1287);
/* OneM2M_Functions.ttcn, line 1287 */
return const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_Group__optional().resourceName()();
}
current_location.update_lineno(1289);
/* OneM2M_Functions.ttcn, line 1289 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AE__optional)) {
current_location.update_lineno(1290);
/* OneM2M_Functions.ttcn, line 1290 */
return const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_AE__optional().resourceName()();
}
current_location.update_lineno(1292);
/* OneM2M_Functions.ttcn, line 1292 */
if (const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].ischosen(OneM2M__Types::anytype::ALT_ServiceSubscribedAppRule__optional)) {
current_location.update_lineno(1293);
/* OneM2M_Functions.ttcn, line 1293 */
return const_cast< const OneM2M__Types::PrimitiveContent&>(p__contentResource).any__1()[0].AT_ServiceSubscribedAppRule__optional().resourceName()();
}
current_location.update_lineno(1295);
/* OneM2M_Functions.ttcn, line 1295 */
TTCN_Logger::log_str(TTCN_USER, "f_getResourceName:WARNING: Primitive Content Kind not implemented");
current_location.update_lineno(1297);
/* OneM2M_Functions.ttcn, line 1297 */
return cs_39;
}

UNIVERSAL_CHARSTRING f__getOriginator(const INTEGER& p__targetResourceIndex)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1307, TTCN_Location::LOCATION_FUNCTION, "f_getOriginator");
current_location.update_lineno(1309);
/* OneM2M_Functions.ttcn, line 1309 */
if ((p__targetResourceIndex == -1)) {
current_location.update_lineno(1310);
/* OneM2M_Functions.ttcn, line 1310 */
return OneM2M__Pixits::PX__SUPER__USER;
}
current_location.update_lineno(1313);
/* OneM2M_Functions.ttcn, line 1313 */
if (OneM2M__Pixits::PX__FROM__IS__AE__ID) {
current_location.update_lineno(1314);
/* OneM2M_Functions.ttcn, line 1314 */
if (const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].resource().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AE__optional)) {
current_location.update_lineno(1315);
/* OneM2M_Functions.ttcn, line 1315 */
return const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].resource().any__1()[0].AT_AE__optional().aE__ID()();
}
else {
current_location.update_lineno(1317);
/* OneM2M_Functions.ttcn, line 1317 */
return f__getOriginator(INTEGER(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].parentIndex()));
}
}
else {
current_location.update_lineno(1320);
/* OneM2M_Functions.ttcn, line 1320 */
return OneM2M__Pixits::PX__SUPER__USER;
}
}

void start_f__getOriginator(const COMPONENT& component_reference, const INTEGER& p__targetResourceIndex)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getOriginator(");
p__targetResourceIndex.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_getOriginator", text_buf);
p__targetResourceIndex.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

UNIVERSAL_CHARSTRING f__getCreator(const INTEGER& p__targetResourceIndex)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1330, TTCN_Location::LOCATION_FUNCTION, "f_getCreator");
current_location.update_lineno(1332);
/* OneM2M_Functions.ttcn, line 1332 */
if ((p__targetResourceIndex == -1)) {
current_location.update_lineno(1333);
/* OneM2M_Functions.ttcn, line 1333 */
return OneM2M__Pixits::PX__CSE__ID;
}
current_location.update_lineno(1336);
/* OneM2M_Functions.ttcn, line 1336 */
if (const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].resource().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AE__optional)) {
current_location.update_lineno(1337);
/* OneM2M_Functions.ttcn, line 1337 */
return const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].resource().any__1()[0].AT_AE__optional().aE__ID()();
}
else {
current_location.update_lineno(1339);
/* OneM2M_Functions.ttcn, line 1339 */
return f__getCreator(INTEGER(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].parentIndex()));
}
}

void start_f__getCreator(const COMPONENT& component_reference, const INTEGER& p__targetResourceIndex)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getCreator(");
p__targetResourceIndex.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_getCreator", text_buf);
p__targetResourceIndex.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

INTEGER f__getAttribute(const OneM2M__Types::AttributeList__1& p__attributeList, const UNIVERSAL_CHARSTRING& p__attributeName)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1351, TTCN_Location::LOCATION_FUNCTION, "f_getAttribute");
current_location.update_lineno(1352);
/* OneM2M_Functions.ttcn, line 1352 */
INTEGER i;
current_location.update_lineno(1354);
/* OneM2M_Functions.ttcn, line 1354 */
i = 0;
current_location.update_lineno(1354);
/* OneM2M_Functions.ttcn, line 1354 */
for ( ; ; ) {
current_location.update_lineno(1354);
/* OneM2M_Functions.ttcn, line 1354 */
if (!(i < p__attributeList.lengthof())) break;
current_location.update_lineno(1355);
/* OneM2M_Functions.ttcn, line 1355 */
if ((const_cast< const OneM2M__Types::AttributeList__1&>(p__attributeList)[i] == p__attributeName)) {
current_location.update_lineno(1356);
/* OneM2M_Functions.ttcn, line 1356 */
return i;
}
current_location.update_lineno(1354);
/* OneM2M_Functions.ttcn, line 1354 */
{
INTEGER tmp_295;
++i;
}
}
current_location.update_lineno(1360);
/* OneM2M_Functions.ttcn, line 1360 */
return -1;
}

CHARSTRING f__getAnnouncementTargetPoA(const CHARSTRING& p__protocolBinding, const CHARSTRING& p__announcementTargetAddress, const CHARSTRING& p__announcementTargetResource)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1371, TTCN_Location::LOCATION_FUNCTION, "f_getAnnouncementTargetPoA");
current_location.update_lineno(1373);
/* OneM2M_Functions.ttcn, line 1373 */
if ((p__protocolBinding == cs_40)) {
current_location.update_lineno(1374);
/* OneM2M_Functions.ttcn, line 1374 */
return (((cs_5 + p__announcementTargetAddress) + cs_6) + p__announcementTargetResource);
}
else {
current_location.update_lineno(1375);
/* OneM2M_Functions.ttcn, line 1375 */
if ((p__protocolBinding == cs_41)) {
current_location.update_lineno(1376);
/* OneM2M_Functions.ttcn, line 1376 */
return (((cs_42 + p__announcementTargetAddress) + cs_6) + p__announcementTargetResource);
}
else {
current_location.update_lineno(1377);
/* OneM2M_Functions.ttcn, line 1377 */
if ((p__protocolBinding == cs_43)) {
current_location.update_lineno(1378);
/* OneM2M_Functions.ttcn, line 1378 */
return (((cs_44 + OneM2M__Pixits::PX__SUT__ADDRESS) + cs_6) + p__announcementTargetResource);
}
else {
current_location.update_lineno(1380);
/* OneM2M_Functions.ttcn, line 1380 */
return (((cs_45 + p__announcementTargetAddress) + cs_6) + p__announcementTargetResource);
}
}
}
}

INTEGER f__getResourceIndex(const UNIVERSAL_CHARSTRING& )
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1390, TTCN_Location::LOCATION_FUNCTION, "f_getResourceIndex");
current_location.update_lineno(1391);
/* OneM2M_Functions.ttcn, line 1391 */
return -1;
}

UNIVERSAL_CHARSTRING f__getResourceAddress(const INTEGER& p__targetResourceIndex)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1400, TTCN_Location::LOCATION_FUNCTION, "f_getResourceAddress");
current_location.update_lineno(1401);
/* OneM2M_Functions.ttcn, line 1401 */
UNIVERSAL_CHARSTRING v__resourceAddress;
current_location.update_lineno(1403);
/* OneM2M_Functions.ttcn, line 1403 */
if ((OneM2M__Pixits::PX__ADDRESSING__FORMAT == OneM2M__Types::AddressingFormat::e__cseRelative)) {
current_location.update_lineno(1405);
/* OneM2M_Functions.ttcn, line 1405 */
if (OneM2M__Pixits::PX__UNSTRUCTURED) {
current_location.update_lineno(1406);
/* OneM2M_Functions.ttcn, line 1406 */
if ((p__targetResourceIndex == -1)) {
current_location.update_lineno(1407);
/* OneM2M_Functions.ttcn, line 1407 */
return OneM2M__Pixits::PX__CSE__RESOURCE__ID;
}
else {
current_location.update_lineno(1409);
/* OneM2M_Functions.ttcn, line 1409 */
return f__getResourceId(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].resource());
}
}
else {
current_location.update_lineno(1412);
/* OneM2M_Functions.ttcn, line 1412 */
if ((p__targetResourceIndex == -1)) {
current_location.update_lineno(1413);
/* OneM2M_Functions.ttcn, line 1413 */
return OneM2M__Pixits::PX__CSE__NAME;
}
else {
current_location.update_lineno(1415);
/* OneM2M_Functions.ttcn, line 1415 */
v__resourceAddress = ((f__getResourceAddress(INTEGER(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].parentIndex())) + cs_6) + f__getResourceName(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].resource()));
current_location.update_lineno(1416);
/* OneM2M_Functions.ttcn, line 1416 */
return v__resourceAddress;
}
}
}
else {
current_location.update_lineno(1420);
/* OneM2M_Functions.ttcn, line 1420 */
if ((OneM2M__Pixits::PX__ADDRESSING__FORMAT == OneM2M__Types::AddressingFormat::e__spRelative)) {
current_location.update_lineno(1421);
/* OneM2M_Functions.ttcn, line 1421 */
if (OneM2M__Pixits::PX__UNSTRUCTURED) {
current_location.update_lineno(1422);
/* OneM2M_Functions.ttcn, line 1422 */
if ((p__targetResourceIndex == -1)) {
current_location.update_lineno(1423);
/* OneM2M_Functions.ttcn, line 1423 */
return (cs_6 + OneM2M__Pixits::PX__CSE__ID);
}
else {
current_location.update_lineno(1425);
/* OneM2M_Functions.ttcn, line 1425 */
v__resourceAddress = ((f__getResourceAddress(f__getResourceAddress_p__targetResourceIndex_defval) + cs_6) + f__getResourceId(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].resource()));
current_location.update_lineno(1426);
/* OneM2M_Functions.ttcn, line 1426 */
return v__resourceAddress;
}
}
else {
current_location.update_lineno(1429);
/* OneM2M_Functions.ttcn, line 1429 */
if ((p__targetResourceIndex == -1)) {
current_location.update_lineno(1430);
/* OneM2M_Functions.ttcn, line 1430 */
return (((cs_6 + OneM2M__Pixits::PX__CSE__ID) + cs_6) + OneM2M__Pixits::PX__CSE__NAME);
}
else {
current_location.update_lineno(1432);
/* OneM2M_Functions.ttcn, line 1432 */
v__resourceAddress = ((f__getResourceAddress(INTEGER(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].parentIndex())) + cs_6) + f__getResourceName(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].resource()));
current_location.update_lineno(1433);
/* OneM2M_Functions.ttcn, line 1433 */
return v__resourceAddress;
}
}
}
else {
current_location.update_lineno(1436);
/* OneM2M_Functions.ttcn, line 1436 */
if ((OneM2M__Pixits::PX__ADDRESSING__FORMAT == OneM2M__Types::AddressingFormat::e__absolute)) {
current_location.update_lineno(1437);
/* OneM2M_Functions.ttcn, line 1437 */
if (OneM2M__Pixits::PX__UNSTRUCTURED) {
current_location.update_lineno(1438);
/* OneM2M_Functions.ttcn, line 1438 */
if ((p__targetResourceIndex == -1)) {
current_location.update_lineno(1439);
/* OneM2M_Functions.ttcn, line 1439 */
return (cs_47 + OneM2M__Pixits::PX__CSE__ID);
}
else {
current_location.update_lineno(1441);
/* OneM2M_Functions.ttcn, line 1441 */
v__resourceAddress = ((f__getResourceAddress(f__getResourceAddress_p__targetResourceIndex_defval) + cs_6) + f__getResourceId(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].resource()));
current_location.update_lineno(1442);
/* OneM2M_Functions.ttcn, line 1442 */
return v__resourceAddress;
}
}
else {
current_location.update_lineno(1445);
/* OneM2M_Functions.ttcn, line 1445 */
if ((p__targetResourceIndex == -1)) {
current_location.update_lineno(1446);
/* OneM2M_Functions.ttcn, line 1446 */
return (((cs_47 + OneM2M__Pixits::PX__CSE__ID) + cs_6) + OneM2M__Pixits::PX__CSE__NAME);
}
else {
current_location.update_lineno(1448);
/* OneM2M_Functions.ttcn, line 1448 */
v__resourceAddress = ((f__getResourceAddress(INTEGER(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].parentIndex())) + cs_6) + f__getResourceName(const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].resource()));
current_location.update_lineno(1449);
/* OneM2M_Functions.ttcn, line 1449 */
return v__resourceAddress;
}
}
}
else {
current_location.update_lineno(1453);
/* OneM2M_Functions.ttcn, line 1453 */
return cs_3;
}
}
}
}

void start_f__getResourceAddress(const COMPONENT& component_reference, const INTEGER& p__targetResourceIndex)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getResourceAddress(");
p__targetResourceIndex.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_getResourceAddress", text_buf);
p__targetResourceIndex.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

INTEGER f__setResource(const OneM2M__Types::PrimitiveContent& p__resource, const INTEGER& p__parentIndex)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1464, TTCN_Location::LOCATION_FUNCTION, "f_setResource");
current_location.update_lineno(1466);
/* OneM2M_Functions.ttcn, line 1466 */
if (OneM2M__TestSystem::Tester_component_vc__resourcesList.is_bound()) {
current_location.update_lineno(1467);
/* OneM2M_Functions.ttcn, line 1467 */
{
OneM2M__Types::MyResource& tmp_302 = OneM2M__TestSystem::Tester_component_vc__resourcesList[OneM2M__TestSystem::Tester_component_vc__resourcesList.lengthof()]; /* 7388 */
tmp_302.parentIndex() = p__parentIndex;
tmp_302.resource() = p__resource;
}
}
else {
current_location.update_lineno(1469);
/* OneM2M_Functions.ttcn, line 1469 */
{
OneM2M__Types::MyResource& tmp_304 = OneM2M__TestSystem::Tester_component_vc__resourcesList[0]; /* 7388 */
tmp_304.parentIndex() = p__parentIndex;
tmp_304.resource() = p__resource;
}
}
current_location.update_lineno(1471);
/* OneM2M_Functions.ttcn, line 1471 */
return (OneM2M__TestSystem::Tester_component_vc__resourcesList.lengthof() - 1);
}

void start_f__setResource(const COMPONENT& component_reference, const OneM2M__Types::PrimitiveContent& p__resource, const INTEGER& p__parentIndex)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_setResource(");
p__resource.log();
TTCN_Logger::log_event_str(", ");
p__parentIndex.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_setResource", text_buf);
p__resource.encode_text(text_buf);
p__parentIndex.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

OneM2M__Types::RequestPrimitive f__setAcpId(const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::AcpType_template& p__accessControlPolicyIDs)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1482, TTCN_Location::LOCATION_FUNCTION, "f_setAcpId");
OneM2M__Types::RequestPrimitive_template p__requestPrimitive_shadow(p__requestPrimitive);
current_location.update_lineno(1484);
/* OneM2M_Functions.ttcn, line 1484 */
if (p__requestPrimitive_shadow.primitiveContent().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AE__optional)) {
current_location.update_lineno(1485);
/* OneM2M_Functions.ttcn, line 1485 */
p__requestPrimitive_shadow.primitiveContent().any__1()[0].AT_AE__optional().accessControlPolicyIDs() = p__accessControlPolicyIDs;
}
else {
current_location.update_lineno(1487);
/* OneM2M_Functions.ttcn, line 1487 */
if (p__requestPrimitive_shadow.primitiveContent().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Container__optional)) {
current_location.update_lineno(1488);
/* OneM2M_Functions.ttcn, line 1488 */
p__requestPrimitive_shadow.primitiveContent().any__1()[0].AT_Container__optional().accessControlPolicyIDs() = p__accessControlPolicyIDs;
}
else {
current_location.update_lineno(1490);
/* OneM2M_Functions.ttcn, line 1490 */
if (p__requestPrimitive_shadow.primitiveContent().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Group__optional)) {
current_location.update_lineno(1491);
/* OneM2M_Functions.ttcn, line 1491 */
p__requestPrimitive_shadow.primitiveContent().any__1()[0].AT_Group__optional().accessControlPolicyIDs() = p__accessControlPolicyIDs;
}
else {
current_location.update_lineno(1493);
/* OneM2M_Functions.ttcn, line 1493 */
if (p__requestPrimitive_shadow.primitiveContent().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_ServiceSubscribedAppRule__optional)) {
current_location.update_lineno(1494);
/* OneM2M_Functions.ttcn, line 1494 */
p__requestPrimitive_shadow.primitiveContent().any__1()[0].AT_ServiceSubscribedAppRule__optional().accessControlPolicyIDs() = p__accessControlPolicyIDs;
}
else {
current_location.update_lineno(1496);
/* OneM2M_Functions.ttcn, line 1496 */
if (p__requestPrimitive_shadow.primitiveContent().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Subscription__optional)) {
current_location.update_lineno(1497);
/* OneM2M_Functions.ttcn, line 1497 */
p__requestPrimitive_shadow.primitiveContent().any__1()[0].AT_Subscription__optional().accessControlPolicyIDs() = p__accessControlPolicyIDs;
}
else {
current_location.update_lineno(1499);
/* OneM2M_Functions.ttcn, line 1499 */
if (p__requestPrimitive_shadow.primitiveContent().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_LocationPolicy__optional)) {
current_location.update_lineno(1500);
/* OneM2M_Functions.ttcn, line 1500 */
p__requestPrimitive_shadow.primitiveContent().any__1()[0].AT_LocationPolicy__optional().accessControlPolicyIDs() = p__accessControlPolicyIDs;
}
}
}
}
}
}
current_location.update_lineno(1502);
/* OneM2M_Functions.ttcn, line 1502 */
return p__requestPrimitive_shadow.valueof();
}

void start_f__setAcpId(const COMPONENT& component_reference, const OneM2M__Types::RequestPrimitive_template& p__requestPrimitive, const OneM2M__Types::AcpType_template& p__accessControlPolicyIDs)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_setAcpId(");
p__requestPrimitive.log();
TTCN_Logger::log_event_str(", ");
p__accessControlPolicyIDs.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_setAcpId", text_buf);
p__requestPrimitive.encode_text(text_buf);
p__accessControlPolicyIDs.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

UNIVERSAL_CHARSTRING f__getAeId(const INTEGER& p__targetResourceIndex)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1510, TTCN_Location::LOCATION_FUNCTION, "f_getAeId");
current_location.update_lineno(1512);
/* OneM2M_Functions.ttcn, line 1512 */
if (const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].resource().any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AE__optional)) {
current_location.update_lineno(1513);
/* OneM2M_Functions.ttcn, line 1513 */
return const_cast< const OneM2M__Types::MyResourcesList&>(OneM2M__TestSystem::Tester_component_vc__resourcesList)[p__targetResourceIndex].resource().any__1()[0].AT_AE__optional().aE__ID()();
}
current_location.update_lineno(1516);
/* OneM2M_Functions.ttcn, line 1516 */
TTCN_Logger::log_str(TTCN_USER, "f_getAeId: WARNING: p_targetResourceIndex does not refer to AE resource");
current_location.update_lineno(1517);
/* OneM2M_Functions.ttcn, line 1517 */
return cs_3;
}

void start_f__getAeId(const COMPONENT& component_reference, const INTEGER& p__targetResourceIndex)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getAeId(");
p__targetResourceIndex.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_getAeId", text_buf);
p__targetResourceIndex.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__checkCseTesterStatus()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1533, TTCN_Location::LOCATION_FUNCTION, "f_checkCseTesterStatus");
current_location.update_lineno(1535);
/* OneM2M_Functions.ttcn, line 1535 */
try {
TTCN_Logger::begin_event(TTCN_USER);
{
VERDICTTYPE tmp_311(TTCN_Runtime::getverdict());
tmp_311.log();
}
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1536);
/* OneM2M_Functions.ttcn, line 1536 */
if ((TTCN_Runtime::getverdict() != PASS)) {
current_location.update_lineno(1537);
/* OneM2M_Functions.ttcn, line 1537 */
f__cse__postamble__deleteResources();
current_location.update_lineno(1539);
/* OneM2M_Functions.ttcn, line 1539 */
f__cfCseTesterDown();
current_location.update_lineno(1540);
/* OneM2M_Functions.ttcn, line 1540 */
TTCN_Runtime::stop_execution();
}
}

void start_f__checkCseTesterStatus(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_checkCseTesterStatus(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_checkCseTesterStatus", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__checkAeTesterStatus()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1550, TTCN_Location::LOCATION_FUNCTION, "f_checkAeTesterStatus");
current_location.update_lineno(1552);
/* OneM2M_Functions.ttcn, line 1552 */
if ((TTCN_Runtime::getverdict() != PASS)) {
current_location.update_lineno(1555);
/* OneM2M_Functions.ttcn, line 1555 */
f__cfAeTesterDown();
current_location.update_lineno(1556);
/* OneM2M_Functions.ttcn, line 1556 */
TTCN_Runtime::stop_execution();
}
}

void start_f__checkAeTesterStatus(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_checkAeTesterStatus(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_checkAeTesterStatus", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__sendAcPrimitive(const CHARSTRING& p__event, const CHARSTRING& p__data)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1566, TTCN_Location::LOCATION_FUNCTION, "f_sendAcPrimitive");
current_location.update_lineno(1569);
/* OneM2M_Functions.ttcn, line 1569 */
CHARSTRING v__data((cs_3 + p__data));
current_location.update_lineno(1570);
/* OneM2M_Functions.ttcn, line 1570 */
{
OneM2M__Types::AcRequestPrimitive_template tmp_312;
tmp_312.event() = p__event;
tmp_312.data().AT_CHARSTRING() = v__data;
OneM2M__TestSystem::Tester_component_acPort.send(tmp_312);
}
}

void start_f__sendAcPrimitive(const COMPONENT& component_reference, const CHARSTRING& p__event, const CHARSTRING& p__data)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sendAcPrimitive(");
p__event.log();
TTCN_Logger::log_event_str(", ");
p__data.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_sendAcPrimitive", text_buf);
p__event.encode_text(text_buf);
p__data.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

alt_status a__default_instance()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1579, TTCN_Location::LOCATION_ALTSTEP, "a_default");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1581);
/* OneM2M_Functions.ttcn, line 1581 */
switch (OneM2M__TestSystem::Tester_component_tc__wait.timeout(NULL)) {
case ALT_YES:
{
current_location.update_lineno(1582);
/* OneM2M_Functions.ttcn, line 1582 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("a_default: ERROR: Timeout while awaiting reaction of the IUT prior to Upper Tester action"),TTCN_Logger::end_event_log2str()));
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(1584);
/* OneM2M_Functions.ttcn, line 1584 */
switch (OneM2M__TestSystem::Tester_component_tc__ac.timeout(NULL)) {
case ALT_YES:
{
current_location.update_lineno(1585);
/* OneM2M_Functions.ttcn, line 1585 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("a_default: ERROR: Timeout while awaiting the reception of a message"),TTCN_Logger::end_event_log2str()));
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__default()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__default_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_default.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__default()
{
return new a__default_Default();
}

UNIVERSAL_CHARSTRING f__resourceIdCleaner(const UNIVERSAL_CHARSTRING& p__resourceID)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1591, TTCN_Location::LOCATION_FUNCTION, "f_resourceIdCleaner");
current_location.update_lineno(1592);
/* OneM2M_Functions.ttcn, line 1592 */
INTEGER v__length(p__resourceID.lengthof());
current_location.update_lineno(1593);
/* OneM2M_Functions.ttcn, line 1593 */
INTEGER i;
current_location.update_lineno(1594);
/* OneM2M_Functions.ttcn, line 1594 */
UNIVERSAL_CHARSTRING result(cs_3);
current_location.update_lineno(1596);
/* OneM2M_Functions.ttcn, line 1596 */
i = (v__length - 1);
current_location.update_lineno(1596);
/* OneM2M_Functions.ttcn, line 1596 */
for ( ; ; ) {
current_location.update_lineno(1596);
/* OneM2M_Functions.ttcn, line 1596 */
if (!(i >= 0)) break;
current_location.update_lineno(1597);
/* OneM2M_Functions.ttcn, line 1597 */
if ((const_cast< const UNIVERSAL_CHARSTRING&>(p__resourceID)[i] == cs_6)) {
current_location.update_lineno(1598);
/* OneM2M_Functions.ttcn, line 1598 */
return result;
}
else {
current_location.update_lineno(1601);
/* OneM2M_Functions.ttcn, line 1601 */
{
UNIVERSAL_CHARSTRING tmp_314;
tmp_314 = (const_cast< const UNIVERSAL_CHARSTRING&>(p__resourceID)[i] + result);
result = tmp_314;
}
}
current_location.update_lineno(1596);
/* OneM2M_Functions.ttcn, line 1596 */
{
INTEGER tmp_315;
--i;
}
}
current_location.update_lineno(1604);
/* OneM2M_Functions.ttcn, line 1604 */
return result;
}

void f__removeElementFromList(OneM2M__Types::IntegerList& p__list, const INTEGER& index)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1606, TTCN_Location::LOCATION_FUNCTION, "f_removeElementFromList");
current_location.update_lineno(1607);
/* OneM2M_Functions.ttcn, line 1607 */
OneM2M__Types::IntegerList result(NULL_VALUE);
current_location.update_lineno(1608);
/* OneM2M_Functions.ttcn, line 1608 */
INTEGER i;
current_location.update_lineno(1609);
/* OneM2M_Functions.ttcn, line 1609 */
i = 0;
current_location.update_lineno(1609);
/* OneM2M_Functions.ttcn, line 1609 */
for ( ; ; ) {
current_location.update_lineno(1609);
/* OneM2M_Functions.ttcn, line 1609 */
if (!(i < p__list.lengthof())) break;
current_location.update_lineno(1610);
/* OneM2M_Functions.ttcn, line 1610 */
if ((i != index)) {
current_location.update_lineno(1611);
/* OneM2M_Functions.ttcn, line 1611 */
{
OneM2M__Types::IntegerList tmp_317;
{
OneM2M__Types::IntegerList tmp_318;
tmp_318.set_size(1);
tmp_318[0] = const_cast< const OneM2M__Types::IntegerList&>(p__list)[i];
tmp_317 = (result + tmp_318);
}
result = tmp_317;
}
}
current_location.update_lineno(1609);
/* OneM2M_Functions.ttcn, line 1609 */
{
INTEGER tmp_319;
++i;
}
}
current_location.update_lineno(1614);
/* OneM2M_Functions.ttcn, line 1614 */
p__list = result;
}

OneM2M__Types::PrimitiveContent_template f__getTemplateFromPrimitiveContent(const OneM2M__Types::PrimitiveContent_template& p__primitiveContent)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1617, TTCN_Location::LOCATION_FUNCTION, "f_getTemplateFromPrimitiveContent");
current_location.update_lineno(1618);
/* OneM2M_Functions.ttcn, line 1618 */
OneM2M__Types::PrimitiveContent_template v__primitiveContent(OMIT_VALUE);
current_location.update_lineno(1620);
/* OneM2M_Functions.ttcn, line 1620 */
if (p__primitiveContent.any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Container__optional)) {
current_location.update_lineno(1621);
/* OneM2M_Functions.ttcn, line 1621 */
{
OneM2M__Types::Contents_template& tmp_322 = v__primitiveContent.any__1();
tmp_322.remove_all_permutations();
tmp_322.set_size(1);
tmp_322[0].AT_Container__optional() = OneM2M__Templates::mw__contentContainerBase;
}
current_location.update_lineno(1623);
/* OneM2M_Functions.ttcn, line 1623 */
{
boolean tmp_332;
{
boolean tmp_323 = p__primitiveContent.is_bound();
if(tmp_323) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_323 = FALSE;
break;
case ANY_VALUE:
tmp_323 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_323) {
const OneM2M__Types::PrimitiveContent_template& tmp_324 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_325 = tmp_324.any__1();
tmp_323 = tmp_325.is_bound();
if(tmp_323) {
switch (tmp_325.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_323 = FALSE;
break;
case ANY_VALUE:
tmp_323 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_323) {
const int tmp_326 = 0;
tmp_323 = (tmp_326 >= 0) && (tmp_325.n_elem() > tmp_326);
if(tmp_323) {
const OneM2M__Types::anytype_template& tmp_327 = tmp_325[tmp_326];
tmp_323 = tmp_327.is_bound();
if(tmp_323) {
switch (tmp_327.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_323 = FALSE;
break;
case ANY_VALUE:
tmp_323 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_323) {
const OneM2M__Types::anytype_template& tmp_328 = tmp_327;
const OneM2M__Types::Container__optional_template& tmp_329 = tmp_328.AT_Container__optional();
tmp_323 = tmp_329.is_bound();
if(tmp_323) {
switch (tmp_329.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_323 = FALSE;
break;
case ANY_VALUE:
tmp_323 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_323) {
const OneM2M__Types::Container__optional_template& tmp_330 = tmp_329;
const OneM2M__Types::Labels_template& tmp_331 = tmp_330.labels();
tmp_323 = tmp_331.is_present();
}
break;}
default:
tmp_323 = FALSE;
break;
}
}
}
break;}
default:
tmp_323 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_323 = FALSE;
break;
}
}
}
break;}
default:
tmp_323 = FALSE;
break;
}
}
tmp_332 = tmp_323;
}
if (tmp_332) {
current_location.update_lineno(1624);
/* OneM2M_Functions.ttcn, line 1624 */
v__primitiveContent.any__1()[0].AT_Container__optional().labels() = ANY_VALUE;
}
}
current_location.update_lineno(1626);
/* OneM2M_Functions.ttcn, line 1626 */
{
boolean tmp_343;
{
boolean tmp_334 = p__primitiveContent.is_bound();
if(tmp_334) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_334 = FALSE;
break;
case ANY_VALUE:
tmp_334 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_334) {
const OneM2M__Types::PrimitiveContent_template& tmp_335 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_336 = tmp_335.any__1();
tmp_334 = tmp_336.is_bound();
if(tmp_334) {
switch (tmp_336.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_334 = FALSE;
break;
case ANY_VALUE:
tmp_334 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_334) {
const int tmp_337 = 0;
tmp_334 = (tmp_337 >= 0) && (tmp_336.n_elem() > tmp_337);
if(tmp_334) {
const OneM2M__Types::anytype_template& tmp_338 = tmp_336[tmp_337];
tmp_334 = tmp_338.is_bound();
if(tmp_334) {
switch (tmp_338.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_334 = FALSE;
break;
case ANY_VALUE:
tmp_334 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_334) {
const OneM2M__Types::anytype_template& tmp_339 = tmp_338;
const OneM2M__Types::Container__optional_template& tmp_340 = tmp_339.AT_Container__optional();
tmp_334 = tmp_340.is_bound();
if(tmp_334) {
switch (tmp_340.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_334 = FALSE;
break;
case ANY_VALUE:
tmp_334 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_334) {
const OneM2M__Types::Container__optional_template& tmp_341 = tmp_340;
const OneM2M__Types::AcpType_template& tmp_342 = tmp_341.accessControlPolicyIDs();
tmp_334 = tmp_342.is_present();
}
break;}
default:
tmp_334 = FALSE;
break;
}
}
}
break;}
default:
tmp_334 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_334 = FALSE;
break;
}
}
}
break;}
default:
tmp_334 = FALSE;
break;
}
}
tmp_343 = tmp_334;
}
if (tmp_343) {
current_location.update_lineno(1627);
/* OneM2M_Functions.ttcn, line 1627 */
v__primitiveContent.any__1()[0].AT_Container__optional().accessControlPolicyIDs() = ANY_VALUE;
}
}
current_location.update_lineno(1629);
/* OneM2M_Functions.ttcn, line 1629 */
{
boolean tmp_354;
{
boolean tmp_345 = p__primitiveContent.is_bound();
if(tmp_345) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_345 = FALSE;
break;
case ANY_VALUE:
tmp_345 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_345) {
const OneM2M__Types::PrimitiveContent_template& tmp_346 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_347 = tmp_346.any__1();
tmp_345 = tmp_347.is_bound();
if(tmp_345) {
switch (tmp_347.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_345 = FALSE;
break;
case ANY_VALUE:
tmp_345 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_345) {
const int tmp_348 = 0;
tmp_345 = (tmp_348 >= 0) && (tmp_347.n_elem() > tmp_348);
if(tmp_345) {
const OneM2M__Types::anytype_template& tmp_349 = tmp_347[tmp_348];
tmp_345 = tmp_349.is_bound();
if(tmp_345) {
switch (tmp_349.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_345 = FALSE;
break;
case ANY_VALUE:
tmp_345 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_345) {
const OneM2M__Types::anytype_template& tmp_350 = tmp_349;
const OneM2M__Types::Container__optional_template& tmp_351 = tmp_350.AT_Container__optional();
tmp_345 = tmp_351.is_bound();
if(tmp_345) {
switch (tmp_351.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_345 = FALSE;
break;
case ANY_VALUE:
tmp_345 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_345) {
const OneM2M__Types::Container__optional_template& tmp_352 = tmp_351;
const OneM2M__Types::ListOfURIs_template& tmp_353 = tmp_352.dynamicAuthorizationConsultationIDs();
tmp_345 = tmp_353.is_present();
}
break;}
default:
tmp_345 = FALSE;
break;
}
}
}
break;}
default:
tmp_345 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_345 = FALSE;
break;
}
}
}
break;}
default:
tmp_345 = FALSE;
break;
}
}
tmp_354 = tmp_345;
}
if (tmp_354) {
current_location.update_lineno(1630);
/* OneM2M_Functions.ttcn, line 1630 */
v__primitiveContent.any__1()[0].AT_Container__optional().dynamicAuthorizationConsultationIDs() = ANY_VALUE;
}
}
current_location.update_lineno(1632);
/* OneM2M_Functions.ttcn, line 1632 */
{
boolean tmp_365;
{
boolean tmp_356 = p__primitiveContent.is_bound();
if(tmp_356) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_356 = FALSE;
break;
case ANY_VALUE:
tmp_356 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_356) {
const OneM2M__Types::PrimitiveContent_template& tmp_357 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_358 = tmp_357.any__1();
tmp_356 = tmp_358.is_bound();
if(tmp_356) {
switch (tmp_358.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_356 = FALSE;
break;
case ANY_VALUE:
tmp_356 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_356) {
const int tmp_359 = 0;
tmp_356 = (tmp_359 >= 0) && (tmp_358.n_elem() > tmp_359);
if(tmp_356) {
const OneM2M__Types::anytype_template& tmp_360 = tmp_358[tmp_359];
tmp_356 = tmp_360.is_bound();
if(tmp_356) {
switch (tmp_360.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_356 = FALSE;
break;
case ANY_VALUE:
tmp_356 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_356) {
const OneM2M__Types::anytype_template& tmp_361 = tmp_360;
const OneM2M__Types::Container__optional_template& tmp_362 = tmp_361.AT_Container__optional();
tmp_356 = tmp_362.is_bound();
if(tmp_356) {
switch (tmp_362.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_356 = FALSE;
break;
case ANY_VALUE:
tmp_356 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_356) {
const OneM2M__Types::Container__optional_template& tmp_363 = tmp_362;
const OneM2M__Types::ListOfURIs_template& tmp_364 = tmp_363.announceTo();
tmp_356 = tmp_364.is_present();
}
break;}
default:
tmp_356 = FALSE;
break;
}
}
}
break;}
default:
tmp_356 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_356 = FALSE;
break;
}
}
}
break;}
default:
tmp_356 = FALSE;
break;
}
}
tmp_365 = tmp_356;
}
if (tmp_365) {
current_location.update_lineno(1633);
/* OneM2M_Functions.ttcn, line 1633 */
v__primitiveContent.any__1()[0].AT_Container__optional().announceTo() = ANY_VALUE;
}
}
current_location.update_lineno(1635);
/* OneM2M_Functions.ttcn, line 1635 */
{
boolean tmp_376;
{
boolean tmp_367 = p__primitiveContent.is_bound();
if(tmp_367) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_367 = FALSE;
break;
case ANY_VALUE:
tmp_367 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_367) {
const OneM2M__Types::PrimitiveContent_template& tmp_368 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_369 = tmp_368.any__1();
tmp_367 = tmp_369.is_bound();
if(tmp_367) {
switch (tmp_369.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_367 = FALSE;
break;
case ANY_VALUE:
tmp_367 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_367) {
const int tmp_370 = 0;
tmp_367 = (tmp_370 >= 0) && (tmp_369.n_elem() > tmp_370);
if(tmp_367) {
const OneM2M__Types::anytype_template& tmp_371 = tmp_369[tmp_370];
tmp_367 = tmp_371.is_bound();
if(tmp_367) {
switch (tmp_371.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_367 = FALSE;
break;
case ANY_VALUE:
tmp_367 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_367) {
const OneM2M__Types::anytype_template& tmp_372 = tmp_371;
const OneM2M__Types::Container__optional_template& tmp_373 = tmp_372.AT_Container__optional();
tmp_367 = tmp_373.is_bound();
if(tmp_367) {
switch (tmp_373.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_367 = FALSE;
break;
case ANY_VALUE:
tmp_367 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_367) {
const OneM2M__Types::Container__optional_template& tmp_374 = tmp_373;
const OneM2M__Types::Container__optional_announcedAttribute_template& tmp_375 = tmp_374.announcedAttribute();
tmp_367 = tmp_375.is_present();
}
break;}
default:
tmp_367 = FALSE;
break;
}
}
}
break;}
default:
tmp_367 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_367 = FALSE;
break;
}
}
}
break;}
default:
tmp_367 = FALSE;
break;
}
}
tmp_376 = tmp_367;
}
if (tmp_376) {
current_location.update_lineno(1636);
/* OneM2M_Functions.ttcn, line 1636 */
v__primitiveContent.any__1()[0].AT_Container__optional().announcedAttribute() = ANY_VALUE;
}
}
current_location.update_lineno(1638);
/* OneM2M_Functions.ttcn, line 1638 */
{
boolean tmp_387;
{
boolean tmp_378 = p__primitiveContent.is_bound();
if(tmp_378) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_378 = FALSE;
break;
case ANY_VALUE:
tmp_378 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_378) {
const OneM2M__Types::PrimitiveContent_template& tmp_379 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_380 = tmp_379.any__1();
tmp_378 = tmp_380.is_bound();
if(tmp_378) {
switch (tmp_380.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_378 = FALSE;
break;
case ANY_VALUE:
tmp_378 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_378) {
const int tmp_381 = 0;
tmp_378 = (tmp_381 >= 0) && (tmp_380.n_elem() > tmp_381);
if(tmp_378) {
const OneM2M__Types::anytype_template& tmp_382 = tmp_380[tmp_381];
tmp_378 = tmp_382.is_bound();
if(tmp_378) {
switch (tmp_382.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_378 = FALSE;
break;
case ANY_VALUE:
tmp_378 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_378) {
const OneM2M__Types::anytype_template& tmp_383 = tmp_382;
const OneM2M__Types::Container__optional_template& tmp_384 = tmp_383.AT_Container__optional();
tmp_378 = tmp_384.is_bound();
if(tmp_378) {
switch (tmp_384.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_378 = FALSE;
break;
case ANY_VALUE:
tmp_378 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_378) {
const OneM2M__Types::Container__optional_template& tmp_385 = tmp_384;
const UNIVERSAL_CHARSTRING_template& tmp_386 = tmp_385.creator();
tmp_378 = tmp_386.is_present();
}
break;}
default:
tmp_378 = FALSE;
break;
}
}
}
break;}
default:
tmp_378 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_378 = FALSE;
break;
}
}
}
break;}
default:
tmp_378 = FALSE;
break;
}
}
tmp_387 = tmp_378;
}
if (tmp_387) {
current_location.update_lineno(1639);
/* OneM2M_Functions.ttcn, line 1639 */
v__primitiveContent.any__1()[0].AT_Container__optional().creator() = ANY_VALUE;
}
}
current_location.update_lineno(1641);
/* OneM2M_Functions.ttcn, line 1641 */
{
boolean tmp_398;
{
boolean tmp_389 = p__primitiveContent.is_bound();
if(tmp_389) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_389 = FALSE;
break;
case ANY_VALUE:
tmp_389 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_389) {
const OneM2M__Types::PrimitiveContent_template& tmp_390 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_391 = tmp_390.any__1();
tmp_389 = tmp_391.is_bound();
if(tmp_389) {
switch (tmp_391.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_389 = FALSE;
break;
case ANY_VALUE:
tmp_389 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_389) {
const int tmp_392 = 0;
tmp_389 = (tmp_392 >= 0) && (tmp_391.n_elem() > tmp_392);
if(tmp_389) {
const OneM2M__Types::anytype_template& tmp_393 = tmp_391[tmp_392];
tmp_389 = tmp_393.is_bound();
if(tmp_389) {
switch (tmp_393.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_389 = FALSE;
break;
case ANY_VALUE:
tmp_389 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_389) {
const OneM2M__Types::anytype_template& tmp_394 = tmp_393;
const OneM2M__Types::Container__optional_template& tmp_395 = tmp_394.AT_Container__optional();
tmp_389 = tmp_395.is_bound();
if(tmp_389) {
switch (tmp_395.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_389 = FALSE;
break;
case ANY_VALUE:
tmp_389 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_389) {
const OneM2M__Types::Container__optional_template& tmp_396 = tmp_395;
const INTEGER_template& tmp_397 = tmp_396.maxNrOfInstances();
tmp_389 = tmp_397.is_present();
}
break;}
default:
tmp_389 = FALSE;
break;
}
}
}
break;}
default:
tmp_389 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_389 = FALSE;
break;
}
}
}
break;}
default:
tmp_389 = FALSE;
break;
}
}
tmp_398 = tmp_389;
}
if (tmp_398) {
current_location.update_lineno(1642);
/* OneM2M_Functions.ttcn, line 1642 */
v__primitiveContent.any__1()[0].AT_Container__optional().maxNrOfInstances() = ANY_VALUE;
}
}
current_location.update_lineno(1644);
/* OneM2M_Functions.ttcn, line 1644 */
{
boolean tmp_409;
{
boolean tmp_400 = p__primitiveContent.is_bound();
if(tmp_400) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_400 = FALSE;
break;
case ANY_VALUE:
tmp_400 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_400) {
const OneM2M__Types::PrimitiveContent_template& tmp_401 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_402 = tmp_401.any__1();
tmp_400 = tmp_402.is_bound();
if(tmp_400) {
switch (tmp_402.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_400 = FALSE;
break;
case ANY_VALUE:
tmp_400 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_400) {
const int tmp_403 = 0;
tmp_400 = (tmp_403 >= 0) && (tmp_402.n_elem() > tmp_403);
if(tmp_400) {
const OneM2M__Types::anytype_template& tmp_404 = tmp_402[tmp_403];
tmp_400 = tmp_404.is_bound();
if(tmp_400) {
switch (tmp_404.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_400 = FALSE;
break;
case ANY_VALUE:
tmp_400 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_400) {
const OneM2M__Types::anytype_template& tmp_405 = tmp_404;
const OneM2M__Types::Container__optional_template& tmp_406 = tmp_405.AT_Container__optional();
tmp_400 = tmp_406.is_bound();
if(tmp_400) {
switch (tmp_406.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_400 = FALSE;
break;
case ANY_VALUE:
tmp_400 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_400) {
const OneM2M__Types::Container__optional_template& tmp_407 = tmp_406;
const INTEGER_template& tmp_408 = tmp_407.maxByteSize();
tmp_400 = tmp_408.is_present();
}
break;}
default:
tmp_400 = FALSE;
break;
}
}
}
break;}
default:
tmp_400 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_400 = FALSE;
break;
}
}
}
break;}
default:
tmp_400 = FALSE;
break;
}
}
tmp_409 = tmp_400;
}
if (tmp_409) {
current_location.update_lineno(1645);
/* OneM2M_Functions.ttcn, line 1645 */
v__primitiveContent.any__1()[0].AT_Container__optional().maxByteSize() = ANY_VALUE;
}
}
current_location.update_lineno(1647);
/* OneM2M_Functions.ttcn, line 1647 */
{
boolean tmp_420;
{
boolean tmp_411 = p__primitiveContent.is_bound();
if(tmp_411) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_411 = FALSE;
break;
case ANY_VALUE:
tmp_411 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_411) {
const OneM2M__Types::PrimitiveContent_template& tmp_412 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_413 = tmp_412.any__1();
tmp_411 = tmp_413.is_bound();
if(tmp_411) {
switch (tmp_413.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_411 = FALSE;
break;
case ANY_VALUE:
tmp_411 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_411) {
const int tmp_414 = 0;
tmp_411 = (tmp_414 >= 0) && (tmp_413.n_elem() > tmp_414);
if(tmp_411) {
const OneM2M__Types::anytype_template& tmp_415 = tmp_413[tmp_414];
tmp_411 = tmp_415.is_bound();
if(tmp_411) {
switch (tmp_415.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_411 = FALSE;
break;
case ANY_VALUE:
tmp_411 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_411) {
const OneM2M__Types::anytype_template& tmp_416 = tmp_415;
const OneM2M__Types::Container__optional_template& tmp_417 = tmp_416.AT_Container__optional();
tmp_411 = tmp_417.is_bound();
if(tmp_411) {
switch (tmp_417.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_411 = FALSE;
break;
case ANY_VALUE:
tmp_411 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_411) {
const OneM2M__Types::Container__optional_template& tmp_418 = tmp_417;
const INTEGER_template& tmp_419 = tmp_418.maxInstanceAge();
tmp_411 = tmp_419.is_present();
}
break;}
default:
tmp_411 = FALSE;
break;
}
}
}
break;}
default:
tmp_411 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_411 = FALSE;
break;
}
}
}
break;}
default:
tmp_411 = FALSE;
break;
}
}
tmp_420 = tmp_411;
}
if (tmp_420) {
current_location.update_lineno(1648);
/* OneM2M_Functions.ttcn, line 1648 */
v__primitiveContent.any__1()[0].AT_Container__optional().maxInstanceAge() = ANY_VALUE;
}
}
current_location.update_lineno(1650);
/* OneM2M_Functions.ttcn, line 1650 */
{
boolean tmp_431;
{
boolean tmp_422 = p__primitiveContent.is_bound();
if(tmp_422) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_422 = FALSE;
break;
case ANY_VALUE:
tmp_422 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_422) {
const OneM2M__Types::PrimitiveContent_template& tmp_423 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_424 = tmp_423.any__1();
tmp_422 = tmp_424.is_bound();
if(tmp_422) {
switch (tmp_424.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_422 = FALSE;
break;
case ANY_VALUE:
tmp_422 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_422) {
const int tmp_425 = 0;
tmp_422 = (tmp_425 >= 0) && (tmp_424.n_elem() > tmp_425);
if(tmp_422) {
const OneM2M__Types::anytype_template& tmp_426 = tmp_424[tmp_425];
tmp_422 = tmp_426.is_bound();
if(tmp_422) {
switch (tmp_426.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_422 = FALSE;
break;
case ANY_VALUE:
tmp_422 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_422) {
const OneM2M__Types::anytype_template& tmp_427 = tmp_426;
const OneM2M__Types::Container__optional_template& tmp_428 = tmp_427.AT_Container__optional();
tmp_422 = tmp_428.is_bound();
if(tmp_422) {
switch (tmp_428.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_422 = FALSE;
break;
case ANY_VALUE:
tmp_422 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_422) {
const OneM2M__Types::Container__optional_template& tmp_429 = tmp_428;
const UNIVERSAL_CHARSTRING_template& tmp_430 = tmp_429.locationID();
tmp_422 = tmp_430.is_present();
}
break;}
default:
tmp_422 = FALSE;
break;
}
}
}
break;}
default:
tmp_422 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_422 = FALSE;
break;
}
}
}
break;}
default:
tmp_422 = FALSE;
break;
}
}
tmp_431 = tmp_422;
}
if (tmp_431) {
current_location.update_lineno(1651);
/* OneM2M_Functions.ttcn, line 1651 */
v__primitiveContent.any__1()[0].AT_Container__optional().locationID() = ANY_VALUE;
}
}
current_location.update_lineno(1653);
/* OneM2M_Functions.ttcn, line 1653 */
{
boolean tmp_442;
{
boolean tmp_433 = p__primitiveContent.is_bound();
if(tmp_433) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_433 = FALSE;
break;
case ANY_VALUE:
tmp_433 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_433) {
const OneM2M__Types::PrimitiveContent_template& tmp_434 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_435 = tmp_434.any__1();
tmp_433 = tmp_435.is_bound();
if(tmp_433) {
switch (tmp_435.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_433 = FALSE;
break;
case ANY_VALUE:
tmp_433 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_433) {
const int tmp_436 = 0;
tmp_433 = (tmp_436 >= 0) && (tmp_435.n_elem() > tmp_436);
if(tmp_433) {
const OneM2M__Types::anytype_template& tmp_437 = tmp_435[tmp_436];
tmp_433 = tmp_437.is_bound();
if(tmp_433) {
switch (tmp_437.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_433 = FALSE;
break;
case ANY_VALUE:
tmp_433 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_433) {
const OneM2M__Types::anytype_template& tmp_438 = tmp_437;
const OneM2M__Types::Container__optional_template& tmp_439 = tmp_438.AT_Container__optional();
tmp_433 = tmp_439.is_bound();
if(tmp_433) {
switch (tmp_439.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_433 = FALSE;
break;
case ANY_VALUE:
tmp_433 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_433) {
const OneM2M__Types::Container__optional_template& tmp_440 = tmp_439;
const UNIVERSAL_CHARSTRING_template& tmp_441 = tmp_440.ontologyRef();
tmp_433 = tmp_441.is_present();
}
break;}
default:
tmp_433 = FALSE;
break;
}
}
}
break;}
default:
tmp_433 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_433 = FALSE;
break;
}
}
}
break;}
default:
tmp_433 = FALSE;
break;
}
}
tmp_442 = tmp_433;
}
if (tmp_442) {
current_location.update_lineno(1654);
/* OneM2M_Functions.ttcn, line 1654 */
v__primitiveContent.any__1()[0].AT_Container__optional().ontologyRef() = ANY_VALUE;
}
}
current_location.update_lineno(1656);
/* OneM2M_Functions.ttcn, line 1656 */
{
boolean tmp_453;
{
boolean tmp_444 = p__primitiveContent.is_bound();
if(tmp_444) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_444 = FALSE;
break;
case ANY_VALUE:
tmp_444 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_444) {
const OneM2M__Types::PrimitiveContent_template& tmp_445 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_446 = tmp_445.any__1();
tmp_444 = tmp_446.is_bound();
if(tmp_444) {
switch (tmp_446.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_444 = FALSE;
break;
case ANY_VALUE:
tmp_444 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_444) {
const int tmp_447 = 0;
tmp_444 = (tmp_447 >= 0) && (tmp_446.n_elem() > tmp_447);
if(tmp_444) {
const OneM2M__Types::anytype_template& tmp_448 = tmp_446[tmp_447];
tmp_444 = tmp_448.is_bound();
if(tmp_444) {
switch (tmp_448.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_444 = FALSE;
break;
case ANY_VALUE:
tmp_444 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_444) {
const OneM2M__Types::anytype_template& tmp_449 = tmp_448;
const OneM2M__Types::Container__optional_template& tmp_450 = tmp_449.AT_Container__optional();
tmp_444 = tmp_450.is_bound();
if(tmp_444) {
switch (tmp_450.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_444 = FALSE;
break;
case ANY_VALUE:
tmp_444 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_444) {
const OneM2M__Types::Container__optional_template& tmp_451 = tmp_450;
const BOOLEAN_template& tmp_452 = tmp_451.disableRetrieval();
tmp_444 = tmp_452.is_present();
}
break;}
default:
tmp_444 = FALSE;
break;
}
}
}
break;}
default:
tmp_444 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_444 = FALSE;
break;
}
}
}
break;}
default:
tmp_444 = FALSE;
break;
}
}
tmp_453 = tmp_444;
}
if (tmp_453) {
current_location.update_lineno(1657);
/* OneM2M_Functions.ttcn, line 1657 */
v__primitiveContent.any__1()[0].AT_Container__optional().disableRetrieval() = ANY_VALUE;
}
}
}
else {
current_location.update_lineno(1661);
/* OneM2M_Functions.ttcn, line 1661 */
if (p__primitiveContent.any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AE__optional)) {
current_location.update_lineno(1662);
/* OneM2M_Functions.ttcn, line 1662 */
{
OneM2M__Types::Contents_template& tmp_456 = v__primitiveContent.any__1();
tmp_456.remove_all_permutations();
tmp_456.set_size(1);
tmp_456[0].AT_AE__optional() = OneM2M__Templates::mw__contentAeBase;
}
current_location.update_lineno(1664);
/* OneM2M_Functions.ttcn, line 1664 */
{
boolean tmp_466;
{
boolean tmp_457 = p__primitiveContent.is_bound();
if(tmp_457) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_457 = FALSE;
break;
case ANY_VALUE:
tmp_457 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_457) {
const OneM2M__Types::PrimitiveContent_template& tmp_458 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_459 = tmp_458.any__1();
tmp_457 = tmp_459.is_bound();
if(tmp_457) {
switch (tmp_459.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_457 = FALSE;
break;
case ANY_VALUE:
tmp_457 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_457) {
const int tmp_460 = 0;
tmp_457 = (tmp_460 >= 0) && (tmp_459.n_elem() > tmp_460);
if(tmp_457) {
const OneM2M__Types::anytype_template& tmp_461 = tmp_459[tmp_460];
tmp_457 = tmp_461.is_bound();
if(tmp_457) {
switch (tmp_461.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_457 = FALSE;
break;
case ANY_VALUE:
tmp_457 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_457) {
const OneM2M__Types::anytype_template& tmp_462 = tmp_461;
const OneM2M__Types::AE__optional_template& tmp_463 = tmp_462.AT_AE__optional();
tmp_457 = tmp_463.is_bound();
if(tmp_457) {
switch (tmp_463.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_457 = FALSE;
break;
case ANY_VALUE:
tmp_457 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_457) {
const OneM2M__Types::AE__optional_template& tmp_464 = tmp_463;
const OneM2M__Types::Labels_template& tmp_465 = tmp_464.labels();
tmp_457 = tmp_465.is_present();
}
break;}
default:
tmp_457 = FALSE;
break;
}
}
}
break;}
default:
tmp_457 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_457 = FALSE;
break;
}
}
}
break;}
default:
tmp_457 = FALSE;
break;
}
}
tmp_466 = tmp_457;
}
if (tmp_466) {
current_location.update_lineno(1665);
/* OneM2M_Functions.ttcn, line 1665 */
v__primitiveContent.any__1()[0].AT_AE__optional().labels() = ANY_VALUE;
}
}
current_location.update_lineno(1667);
/* OneM2M_Functions.ttcn, line 1667 */
{
boolean tmp_477;
{
boolean tmp_468 = p__primitiveContent.is_bound();
if(tmp_468) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_468 = FALSE;
break;
case ANY_VALUE:
tmp_468 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_468) {
const OneM2M__Types::PrimitiveContent_template& tmp_469 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_470 = tmp_469.any__1();
tmp_468 = tmp_470.is_bound();
if(tmp_468) {
switch (tmp_470.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_468 = FALSE;
break;
case ANY_VALUE:
tmp_468 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_468) {
const int tmp_471 = 0;
tmp_468 = (tmp_471 >= 0) && (tmp_470.n_elem() > tmp_471);
if(tmp_468) {
const OneM2M__Types::anytype_template& tmp_472 = tmp_470[tmp_471];
tmp_468 = tmp_472.is_bound();
if(tmp_468) {
switch (tmp_472.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_468 = FALSE;
break;
case ANY_VALUE:
tmp_468 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_468) {
const OneM2M__Types::anytype_template& tmp_473 = tmp_472;
const OneM2M__Types::AE__optional_template& tmp_474 = tmp_473.AT_AE__optional();
tmp_468 = tmp_474.is_bound();
if(tmp_468) {
switch (tmp_474.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_468 = FALSE;
break;
case ANY_VALUE:
tmp_468 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_468) {
const OneM2M__Types::AE__optional_template& tmp_475 = tmp_474;
const OneM2M__Types::AcpType_template& tmp_476 = tmp_475.accessControlPolicyIDs();
tmp_468 = tmp_476.is_present();
}
break;}
default:
tmp_468 = FALSE;
break;
}
}
}
break;}
default:
tmp_468 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_468 = FALSE;
break;
}
}
}
break;}
default:
tmp_468 = FALSE;
break;
}
}
tmp_477 = tmp_468;
}
if (tmp_477) {
current_location.update_lineno(1668);
/* OneM2M_Functions.ttcn, line 1668 */
v__primitiveContent.any__1()[0].AT_AE__optional().accessControlPolicyIDs() = ANY_VALUE;
}
}
current_location.update_lineno(1670);
/* OneM2M_Functions.ttcn, line 1670 */
{
boolean tmp_488;
{
boolean tmp_479 = p__primitiveContent.is_bound();
if(tmp_479) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_479 = FALSE;
break;
case ANY_VALUE:
tmp_479 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_479) {
const OneM2M__Types::PrimitiveContent_template& tmp_480 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_481 = tmp_480.any__1();
tmp_479 = tmp_481.is_bound();
if(tmp_479) {
switch (tmp_481.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_479 = FALSE;
break;
case ANY_VALUE:
tmp_479 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_479) {
const int tmp_482 = 0;
tmp_479 = (tmp_482 >= 0) && (tmp_481.n_elem() > tmp_482);
if(tmp_479) {
const OneM2M__Types::anytype_template& tmp_483 = tmp_481[tmp_482];
tmp_479 = tmp_483.is_bound();
if(tmp_479) {
switch (tmp_483.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_479 = FALSE;
break;
case ANY_VALUE:
tmp_479 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_479) {
const OneM2M__Types::anytype_template& tmp_484 = tmp_483;
const OneM2M__Types::AE__optional_template& tmp_485 = tmp_484.AT_AE__optional();
tmp_479 = tmp_485.is_bound();
if(tmp_479) {
switch (tmp_485.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_479 = FALSE;
break;
case ANY_VALUE:
tmp_479 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_479) {
const OneM2M__Types::AE__optional_template& tmp_486 = tmp_485;
const OneM2M__Types::ListOfURIs_template& tmp_487 = tmp_486.dynamicAuthorizationConsultationIDs();
tmp_479 = tmp_487.is_present();
}
break;}
default:
tmp_479 = FALSE;
break;
}
}
}
break;}
default:
tmp_479 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_479 = FALSE;
break;
}
}
}
break;}
default:
tmp_479 = FALSE;
break;
}
}
tmp_488 = tmp_479;
}
if (tmp_488) {
current_location.update_lineno(1671);
/* OneM2M_Functions.ttcn, line 1671 */
v__primitiveContent.any__1()[0].AT_AE__optional().dynamicAuthorizationConsultationIDs() = ANY_VALUE;
}
}
current_location.update_lineno(1673);
/* OneM2M_Functions.ttcn, line 1673 */
{
boolean tmp_499;
{
boolean tmp_490 = p__primitiveContent.is_bound();
if(tmp_490) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_490 = FALSE;
break;
case ANY_VALUE:
tmp_490 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_490) {
const OneM2M__Types::PrimitiveContent_template& tmp_491 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_492 = tmp_491.any__1();
tmp_490 = tmp_492.is_bound();
if(tmp_490) {
switch (tmp_492.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_490 = FALSE;
break;
case ANY_VALUE:
tmp_490 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_490) {
const int tmp_493 = 0;
tmp_490 = (tmp_493 >= 0) && (tmp_492.n_elem() > tmp_493);
if(tmp_490) {
const OneM2M__Types::anytype_template& tmp_494 = tmp_492[tmp_493];
tmp_490 = tmp_494.is_bound();
if(tmp_490) {
switch (tmp_494.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_490 = FALSE;
break;
case ANY_VALUE:
tmp_490 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_490) {
const OneM2M__Types::anytype_template& tmp_495 = tmp_494;
const OneM2M__Types::AE__optional_template& tmp_496 = tmp_495.AT_AE__optional();
tmp_490 = tmp_496.is_bound();
if(tmp_490) {
switch (tmp_496.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_490 = FALSE;
break;
case ANY_VALUE:
tmp_490 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_490) {
const OneM2M__Types::AE__optional_template& tmp_497 = tmp_496;
const OneM2M__Types::ListOfURIs_template& tmp_498 = tmp_497.announceTo();
tmp_490 = tmp_498.is_present();
}
break;}
default:
tmp_490 = FALSE;
break;
}
}
}
break;}
default:
tmp_490 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_490 = FALSE;
break;
}
}
}
break;}
default:
tmp_490 = FALSE;
break;
}
}
tmp_499 = tmp_490;
}
if (tmp_499) {
current_location.update_lineno(1674);
/* OneM2M_Functions.ttcn, line 1674 */
v__primitiveContent.any__1()[0].AT_AE__optional().announceTo() = ANY_VALUE;
}
}
current_location.update_lineno(1676);
/* OneM2M_Functions.ttcn, line 1676 */
{
boolean tmp_510;
{
boolean tmp_501 = p__primitiveContent.is_bound();
if(tmp_501) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_501 = FALSE;
break;
case ANY_VALUE:
tmp_501 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_501) {
const OneM2M__Types::PrimitiveContent_template& tmp_502 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_503 = tmp_502.any__1();
tmp_501 = tmp_503.is_bound();
if(tmp_501) {
switch (tmp_503.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_501 = FALSE;
break;
case ANY_VALUE:
tmp_501 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_501) {
const int tmp_504 = 0;
tmp_501 = (tmp_504 >= 0) && (tmp_503.n_elem() > tmp_504);
if(tmp_501) {
const OneM2M__Types::anytype_template& tmp_505 = tmp_503[tmp_504];
tmp_501 = tmp_505.is_bound();
if(tmp_501) {
switch (tmp_505.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_501 = FALSE;
break;
case ANY_VALUE:
tmp_501 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_501) {
const OneM2M__Types::anytype_template& tmp_506 = tmp_505;
const OneM2M__Types::AE__optional_template& tmp_507 = tmp_506.AT_AE__optional();
tmp_501 = tmp_507.is_bound();
if(tmp_501) {
switch (tmp_507.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_501 = FALSE;
break;
case ANY_VALUE:
tmp_501 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_501) {
const OneM2M__Types::AE__optional_template& tmp_508 = tmp_507;
const OneM2M__Types::AE__optional_announcedAttribute_template& tmp_509 = tmp_508.announcedAttribute();
tmp_501 = tmp_509.is_present();
}
break;}
default:
tmp_501 = FALSE;
break;
}
}
}
break;}
default:
tmp_501 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_501 = FALSE;
break;
}
}
}
break;}
default:
tmp_501 = FALSE;
break;
}
}
tmp_510 = tmp_501;
}
if (tmp_510) {
current_location.update_lineno(1677);
/* OneM2M_Functions.ttcn, line 1677 */
v__primitiveContent.any__1()[0].AT_AE__optional().announcedAttribute() = ANY_VALUE;
}
}
current_location.update_lineno(1679);
/* OneM2M_Functions.ttcn, line 1679 */
{
boolean tmp_521;
{
boolean tmp_512 = p__primitiveContent.is_bound();
if(tmp_512) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_512 = FALSE;
break;
case ANY_VALUE:
tmp_512 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_512) {
const OneM2M__Types::PrimitiveContent_template& tmp_513 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_514 = tmp_513.any__1();
tmp_512 = tmp_514.is_bound();
if(tmp_512) {
switch (tmp_514.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_512 = FALSE;
break;
case ANY_VALUE:
tmp_512 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_512) {
const int tmp_515 = 0;
tmp_512 = (tmp_515 >= 0) && (tmp_514.n_elem() > tmp_515);
if(tmp_512) {
const OneM2M__Types::anytype_template& tmp_516 = tmp_514[tmp_515];
tmp_512 = tmp_516.is_bound();
if(tmp_512) {
switch (tmp_516.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_512 = FALSE;
break;
case ANY_VALUE:
tmp_512 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_512) {
const OneM2M__Types::anytype_template& tmp_517 = tmp_516;
const OneM2M__Types::AE__optional_template& tmp_518 = tmp_517.AT_AE__optional();
tmp_512 = tmp_518.is_bound();
if(tmp_512) {
switch (tmp_518.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_512 = FALSE;
break;
case ANY_VALUE:
tmp_512 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_512) {
const OneM2M__Types::AE__optional_template& tmp_519 = tmp_518;
const UNIVERSAL_CHARSTRING_template& tmp_520 = tmp_519.appName();
tmp_512 = tmp_520.is_present();
}
break;}
default:
tmp_512 = FALSE;
break;
}
}
}
break;}
default:
tmp_512 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_512 = FALSE;
break;
}
}
}
break;}
default:
tmp_512 = FALSE;
break;
}
}
tmp_521 = tmp_512;
}
if (tmp_521) {
current_location.update_lineno(1680);
/* OneM2M_Functions.ttcn, line 1680 */
v__primitiveContent.any__1()[0].AT_AE__optional().appName() = ANY_VALUE;
}
}
current_location.update_lineno(1682);
/* OneM2M_Functions.ttcn, line 1682 */
{
boolean tmp_532;
{
boolean tmp_523 = p__primitiveContent.is_bound();
if(tmp_523) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_523 = FALSE;
break;
case ANY_VALUE:
tmp_523 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_523) {
const OneM2M__Types::PrimitiveContent_template& tmp_524 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_525 = tmp_524.any__1();
tmp_523 = tmp_525.is_bound();
if(tmp_523) {
switch (tmp_525.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_523 = FALSE;
break;
case ANY_VALUE:
tmp_523 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_523) {
const int tmp_526 = 0;
tmp_523 = (tmp_526 >= 0) && (tmp_525.n_elem() > tmp_526);
if(tmp_523) {
const OneM2M__Types::anytype_template& tmp_527 = tmp_525[tmp_526];
tmp_523 = tmp_527.is_bound();
if(tmp_523) {
switch (tmp_527.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_523 = FALSE;
break;
case ANY_VALUE:
tmp_523 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_523) {
const OneM2M__Types::anytype_template& tmp_528 = tmp_527;
const OneM2M__Types::AE__optional_template& tmp_529 = tmp_528.AT_AE__optional();
tmp_523 = tmp_529.is_bound();
if(tmp_523) {
switch (tmp_529.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_523 = FALSE;
break;
case ANY_VALUE:
tmp_523 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_523) {
const OneM2M__Types::AE__optional_template& tmp_530 = tmp_529;
const OneM2M__Types::PoaList_template& tmp_531 = tmp_530.pointOfAccess();
tmp_523 = tmp_531.is_present();
}
break;}
default:
tmp_523 = FALSE;
break;
}
}
}
break;}
default:
tmp_523 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_523 = FALSE;
break;
}
}
}
break;}
default:
tmp_523 = FALSE;
break;
}
}
tmp_532 = tmp_523;
}
if (tmp_532) {
current_location.update_lineno(1683);
/* OneM2M_Functions.ttcn, line 1683 */
v__primitiveContent.any__1()[0].AT_AE__optional().pointOfAccess() = ANY_VALUE;
}
}
current_location.update_lineno(1685);
/* OneM2M_Functions.ttcn, line 1685 */
{
boolean tmp_543;
{
boolean tmp_534 = p__primitiveContent.is_bound();
if(tmp_534) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_534 = FALSE;
break;
case ANY_VALUE:
tmp_534 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_534) {
const OneM2M__Types::PrimitiveContent_template& tmp_535 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_536 = tmp_535.any__1();
tmp_534 = tmp_536.is_bound();
if(tmp_534) {
switch (tmp_536.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_534 = FALSE;
break;
case ANY_VALUE:
tmp_534 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_534) {
const int tmp_537 = 0;
tmp_534 = (tmp_537 >= 0) && (tmp_536.n_elem() > tmp_537);
if(tmp_534) {
const OneM2M__Types::anytype_template& tmp_538 = tmp_536[tmp_537];
tmp_534 = tmp_538.is_bound();
if(tmp_534) {
switch (tmp_538.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_534 = FALSE;
break;
case ANY_VALUE:
tmp_534 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_534) {
const OneM2M__Types::anytype_template& tmp_539 = tmp_538;
const OneM2M__Types::AE__optional_template& tmp_540 = tmp_539.AT_AE__optional();
tmp_534 = tmp_540.is_bound();
if(tmp_534) {
switch (tmp_540.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_534 = FALSE;
break;
case ANY_VALUE:
tmp_534 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_534) {
const OneM2M__Types::AE__optional_template& tmp_541 = tmp_540;
const UNIVERSAL_CHARSTRING_template& tmp_542 = tmp_541.ontologyRef();
tmp_534 = tmp_542.is_present();
}
break;}
default:
tmp_534 = FALSE;
break;
}
}
}
break;}
default:
tmp_534 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_534 = FALSE;
break;
}
}
}
break;}
default:
tmp_534 = FALSE;
break;
}
}
tmp_543 = tmp_534;
}
if (tmp_543) {
current_location.update_lineno(1686);
/* OneM2M_Functions.ttcn, line 1686 */
v__primitiveContent.any__1()[0].AT_AE__optional().ontologyRef() = ANY_VALUE;
}
}
current_location.update_lineno(1688);
/* OneM2M_Functions.ttcn, line 1688 */
{
boolean tmp_554;
{
boolean tmp_545 = p__primitiveContent.is_bound();
if(tmp_545) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_545 = FALSE;
break;
case ANY_VALUE:
tmp_545 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_545) {
const OneM2M__Types::PrimitiveContent_template& tmp_546 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_547 = tmp_546.any__1();
tmp_545 = tmp_547.is_bound();
if(tmp_545) {
switch (tmp_547.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_545 = FALSE;
break;
case ANY_VALUE:
tmp_545 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_545) {
const int tmp_548 = 0;
tmp_545 = (tmp_548 >= 0) && (tmp_547.n_elem() > tmp_548);
if(tmp_545) {
const OneM2M__Types::anytype_template& tmp_549 = tmp_547[tmp_548];
tmp_545 = tmp_549.is_bound();
if(tmp_545) {
switch (tmp_549.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_545 = FALSE;
break;
case ANY_VALUE:
tmp_545 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_545) {
const OneM2M__Types::anytype_template& tmp_550 = tmp_549;
const OneM2M__Types::AE__optional_template& tmp_551 = tmp_550.AT_AE__optional();
tmp_545 = tmp_551.is_bound();
if(tmp_545) {
switch (tmp_551.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_545 = FALSE;
break;
case ANY_VALUE:
tmp_545 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_545) {
const OneM2M__Types::AE__optional_template& tmp_552 = tmp_551;
const UNIVERSAL_CHARSTRING_template& tmp_553 = tmp_552.nodeLink();
tmp_545 = tmp_553.is_present();
}
break;}
default:
tmp_545 = FALSE;
break;
}
}
}
break;}
default:
tmp_545 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_545 = FALSE;
break;
}
}
}
break;}
default:
tmp_545 = FALSE;
break;
}
}
tmp_554 = tmp_545;
}
if (tmp_554) {
current_location.update_lineno(1689);
/* OneM2M_Functions.ttcn, line 1689 */
v__primitiveContent.any__1()[0].AT_AE__optional().nodeLink() = ANY_VALUE;
}
}
current_location.update_lineno(1691);
/* OneM2M_Functions.ttcn, line 1691 */
{
boolean tmp_565;
{
boolean tmp_556 = p__primitiveContent.is_bound();
if(tmp_556) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_556 = FALSE;
break;
case ANY_VALUE:
tmp_556 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_556) {
const OneM2M__Types::PrimitiveContent_template& tmp_557 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_558 = tmp_557.any__1();
tmp_556 = tmp_558.is_bound();
if(tmp_556) {
switch (tmp_558.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_556 = FALSE;
break;
case ANY_VALUE:
tmp_556 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_556) {
const int tmp_559 = 0;
tmp_556 = (tmp_559 >= 0) && (tmp_558.n_elem() > tmp_559);
if(tmp_556) {
const OneM2M__Types::anytype_template& tmp_560 = tmp_558[tmp_559];
tmp_556 = tmp_560.is_bound();
if(tmp_556) {
switch (tmp_560.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_556 = FALSE;
break;
case ANY_VALUE:
tmp_556 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_556) {
const OneM2M__Types::anytype_template& tmp_561 = tmp_560;
const OneM2M__Types::AE__optional_template& tmp_562 = tmp_561.AT_AE__optional();
tmp_556 = tmp_562.is_bound();
if(tmp_556) {
switch (tmp_562.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_556 = FALSE;
break;
case ANY_VALUE:
tmp_556 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_556) {
const OneM2M__Types::AE__optional_template& tmp_563 = tmp_562;
const OneM2M__Types::Serializations_template& tmp_564 = tmp_563.contentSerialization();
tmp_556 = tmp_564.is_present();
}
break;}
default:
tmp_556 = FALSE;
break;
}
}
}
break;}
default:
tmp_556 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_556 = FALSE;
break;
}
}
}
break;}
default:
tmp_556 = FALSE;
break;
}
}
tmp_565 = tmp_556;
}
if (tmp_565) {
current_location.update_lineno(1692);
/* OneM2M_Functions.ttcn, line 1692 */
v__primitiveContent.any__1()[0].AT_AE__optional().contentSerialization() = ANY_VALUE;
}
}
current_location.update_lineno(1694);
/* OneM2M_Functions.ttcn, line 1694 */
{
boolean tmp_576;
{
boolean tmp_567 = p__primitiveContent.is_bound();
if(tmp_567) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_567 = FALSE;
break;
case ANY_VALUE:
tmp_567 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_567) {
const OneM2M__Types::PrimitiveContent_template& tmp_568 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_569 = tmp_568.any__1();
tmp_567 = tmp_569.is_bound();
if(tmp_567) {
switch (tmp_569.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_567 = FALSE;
break;
case ANY_VALUE:
tmp_567 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_567) {
const int tmp_570 = 0;
tmp_567 = (tmp_570 >= 0) && (tmp_569.n_elem() > tmp_570);
if(tmp_567) {
const OneM2M__Types::anytype_template& tmp_571 = tmp_569[tmp_570];
tmp_567 = tmp_571.is_bound();
if(tmp_567) {
switch (tmp_571.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_567 = FALSE;
break;
case ANY_VALUE:
tmp_567 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_567) {
const OneM2M__Types::anytype_template& tmp_572 = tmp_571;
const OneM2M__Types::AE__optional_template& tmp_573 = tmp_572.AT_AE__optional();
tmp_567 = tmp_573.is_bound();
if(tmp_567) {
switch (tmp_573.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_567 = FALSE;
break;
case ANY_VALUE:
tmp_567 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_567) {
const OneM2M__Types::AE__optional_template& tmp_574 = tmp_573;
const OneM2M__Types::E2eSecInfo_template& tmp_575 = tmp_574.e2eSecInfo();
tmp_567 = tmp_575.is_present();
}
break;}
default:
tmp_567 = FALSE;
break;
}
}
}
break;}
default:
tmp_567 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_567 = FALSE;
break;
}
}
}
break;}
default:
tmp_567 = FALSE;
break;
}
}
tmp_576 = tmp_567;
}
if (tmp_576) {
current_location.update_lineno(1695);
/* OneM2M_Functions.ttcn, line 1695 */
v__primitiveContent.any__1()[0].AT_AE__optional().e2eSecInfo() = ANY_VALUE;
}
}
}
else {
current_location.update_lineno(1699);
/* OneM2M_Functions.ttcn, line 1699 */
if (p__primitiveContent.any__1()[0].ischosen(OneM2M__Types::anytype::ALT_AccessControlPolicy__optional)) {
current_location.update_lineno(1700);
/* OneM2M_Functions.ttcn, line 1700 */
{
OneM2M__Types::Contents_template& tmp_579 = v__primitiveContent.any__1();
tmp_579.remove_all_permutations();
tmp_579.set_size(1);
tmp_579[0].AT_AccessControlPolicy__optional() = OneM2M__Templates::mw__contentAcpBase;
}
current_location.update_lineno(1702);
/* OneM2M_Functions.ttcn, line 1702 */
{
boolean tmp_589;
{
boolean tmp_580 = p__primitiveContent.is_bound();
if(tmp_580) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_580 = FALSE;
break;
case ANY_VALUE:
tmp_580 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_580) {
const OneM2M__Types::PrimitiveContent_template& tmp_581 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_582 = tmp_581.any__1();
tmp_580 = tmp_582.is_bound();
if(tmp_580) {
switch (tmp_582.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_580 = FALSE;
break;
case ANY_VALUE:
tmp_580 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_580) {
const int tmp_583 = 0;
tmp_580 = (tmp_583 >= 0) && (tmp_582.n_elem() > tmp_583);
if(tmp_580) {
const OneM2M__Types::anytype_template& tmp_584 = tmp_582[tmp_583];
tmp_580 = tmp_584.is_bound();
if(tmp_580) {
switch (tmp_584.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_580 = FALSE;
break;
case ANY_VALUE:
tmp_580 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_580) {
const OneM2M__Types::anytype_template& tmp_585 = tmp_584;
const OneM2M__Types::AccessControlPolicy__optional_template& tmp_586 = tmp_585.AT_AccessControlPolicy__optional();
tmp_580 = tmp_586.is_bound();
if(tmp_580) {
switch (tmp_586.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_580 = FALSE;
break;
case ANY_VALUE:
tmp_580 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_580) {
const OneM2M__Types::AccessControlPolicy__optional_template& tmp_587 = tmp_586;
const OneM2M__Types::Labels_template& tmp_588 = tmp_587.labels();
tmp_580 = tmp_588.is_present();
}
break;}
default:
tmp_580 = FALSE;
break;
}
}
}
break;}
default:
tmp_580 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_580 = FALSE;
break;
}
}
}
break;}
default:
tmp_580 = FALSE;
break;
}
}
tmp_589 = tmp_580;
}
if (tmp_589) {
current_location.update_lineno(1703);
/* OneM2M_Functions.ttcn, line 1703 */
v__primitiveContent.any__1()[0].AT_AccessControlPolicy__optional().labels() = ANY_VALUE;
}
}
current_location.update_lineno(1705);
/* OneM2M_Functions.ttcn, line 1705 */
{
boolean tmp_600;
{
boolean tmp_591 = p__primitiveContent.is_bound();
if(tmp_591) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_591 = FALSE;
break;
case ANY_VALUE:
tmp_591 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_591) {
const OneM2M__Types::PrimitiveContent_template& tmp_592 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_593 = tmp_592.any__1();
tmp_591 = tmp_593.is_bound();
if(tmp_591) {
switch (tmp_593.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_591 = FALSE;
break;
case ANY_VALUE:
tmp_591 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_591) {
const int tmp_594 = 0;
tmp_591 = (tmp_594 >= 0) && (tmp_593.n_elem() > tmp_594);
if(tmp_591) {
const OneM2M__Types::anytype_template& tmp_595 = tmp_593[tmp_594];
tmp_591 = tmp_595.is_bound();
if(tmp_591) {
switch (tmp_595.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_591 = FALSE;
break;
case ANY_VALUE:
tmp_591 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_591) {
const OneM2M__Types::anytype_template& tmp_596 = tmp_595;
const OneM2M__Types::AccessControlPolicy__optional_template& tmp_597 = tmp_596.AT_AccessControlPolicy__optional();
tmp_591 = tmp_597.is_bound();
if(tmp_591) {
switch (tmp_597.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_591 = FALSE;
break;
case ANY_VALUE:
tmp_591 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_591) {
const OneM2M__Types::AccessControlPolicy__optional_template& tmp_598 = tmp_597;
const OneM2M__Types::ListOfURIs_template& tmp_599 = tmp_598.announceTo();
tmp_591 = tmp_599.is_present();
}
break;}
default:
tmp_591 = FALSE;
break;
}
}
}
break;}
default:
tmp_591 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_591 = FALSE;
break;
}
}
}
break;}
default:
tmp_591 = FALSE;
break;
}
}
tmp_600 = tmp_591;
}
if (tmp_600) {
current_location.update_lineno(1706);
/* OneM2M_Functions.ttcn, line 1706 */
v__primitiveContent.any__1()[0].AT_AccessControlPolicy__optional().announceTo() = ANY_VALUE;
}
}
}
else {
current_location.update_lineno(1710);
/* OneM2M_Functions.ttcn, line 1710 */
if (p__primitiveContent.any__1()[0].ischosen(OneM2M__Types::anytype::ALT_ContentInstance__optional)) {
current_location.update_lineno(1711);
/* OneM2M_Functions.ttcn, line 1711 */
{
OneM2M__Types::Contents_template& tmp_603 = v__primitiveContent.any__1();
tmp_603.remove_all_permutations();
tmp_603.set_size(1);
tmp_603[0].AT_ContentInstance__optional() = OneM2M__Templates::mw__contentContentInstanceBase;
}
current_location.update_lineno(1713);
/* OneM2M_Functions.ttcn, line 1713 */
{
boolean tmp_613;
{
boolean tmp_604 = p__primitiveContent.is_bound();
if(tmp_604) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_604 = FALSE;
break;
case ANY_VALUE:
tmp_604 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_604) {
const OneM2M__Types::PrimitiveContent_template& tmp_605 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_606 = tmp_605.any__1();
tmp_604 = tmp_606.is_bound();
if(tmp_604) {
switch (tmp_606.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_604 = FALSE;
break;
case ANY_VALUE:
tmp_604 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_604) {
const int tmp_607 = 0;
tmp_604 = (tmp_607 >= 0) && (tmp_606.n_elem() > tmp_607);
if(tmp_604) {
const OneM2M__Types::anytype_template& tmp_608 = tmp_606[tmp_607];
tmp_604 = tmp_608.is_bound();
if(tmp_604) {
switch (tmp_608.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_604 = FALSE;
break;
case ANY_VALUE:
tmp_604 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_604) {
const OneM2M__Types::anytype_template& tmp_609 = tmp_608;
const OneM2M__Types::ContentInstance__optional_template& tmp_610 = tmp_609.AT_ContentInstance__optional();
tmp_604 = tmp_610.is_bound();
if(tmp_604) {
switch (tmp_610.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_604 = FALSE;
break;
case ANY_VALUE:
tmp_604 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_604) {
const OneM2M__Types::ContentInstance__optional_template& tmp_611 = tmp_610;
const OneM2M__Types::Labels_template& tmp_612 = tmp_611.labels();
tmp_604 = tmp_612.is_present();
}
break;}
default:
tmp_604 = FALSE;
break;
}
}
}
break;}
default:
tmp_604 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_604 = FALSE;
break;
}
}
}
break;}
default:
tmp_604 = FALSE;
break;
}
}
tmp_613 = tmp_604;
}
if (tmp_613) {
current_location.update_lineno(1714);
/* OneM2M_Functions.ttcn, line 1714 */
v__primitiveContent.any__1()[0].AT_ContentInstance__optional().labels() = ANY_VALUE;
}
}
current_location.update_lineno(1716);
/* OneM2M_Functions.ttcn, line 1716 */
{
boolean tmp_624;
{
boolean tmp_615 = p__primitiveContent.is_bound();
if(tmp_615) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_615 = FALSE;
break;
case ANY_VALUE:
tmp_615 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_615) {
const OneM2M__Types::PrimitiveContent_template& tmp_616 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_617 = tmp_616.any__1();
tmp_615 = tmp_617.is_bound();
if(tmp_615) {
switch (tmp_617.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_615 = FALSE;
break;
case ANY_VALUE:
tmp_615 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_615) {
const int tmp_618 = 0;
tmp_615 = (tmp_618 >= 0) && (tmp_617.n_elem() > tmp_618);
if(tmp_615) {
const OneM2M__Types::anytype_template& tmp_619 = tmp_617[tmp_618];
tmp_615 = tmp_619.is_bound();
if(tmp_615) {
switch (tmp_619.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_615 = FALSE;
break;
case ANY_VALUE:
tmp_615 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_615) {
const OneM2M__Types::anytype_template& tmp_620 = tmp_619;
const OneM2M__Types::ContentInstance__optional_template& tmp_621 = tmp_620.AT_ContentInstance__optional();
tmp_615 = tmp_621.is_bound();
if(tmp_615) {
switch (tmp_621.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_615 = FALSE;
break;
case ANY_VALUE:
tmp_615 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_615) {
const OneM2M__Types::ContentInstance__optional_template& tmp_622 = tmp_621;
const OneM2M__Types::ListOfURIs_template& tmp_623 = tmp_622.announceTo();
tmp_615 = tmp_623.is_present();
}
break;}
default:
tmp_615 = FALSE;
break;
}
}
}
break;}
default:
tmp_615 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_615 = FALSE;
break;
}
}
}
break;}
default:
tmp_615 = FALSE;
break;
}
}
tmp_624 = tmp_615;
}
if (tmp_624) {
current_location.update_lineno(1717);
/* OneM2M_Functions.ttcn, line 1717 */
v__primitiveContent.any__1()[0].AT_ContentInstance__optional().announceTo() = ANY_VALUE;
}
}
current_location.update_lineno(1719);
/* OneM2M_Functions.ttcn, line 1719 */
{
boolean tmp_635;
{
boolean tmp_626 = p__primitiveContent.is_bound();
if(tmp_626) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_626 = FALSE;
break;
case ANY_VALUE:
tmp_626 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_626) {
const OneM2M__Types::PrimitiveContent_template& tmp_627 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_628 = tmp_627.any__1();
tmp_626 = tmp_628.is_bound();
if(tmp_626) {
switch (tmp_628.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_626 = FALSE;
break;
case ANY_VALUE:
tmp_626 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_626) {
const int tmp_629 = 0;
tmp_626 = (tmp_629 >= 0) && (tmp_628.n_elem() > tmp_629);
if(tmp_626) {
const OneM2M__Types::anytype_template& tmp_630 = tmp_628[tmp_629];
tmp_626 = tmp_630.is_bound();
if(tmp_626) {
switch (tmp_630.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_626 = FALSE;
break;
case ANY_VALUE:
tmp_626 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_626) {
const OneM2M__Types::anytype_template& tmp_631 = tmp_630;
const OneM2M__Types::ContentInstance__optional_template& tmp_632 = tmp_631.AT_ContentInstance__optional();
tmp_626 = tmp_632.is_bound();
if(tmp_626) {
switch (tmp_632.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_626 = FALSE;
break;
case ANY_VALUE:
tmp_626 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_626) {
const OneM2M__Types::ContentInstance__optional_template& tmp_633 = tmp_632;
const OneM2M__Types::ContentInstance__optional_announcedAttribute_template& tmp_634 = tmp_633.announcedAttribute();
tmp_626 = tmp_634.is_present();
}
break;}
default:
tmp_626 = FALSE;
break;
}
}
}
break;}
default:
tmp_626 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_626 = FALSE;
break;
}
}
}
break;}
default:
tmp_626 = FALSE;
break;
}
}
tmp_635 = tmp_626;
}
if (tmp_635) {
current_location.update_lineno(1720);
/* OneM2M_Functions.ttcn, line 1720 */
v__primitiveContent.any__1()[0].AT_ContentInstance__optional().announcedAttribute() = ANY_VALUE;
}
}
current_location.update_lineno(1722);
/* OneM2M_Functions.ttcn, line 1722 */
{
boolean tmp_646;
{
boolean tmp_637 = p__primitiveContent.is_bound();
if(tmp_637) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_637 = FALSE;
break;
case ANY_VALUE:
tmp_637 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_637) {
const OneM2M__Types::PrimitiveContent_template& tmp_638 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_639 = tmp_638.any__1();
tmp_637 = tmp_639.is_bound();
if(tmp_637) {
switch (tmp_639.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_637 = FALSE;
break;
case ANY_VALUE:
tmp_637 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_637) {
const int tmp_640 = 0;
tmp_637 = (tmp_640 >= 0) && (tmp_639.n_elem() > tmp_640);
if(tmp_637) {
const OneM2M__Types::anytype_template& tmp_641 = tmp_639[tmp_640];
tmp_637 = tmp_641.is_bound();
if(tmp_637) {
switch (tmp_641.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_637 = FALSE;
break;
case ANY_VALUE:
tmp_637 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_637) {
const OneM2M__Types::anytype_template& tmp_642 = tmp_641;
const OneM2M__Types::ContentInstance__optional_template& tmp_643 = tmp_642.AT_ContentInstance__optional();
tmp_637 = tmp_643.is_bound();
if(tmp_637) {
switch (tmp_643.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_637 = FALSE;
break;
case ANY_VALUE:
tmp_637 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_637) {
const OneM2M__Types::ContentInstance__optional_template& tmp_644 = tmp_643;
const UNIVERSAL_CHARSTRING_template& tmp_645 = tmp_644.creator();
tmp_637 = tmp_645.is_present();
}
break;}
default:
tmp_637 = FALSE;
break;
}
}
}
break;}
default:
tmp_637 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_637 = FALSE;
break;
}
}
}
break;}
default:
tmp_637 = FALSE;
break;
}
}
tmp_646 = tmp_637;
}
if (tmp_646) {
current_location.update_lineno(1723);
/* OneM2M_Functions.ttcn, line 1723 */
v__primitiveContent.any__1()[0].AT_ContentInstance__optional().creator() = ANY_VALUE;
}
}
current_location.update_lineno(1725);
/* OneM2M_Functions.ttcn, line 1725 */
{
boolean tmp_657;
{
boolean tmp_648 = p__primitiveContent.is_bound();
if(tmp_648) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_648 = FALSE;
break;
case ANY_VALUE:
tmp_648 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_648) {
const OneM2M__Types::PrimitiveContent_template& tmp_649 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_650 = tmp_649.any__1();
tmp_648 = tmp_650.is_bound();
if(tmp_648) {
switch (tmp_650.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_648 = FALSE;
break;
case ANY_VALUE:
tmp_648 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_648) {
const int tmp_651 = 0;
tmp_648 = (tmp_651 >= 0) && (tmp_650.n_elem() > tmp_651);
if(tmp_648) {
const OneM2M__Types::anytype_template& tmp_652 = tmp_650[tmp_651];
tmp_648 = tmp_652.is_bound();
if(tmp_648) {
switch (tmp_652.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_648 = FALSE;
break;
case ANY_VALUE:
tmp_648 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_648) {
const OneM2M__Types::anytype_template& tmp_653 = tmp_652;
const OneM2M__Types::ContentInstance__optional_template& tmp_654 = tmp_653.AT_ContentInstance__optional();
tmp_648 = tmp_654.is_bound();
if(tmp_648) {
switch (tmp_654.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_648 = FALSE;
break;
case ANY_VALUE:
tmp_648 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_648) {
const OneM2M__Types::ContentInstance__optional_template& tmp_655 = tmp_654;
const UNIVERSAL_CHARSTRING_template& tmp_656 = tmp_655.contentInfo();
tmp_648 = tmp_656.is_present();
}
break;}
default:
tmp_648 = FALSE;
break;
}
}
}
break;}
default:
tmp_648 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_648 = FALSE;
break;
}
}
}
break;}
default:
tmp_648 = FALSE;
break;
}
}
tmp_657 = tmp_648;
}
if (tmp_657) {
current_location.update_lineno(1726);
/* OneM2M_Functions.ttcn, line 1726 */
v__primitiveContent.any__1()[0].AT_ContentInstance__optional().contentInfo() = ANY_VALUE;
}
}
current_location.update_lineno(1728);
/* OneM2M_Functions.ttcn, line 1728 */
{
boolean tmp_668;
{
boolean tmp_659 = p__primitiveContent.is_bound();
if(tmp_659) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_659 = FALSE;
break;
case ANY_VALUE:
tmp_659 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_659) {
const OneM2M__Types::PrimitiveContent_template& tmp_660 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_661 = tmp_660.any__1();
tmp_659 = tmp_661.is_bound();
if(tmp_659) {
switch (tmp_661.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_659 = FALSE;
break;
case ANY_VALUE:
tmp_659 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_659) {
const int tmp_662 = 0;
tmp_659 = (tmp_662 >= 0) && (tmp_661.n_elem() > tmp_662);
if(tmp_659) {
const OneM2M__Types::anytype_template& tmp_663 = tmp_661[tmp_662];
tmp_659 = tmp_663.is_bound();
if(tmp_659) {
switch (tmp_663.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_659 = FALSE;
break;
case ANY_VALUE:
tmp_659 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_659) {
const OneM2M__Types::anytype_template& tmp_664 = tmp_663;
const OneM2M__Types::ContentInstance__optional_template& tmp_665 = tmp_664.AT_ContentInstance__optional();
tmp_659 = tmp_665.is_bound();
if(tmp_659) {
switch (tmp_665.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_659 = FALSE;
break;
case ANY_VALUE:
tmp_659 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_659) {
const OneM2M__Types::ContentInstance__optional_template& tmp_666 = tmp_665;
const OneM2M__Types::ContentRef_template& tmp_667 = tmp_666.contentRef();
tmp_659 = tmp_667.is_present();
}
break;}
default:
tmp_659 = FALSE;
break;
}
}
}
break;}
default:
tmp_659 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_659 = FALSE;
break;
}
}
}
break;}
default:
tmp_659 = FALSE;
break;
}
}
tmp_668 = tmp_659;
}
if (tmp_668) {
current_location.update_lineno(1729);
/* OneM2M_Functions.ttcn, line 1729 */
v__primitiveContent.any__1()[0].AT_ContentInstance__optional().contentRef() = ANY_VALUE;
}
}
current_location.update_lineno(1731);
/* OneM2M_Functions.ttcn, line 1731 */
{
boolean tmp_679;
{
boolean tmp_670 = p__primitiveContent.is_bound();
if(tmp_670) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_670 = FALSE;
break;
case ANY_VALUE:
tmp_670 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_670) {
const OneM2M__Types::PrimitiveContent_template& tmp_671 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_672 = tmp_671.any__1();
tmp_670 = tmp_672.is_bound();
if(tmp_670) {
switch (tmp_672.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_670 = FALSE;
break;
case ANY_VALUE:
tmp_670 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_670) {
const int tmp_673 = 0;
tmp_670 = (tmp_673 >= 0) && (tmp_672.n_elem() > tmp_673);
if(tmp_670) {
const OneM2M__Types::anytype_template& tmp_674 = tmp_672[tmp_673];
tmp_670 = tmp_674.is_bound();
if(tmp_670) {
switch (tmp_674.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_670 = FALSE;
break;
case ANY_VALUE:
tmp_670 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_670) {
const OneM2M__Types::anytype_template& tmp_675 = tmp_674;
const OneM2M__Types::ContentInstance__optional_template& tmp_676 = tmp_675.AT_ContentInstance__optional();
tmp_670 = tmp_676.is_bound();
if(tmp_670) {
switch (tmp_676.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_670 = FALSE;
break;
case ANY_VALUE:
tmp_670 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_670) {
const OneM2M__Types::ContentInstance__optional_template& tmp_677 = tmp_676;
const UNIVERSAL_CHARSTRING_template& tmp_678 = tmp_677.ontologyRef();
tmp_670 = tmp_678.is_present();
}
break;}
default:
tmp_670 = FALSE;
break;
}
}
}
break;}
default:
tmp_670 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_670 = FALSE;
break;
}
}
}
break;}
default:
tmp_670 = FALSE;
break;
}
}
tmp_679 = tmp_670;
}
if (tmp_679) {
current_location.update_lineno(1732);
/* OneM2M_Functions.ttcn, line 1732 */
v__primitiveContent.any__1()[0].AT_ContentInstance__optional().ontologyRef() = ANY_VALUE;
}
}
}
else {
current_location.update_lineno(1736);
/* OneM2M_Functions.ttcn, line 1736 */
if (p__primitiveContent.any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Group__optional)) {
current_location.update_lineno(1737);
/* OneM2M_Functions.ttcn, line 1737 */
{
OneM2M__Types::Contents_template& tmp_682 = v__primitiveContent.any__1();
tmp_682.remove_all_permutations();
tmp_682.set_size(1);
tmp_682[0].AT_Group__optional() = OneM2M__Templates::mw__contentGroupBase;
}
current_location.update_lineno(1739);
/* OneM2M_Functions.ttcn, line 1739 */
{
boolean tmp_692;
{
boolean tmp_683 = p__primitiveContent.is_bound();
if(tmp_683) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_683 = FALSE;
break;
case ANY_VALUE:
tmp_683 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_683) {
const OneM2M__Types::PrimitiveContent_template& tmp_684 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_685 = tmp_684.any__1();
tmp_683 = tmp_685.is_bound();
if(tmp_683) {
switch (tmp_685.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_683 = FALSE;
break;
case ANY_VALUE:
tmp_683 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_683) {
const int tmp_686 = 0;
tmp_683 = (tmp_686 >= 0) && (tmp_685.n_elem() > tmp_686);
if(tmp_683) {
const OneM2M__Types::anytype_template& tmp_687 = tmp_685[tmp_686];
tmp_683 = tmp_687.is_bound();
if(tmp_683) {
switch (tmp_687.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_683 = FALSE;
break;
case ANY_VALUE:
tmp_683 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_683) {
const OneM2M__Types::anytype_template& tmp_688 = tmp_687;
const OneM2M__Types::Group__optional_template& tmp_689 = tmp_688.AT_Group__optional();
tmp_683 = tmp_689.is_bound();
if(tmp_683) {
switch (tmp_689.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_683 = FALSE;
break;
case ANY_VALUE:
tmp_683 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_683) {
const OneM2M__Types::Group__optional_template& tmp_690 = tmp_689;
const OneM2M__Types::Labels_template& tmp_691 = tmp_690.labels();
tmp_683 = tmp_691.is_present();
}
break;}
default:
tmp_683 = FALSE;
break;
}
}
}
break;}
default:
tmp_683 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_683 = FALSE;
break;
}
}
}
break;}
default:
tmp_683 = FALSE;
break;
}
}
tmp_692 = tmp_683;
}
if (tmp_692) {
current_location.update_lineno(1740);
/* OneM2M_Functions.ttcn, line 1740 */
v__primitiveContent.any__1()[0].AT_Group__optional().labels() = ANY_VALUE;
}
}
current_location.update_lineno(1742);
/* OneM2M_Functions.ttcn, line 1742 */
{
boolean tmp_703;
{
boolean tmp_694 = p__primitiveContent.is_bound();
if(tmp_694) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_694 = FALSE;
break;
case ANY_VALUE:
tmp_694 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_694) {
const OneM2M__Types::PrimitiveContent_template& tmp_695 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_696 = tmp_695.any__1();
tmp_694 = tmp_696.is_bound();
if(tmp_694) {
switch (tmp_696.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_694 = FALSE;
break;
case ANY_VALUE:
tmp_694 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_694) {
const int tmp_697 = 0;
tmp_694 = (tmp_697 >= 0) && (tmp_696.n_elem() > tmp_697);
if(tmp_694) {
const OneM2M__Types::anytype_template& tmp_698 = tmp_696[tmp_697];
tmp_694 = tmp_698.is_bound();
if(tmp_694) {
switch (tmp_698.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_694 = FALSE;
break;
case ANY_VALUE:
tmp_694 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_694) {
const OneM2M__Types::anytype_template& tmp_699 = tmp_698;
const OneM2M__Types::Group__optional_template& tmp_700 = tmp_699.AT_Group__optional();
tmp_694 = tmp_700.is_bound();
if(tmp_694) {
switch (tmp_700.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_694 = FALSE;
break;
case ANY_VALUE:
tmp_694 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_694) {
const OneM2M__Types::Group__optional_template& tmp_701 = tmp_700;
const OneM2M__Types::AcpType_template& tmp_702 = tmp_701.accessControlPolicyIDs();
tmp_694 = tmp_702.is_present();
}
break;}
default:
tmp_694 = FALSE;
break;
}
}
}
break;}
default:
tmp_694 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_694 = FALSE;
break;
}
}
}
break;}
default:
tmp_694 = FALSE;
break;
}
}
tmp_703 = tmp_694;
}
if (tmp_703) {
current_location.update_lineno(1743);
/* OneM2M_Functions.ttcn, line 1743 */
v__primitiveContent.any__1()[0].AT_Group__optional().accessControlPolicyIDs() = ANY_VALUE;
}
}
current_location.update_lineno(1745);
/* OneM2M_Functions.ttcn, line 1745 */
{
boolean tmp_714;
{
boolean tmp_705 = p__primitiveContent.is_bound();
if(tmp_705) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_705 = FALSE;
break;
case ANY_VALUE:
tmp_705 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_705) {
const OneM2M__Types::PrimitiveContent_template& tmp_706 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_707 = tmp_706.any__1();
tmp_705 = tmp_707.is_bound();
if(tmp_705) {
switch (tmp_707.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_705 = FALSE;
break;
case ANY_VALUE:
tmp_705 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_705) {
const int tmp_708 = 0;
tmp_705 = (tmp_708 >= 0) && (tmp_707.n_elem() > tmp_708);
if(tmp_705) {
const OneM2M__Types::anytype_template& tmp_709 = tmp_707[tmp_708];
tmp_705 = tmp_709.is_bound();
if(tmp_705) {
switch (tmp_709.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_705 = FALSE;
break;
case ANY_VALUE:
tmp_705 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_705) {
const OneM2M__Types::anytype_template& tmp_710 = tmp_709;
const OneM2M__Types::Group__optional_template& tmp_711 = tmp_710.AT_Group__optional();
tmp_705 = tmp_711.is_bound();
if(tmp_705) {
switch (tmp_711.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_705 = FALSE;
break;
case ANY_VALUE:
tmp_705 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_705) {
const OneM2M__Types::Group__optional_template& tmp_712 = tmp_711;
const OneM2M__Types::ListOfURIs_template& tmp_713 = tmp_712.dynamicAuthorizationConsultationIDs();
tmp_705 = tmp_713.is_present();
}
break;}
default:
tmp_705 = FALSE;
break;
}
}
}
break;}
default:
tmp_705 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_705 = FALSE;
break;
}
}
}
break;}
default:
tmp_705 = FALSE;
break;
}
}
tmp_714 = tmp_705;
}
if (tmp_714) {
current_location.update_lineno(1746);
/* OneM2M_Functions.ttcn, line 1746 */
v__primitiveContent.any__1()[0].AT_Group__optional().dynamicAuthorizationConsultationIDs() = ANY_VALUE;
}
}
current_location.update_lineno(1748);
/* OneM2M_Functions.ttcn, line 1748 */
{
boolean tmp_725;
{
boolean tmp_716 = p__primitiveContent.is_bound();
if(tmp_716) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_716 = FALSE;
break;
case ANY_VALUE:
tmp_716 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_716) {
const OneM2M__Types::PrimitiveContent_template& tmp_717 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_718 = tmp_717.any__1();
tmp_716 = tmp_718.is_bound();
if(tmp_716) {
switch (tmp_718.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_716 = FALSE;
break;
case ANY_VALUE:
tmp_716 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_716) {
const int tmp_719 = 0;
tmp_716 = (tmp_719 >= 0) && (tmp_718.n_elem() > tmp_719);
if(tmp_716) {
const OneM2M__Types::anytype_template& tmp_720 = tmp_718[tmp_719];
tmp_716 = tmp_720.is_bound();
if(tmp_716) {
switch (tmp_720.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_716 = FALSE;
break;
case ANY_VALUE:
tmp_716 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_716) {
const OneM2M__Types::anytype_template& tmp_721 = tmp_720;
const OneM2M__Types::Group__optional_template& tmp_722 = tmp_721.AT_Group__optional();
tmp_716 = tmp_722.is_bound();
if(tmp_716) {
switch (tmp_722.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_716 = FALSE;
break;
case ANY_VALUE:
tmp_716 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_716) {
const OneM2M__Types::Group__optional_template& tmp_723 = tmp_722;
const OneM2M__Types::ListOfURIs_template& tmp_724 = tmp_723.announceTo();
tmp_716 = tmp_724.is_present();
}
break;}
default:
tmp_716 = FALSE;
break;
}
}
}
break;}
default:
tmp_716 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_716 = FALSE;
break;
}
}
}
break;}
default:
tmp_716 = FALSE;
break;
}
}
tmp_725 = tmp_716;
}
if (tmp_725) {
current_location.update_lineno(1749);
/* OneM2M_Functions.ttcn, line 1749 */
v__primitiveContent.any__1()[0].AT_Group__optional().announceTo() = ANY_VALUE;
}
}
current_location.update_lineno(1751);
/* OneM2M_Functions.ttcn, line 1751 */
{
boolean tmp_736;
{
boolean tmp_727 = p__primitiveContent.is_bound();
if(tmp_727) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_727 = FALSE;
break;
case ANY_VALUE:
tmp_727 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_727) {
const OneM2M__Types::PrimitiveContent_template& tmp_728 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_729 = tmp_728.any__1();
tmp_727 = tmp_729.is_bound();
if(tmp_727) {
switch (tmp_729.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_727 = FALSE;
break;
case ANY_VALUE:
tmp_727 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_727) {
const int tmp_730 = 0;
tmp_727 = (tmp_730 >= 0) && (tmp_729.n_elem() > tmp_730);
if(tmp_727) {
const OneM2M__Types::anytype_template& tmp_731 = tmp_729[tmp_730];
tmp_727 = tmp_731.is_bound();
if(tmp_727) {
switch (tmp_731.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_727 = FALSE;
break;
case ANY_VALUE:
tmp_727 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_727) {
const OneM2M__Types::anytype_template& tmp_732 = tmp_731;
const OneM2M__Types::Group__optional_template& tmp_733 = tmp_732.AT_Group__optional();
tmp_727 = tmp_733.is_bound();
if(tmp_727) {
switch (tmp_733.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_727 = FALSE;
break;
case ANY_VALUE:
tmp_727 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_727) {
const OneM2M__Types::Group__optional_template& tmp_734 = tmp_733;
const OneM2M__Types::Group__optional_announcedAttribute_template& tmp_735 = tmp_734.announcedAttribute();
tmp_727 = tmp_735.is_present();
}
break;}
default:
tmp_727 = FALSE;
break;
}
}
}
break;}
default:
tmp_727 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_727 = FALSE;
break;
}
}
}
break;}
default:
tmp_727 = FALSE;
break;
}
}
tmp_736 = tmp_727;
}
if (tmp_736) {
current_location.update_lineno(1752);
/* OneM2M_Functions.ttcn, line 1752 */
v__primitiveContent.any__1()[0].AT_Group__optional().announcedAttribute() = ANY_VALUE;
}
}
current_location.update_lineno(1754);
/* OneM2M_Functions.ttcn, line 1754 */
{
boolean tmp_747;
{
boolean tmp_738 = p__primitiveContent.is_bound();
if(tmp_738) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_738 = FALSE;
break;
case ANY_VALUE:
tmp_738 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_738) {
const OneM2M__Types::PrimitiveContent_template& tmp_739 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_740 = tmp_739.any__1();
tmp_738 = tmp_740.is_bound();
if(tmp_738) {
switch (tmp_740.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_738 = FALSE;
break;
case ANY_VALUE:
tmp_738 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_738) {
const int tmp_741 = 0;
tmp_738 = (tmp_741 >= 0) && (tmp_740.n_elem() > tmp_741);
if(tmp_738) {
const OneM2M__Types::anytype_template& tmp_742 = tmp_740[tmp_741];
tmp_738 = tmp_742.is_bound();
if(tmp_738) {
switch (tmp_742.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_738 = FALSE;
break;
case ANY_VALUE:
tmp_738 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_738) {
const OneM2M__Types::anytype_template& tmp_743 = tmp_742;
const OneM2M__Types::Group__optional_template& tmp_744 = tmp_743.AT_Group__optional();
tmp_738 = tmp_744.is_bound();
if(tmp_738) {
switch (tmp_744.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_738 = FALSE;
break;
case ANY_VALUE:
tmp_738 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_738) {
const OneM2M__Types::Group__optional_template& tmp_745 = tmp_744;
const UNIVERSAL_CHARSTRING_template& tmp_746 = tmp_745.creator();
tmp_738 = tmp_746.is_present();
}
break;}
default:
tmp_738 = FALSE;
break;
}
}
}
break;}
default:
tmp_738 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_738 = FALSE;
break;
}
}
}
break;}
default:
tmp_738 = FALSE;
break;
}
}
tmp_747 = tmp_738;
}
if (tmp_747) {
current_location.update_lineno(1755);
/* OneM2M_Functions.ttcn, line 1755 */
v__primitiveContent.any__1()[0].AT_Group__optional().creator() = ANY_VALUE;
}
}
current_location.update_lineno(1757);
/* OneM2M_Functions.ttcn, line 1757 */
{
boolean tmp_758;
{
boolean tmp_749 = p__primitiveContent.is_bound();
if(tmp_749) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_749 = FALSE;
break;
case ANY_VALUE:
tmp_749 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_749) {
const OneM2M__Types::PrimitiveContent_template& tmp_750 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_751 = tmp_750.any__1();
tmp_749 = tmp_751.is_bound();
if(tmp_749) {
switch (tmp_751.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_749 = FALSE;
break;
case ANY_VALUE:
tmp_749 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_749) {
const int tmp_752 = 0;
tmp_749 = (tmp_752 >= 0) && (tmp_751.n_elem() > tmp_752);
if(tmp_749) {
const OneM2M__Types::anytype_template& tmp_753 = tmp_751[tmp_752];
tmp_749 = tmp_753.is_bound();
if(tmp_749) {
switch (tmp_753.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_749 = FALSE;
break;
case ANY_VALUE:
tmp_749 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_749) {
const OneM2M__Types::anytype_template& tmp_754 = tmp_753;
const OneM2M__Types::Group__optional_template& tmp_755 = tmp_754.AT_Group__optional();
tmp_749 = tmp_755.is_bound();
if(tmp_749) {
switch (tmp_755.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_749 = FALSE;
break;
case ANY_VALUE:
tmp_749 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_749) {
const OneM2M__Types::Group__optional_template& tmp_756 = tmp_755;
const OneM2M__Types::ListOfURIs_template& tmp_757 = tmp_756.membersAccessControlPolicyIDs();
tmp_749 = tmp_757.is_present();
}
break;}
default:
tmp_749 = FALSE;
break;
}
}
}
break;}
default:
tmp_749 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_749 = FALSE;
break;
}
}
}
break;}
default:
tmp_749 = FALSE;
break;
}
}
tmp_758 = tmp_749;
}
if (tmp_758) {
current_location.update_lineno(1758);
/* OneM2M_Functions.ttcn, line 1758 */
v__primitiveContent.any__1()[0].AT_Group__optional().membersAccessControlPolicyIDs() = ANY_VALUE;
}
}
current_location.update_lineno(1760);
/* OneM2M_Functions.ttcn, line 1760 */
{
boolean tmp_769;
{
boolean tmp_760 = p__primitiveContent.is_bound();
if(tmp_760) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_760 = FALSE;
break;
case ANY_VALUE:
tmp_760 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_760) {
const OneM2M__Types::PrimitiveContent_template& tmp_761 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_762 = tmp_761.any__1();
tmp_760 = tmp_762.is_bound();
if(tmp_760) {
switch (tmp_762.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_760 = FALSE;
break;
case ANY_VALUE:
tmp_760 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_760) {
const int tmp_763 = 0;
tmp_760 = (tmp_763 >= 0) && (tmp_762.n_elem() > tmp_763);
if(tmp_760) {
const OneM2M__Types::anytype_template& tmp_764 = tmp_762[tmp_763];
tmp_760 = tmp_764.is_bound();
if(tmp_760) {
switch (tmp_764.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_760 = FALSE;
break;
case ANY_VALUE:
tmp_760 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_760) {
const OneM2M__Types::anytype_template& tmp_765 = tmp_764;
const OneM2M__Types::Group__optional_template& tmp_766 = tmp_765.AT_Group__optional();
tmp_760 = tmp_766.is_bound();
if(tmp_760) {
switch (tmp_766.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_760 = FALSE;
break;
case ANY_VALUE:
tmp_760 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_760) {
const OneM2M__Types::Group__optional_template& tmp_767 = tmp_766;
const BOOLEAN_template& tmp_768 = tmp_767.memberTypeValidated();
tmp_760 = tmp_768.is_present();
}
break;}
default:
tmp_760 = FALSE;
break;
}
}
}
break;}
default:
tmp_760 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_760 = FALSE;
break;
}
}
}
break;}
default:
tmp_760 = FALSE;
break;
}
}
tmp_769 = tmp_760;
}
if (tmp_769) {
current_location.update_lineno(1761);
/* OneM2M_Functions.ttcn, line 1761 */
v__primitiveContent.any__1()[0].AT_Group__optional().memberTypeValidated() = ANY_VALUE;
}
}
current_location.update_lineno(1763);
/* OneM2M_Functions.ttcn, line 1763 */
{
boolean tmp_780;
{
boolean tmp_771 = p__primitiveContent.is_bound();
if(tmp_771) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_771 = FALSE;
break;
case ANY_VALUE:
tmp_771 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_771) {
const OneM2M__Types::PrimitiveContent_template& tmp_772 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_773 = tmp_772.any__1();
tmp_771 = tmp_773.is_bound();
if(tmp_771) {
switch (tmp_773.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_771 = FALSE;
break;
case ANY_VALUE:
tmp_771 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_771) {
const int tmp_774 = 0;
tmp_771 = (tmp_774 >= 0) && (tmp_773.n_elem() > tmp_774);
if(tmp_771) {
const OneM2M__Types::anytype_template& tmp_775 = tmp_773[tmp_774];
tmp_771 = tmp_775.is_bound();
if(tmp_771) {
switch (tmp_775.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_771 = FALSE;
break;
case ANY_VALUE:
tmp_771 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_771) {
const OneM2M__Types::anytype_template& tmp_776 = tmp_775;
const OneM2M__Types::Group__optional_template& tmp_777 = tmp_776.AT_Group__optional();
tmp_771 = tmp_777.is_bound();
if(tmp_771) {
switch (tmp_777.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_771 = FALSE;
break;
case ANY_VALUE:
tmp_771 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_771) {
const OneM2M__Types::Group__optional_template& tmp_778 = tmp_777;
const OneM2M__Types::ConsistencyStrategy_template& tmp_779 = tmp_778.consistencyStrategy();
tmp_771 = tmp_779.is_present();
}
break;}
default:
tmp_771 = FALSE;
break;
}
}
}
break;}
default:
tmp_771 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_771 = FALSE;
break;
}
}
}
break;}
default:
tmp_771 = FALSE;
break;
}
}
tmp_780 = tmp_771;
}
if (tmp_780) {
current_location.update_lineno(1764);
/* OneM2M_Functions.ttcn, line 1764 */
v__primitiveContent.any__1()[0].AT_Group__optional().consistencyStrategy() = ANY_VALUE;
}
}
current_location.update_lineno(1766);
/* OneM2M_Functions.ttcn, line 1766 */
{
boolean tmp_791;
{
boolean tmp_782 = p__primitiveContent.is_bound();
if(tmp_782) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_782 = FALSE;
break;
case ANY_VALUE:
tmp_782 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_782) {
const OneM2M__Types::PrimitiveContent_template& tmp_783 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_784 = tmp_783.any__1();
tmp_782 = tmp_784.is_bound();
if(tmp_782) {
switch (tmp_784.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_782 = FALSE;
break;
case ANY_VALUE:
tmp_782 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_782) {
const int tmp_785 = 0;
tmp_782 = (tmp_785 >= 0) && (tmp_784.n_elem() > tmp_785);
if(tmp_782) {
const OneM2M__Types::anytype_template& tmp_786 = tmp_784[tmp_785];
tmp_782 = tmp_786.is_bound();
if(tmp_782) {
switch (tmp_786.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_782 = FALSE;
break;
case ANY_VALUE:
tmp_782 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_782) {
const OneM2M__Types::anytype_template& tmp_787 = tmp_786;
const OneM2M__Types::Group__optional_template& tmp_788 = tmp_787.AT_Group__optional();
tmp_782 = tmp_788.is_bound();
if(tmp_782) {
switch (tmp_788.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_782 = FALSE;
break;
case ANY_VALUE:
tmp_782 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_782) {
const OneM2M__Types::Group__optional_template& tmp_789 = tmp_788;
const UNIVERSAL_CHARSTRING_template& tmp_790 = tmp_789.groupName();
tmp_782 = tmp_790.is_present();
}
break;}
default:
tmp_782 = FALSE;
break;
}
}
}
break;}
default:
tmp_782 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_782 = FALSE;
break;
}
}
}
break;}
default:
tmp_782 = FALSE;
break;
}
}
tmp_791 = tmp_782;
}
if (tmp_791) {
current_location.update_lineno(1767);
/* OneM2M_Functions.ttcn, line 1767 */
v__primitiveContent.any__1()[0].AT_Group__optional().groupName() = ANY_VALUE;
}
}
}
else {
current_location.update_lineno(1771);
/* OneM2M_Functions.ttcn, line 1771 */
if (p__primitiveContent.any__1()[0].ischosen(OneM2M__Types::anytype::ALT_PollingChannel__optional)) {
current_location.update_lineno(1772);
/* OneM2M_Functions.ttcn, line 1772 */
{
OneM2M__Types::Contents_template& tmp_794 = v__primitiveContent.any__1();
tmp_794.remove_all_permutations();
tmp_794.set_size(1);
tmp_794[0].AT_PollingChannel__optional() = OneM2M__Templates::mw__contentPollingChannelBase;
}
current_location.update_lineno(1774);
/* OneM2M_Functions.ttcn, line 1774 */
{
boolean tmp_804;
{
boolean tmp_795 = p__primitiveContent.is_bound();
if(tmp_795) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_795 = FALSE;
break;
case ANY_VALUE:
tmp_795 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_795) {
const OneM2M__Types::PrimitiveContent_template& tmp_796 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_797 = tmp_796.any__1();
tmp_795 = tmp_797.is_bound();
if(tmp_795) {
switch (tmp_797.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_795 = FALSE;
break;
case ANY_VALUE:
tmp_795 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_795) {
const int tmp_798 = 0;
tmp_795 = (tmp_798 >= 0) && (tmp_797.n_elem() > tmp_798);
if(tmp_795) {
const OneM2M__Types::anytype_template& tmp_799 = tmp_797[tmp_798];
tmp_795 = tmp_799.is_bound();
if(tmp_795) {
switch (tmp_799.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_795 = FALSE;
break;
case ANY_VALUE:
tmp_795 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_795) {
const OneM2M__Types::anytype_template& tmp_800 = tmp_799;
const OneM2M__Types::PollingChannel__optional_template& tmp_801 = tmp_800.AT_PollingChannel__optional();
tmp_795 = tmp_801.is_bound();
if(tmp_795) {
switch (tmp_801.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_795 = FALSE;
break;
case ANY_VALUE:
tmp_795 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_795) {
const OneM2M__Types::PollingChannel__optional_template& tmp_802 = tmp_801;
const OneM2M__Types::Labels_template& tmp_803 = tmp_802.labels();
tmp_795 = tmp_803.is_present();
}
break;}
default:
tmp_795 = FALSE;
break;
}
}
}
break;}
default:
tmp_795 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_795 = FALSE;
break;
}
}
}
break;}
default:
tmp_795 = FALSE;
break;
}
}
tmp_804 = tmp_795;
}
if (tmp_804) {
current_location.update_lineno(1775);
/* OneM2M_Functions.ttcn, line 1775 */
v__primitiveContent.any__1()[0].AT_PollingChannel__optional().labels() = ANY_VALUE;
}
}
}
else {
current_location.update_lineno(1779);
/* OneM2M_Functions.ttcn, line 1779 */
if (p__primitiveContent.any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Schedule__optional)) {
current_location.update_lineno(1780);
/* OneM2M_Functions.ttcn, line 1780 */
{
OneM2M__Types::Contents_template& tmp_807 = v__primitiveContent.any__1();
tmp_807.remove_all_permutations();
tmp_807.set_size(1);
tmp_807[0].AT_Schedule__optional() = OneM2M__Templates::mw__contentScheduleBase;
}
current_location.update_lineno(1782);
/* OneM2M_Functions.ttcn, line 1782 */
{
boolean tmp_817;
{
boolean tmp_808 = p__primitiveContent.is_bound();
if(tmp_808) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_808 = FALSE;
break;
case ANY_VALUE:
tmp_808 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_808) {
const OneM2M__Types::PrimitiveContent_template& tmp_809 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_810 = tmp_809.any__1();
tmp_808 = tmp_810.is_bound();
if(tmp_808) {
switch (tmp_810.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_808 = FALSE;
break;
case ANY_VALUE:
tmp_808 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_808) {
const int tmp_811 = 0;
tmp_808 = (tmp_811 >= 0) && (tmp_810.n_elem() > tmp_811);
if(tmp_808) {
const OneM2M__Types::anytype_template& tmp_812 = tmp_810[tmp_811];
tmp_808 = tmp_812.is_bound();
if(tmp_808) {
switch (tmp_812.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_808 = FALSE;
break;
case ANY_VALUE:
tmp_808 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_808) {
const OneM2M__Types::anytype_template& tmp_813 = tmp_812;
const OneM2M__Types::Schedule__optional_template& tmp_814 = tmp_813.AT_Schedule__optional();
tmp_808 = tmp_814.is_bound();
if(tmp_808) {
switch (tmp_814.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_808 = FALSE;
break;
case ANY_VALUE:
tmp_808 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_808) {
const OneM2M__Types::Schedule__optional_template& tmp_815 = tmp_814;
const OneM2M__Types::Labels_template& tmp_816 = tmp_815.labels();
tmp_808 = tmp_816.is_present();
}
break;}
default:
tmp_808 = FALSE;
break;
}
}
}
break;}
default:
tmp_808 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_808 = FALSE;
break;
}
}
}
break;}
default:
tmp_808 = FALSE;
break;
}
}
tmp_817 = tmp_808;
}
if (tmp_817) {
current_location.update_lineno(1783);
/* OneM2M_Functions.ttcn, line 1783 */
v__primitiveContent.any__1()[0].AT_Schedule__optional().labels() = ANY_VALUE;
}
}
current_location.update_lineno(1785);
/* OneM2M_Functions.ttcn, line 1785 */
{
boolean tmp_828;
{
boolean tmp_819 = p__primitiveContent.is_bound();
if(tmp_819) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_819 = FALSE;
break;
case ANY_VALUE:
tmp_819 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_819) {
const OneM2M__Types::PrimitiveContent_template& tmp_820 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_821 = tmp_820.any__1();
tmp_819 = tmp_821.is_bound();
if(tmp_819) {
switch (tmp_821.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_819 = FALSE;
break;
case ANY_VALUE:
tmp_819 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_819) {
const int tmp_822 = 0;
tmp_819 = (tmp_822 >= 0) && (tmp_821.n_elem() > tmp_822);
if(tmp_819) {
const OneM2M__Types::anytype_template& tmp_823 = tmp_821[tmp_822];
tmp_819 = tmp_823.is_bound();
if(tmp_819) {
switch (tmp_823.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_819 = FALSE;
break;
case ANY_VALUE:
tmp_819 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_819) {
const OneM2M__Types::anytype_template& tmp_824 = tmp_823;
const OneM2M__Types::Schedule__optional_template& tmp_825 = tmp_824.AT_Schedule__optional();
tmp_819 = tmp_825.is_bound();
if(tmp_819) {
switch (tmp_825.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_819 = FALSE;
break;
case ANY_VALUE:
tmp_819 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_819) {
const OneM2M__Types::Schedule__optional_template& tmp_826 = tmp_825;
const OneM2M__Types::ListOfURIs_template& tmp_827 = tmp_826.announceTo();
tmp_819 = tmp_827.is_present();
}
break;}
default:
tmp_819 = FALSE;
break;
}
}
}
break;}
default:
tmp_819 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_819 = FALSE;
break;
}
}
}
break;}
default:
tmp_819 = FALSE;
break;
}
}
tmp_828 = tmp_819;
}
if (tmp_828) {
current_location.update_lineno(1786);
/* OneM2M_Functions.ttcn, line 1786 */
v__primitiveContent.any__1()[0].AT_Schedule__optional().announceTo() = ANY_VALUE;
}
}
current_location.update_lineno(1788);
/* OneM2M_Functions.ttcn, line 1788 */
{
boolean tmp_839;
{
boolean tmp_830 = p__primitiveContent.is_bound();
if(tmp_830) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_830 = FALSE;
break;
case ANY_VALUE:
tmp_830 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_830) {
const OneM2M__Types::PrimitiveContent_template& tmp_831 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_832 = tmp_831.any__1();
tmp_830 = tmp_832.is_bound();
if(tmp_830) {
switch (tmp_832.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_830 = FALSE;
break;
case ANY_VALUE:
tmp_830 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_830) {
const int tmp_833 = 0;
tmp_830 = (tmp_833 >= 0) && (tmp_832.n_elem() > tmp_833);
if(tmp_830) {
const OneM2M__Types::anytype_template& tmp_834 = tmp_832[tmp_833];
tmp_830 = tmp_834.is_bound();
if(tmp_830) {
switch (tmp_834.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_830 = FALSE;
break;
case ANY_VALUE:
tmp_830 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_830) {
const OneM2M__Types::anytype_template& tmp_835 = tmp_834;
const OneM2M__Types::Schedule__optional_template& tmp_836 = tmp_835.AT_Schedule__optional();
tmp_830 = tmp_836.is_bound();
if(tmp_830) {
switch (tmp_836.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_830 = FALSE;
break;
case ANY_VALUE:
tmp_830 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_830) {
const OneM2M__Types::Schedule__optional_template& tmp_837 = tmp_836;
const OneM2M__Types::Schedule__optional_announcedAttribute_template& tmp_838 = tmp_837.announcedAttribute();
tmp_830 = tmp_838.is_present();
}
break;}
default:
tmp_830 = FALSE;
break;
}
}
}
break;}
default:
tmp_830 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_830 = FALSE;
break;
}
}
}
break;}
default:
tmp_830 = FALSE;
break;
}
}
tmp_839 = tmp_830;
}
if (tmp_839) {
current_location.update_lineno(1789);
/* OneM2M_Functions.ttcn, line 1789 */
v__primitiveContent.any__1()[0].AT_Schedule__optional().announcedAttribute() = ANY_VALUE;
}
}
}
else {
current_location.update_lineno(1793);
/* OneM2M_Functions.ttcn, line 1793 */
if (p__primitiveContent.any__1()[0].ischosen(OneM2M__Types::anytype::ALT_Subscription__optional)) {
current_location.update_lineno(1794);
/* OneM2M_Functions.ttcn, line 1794 */
{
OneM2M__Types::Contents_template& tmp_842 = v__primitiveContent.any__1();
tmp_842.remove_all_permutations();
tmp_842.set_size(1);
tmp_842[0].AT_Subscription__optional() = OneM2M__Templates::mw__contentSubscriptionBase;
}
current_location.update_lineno(1796);
/* OneM2M_Functions.ttcn, line 1796 */
{
boolean tmp_852;
{
boolean tmp_843 = p__primitiveContent.is_bound();
if(tmp_843) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_843 = FALSE;
break;
case ANY_VALUE:
tmp_843 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_843) {
const OneM2M__Types::PrimitiveContent_template& tmp_844 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_845 = tmp_844.any__1();
tmp_843 = tmp_845.is_bound();
if(tmp_843) {
switch (tmp_845.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_843 = FALSE;
break;
case ANY_VALUE:
tmp_843 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_843) {
const int tmp_846 = 0;
tmp_843 = (tmp_846 >= 0) && (tmp_845.n_elem() > tmp_846);
if(tmp_843) {
const OneM2M__Types::anytype_template& tmp_847 = tmp_845[tmp_846];
tmp_843 = tmp_847.is_bound();
if(tmp_843) {
switch (tmp_847.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_843 = FALSE;
break;
case ANY_VALUE:
tmp_843 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_843) {
const OneM2M__Types::anytype_template& tmp_848 = tmp_847;
const OneM2M__Types::Subscription__optional_template& tmp_849 = tmp_848.AT_Subscription__optional();
tmp_843 = tmp_849.is_bound();
if(tmp_843) {
switch (tmp_849.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_843 = FALSE;
break;
case ANY_VALUE:
tmp_843 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_843) {
const OneM2M__Types::Subscription__optional_template& tmp_850 = tmp_849;
const OneM2M__Types::Labels_template& tmp_851 = tmp_850.labels();
tmp_843 = tmp_851.is_present();
}
break;}
default:
tmp_843 = FALSE;
break;
}
}
}
break;}
default:
tmp_843 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_843 = FALSE;
break;
}
}
}
break;}
default:
tmp_843 = FALSE;
break;
}
}
tmp_852 = tmp_843;
}
if (tmp_852) {
current_location.update_lineno(1797);
/* OneM2M_Functions.ttcn, line 1797 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().labels() = ANY_VALUE;
}
}
current_location.update_lineno(1799);
/* OneM2M_Functions.ttcn, line 1799 */
{
boolean tmp_863;
{
boolean tmp_854 = p__primitiveContent.is_bound();
if(tmp_854) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_854 = FALSE;
break;
case ANY_VALUE:
tmp_854 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_854) {
const OneM2M__Types::PrimitiveContent_template& tmp_855 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_856 = tmp_855.any__1();
tmp_854 = tmp_856.is_bound();
if(tmp_854) {
switch (tmp_856.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_854 = FALSE;
break;
case ANY_VALUE:
tmp_854 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_854) {
const int tmp_857 = 0;
tmp_854 = (tmp_857 >= 0) && (tmp_856.n_elem() > tmp_857);
if(tmp_854) {
const OneM2M__Types::anytype_template& tmp_858 = tmp_856[tmp_857];
tmp_854 = tmp_858.is_bound();
if(tmp_854) {
switch (tmp_858.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_854 = FALSE;
break;
case ANY_VALUE:
tmp_854 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_854) {
const OneM2M__Types::anytype_template& tmp_859 = tmp_858;
const OneM2M__Types::Subscription__optional_template& tmp_860 = tmp_859.AT_Subscription__optional();
tmp_854 = tmp_860.is_bound();
if(tmp_854) {
switch (tmp_860.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_854 = FALSE;
break;
case ANY_VALUE:
tmp_854 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_854) {
const OneM2M__Types::Subscription__optional_template& tmp_861 = tmp_860;
const OneM2M__Types::AcpType_template& tmp_862 = tmp_861.accessControlPolicyIDs();
tmp_854 = tmp_862.is_present();
}
break;}
default:
tmp_854 = FALSE;
break;
}
}
}
break;}
default:
tmp_854 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_854 = FALSE;
break;
}
}
}
break;}
default:
tmp_854 = FALSE;
break;
}
}
tmp_863 = tmp_854;
}
if (tmp_863) {
current_location.update_lineno(1800);
/* OneM2M_Functions.ttcn, line 1800 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().accessControlPolicyIDs() = ANY_VALUE;
}
}
current_location.update_lineno(1802);
/* OneM2M_Functions.ttcn, line 1802 */
{
boolean tmp_874;
{
boolean tmp_865 = p__primitiveContent.is_bound();
if(tmp_865) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_865 = FALSE;
break;
case ANY_VALUE:
tmp_865 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_865) {
const OneM2M__Types::PrimitiveContent_template& tmp_866 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_867 = tmp_866.any__1();
tmp_865 = tmp_867.is_bound();
if(tmp_865) {
switch (tmp_867.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_865 = FALSE;
break;
case ANY_VALUE:
tmp_865 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_865) {
const int tmp_868 = 0;
tmp_865 = (tmp_868 >= 0) && (tmp_867.n_elem() > tmp_868);
if(tmp_865) {
const OneM2M__Types::anytype_template& tmp_869 = tmp_867[tmp_868];
tmp_865 = tmp_869.is_bound();
if(tmp_865) {
switch (tmp_869.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_865 = FALSE;
break;
case ANY_VALUE:
tmp_865 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_865) {
const OneM2M__Types::anytype_template& tmp_870 = tmp_869;
const OneM2M__Types::Subscription__optional_template& tmp_871 = tmp_870.AT_Subscription__optional();
tmp_865 = tmp_871.is_bound();
if(tmp_865) {
switch (tmp_871.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_865 = FALSE;
break;
case ANY_VALUE:
tmp_865 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_865) {
const OneM2M__Types::Subscription__optional_template& tmp_872 = tmp_871;
const OneM2M__Types::ListOfURIs_template& tmp_873 = tmp_872.dynamicAuthorizationConsultationIDs();
tmp_865 = tmp_873.is_present();
}
break;}
default:
tmp_865 = FALSE;
break;
}
}
}
break;}
default:
tmp_865 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_865 = FALSE;
break;
}
}
}
break;}
default:
tmp_865 = FALSE;
break;
}
}
tmp_874 = tmp_865;
}
if (tmp_874) {
current_location.update_lineno(1803);
/* OneM2M_Functions.ttcn, line 1803 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().dynamicAuthorizationConsultationIDs() = ANY_VALUE;
}
}
current_location.update_lineno(1805);
/* OneM2M_Functions.ttcn, line 1805 */
{
boolean tmp_885;
{
boolean tmp_876 = p__primitiveContent.is_bound();
if(tmp_876) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_876 = FALSE;
break;
case ANY_VALUE:
tmp_876 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_876) {
const OneM2M__Types::PrimitiveContent_template& tmp_877 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_878 = tmp_877.any__1();
tmp_876 = tmp_878.is_bound();
if(tmp_876) {
switch (tmp_878.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_876 = FALSE;
break;
case ANY_VALUE:
tmp_876 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_876) {
const int tmp_879 = 0;
tmp_876 = (tmp_879 >= 0) && (tmp_878.n_elem() > tmp_879);
if(tmp_876) {
const OneM2M__Types::anytype_template& tmp_880 = tmp_878[tmp_879];
tmp_876 = tmp_880.is_bound();
if(tmp_876) {
switch (tmp_880.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_876 = FALSE;
break;
case ANY_VALUE:
tmp_876 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_876) {
const OneM2M__Types::anytype_template& tmp_881 = tmp_880;
const OneM2M__Types::Subscription__optional_template& tmp_882 = tmp_881.AT_Subscription__optional();
tmp_876 = tmp_882.is_bound();
if(tmp_876) {
switch (tmp_882.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_876 = FALSE;
break;
case ANY_VALUE:
tmp_876 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_876) {
const OneM2M__Types::Subscription__optional_template& tmp_883 = tmp_882;
const UNIVERSAL_CHARSTRING_template& tmp_884 = tmp_883.creator();
tmp_876 = tmp_884.is_present();
}
break;}
default:
tmp_876 = FALSE;
break;
}
}
}
break;}
default:
tmp_876 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_876 = FALSE;
break;
}
}
}
break;}
default:
tmp_876 = FALSE;
break;
}
}
tmp_885 = tmp_876;
}
if (tmp_885) {
current_location.update_lineno(1806);
/* OneM2M_Functions.ttcn, line 1806 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().creator() = ANY_VALUE;
}
}
current_location.update_lineno(1808);
/* OneM2M_Functions.ttcn, line 1808 */
{
boolean tmp_896;
{
boolean tmp_887 = p__primitiveContent.is_bound();
if(tmp_887) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_887 = FALSE;
break;
case ANY_VALUE:
tmp_887 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_887) {
const OneM2M__Types::PrimitiveContent_template& tmp_888 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_889 = tmp_888.any__1();
tmp_887 = tmp_889.is_bound();
if(tmp_887) {
switch (tmp_889.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_887 = FALSE;
break;
case ANY_VALUE:
tmp_887 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_887) {
const int tmp_890 = 0;
tmp_887 = (tmp_890 >= 0) && (tmp_889.n_elem() > tmp_890);
if(tmp_887) {
const OneM2M__Types::anytype_template& tmp_891 = tmp_889[tmp_890];
tmp_887 = tmp_891.is_bound();
if(tmp_887) {
switch (tmp_891.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_887 = FALSE;
break;
case ANY_VALUE:
tmp_887 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_887) {
const OneM2M__Types::anytype_template& tmp_892 = tmp_891;
const OneM2M__Types::Subscription__optional_template& tmp_893 = tmp_892.AT_Subscription__optional();
tmp_887 = tmp_893.is_bound();
if(tmp_887) {
switch (tmp_893.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_887 = FALSE;
break;
case ANY_VALUE:
tmp_887 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_887) {
const OneM2M__Types::Subscription__optional_template& tmp_894 = tmp_893;
const OneM2M__Types::EventNotificationCriteria_template& tmp_895 = tmp_894.eventNotificationCriteria();
tmp_887 = tmp_895.is_present();
}
break;}
default:
tmp_887 = FALSE;
break;
}
}
}
break;}
default:
tmp_887 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_887 = FALSE;
break;
}
}
}
break;}
default:
tmp_887 = FALSE;
break;
}
}
tmp_896 = tmp_887;
}
if (tmp_896) {
current_location.update_lineno(1809);
/* OneM2M_Functions.ttcn, line 1809 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().eventNotificationCriteria() = ANY_VALUE;
}
}
current_location.update_lineno(1811);
/* OneM2M_Functions.ttcn, line 1811 */
{
boolean tmp_907;
{
boolean tmp_898 = p__primitiveContent.is_bound();
if(tmp_898) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_898 = FALSE;
break;
case ANY_VALUE:
tmp_898 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_898) {
const OneM2M__Types::PrimitiveContent_template& tmp_899 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_900 = tmp_899.any__1();
tmp_898 = tmp_900.is_bound();
if(tmp_898) {
switch (tmp_900.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_898 = FALSE;
break;
case ANY_VALUE:
tmp_898 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_898) {
const int tmp_901 = 0;
tmp_898 = (tmp_901 >= 0) && (tmp_900.n_elem() > tmp_901);
if(tmp_898) {
const OneM2M__Types::anytype_template& tmp_902 = tmp_900[tmp_901];
tmp_898 = tmp_902.is_bound();
if(tmp_898) {
switch (tmp_902.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_898 = FALSE;
break;
case ANY_VALUE:
tmp_898 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_898) {
const OneM2M__Types::anytype_template& tmp_903 = tmp_902;
const OneM2M__Types::Subscription__optional_template& tmp_904 = tmp_903.AT_Subscription__optional();
tmp_898 = tmp_904.is_bound();
if(tmp_898) {
switch (tmp_904.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_898 = FALSE;
break;
case ANY_VALUE:
tmp_898 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_898) {
const OneM2M__Types::Subscription__optional_template& tmp_905 = tmp_904;
const INTEGER_template& tmp_906 = tmp_905.expirationCounter();
tmp_898 = tmp_906.is_present();
}
break;}
default:
tmp_898 = FALSE;
break;
}
}
}
break;}
default:
tmp_898 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_898 = FALSE;
break;
}
}
}
break;}
default:
tmp_898 = FALSE;
break;
}
}
tmp_907 = tmp_898;
}
if (tmp_907) {
current_location.update_lineno(1812);
/* OneM2M_Functions.ttcn, line 1812 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().expirationCounter() = ANY_VALUE;
}
}
current_location.update_lineno(1814);
/* OneM2M_Functions.ttcn, line 1814 */
{
boolean tmp_918;
{
boolean tmp_909 = p__primitiveContent.is_bound();
if(tmp_909) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_909 = FALSE;
break;
case ANY_VALUE:
tmp_909 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_909) {
const OneM2M__Types::PrimitiveContent_template& tmp_910 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_911 = tmp_910.any__1();
tmp_909 = tmp_911.is_bound();
if(tmp_909) {
switch (tmp_911.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_909 = FALSE;
break;
case ANY_VALUE:
tmp_909 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_909) {
const int tmp_912 = 0;
tmp_909 = (tmp_912 >= 0) && (tmp_911.n_elem() > tmp_912);
if(tmp_909) {
const OneM2M__Types::anytype_template& tmp_913 = tmp_911[tmp_912];
tmp_909 = tmp_913.is_bound();
if(tmp_909) {
switch (tmp_913.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_909 = FALSE;
break;
case ANY_VALUE:
tmp_909 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_909) {
const OneM2M__Types::anytype_template& tmp_914 = tmp_913;
const OneM2M__Types::Subscription__optional_template& tmp_915 = tmp_914.AT_Subscription__optional();
tmp_909 = tmp_915.is_bound();
if(tmp_909) {
switch (tmp_915.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_909 = FALSE;
break;
case ANY_VALUE:
tmp_909 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_909) {
const OneM2M__Types::Subscription__optional_template& tmp_916 = tmp_915;
const UNIVERSAL_CHARSTRING_template& tmp_917 = tmp_916.groupID();
tmp_909 = tmp_917.is_present();
}
break;}
default:
tmp_909 = FALSE;
break;
}
}
}
break;}
default:
tmp_909 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_909 = FALSE;
break;
}
}
}
break;}
default:
tmp_909 = FALSE;
break;
}
}
tmp_918 = tmp_909;
}
if (tmp_918) {
current_location.update_lineno(1815);
/* OneM2M_Functions.ttcn, line 1815 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().groupID() = ANY_VALUE;
}
}
current_location.update_lineno(1817);
/* OneM2M_Functions.ttcn, line 1817 */
{
boolean tmp_929;
{
boolean tmp_920 = p__primitiveContent.is_bound();
if(tmp_920) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_920 = FALSE;
break;
case ANY_VALUE:
tmp_920 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_920) {
const OneM2M__Types::PrimitiveContent_template& tmp_921 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_922 = tmp_921.any__1();
tmp_920 = tmp_922.is_bound();
if(tmp_920) {
switch (tmp_922.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_920 = FALSE;
break;
case ANY_VALUE:
tmp_920 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_920) {
const int tmp_923 = 0;
tmp_920 = (tmp_923 >= 0) && (tmp_922.n_elem() > tmp_923);
if(tmp_920) {
const OneM2M__Types::anytype_template& tmp_924 = tmp_922[tmp_923];
tmp_920 = tmp_924.is_bound();
if(tmp_920) {
switch (tmp_924.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_920 = FALSE;
break;
case ANY_VALUE:
tmp_920 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_920) {
const OneM2M__Types::anytype_template& tmp_925 = tmp_924;
const OneM2M__Types::Subscription__optional_template& tmp_926 = tmp_925.AT_Subscription__optional();
tmp_920 = tmp_926.is_bound();
if(tmp_920) {
switch (tmp_926.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_920 = FALSE;
break;
case ANY_VALUE:
tmp_920 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_920) {
const OneM2M__Types::Subscription__optional_template& tmp_927 = tmp_926;
const UNIVERSAL_CHARSTRING_template& tmp_928 = tmp_927.notificationForwardingURI();
tmp_920 = tmp_928.is_present();
}
break;}
default:
tmp_920 = FALSE;
break;
}
}
}
break;}
default:
tmp_920 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_920 = FALSE;
break;
}
}
}
break;}
default:
tmp_920 = FALSE;
break;
}
}
tmp_929 = tmp_920;
}
if (tmp_929) {
current_location.update_lineno(1818);
/* OneM2M_Functions.ttcn, line 1818 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().notificationForwardingURI() = ANY_VALUE;
}
}
current_location.update_lineno(1820);
/* OneM2M_Functions.ttcn, line 1820 */
{
boolean tmp_940;
{
boolean tmp_931 = p__primitiveContent.is_bound();
if(tmp_931) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_931 = FALSE;
break;
case ANY_VALUE:
tmp_931 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_931) {
const OneM2M__Types::PrimitiveContent_template& tmp_932 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_933 = tmp_932.any__1();
tmp_931 = tmp_933.is_bound();
if(tmp_931) {
switch (tmp_933.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_931 = FALSE;
break;
case ANY_VALUE:
tmp_931 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_931) {
const int tmp_934 = 0;
tmp_931 = (tmp_934 >= 0) && (tmp_933.n_elem() > tmp_934);
if(tmp_931) {
const OneM2M__Types::anytype_template& tmp_935 = tmp_933[tmp_934];
tmp_931 = tmp_935.is_bound();
if(tmp_931) {
switch (tmp_935.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_931 = FALSE;
break;
case ANY_VALUE:
tmp_931 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_931) {
const OneM2M__Types::anytype_template& tmp_936 = tmp_935;
const OneM2M__Types::Subscription__optional_template& tmp_937 = tmp_936.AT_Subscription__optional();
tmp_931 = tmp_937.is_bound();
if(tmp_931) {
switch (tmp_937.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_931 = FALSE;
break;
case ANY_VALUE:
tmp_931 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_931) {
const OneM2M__Types::Subscription__optional_template& tmp_938 = tmp_937;
const OneM2M__Types::BatchNotify_template& tmp_939 = tmp_938.batchNotify();
tmp_931 = tmp_939.is_present();
}
break;}
default:
tmp_931 = FALSE;
break;
}
}
}
break;}
default:
tmp_931 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_931 = FALSE;
break;
}
}
}
break;}
default:
tmp_931 = FALSE;
break;
}
}
tmp_940 = tmp_931;
}
if (tmp_940) {
current_location.update_lineno(1821);
/* OneM2M_Functions.ttcn, line 1821 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().batchNotify() = ANY_VALUE;
}
}
current_location.update_lineno(1823);
/* OneM2M_Functions.ttcn, line 1823 */
{
boolean tmp_951;
{
boolean tmp_942 = p__primitiveContent.is_bound();
if(tmp_942) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_942 = FALSE;
break;
case ANY_VALUE:
tmp_942 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_942) {
const OneM2M__Types::PrimitiveContent_template& tmp_943 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_944 = tmp_943.any__1();
tmp_942 = tmp_944.is_bound();
if(tmp_942) {
switch (tmp_944.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_942 = FALSE;
break;
case ANY_VALUE:
tmp_942 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_942) {
const int tmp_945 = 0;
tmp_942 = (tmp_945 >= 0) && (tmp_944.n_elem() > tmp_945);
if(tmp_942) {
const OneM2M__Types::anytype_template& tmp_946 = tmp_944[tmp_945];
tmp_942 = tmp_946.is_bound();
if(tmp_942) {
switch (tmp_946.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_942 = FALSE;
break;
case ANY_VALUE:
tmp_942 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_942) {
const OneM2M__Types::anytype_template& tmp_947 = tmp_946;
const OneM2M__Types::Subscription__optional_template& tmp_948 = tmp_947.AT_Subscription__optional();
tmp_942 = tmp_948.is_bound();
if(tmp_942) {
switch (tmp_948.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_942 = FALSE;
break;
case ANY_VALUE:
tmp_942 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_942) {
const OneM2M__Types::Subscription__optional_template& tmp_949 = tmp_948;
const OneM2M__Types::RateLimit_template& tmp_950 = tmp_949.rateLimit();
tmp_942 = tmp_950.is_present();
}
break;}
default:
tmp_942 = FALSE;
break;
}
}
}
break;}
default:
tmp_942 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_942 = FALSE;
break;
}
}
}
break;}
default:
tmp_942 = FALSE;
break;
}
}
tmp_951 = tmp_942;
}
if (tmp_951) {
current_location.update_lineno(1824);
/* OneM2M_Functions.ttcn, line 1824 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().rateLimit() = ANY_VALUE;
}
}
current_location.update_lineno(1826);
/* OneM2M_Functions.ttcn, line 1826 */
{
boolean tmp_962;
{
boolean tmp_953 = p__primitiveContent.is_bound();
if(tmp_953) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_953 = FALSE;
break;
case ANY_VALUE:
tmp_953 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_953) {
const OneM2M__Types::PrimitiveContent_template& tmp_954 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_955 = tmp_954.any__1();
tmp_953 = tmp_955.is_bound();
if(tmp_953) {
switch (tmp_955.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_953 = FALSE;
break;
case ANY_VALUE:
tmp_953 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_953) {
const int tmp_956 = 0;
tmp_953 = (tmp_956 >= 0) && (tmp_955.n_elem() > tmp_956);
if(tmp_953) {
const OneM2M__Types::anytype_template& tmp_957 = tmp_955[tmp_956];
tmp_953 = tmp_957.is_bound();
if(tmp_953) {
switch (tmp_957.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_953 = FALSE;
break;
case ANY_VALUE:
tmp_953 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_953) {
const OneM2M__Types::anytype_template& tmp_958 = tmp_957;
const OneM2M__Types::Subscription__optional_template& tmp_959 = tmp_958.AT_Subscription__optional();
tmp_953 = tmp_959.is_bound();
if(tmp_953) {
switch (tmp_959.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_953 = FALSE;
break;
case ANY_VALUE:
tmp_953 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_953) {
const OneM2M__Types::Subscription__optional_template& tmp_960 = tmp_959;
const INTEGER_template& tmp_961 = tmp_960.preSubscriptionNotify();
tmp_953 = tmp_961.is_present();
}
break;}
default:
tmp_953 = FALSE;
break;
}
}
}
break;}
default:
tmp_953 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_953 = FALSE;
break;
}
}
}
break;}
default:
tmp_953 = FALSE;
break;
}
}
tmp_962 = tmp_953;
}
if (tmp_962) {
current_location.update_lineno(1827);
/* OneM2M_Functions.ttcn, line 1827 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().preSubscriptionNotify() = ANY_VALUE;
}
}
current_location.update_lineno(1829);
/* OneM2M_Functions.ttcn, line 1829 */
{
boolean tmp_973;
{
boolean tmp_964 = p__primitiveContent.is_bound();
if(tmp_964) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_964 = FALSE;
break;
case ANY_VALUE:
tmp_964 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_964) {
const OneM2M__Types::PrimitiveContent_template& tmp_965 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_966 = tmp_965.any__1();
tmp_964 = tmp_966.is_bound();
if(tmp_964) {
switch (tmp_966.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_964 = FALSE;
break;
case ANY_VALUE:
tmp_964 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_964) {
const int tmp_967 = 0;
tmp_964 = (tmp_967 >= 0) && (tmp_966.n_elem() > tmp_967);
if(tmp_964) {
const OneM2M__Types::anytype_template& tmp_968 = tmp_966[tmp_967];
tmp_964 = tmp_968.is_bound();
if(tmp_964) {
switch (tmp_968.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_964 = FALSE;
break;
case ANY_VALUE:
tmp_964 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_964) {
const OneM2M__Types::anytype_template& tmp_969 = tmp_968;
const OneM2M__Types::Subscription__optional_template& tmp_970 = tmp_969.AT_Subscription__optional();
tmp_964 = tmp_970.is_bound();
if(tmp_964) {
switch (tmp_970.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_964 = FALSE;
break;
case ANY_VALUE:
tmp_964 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_964) {
const OneM2M__Types::Subscription__optional_template& tmp_971 = tmp_970;
const OneM2M__Types::PendingNotification_template& tmp_972 = tmp_971.pendingNotification();
tmp_964 = tmp_972.is_present();
}
break;}
default:
tmp_964 = FALSE;
break;
}
}
}
break;}
default:
tmp_964 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_964 = FALSE;
break;
}
}
}
break;}
default:
tmp_964 = FALSE;
break;
}
}
tmp_973 = tmp_964;
}
if (tmp_973) {
current_location.update_lineno(1830);
/* OneM2M_Functions.ttcn, line 1830 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().pendingNotification() = ANY_VALUE;
}
}
current_location.update_lineno(1832);
/* OneM2M_Functions.ttcn, line 1832 */
{
boolean tmp_984;
{
boolean tmp_975 = p__primitiveContent.is_bound();
if(tmp_975) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_975 = FALSE;
break;
case ANY_VALUE:
tmp_975 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_975) {
const OneM2M__Types::PrimitiveContent_template& tmp_976 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_977 = tmp_976.any__1();
tmp_975 = tmp_977.is_bound();
if(tmp_975) {
switch (tmp_977.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_975 = FALSE;
break;
case ANY_VALUE:
tmp_975 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_975) {
const int tmp_978 = 0;
tmp_975 = (tmp_978 >= 0) && (tmp_977.n_elem() > tmp_978);
if(tmp_975) {
const OneM2M__Types::anytype_template& tmp_979 = tmp_977[tmp_978];
tmp_975 = tmp_979.is_bound();
if(tmp_975) {
switch (tmp_979.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_975 = FALSE;
break;
case ANY_VALUE:
tmp_975 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_975) {
const OneM2M__Types::anytype_template& tmp_980 = tmp_979;
const OneM2M__Types::Subscription__optional_template& tmp_981 = tmp_980.AT_Subscription__optional();
tmp_975 = tmp_981.is_bound();
if(tmp_975) {
switch (tmp_981.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_975 = FALSE;
break;
case ANY_VALUE:
tmp_975 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_975) {
const OneM2M__Types::Subscription__optional_template& tmp_982 = tmp_981;
const INTEGER_template& tmp_983 = tmp_982.notificationStoragePriority();
tmp_975 = tmp_983.is_present();
}
break;}
default:
tmp_975 = FALSE;
break;
}
}
}
break;}
default:
tmp_975 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_975 = FALSE;
break;
}
}
}
break;}
default:
tmp_975 = FALSE;
break;
}
}
tmp_984 = tmp_975;
}
if (tmp_984) {
current_location.update_lineno(1833);
/* OneM2M_Functions.ttcn, line 1833 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().notificationStoragePriority() = ANY_VALUE;
}
}
current_location.update_lineno(1835);
/* OneM2M_Functions.ttcn, line 1835 */
{
boolean tmp_995;
{
boolean tmp_986 = p__primitiveContent.is_bound();
if(tmp_986) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_986 = FALSE;
break;
case ANY_VALUE:
tmp_986 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_986) {
const OneM2M__Types::PrimitiveContent_template& tmp_987 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_988 = tmp_987.any__1();
tmp_986 = tmp_988.is_bound();
if(tmp_986) {
switch (tmp_988.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_986 = FALSE;
break;
case ANY_VALUE:
tmp_986 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_986) {
const int tmp_989 = 0;
tmp_986 = (tmp_989 >= 0) && (tmp_988.n_elem() > tmp_989);
if(tmp_986) {
const OneM2M__Types::anytype_template& tmp_990 = tmp_988[tmp_989];
tmp_986 = tmp_990.is_bound();
if(tmp_986) {
switch (tmp_990.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_986 = FALSE;
break;
case ANY_VALUE:
tmp_986 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_986) {
const OneM2M__Types::anytype_template& tmp_991 = tmp_990;
const OneM2M__Types::Subscription__optional_template& tmp_992 = tmp_991.AT_Subscription__optional();
tmp_986 = tmp_992.is_bound();
if(tmp_986) {
switch (tmp_992.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_986 = FALSE;
break;
case ANY_VALUE:
tmp_986 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_986) {
const OneM2M__Types::Subscription__optional_template& tmp_993 = tmp_992;
const BOOLEAN_template& tmp_994 = tmp_993.latestNotify();
tmp_986 = tmp_994.is_present();
}
break;}
default:
tmp_986 = FALSE;
break;
}
}
}
break;}
default:
tmp_986 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_986 = FALSE;
break;
}
}
}
break;}
default:
tmp_986 = FALSE;
break;
}
}
tmp_995 = tmp_986;
}
if (tmp_995) {
current_location.update_lineno(1836);
/* OneM2M_Functions.ttcn, line 1836 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().latestNotify() = ANY_VALUE;
}
}
current_location.update_lineno(1838);
/* OneM2M_Functions.ttcn, line 1838 */
{
boolean tmp_1006;
{
boolean tmp_997 = p__primitiveContent.is_bound();
if(tmp_997) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_997 = FALSE;
break;
case ANY_VALUE:
tmp_997 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_997) {
const OneM2M__Types::PrimitiveContent_template& tmp_998 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_999 = tmp_998.any__1();
tmp_997 = tmp_999.is_bound();
if(tmp_997) {
switch (tmp_999.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_997 = FALSE;
break;
case ANY_VALUE:
tmp_997 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_997) {
const int tmp_1000 = 0;
tmp_997 = (tmp_1000 >= 0) && (tmp_999.n_elem() > tmp_1000);
if(tmp_997) {
const OneM2M__Types::anytype_template& tmp_1001 = tmp_999[tmp_1000];
tmp_997 = tmp_1001.is_bound();
if(tmp_997) {
switch (tmp_1001.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_997 = FALSE;
break;
case ANY_VALUE:
tmp_997 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_997) {
const OneM2M__Types::anytype_template& tmp_1002 = tmp_1001;
const OneM2M__Types::Subscription__optional_template& tmp_1003 = tmp_1002.AT_Subscription__optional();
tmp_997 = tmp_1003.is_bound();
if(tmp_997) {
switch (tmp_1003.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_997 = FALSE;
break;
case ANY_VALUE:
tmp_997 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_997) {
const OneM2M__Types::Subscription__optional_template& tmp_1004 = tmp_1003;
const OneM2M__Types::NotificationContentType_template& tmp_1005 = tmp_1004.notificationContentType();
tmp_997 = tmp_1005.is_present();
}
break;}
default:
tmp_997 = FALSE;
break;
}
}
}
break;}
default:
tmp_997 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_997 = FALSE;
break;
}
}
}
break;}
default:
tmp_997 = FALSE;
break;
}
}
tmp_1006 = tmp_997;
}
if (tmp_1006) {
current_location.update_lineno(1839);
/* OneM2M_Functions.ttcn, line 1839 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().notificationContentType() = ANY_VALUE;
}
}
current_location.update_lineno(1841);
/* OneM2M_Functions.ttcn, line 1841 */
{
boolean tmp_1017;
{
boolean tmp_1008 = p__primitiveContent.is_bound();
if(tmp_1008) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_1008 = FALSE;
break;
case ANY_VALUE:
tmp_1008 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_1008) {
const OneM2M__Types::PrimitiveContent_template& tmp_1009 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_1010 = tmp_1009.any__1();
tmp_1008 = tmp_1010.is_bound();
if(tmp_1008) {
switch (tmp_1010.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_1008 = FALSE;
break;
case ANY_VALUE:
tmp_1008 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_1008) {
const int tmp_1011 = 0;
tmp_1008 = (tmp_1011 >= 0) && (tmp_1010.n_elem() > tmp_1011);
if(tmp_1008) {
const OneM2M__Types::anytype_template& tmp_1012 = tmp_1010[tmp_1011];
tmp_1008 = tmp_1012.is_bound();
if(tmp_1008) {
switch (tmp_1012.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_1008 = FALSE;
break;
case ANY_VALUE:
tmp_1008 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_1008) {
const OneM2M__Types::anytype_template& tmp_1013 = tmp_1012;
const OneM2M__Types::Subscription__optional_template& tmp_1014 = tmp_1013.AT_Subscription__optional();
tmp_1008 = tmp_1014.is_bound();
if(tmp_1008) {
switch (tmp_1014.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_1008 = FALSE;
break;
case ANY_VALUE:
tmp_1008 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_1008) {
const OneM2M__Types::Subscription__optional_template& tmp_1015 = tmp_1014;
const OneM2M__Types::EventCat_template& tmp_1016 = tmp_1015.notificationEventCat();
tmp_1008 = tmp_1016.is_present();
}
break;}
default:
tmp_1008 = FALSE;
break;
}
}
}
break;}
default:
tmp_1008 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_1008 = FALSE;
break;
}
}
}
break;}
default:
tmp_1008 = FALSE;
break;
}
}
tmp_1017 = tmp_1008;
}
if (tmp_1017) {
current_location.update_lineno(1842);
/* OneM2M_Functions.ttcn, line 1842 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().notificationEventCat() = ANY_VALUE;
}
}
current_location.update_lineno(1844);
/* OneM2M_Functions.ttcn, line 1844 */
{
boolean tmp_1028;
{
boolean tmp_1019 = p__primitiveContent.is_bound();
if(tmp_1019) {
switch (p__primitiveContent.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_1019 = FALSE;
break;
case ANY_VALUE:
tmp_1019 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_1019) {
const OneM2M__Types::PrimitiveContent_template& tmp_1020 = p__primitiveContent;
const OneM2M__Types::Contents_template& tmp_1021 = tmp_1020.any__1();
tmp_1019 = tmp_1021.is_bound();
if(tmp_1019) {
switch (tmp_1021.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_1019 = FALSE;
break;
case ANY_VALUE:
tmp_1019 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_1019) {
const int tmp_1022 = 0;
tmp_1019 = (tmp_1022 >= 0) && (tmp_1021.n_elem() > tmp_1022);
if(tmp_1019) {
const OneM2M__Types::anytype_template& tmp_1023 = tmp_1021[tmp_1022];
tmp_1019 = tmp_1023.is_bound();
if(tmp_1019) {
switch (tmp_1023.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_1019 = FALSE;
break;
case ANY_VALUE:
tmp_1019 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_1019) {
const OneM2M__Types::anytype_template& tmp_1024 = tmp_1023;
const OneM2M__Types::Subscription__optional_template& tmp_1025 = tmp_1024.AT_Subscription__optional();
tmp_1019 = tmp_1025.is_bound();
if(tmp_1019) {
switch (tmp_1025.get_selection()) {
case UNINITIALIZED_TEMPLATE:
tmp_1019 = FALSE;
break;
case ANY_VALUE:
tmp_1019 = FALSE;
break;
case SPECIFIC_VALUE: {
if(tmp_1019) {
const OneM2M__Types::Subscription__optional_template& tmp_1026 = tmp_1025;
const UNIVERSAL_CHARSTRING_template& tmp_1027 = tmp_1026.subscriberURI();
tmp_1019 = tmp_1027.is_present();
}
break;}
default:
tmp_1019 = FALSE;
break;
}
}
}
break;}
default:
tmp_1019 = FALSE;
break;
}
}
}
}
break;}
default:
tmp_1019 = FALSE;
break;
}
}
}
break;}
default:
tmp_1019 = FALSE;
break;
}
}
tmp_1028 = tmp_1019;
}
if (tmp_1028) {
current_location.update_lineno(1845);
/* OneM2M_Functions.ttcn, line 1845 */
v__primitiveContent.any__1()[0].AT_Subscription__optional().subscriberURI() = ANY_VALUE;
}
}
}
}
}
}
}
}
}
}
current_location.update_lineno(1848);
/* OneM2M_Functions.ttcn, line 1848 */
return v__primitiveContent;
}

void f__match2PrimitiveContent(const OneM2M__Types::PrimitiveContent& p__responsePrimitiveContent, const OneM2M__Types::PrimitiveContent_template& p__requestPrimitiveContent)
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 1851, TTCN_Location::LOCATION_FUNCTION, "f_match2PrimitiveContent");
current_location.update_lineno(1852);
/* OneM2M_Functions.ttcn, line 1852 */
OneM2M__Types::PrimitiveContent_template v__primitiveContent;
current_location.update_lineno(1853);
/* OneM2M_Functions.ttcn, line 1853 */
OneM2M__Types::PrimitiveContent v__response;
current_location.update_lineno(1854);
/* OneM2M_Functions.ttcn, line 1854 */
v__response = p__responsePrimitiveContent;
current_location.update_lineno(1855);
/* OneM2M_Functions.ttcn, line 1855 */
v__primitiveContent = f__getTemplateFromPrimitiveContent(p__requestPrimitiveContent);
current_location.update_lineno(1856);
/* OneM2M_Functions.ttcn, line 1856 */
if ((!(v__primitiveContent.match(v__response)))) {
current_location.update_lineno(1857);
/* OneM2M_Functions.ttcn, line 1857 */
TTCN_Runtime::setverdict(INCONC,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("Preamble: Error resource incomplete, some attribute missing "),TTCN_Logger::end_event_log2str()));
}
}

void start_f__match2PrimitiveContent(const COMPONENT& component_reference, const OneM2M__Types::PrimitiveContent& p__responsePrimitiveContent, const OneM2M__Types::PrimitiveContent_template& p__requestPrimitiveContent)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_match2PrimitiveContent(");
p__responsePrimitiveContent.log();
TTCN_Logger::log_event_str(", ");
p__requestPrimitiveContent.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "OneM2M_Functions", "f_match2PrimitiveContent", text_buf);
p__responsePrimitiveContent.encode_text(text_buf);
p__requestPrimitiveContent.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "OneM2M_Functions");
OneM2M__Templates::module_object.pre_init_module();
OneM2M__Pics::module_object.pre_init_module();
module_object.add_function("f_cf01Up", (genericfunc_t)&f__cf01Up, (genericfunc_t)&start_f__cf01Up);
module_object.add_function("f_cf02Up", (genericfunc_t)&f__cf02Up, (genericfunc_t)&start_f__cf02Up);
module_object.add_function("f_cf03Up", (genericfunc_t)&f__cf03Up, (genericfunc_t)&start_f__cf03Up);
module_object.add_function("f_cfCseTesterDown", (genericfunc_t)&f__cfCseTesterDown, (genericfunc_t)&start_f__cfCseTesterDown);
module_object.add_function("f_cfAeTesterDown", (genericfunc_t)&f__cfAeTesterDown, (genericfunc_t)&start_f__cfAeTesterDown);
module_object.add_function("f_cf01Down", (genericfunc_t)&f__cf01Down, (genericfunc_t)&start_f__cf01Down);
module_object.add_function("f_cf02Down", (genericfunc_t)&f__cf02Down, (genericfunc_t)&start_f__cf02Down);
module_object.add_function("f_cf03Down", (genericfunc_t)&f__cf03Down, (genericfunc_t)&start_f__cf03Down);
module_object.add_function("f_cse_preamble_createAcpAux", (genericfunc_t)&f__cse__preamble__createAcpAux, (genericfunc_t)&start_f__cse__preamble__createAcpAux);
module_object.add_function("f_cse_preamble_registerAe", (genericfunc_t)&f__cse__preamble__registerAe, (genericfunc_t)&start_f__cse__preamble__registerAe);
module_object.add_function("f_cse_preamble_registerAeWithId", (genericfunc_t)&f__cse__preamble__registerAeWithId, (genericfunc_t)&start_f__cse__preamble__registerAeWithId);
module_object.add_function("f_cse_preamble_createServiceSubscribedAppRule", (genericfunc_t)&f__cse__preamble__createServiceSubscribedAppRule, (genericfunc_t)&start_f__cse__preamble__createServiceSubscribedAppRule);
module_object.add_function("f_cse_preamble_subscriptionVerification", (genericfunc_t)&f__cse__preamble__subscriptionVerification, NULL);
module_object.add_function("f_cse_postamble_deleteResources", (genericfunc_t)&f__cse__postamble__deleteResources, (genericfunc_t)&start_f__cse__postamble__deleteResources);
module_object.add_function("f_cse_postamble_default", (genericfunc_t)&f__cse__postamble__default, (genericfunc_t)&start_f__cse__postamble__default);
module_object.add_function("f_is_component_done", (genericfunc_t)&f__is__component__done, (genericfunc_t)&start_f__is__component__done);
module_object.add_function("f_cse_createResource", (genericfunc_t)&f__cse__createResource, (genericfunc_t)&start_f__cse__createResource);
module_object.add_function("f_cse_createAccessControlPolicyAux", (genericfunc_t)&f__cse__createAccessControlPolicyAux, (genericfunc_t)&start_f__cse__createAccessControlPolicyAux);
module_object.add_function("f_cse_createContainerResourceAux", (genericfunc_t)&f__cse__createContainerResourceAux, (genericfunc_t)&start_f__cse__createContainerResourceAux);
module_object.add_function("f_cse_updateResource", (genericfunc_t)&f__cse__updateResource, (genericfunc_t)&start_f__cse__updateResource);
module_object.add_function("f_cse_retrieveResource", (genericfunc_t)&f__cse__retrieveResource, (genericfunc_t)&start_f__cse__retrieveResource);
module_object.add_function("f_cse_deleteResource", (genericfunc_t)&f__cse__deleteResource, (genericfunc_t)&start_f__cse__deleteResource);
module_object.add_function("f_cse_updateAcpAuxResource", (genericfunc_t)&f__cse__updateAcpAuxResource, (genericfunc_t)&start_f__cse__updateAcpAuxResource);
module_object.add_function("f_cse_resourceAnnouncementHandler", (genericfunc_t)&f__cse__resourceAnnouncementHandler, (genericfunc_t)&start_f__cse__resourceAnnouncementHandler);
module_object.add_function("f_subscriptionVerificationHandler", (genericfunc_t)&f__subscriptionVerificationHandler, (genericfunc_t)&start_f__subscriptionVerificationHandler);
module_object.add_function("f_checkAttributesToBeSaved", (genericfunc_t)&f__checkAttributesToBeSaved, NULL);
module_object.add_function("f_check_notificationContent", (genericfunc_t)&f__check__notificationContent, (genericfunc_t)&start_f__check__notificationContent);
module_object.add_function("f_cse_notifyProcedure", (genericfunc_t)&f__cse__notifyProcedure, (genericfunc_t)&start_f__cse__notifyProcedure);
module_object.add_altstep("a_cse_cf01", (genericfunc_t)&a__cse__cf01_instance, (genericfunc_t )&activate_a__cse__cf01, (genericfunc_t )&a__cse__cf01);
module_object.add_altstep("a_cse_cf02", (genericfunc_t)&a__cse__cf02_instance, (genericfunc_t )&activate_a__cse__cf02, (genericfunc_t )&a__cse__cf02);
module_object.add_function("f_ae_preamble_registerAe", (genericfunc_t)&f__ae__preamble__registerAe, (genericfunc_t)&start_f__ae__preamble__registerAe);
module_object.add_function("f_ae_createResource", (genericfunc_t)&f__ae__createResource, NULL);
module_object.add_altstep("a_ae_default", (genericfunc_t)&a__ae__default_instance, (genericfunc_t )&activate_a__ae__default, (genericfunc_t )&a__ae__default);
module_object.add_altstep("a_ae_cf03", (genericfunc_t)&a__ae__cf03_instance, (genericfunc_t )&activate_a__ae__cf03, (genericfunc_t )&a__ae__cf03);
module_object.add_function("f_getCreateRequestPrimitive", (genericfunc_t)&f__getCreateRequestPrimitive, (genericfunc_t)&start_f__getCreateRequestPrimitive);
module_object.add_function("f_getCreateResponsePrimitive", (genericfunc_t)&f__getCreateResponsePrimitive, (genericfunc_t)&start_f__getCreateResponsePrimitive);
module_object.add_function("f_getUpdateRequestPrimitive", (genericfunc_t)&f__getUpdateRequestPrimitive, (genericfunc_t)&start_f__getUpdateRequestPrimitive);
module_object.add_function("f_getResourceId", (genericfunc_t)&f__getResourceId, NULL);
module_object.add_function("f_getResourceName", (genericfunc_t)&f__getResourceName, NULL);
module_object.add_function("f_getOriginator", (genericfunc_t)&f__getOriginator, (genericfunc_t)&start_f__getOriginator);
module_object.add_function("f_getCreator", (genericfunc_t)&f__getCreator, (genericfunc_t)&start_f__getCreator);
module_object.add_function("f_getAttribute", (genericfunc_t)&f__getAttribute, NULL);
module_object.add_function("f_getAnnouncementTargetPoA", (genericfunc_t)&f__getAnnouncementTargetPoA, NULL);
module_object.add_function("f_getResourceIndex", (genericfunc_t)&f__getResourceIndex, NULL);
module_object.add_function("f_getResourceAddress", (genericfunc_t)&f__getResourceAddress, (genericfunc_t)&start_f__getResourceAddress);
module_object.add_function("f_setResource", (genericfunc_t)&f__setResource, (genericfunc_t)&start_f__setResource);
module_object.add_function("f_setAcpId", (genericfunc_t)&f__setAcpId, (genericfunc_t)&start_f__setAcpId);
module_object.add_function("f_getAeId", (genericfunc_t)&f__getAeId, (genericfunc_t)&start_f__getAeId);
module_object.add_function("f_checkCseTesterStatus", (genericfunc_t)&f__checkCseTesterStatus, (genericfunc_t)&start_f__checkCseTesterStatus);
module_object.add_function("f_checkAeTesterStatus", (genericfunc_t)&f__checkAeTesterStatus, (genericfunc_t)&start_f__checkAeTesterStatus);
module_object.add_function("f_sendAcPrimitive", (genericfunc_t)&f__sendAcPrimitive, (genericfunc_t)&start_f__sendAcPrimitive);
module_object.add_altstep("a_default", (genericfunc_t)&a__default_instance, (genericfunc_t )&activate_a__default, (genericfunc_t )&a__default);
module_object.add_function("f_resourceIdCleaner", (genericfunc_t)&f__resourceIdCleaner, NULL);
module_object.add_function("f_removeElementFromList", (genericfunc_t)&f__removeElementFromList, NULL);
module_object.add_function("f_getTemplateFromPrimitiveContent", (genericfunc_t)&f__getTemplateFromPrimitiveContent, NULL);
module_object.add_function("f_match2PrimitiveContent", (genericfunc_t)&f__match2PrimitiveContent, (genericfunc_t)&start_f__match2PrimitiveContent);
module_object.add_function("fx_generateTimestamp", (genericfunc_t)&fx__generateTimestamp, NULL);
}

static void post_init_module()
{
TTCN_Location current_location("OneM2M_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "OneM2M_Functions");
OneM2M__Templates::module_object.post_init_module();
OneM2M__Pics::module_object.post_init_module();
template_f__cse__preamble__createAcpAux_p__acpName_defval = OneM2M__TypesAndValues::c__acpAuxName;
template_f__cse__preamble__createAcpAux_p__allowedOperations_defval = OneM2M__Types::AccessControlOperations::int63;
template_f__cse__preamble__registerAe_p__accessControlPolicyIDs_defval = OMIT_VALUE;
template_f__cse__preamble__registerAe_p__poaList_defval = OMIT_VALUE;
template_f__cse__preamble__registerAeWithId_p__allowedOperations_defval = OneM2M__Types::AccessControlOperations::int63;
template_f__cse__preamble__createServiceSubscribedAppRule_p__allowedAEs_defval.set_size(1);
template_f__cse__preamble__createServiceSubscribedAppRule_p__allowedAEs_defval[0] = cs_3;
template_f__cse__createResource_p__requestPrimitive_defval = OneM2M__Templates::m__create;
const_f__cse__createResource_p__parentIndex_defval = -1;
template_f__cse__createAccessControlPolicyAux_p__acpName_defval = OneM2M__TypesAndValues::c__acpAuxName;
template_f__cse__createAccessControlPolicyAux_p__allowedOperations_defval = OneM2M__Types::AccessControlOperations::int63;
const_f__cse__createContainerResourceAux_p__parentIndex_defval = -1;
template_f__cse__resourceAnnouncementHandler_p__from_defval = ANY_OR_OMIT;
template_f__cse__resourceAnnouncementHandler_p__to_defval = ANY_VALUE;
const_f__subscriptionVerificationHandler_p__responseStatusCode_defval = OneM2M__Types::ResponseStatusCode::int2000;
template_f__getCreateRequestPrimitive_p__request_defval = OneM2M__Templates::m__create;
template_f__getCreateResponsePrimitive_p__request_defval = OneM2M__Templates::m__create;
const_f__getOriginator_p__targetResourceIndex_defval = -1;
const_f__getCreator_p__targetResourceIndex_defval = -1;
const_f__getAnnouncementTargetPoA_p__protocolBinding_defval = OneM2M__Pixits::PX__PROTOCOL__BINDING;
const_f__getAnnouncementTargetPoA_p__announcementTargetAddress_defval = OneM2M__Pixits::PX__CSE1__ADDRESS;
const_f__getAnnouncementTargetPoA_p__announcementTargetResource_defval = cs_46;
const_f__getResourceAddress_p__targetResourceIndex_defval = -1;
const_f__setResource_p__parentIndex_defval = -1;
const_f__getAeId_p__targetResourceIndex_defval = -1;
}

static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments)
{
if (!strcmp(function_name, "f_cf01Up")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf01Up().");
TTCN_Runtime::function_started(function_arguments);
f__cf01Up();
TTCN_Runtime::function_finished("f_cf01Up");
return TRUE;
} else if (!strcmp(function_name, "f_cf02Up")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf02Up().");
TTCN_Runtime::function_started(function_arguments);
f__cf02Up();
TTCN_Runtime::function_finished("f_cf02Up");
return TRUE;
} else if (!strcmp(function_name, "f_cf03Up")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf03Up().");
TTCN_Runtime::function_started(function_arguments);
f__cf03Up();
TTCN_Runtime::function_finished("f_cf03Up");
return TRUE;
} else if (!strcmp(function_name, "f_cfCseTesterDown")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cfCseTesterDown().");
TTCN_Runtime::function_started(function_arguments);
f__cfCseTesterDown();
TTCN_Runtime::function_finished("f_cfCseTesterDown");
return TRUE;
} else if (!strcmp(function_name, "f_cfAeTesterDown")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cfAeTesterDown().");
TTCN_Runtime::function_started(function_arguments);
f__cfAeTesterDown();
TTCN_Runtime::function_finished("f_cfAeTesterDown");
return TRUE;
} else if (!strcmp(function_name, "f_cf01Down")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf01Down().");
TTCN_Runtime::function_started(function_arguments);
f__cf01Down();
TTCN_Runtime::function_finished("f_cf01Down");
return TRUE;
} else if (!strcmp(function_name, "f_cf02Down")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf02Down().");
TTCN_Runtime::function_started(function_arguments);
f__cf02Down();
TTCN_Runtime::function_finished("f_cf02Down");
return TRUE;
} else if (!strcmp(function_name, "f_cf03Down")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf03Down().");
TTCN_Runtime::function_started(function_arguments);
f__cf03Down();
TTCN_Runtime::function_finished("f_cf03Down");
return TRUE;
} else if (!strcmp(function_name, "f_cse_preamble_createAcpAux")) {
UNIVERSAL_CHARSTRING_template p__acpName;
OneM2M__Types::AccessControlOperations_template p__allowedOperations;
p__acpName.decode_text(function_arguments);
p__allowedOperations.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_preamble_createAcpAux(");
p__acpName.log();
TTCN_Logger::log_event_str(", ");
p__allowedOperations.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cse__preamble__createAcpAux(p__acpName, p__allowedOperations);
TTCN_Runtime::function_finished("f_cse_preamble_createAcpAux");
return TRUE;
} else if (!strcmp(function_name, "f_cse_preamble_registerAe")) {
OneM2M__Types::AcpType_template p__accessControlPolicyIDs;
OneM2M__Types::PoaList_template p__poaList;
p__accessControlPolicyIDs.decode_text(function_arguments);
p__poaList.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_preamble_registerAe(");
p__accessControlPolicyIDs.log();
TTCN_Logger::log_event_str(", ");
p__poaList.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cse__preamble__registerAe(p__accessControlPolicyIDs, p__poaList);
TTCN_Runtime::function_finished("f_cse_preamble_registerAe");
return TRUE;
} else if (!strcmp(function_name, "f_cse_preamble_registerAeWithId")) {
UNIVERSAL_CHARSTRING p__appId;
OneM2M__Types::AccessControlOperations_template p__allowedOperations;
p__appId.decode_text(function_arguments);
p__allowedOperations.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_preamble_registerAeWithId(");
p__appId.log();
TTCN_Logger::log_event_str(", ");
p__allowedOperations.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cse__preamble__registerAeWithId(p__appId, p__allowedOperations);
TTCN_Runtime::function_finished("f_cse_preamble_registerAeWithId");
return TRUE;
} else if (!strcmp(function_name, "f_cse_preamble_createServiceSubscribedAppRule")) {
OneM2M__Types::ListOfM2MID_template p__allowedAEs;
p__allowedAEs.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_preamble_createServiceSubscribedAppRule(");
p__allowedAEs.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cse__preamble__createServiceSubscribedAppRule(p__allowedAEs);
TTCN_Runtime::function_finished("f_cse_preamble_createServiceSubscribedAppRule");
return TRUE;
} else if (!strcmp(function_name, "f_cse_postamble_deleteResources")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cse_postamble_deleteResources().");
TTCN_Runtime::function_started(function_arguments);
f__cse__postamble__deleteResources();
TTCN_Runtime::function_finished("f_cse_postamble_deleteResources");
return TRUE;
} else if (!strcmp(function_name, "f_cse_postamble_default")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cse_postamble_default().");
TTCN_Runtime::function_started(function_arguments);
f__cse__postamble__default();
TTCN_Runtime::function_finished("f_cse_postamble_default");
return TRUE;
} else if (!strcmp(function_name, "f_is_component_done")) {
COMPONENT p__notifyHandler;
p__notifyHandler.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_is_component_done(");
p__notifyHandler.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__is__component__done(p__notifyHandler);
TTCN_Runtime::function_finished("f_is_component_done");
return TRUE;
} else if (!strcmp(function_name, "f_cse_createResource")) {
OneM2M__Types::ResourceType p__resourceType;
OneM2M__Types::RequestPrimitive_template p__requestPrimitive;
INTEGER p__parentIndex;
p__resourceType.decode_text(function_arguments);
p__requestPrimitive.decode_text(function_arguments);
p__parentIndex.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_createResource(");
p__resourceType.log();
TTCN_Logger::log_event_str(", ");
p__requestPrimitive.log();
TTCN_Logger::log_event_str(", ");
p__parentIndex.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cse__createResource(p__resourceType, p__requestPrimitive, p__parentIndex);
TTCN_Runtime::function_finished("f_cse_createResource");
return TRUE;
} else if (!strcmp(function_name, "f_cse_createAccessControlPolicyAux")) {
UNIVERSAL_CHARSTRING_template p__acpName;
OneM2M__Types::AccessControlOperations_template p__allowedOperations;
p__acpName.decode_text(function_arguments);
p__allowedOperations.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_createAccessControlPolicyAux(");
p__acpName.log();
TTCN_Logger::log_event_str(", ");
p__allowedOperations.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cse__createAccessControlPolicyAux(p__acpName, p__allowedOperations);
TTCN_Runtime::function_finished("f_cse_createAccessControlPolicyAux");
return TRUE;
} else if (!strcmp(function_name, "f_cse_createContainerResourceAux")) {
INTEGER p__parentIndex;
p__parentIndex.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_createContainerResourceAux(");
p__parentIndex.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cse__createContainerResourceAux(p__parentIndex);
TTCN_Runtime::function_finished("f_cse_createContainerResourceAux");
return TRUE;
} else if (!strcmp(function_name, "f_cse_updateResource")) {
OneM2M__Types::RequestPrimitive p__requestPrimitive;
p__requestPrimitive.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_updateResource(");
p__requestPrimitive.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cse__updateResource(p__requestPrimitive);
TTCN_Runtime::function_finished("f_cse_updateResource");
return TRUE;
} else if (!strcmp(function_name, "f_cse_retrieveResource")) {
INTEGER p__resourceIndex;
p__resourceIndex.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_retrieveResource(");
p__resourceIndex.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cse__retrieveResource(p__resourceIndex);
TTCN_Runtime::function_finished("f_cse_retrieveResource");
return TRUE;
} else if (!strcmp(function_name, "f_cse_deleteResource")) {
OneM2M__Types::RequestPrimitive p__requestPrimitive;
p__requestPrimitive.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_deleteResource(");
p__requestPrimitive.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cse__deleteResource(p__requestPrimitive);
TTCN_Runtime::function_finished("f_cse_deleteResource");
return TRUE;
} else if (!strcmp(function_name, "f_cse_updateAcpAuxResource")) {
OneM2M__Types::AccessControlOperations_template p__allowedOperations;
p__allowedOperations.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_updateAcpAuxResource(");
p__allowedOperations.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cse__updateAcpAuxResource(p__allowedOperations);
TTCN_Runtime::function_finished("f_cse_updateAcpAuxResource");
return TRUE;
} else if (!strcmp(function_name, "f_cse_resourceAnnouncementHandler")) {
UNIVERSAL_CHARSTRING_template p__from;
UNIVERSAL_CHARSTRING_template p__to;
p__from.decode_text(function_arguments);
p__to.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_resourceAnnouncementHandler(");
p__from.log();
TTCN_Logger::log_event_str(", ");
p__to.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cse__resourceAnnouncementHandler(p__from, p__to);
TTCN_Runtime::function_finished("f_cse_resourceAnnouncementHandler");
return TRUE;
} else if (!strcmp(function_name, "f_subscriptionVerificationHandler")) {
UNIVERSAL_CHARSTRING p__creator;
OneM2M__Types::ResponseStatusCode p__responseStatusCode;
p__creator.decode_text(function_arguments);
p__responseStatusCode.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_subscriptionVerificationHandler(");
p__creator.log();
TTCN_Logger::log_event_str(", ");
p__responseStatusCode.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__subscriptionVerificationHandler(p__creator, p__responseStatusCode);
TTCN_Runtime::function_finished("f_subscriptionVerificationHandler");
return TRUE;
} else if (!strcmp(function_name, "f_check_notificationContent")) {
OneM2M__Types::RequestPrimitive p__requestPrimitive;
OneM2M__Types::PrimitiveContent_template p__primitiveContent;
p__requestPrimitive.decode_text(function_arguments);
p__primitiveContent.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_check_notificationContent(");
p__requestPrimitive.log();
TTCN_Logger::log_event_str(", ");
p__primitiveContent.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__check__notificationContent(p__requestPrimitive, p__primitiveContent);
TTCN_Runtime::function_finished("f_check_notificationContent");
return TRUE;
} else if (!strcmp(function_name, "f_cse_notifyProcedure")) {
OneM2M__Types::PrimitiveContent_template p__primitiveContent;
p__primitiveContent.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cse_notifyProcedure(");
p__primitiveContent.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cse__notifyProcedure(p__primitiveContent);
TTCN_Runtime::function_finished("f_cse_notifyProcedure");
return TRUE;
} else if (!strcmp(function_name, "f_ae_preamble_registerAe")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_ae_preamble_registerAe().");
TTCN_Runtime::function_started(function_arguments);
f__ae__preamble__registerAe();
TTCN_Runtime::function_finished("f_ae_preamble_registerAe");
return TRUE;
} else if (!strcmp(function_name, "f_getCreateRequestPrimitive")) {
OneM2M__Types::ResourceType p__resourceType;
OneM2M__Types::RequestPrimitive_template p__request;
INTEGER p__parentIndex;
p__resourceType.decode_text(function_arguments);
p__request.decode_text(function_arguments);
p__parentIndex.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getCreateRequestPrimitive(");
p__resourceType.log();
TTCN_Logger::log_event_str(", ");
p__request.log();
TTCN_Logger::log_event_str(", ");
p__parentIndex.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getCreateRequestPrimitive(p__resourceType, p__request, p__parentIndex);
TTCN_Runtime::function_finished("f_getCreateRequestPrimitive");
return TRUE;
} else if (!strcmp(function_name, "f_getCreateResponsePrimitive")) {
OneM2M__Types::ResourceType p__resourceType;
OneM2M__Types::RequestPrimitive_template p__request;
p__resourceType.decode_text(function_arguments);
p__request.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getCreateResponsePrimitive(");
p__resourceType.log();
TTCN_Logger::log_event_str(", ");
p__request.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getCreateResponsePrimitive(p__resourceType, p__request);
TTCN_Runtime::function_finished("f_getCreateResponsePrimitive");
return TRUE;
} else if (!strcmp(function_name, "f_getUpdateRequestPrimitive")) {
OneM2M__Types::ResourceType p__resourceType;
INTEGER p__resourceIndex;
OneM2M__Types::RequestPrimitive_template p__request;
p__resourceType.decode_text(function_arguments);
p__resourceIndex.decode_text(function_arguments);
p__request.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getUpdateRequestPrimitive(");
p__resourceType.log();
TTCN_Logger::log_event_str(", ");
p__resourceIndex.log();
TTCN_Logger::log_event_str(", ");
p__request.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getUpdateRequestPrimitive(p__resourceType, p__resourceIndex, p__request);
TTCN_Runtime::function_finished("f_getUpdateRequestPrimitive");
return TRUE;
} else if (!strcmp(function_name, "f_getOriginator")) {
INTEGER p__targetResourceIndex;
p__targetResourceIndex.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getOriginator(");
p__targetResourceIndex.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getOriginator(p__targetResourceIndex);
TTCN_Runtime::function_finished("f_getOriginator");
return TRUE;
} else if (!strcmp(function_name, "f_getCreator")) {
INTEGER p__targetResourceIndex;
p__targetResourceIndex.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getCreator(");
p__targetResourceIndex.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getCreator(p__targetResourceIndex);
TTCN_Runtime::function_finished("f_getCreator");
return TRUE;
} else if (!strcmp(function_name, "f_getResourceAddress")) {
INTEGER p__targetResourceIndex;
p__targetResourceIndex.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getResourceAddress(");
p__targetResourceIndex.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getResourceAddress(p__targetResourceIndex);
TTCN_Runtime::function_finished("f_getResourceAddress");
return TRUE;
} else if (!strcmp(function_name, "f_setResource")) {
OneM2M__Types::PrimitiveContent p__resource;
INTEGER p__parentIndex;
p__resource.decode_text(function_arguments);
p__parentIndex.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_setResource(");
p__resource.log();
TTCN_Logger::log_event_str(", ");
p__parentIndex.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__setResource(p__resource, p__parentIndex);
TTCN_Runtime::function_finished("f_setResource");
return TRUE;
} else if (!strcmp(function_name, "f_setAcpId")) {
OneM2M__Types::RequestPrimitive_template p__requestPrimitive;
OneM2M__Types::AcpType_template p__accessControlPolicyIDs;
p__requestPrimitive.decode_text(function_arguments);
p__accessControlPolicyIDs.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_setAcpId(");
p__requestPrimitive.log();
TTCN_Logger::log_event_str(", ");
p__accessControlPolicyIDs.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__setAcpId(p__requestPrimitive, p__accessControlPolicyIDs);
TTCN_Runtime::function_finished("f_setAcpId");
return TRUE;
} else if (!strcmp(function_name, "f_getAeId")) {
INTEGER p__targetResourceIndex;
p__targetResourceIndex.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getAeId(");
p__targetResourceIndex.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getAeId(p__targetResourceIndex);
TTCN_Runtime::function_finished("f_getAeId");
return TRUE;
} else if (!strcmp(function_name, "f_checkCseTesterStatus")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_checkCseTesterStatus().");
TTCN_Runtime::function_started(function_arguments);
f__checkCseTesterStatus();
TTCN_Runtime::function_finished("f_checkCseTesterStatus");
return TRUE;
} else if (!strcmp(function_name, "f_checkAeTesterStatus")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_checkAeTesterStatus().");
TTCN_Runtime::function_started(function_arguments);
f__checkAeTesterStatus();
TTCN_Runtime::function_finished("f_checkAeTesterStatus");
return TRUE;
} else if (!strcmp(function_name, "f_sendAcPrimitive")) {
CHARSTRING p__event;
CHARSTRING p__data;
p__event.decode_text(function_arguments);
p__data.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sendAcPrimitive(");
p__event.log();
TTCN_Logger::log_event_str(", ");
p__data.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sendAcPrimitive(p__event, p__data);
TTCN_Runtime::function_finished("f_sendAcPrimitive");
return TRUE;
} else if (!strcmp(function_name, "f_match2PrimitiveContent")) {
OneM2M__Types::PrimitiveContent p__responsePrimitiveContent;
OneM2M__Types::PrimitiveContent_template p__requestPrimitiveContent;
p__responsePrimitiveContent.decode_text(function_arguments);
p__requestPrimitiveContent.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_match2PrimitiveContent(");
p__responsePrimitiveContent.log();
TTCN_Logger::log_event_str(", ");
p__requestPrimitiveContent.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__match2PrimitiveContent(p__responsePrimitiveContent, p__requestPrimitiveContent);
TTCN_Runtime::function_finished("f_match2PrimitiveContent");
return TRUE;
} else return FALSE;
}


} /* end of namespace */
