// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for oneM2MTester (martin@ubuntu) on Wed May 31 13:52:13 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef LibCommon__VerdictControl_HH
#define LibCommon__VerdictControl_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 60100
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef LibCommon__VerdictControl_HH
#endif

namespace LibCommon__VerdictControl {

/* Forward declarations of classes */

class FncRetCode;
class FncRetCode_template;

} /* end of namespace */

#ifndef LibCommon__VerdictControl_HH
#define LibCommon__VerdictControl_HH

namespace LibCommon__VerdictControl {

/* Class definitions */

class FncRetCode : public Base_Type { // enum
friend class FncRetCode_template;
public:
enum enum_type { e__success = 0, e__error = 1, e__timeout = 2, UNKNOWN_VALUE = 3, UNBOUND_VALUE = 4 };
private:
enum_type enum_value;

public:
FncRetCode();
FncRetCode(int other_value);
FncRetCode(enum_type other_value);
FncRetCode(const FncRetCode& other_value);

FncRetCode& operator=(int other_value);
FncRetCode& operator=(enum_type other_value);
FncRetCode& operator=(const FncRetCode& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const FncRetCode& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const FncRetCode& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const FncRetCode& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const FncRetCode& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const FncRetCode& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const FncRetCode& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const FncRetCode& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class FncRetCode_template : public Base_Template {
union {
FncRetCode::enum_type single_value;
struct {
unsigned int n_values;
FncRetCode_template *list_value;
} value_list;
};

void copy_template(const FncRetCode_template& other_value);

public:
FncRetCode_template();
FncRetCode_template(template_sel other_value);
FncRetCode_template(int other_value);
FncRetCode_template(FncRetCode::enum_type other_value);
FncRetCode_template(const FncRetCode& other_value);
FncRetCode_template(const OPTIONAL<FncRetCode>& other_value);
FncRetCode_template(const FncRetCode_template& other_value);
~FncRetCode_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
FncRetCode_template& operator=(template_sel other_value);
FncRetCode_template& operator=(int other_value);
FncRetCode_template& operator=(FncRetCode::enum_type other_value);
FncRetCode_template& operator=(const FncRetCode& other_value);
FncRetCode_template& operator=(const OPTIONAL<FncRetCode>& other_value);
FncRetCode_template& operator=(const FncRetCode_template& other_value);

boolean match(FncRetCode::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const FncRetCode& other_value, boolean legacy = FALSE) const;
FncRetCode::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
FncRetCode_template& list_item(unsigned int list_index);
void log() const;
void log_match(const FncRetCode& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};


/* Function prototypes */

extern void f__setVerdict(const FncRetCode& p__ret);
extern void f__setVerdictPreamble(const FncRetCode& p__ret);
extern void f__setVerdictPostamble(const FncRetCode& p__ret);
extern void f__setVerdictPreOrPostamble(const FncRetCode& p__ret);

/* Global variable declarations */

extern const TTCN_Typedescriptor_t FncRetCode_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
