// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for oneM2MTester (martin@ubuntu) on Wed May 31 13:52:14 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "oneM2MTester_Template.hh"

namespace oneM2MTester__Template {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const unsigned char bs_1_bits[] = { 0 },
bs_0_bits[] = { 0 };
static const BITSTRING bs_1(1, bs_1_bits),
bs_0(4, bs_0_bits);
static const OCTETSTRING os_0(0, NULL);
static const CHARSTRING cs_3(0, NULL),
cs_2(':'),
cs_0(4, "MQTT"),
cs_1(11, "myclientid_");
static const unsigned char module_checksum[] = { 0xe9, 0x10, 0x55, 0x7d, 0x56, 0xbc, 0x19, 0xf6, 0x22, 0x85, 0x65, 0x38, 0xa4, 0x19, 0x73, 0xe0 };

/* Global variable definitions */

const XERdescriptor_t       ConfigurationFields_connectionId_xer_ = { {"connectionId>\n", "connectionId>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t ConfigurationFields_connectionId_descr_ = { "@oneM2MTester_Template.ConfigurationFields.connectionId", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &ConfigurationFields_connectionId_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ConfigurationFields
const TTCN_Typedescriptor_t ConfigurationFields_descr_ = { "@oneM2MTester_Template.ConfigurationFields", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
static Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template template_t__pingReq;
const Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template& t__pingReq = template_t__pingReq;
static Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template template_tw__pingResp;
const Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template& tw__pingResp = template_tw__pingResp;
static Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template template_tr__connectAck;
const Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template& tr__connectAck = template_tr__connectAck;
static Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template template_t__disconnect;
const Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template& t__disconnect = template_t__disconnect;
static Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template template_tw__publish;
const Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template& tw__publish = template_tw__publish;
static CoAP__Types::CoAP__OptionsList_template template_t__COAP__TEST_p__option_defval;
const CoAP__Types::CoAP__OptionsList_template& t__COAP__TEST_p__option_defval = template_t__COAP__TEST_p__option_defval;
static const size_t num_namespaces = 1;
static const namespace_t xml_namespaces[num_namespaces+1] = {
  { NULL, NULL },
  { "", "" }
};

TTCN_Module module_object("oneM2MTester_Template", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 1LU, xml_namespaces, post_init_module, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_1,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

ConfigurationFields::ConfigurationFields()
{
}

ConfigurationFields::ConfigurationFields(const Socket__API__Definitions::ProtoTuple& par_protoTuple,
    const INTEGER& par_connectionId)
  :   field_protoTuple(par_protoTuple),
  field_connectionId(par_connectionId)
{
}

ConfigurationFields::ConfigurationFields(const ConfigurationFields& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @oneM2MTester_Template.ConfigurationFields.");
if (other_value.protoTuple().is_bound()) field_protoTuple = other_value.protoTuple();
else field_protoTuple.clean_up();
if (other_value.connectionId().is_bound()) field_connectionId = other_value.connectionId();
else field_connectionId.clean_up();
}

void ConfigurationFields::clean_up()
{
field_protoTuple.clean_up();
field_connectionId.clean_up();
}

ConfigurationFields& ConfigurationFields::operator=(const ConfigurationFields& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @oneM2MTester_Template.ConfigurationFields.");
  if (other_value.protoTuple().is_bound()) field_protoTuple = other_value.protoTuple();
  else field_protoTuple.clean_up();
  if (other_value.connectionId().is_bound()) field_connectionId = other_value.connectionId();
  else field_connectionId.clean_up();
}
return *this;
}

boolean ConfigurationFields::operator==(const ConfigurationFields& other_value) const
{
return field_protoTuple==other_value.field_protoTuple
  && field_connectionId==other_value.field_connectionId;
}

boolean ConfigurationFields::is_bound() const
{
if(field_protoTuple.is_bound()) return TRUE;
if(field_connectionId.is_bound()) return TRUE;
return FALSE;
}
boolean ConfigurationFields::is_value() const
{
if(!field_protoTuple.is_value()) return FALSE;
if(!field_connectionId.is_value()) return FALSE;
return TRUE;
}
void ConfigurationFields::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ protoTuple := ");
field_protoTuple.log();
TTCN_Logger::log_event_str(", connectionId := ");
field_connectionId.log();
TTCN_Logger::log_event_str(" }");
}

void ConfigurationFields::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @oneM2MTester_Template.ConfigurationFields has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) protoTuple().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) connectionId().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "protoTuple")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          protoTuple().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "connectionId")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          connectionId().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @oneM2MTester_Template.ConfigurationFields: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@oneM2MTester_Template.ConfigurationFields");
  }
}

void ConfigurationFields::set_implicit_omit()
{
if (protoTuple().is_bound()) protoTuple().set_implicit_omit();
if (connectionId().is_bound()) connectionId().set_implicit_omit();
}

void ConfigurationFields::encode_text(Text_Buf& text_buf) const
{
field_protoTuple.encode_text(text_buf);
field_connectionId.encode_text(text_buf);
}

void ConfigurationFields::decode_text(Text_Buf& text_buf)
{
field_protoTuple.decode_text(text_buf);
field_connectionId.decode_text(text_buf);
}

struct ConfigurationFields_template::single_value_struct {
Socket__API__Definitions::ProtoTuple_template field_protoTuple;
INTEGER_template field_connectionId;
};

void ConfigurationFields_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_protoTuple = ANY_VALUE;
single_value->field_connectionId = ANY_VALUE;
}
}
}

void ConfigurationFields_template::copy_value(const ConfigurationFields& other_value)
{
single_value = new single_value_struct;
if (other_value.protoTuple().is_bound()) {
  single_value->field_protoTuple = other_value.protoTuple();
} else {
  single_value->field_protoTuple.clean_up();
}
if (other_value.connectionId().is_bound()) {
  single_value->field_connectionId = other_value.connectionId();
} else {
  single_value->field_connectionId.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void ConfigurationFields_template::copy_template(const ConfigurationFields_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.protoTuple().get_selection()) {
single_value->field_protoTuple = other_value.protoTuple();
} else {
single_value->field_protoTuple.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.connectionId().get_selection()) {
single_value->field_connectionId = other_value.connectionId();
} else {
single_value->field_connectionId.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ConfigurationFields_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @oneM2MTester_Template.ConfigurationFields.");
break;
}
set_selection(other_value);
}

ConfigurationFields_template::ConfigurationFields_template()
{
}

ConfigurationFields_template::ConfigurationFields_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ConfigurationFields_template::ConfigurationFields_template(const ConfigurationFields& other_value)
{
copy_value(other_value);
}

ConfigurationFields_template::ConfigurationFields_template(const OPTIONAL<ConfigurationFields>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ConfigurationFields&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @oneM2MTester_Template.ConfigurationFields from an unbound optional field.");
}
}

ConfigurationFields_template::ConfigurationFields_template(const ConfigurationFields_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

ConfigurationFields_template::~ConfigurationFields_template()
{
clean_up();
}

ConfigurationFields_template& ConfigurationFields_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ConfigurationFields_template& ConfigurationFields_template::operator=(const ConfigurationFields& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ConfigurationFields_template& ConfigurationFields_template::operator=(const OPTIONAL<ConfigurationFields>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ConfigurationFields&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @oneM2MTester_Template.ConfigurationFields.");
}
return *this;
}

ConfigurationFields_template& ConfigurationFields_template::operator=(const ConfigurationFields_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ConfigurationFields_template::match(const ConfigurationFields& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.protoTuple().is_bound()) return FALSE;
if(!single_value->field_protoTuple.match(other_value.protoTuple(), legacy))return FALSE;
if(!other_value.connectionId().is_bound()) return FALSE;
if(!single_value->field_connectionId.match(other_value.connectionId(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @oneM2MTester_Template.ConfigurationFields.");
}
return FALSE;
}

boolean ConfigurationFields_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_protoTuple.is_bound()) return TRUE;
if (single_value->field_connectionId.is_bound()) return TRUE;
return FALSE;
}

boolean ConfigurationFields_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_protoTuple.is_value()) return FALSE;
if (!single_value->field_connectionId.is_value()) return FALSE;
return TRUE;
}

void ConfigurationFields_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ConfigurationFields ConfigurationFields_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @oneM2MTester_Template.ConfigurationFields.");
ConfigurationFields ret_val;
if (single_value->field_protoTuple.is_bound()) {
ret_val.protoTuple() = single_value->field_protoTuple.valueof();
}
if (single_value->field_connectionId.is_bound()) {
ret_val.connectionId() = single_value->field_connectionId.valueof();
}
return ret_val;
}

void ConfigurationFields_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @oneM2MTester_Template.ConfigurationFields.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ConfigurationFields_template[list_length];
}

ConfigurationFields_template& ConfigurationFields_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @oneM2MTester_Template.ConfigurationFields.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @oneM2MTester_Template.ConfigurationFields.");
return value_list.list_value[list_index];
}

Socket__API__Definitions::ProtoTuple_template& ConfigurationFields_template::protoTuple()
{
set_specific();
return single_value->field_protoTuple;
}

const Socket__API__Definitions::ProtoTuple_template& ConfigurationFields_template::protoTuple() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field protoTuple of a non-specific template of type @oneM2MTester_Template.ConfigurationFields.");
return single_value->field_protoTuple;
}

INTEGER_template& ConfigurationFields_template::connectionId()
{
set_specific();
return single_value->field_connectionId;
}

const INTEGER_template& ConfigurationFields_template::connectionId() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field connectionId of a non-specific template of type @oneM2MTester_Template.ConfigurationFields.");
return single_value->field_connectionId;
}

int ConfigurationFields_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @oneM2MTester_Template.ConfigurationFields which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @oneM2MTester_Template.ConfigurationFields containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @oneM2MTester_Template.ConfigurationFields containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @oneM2MTester_Template.ConfigurationFields containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @oneM2MTester_Template.ConfigurationFields containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @oneM2MTester_Template.ConfigurationFields containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @oneM2MTester_Template.ConfigurationFields.");
  }
  return 0;
}

void ConfigurationFields_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ protoTuple := ");
single_value->field_protoTuple.log();
TTCN_Logger::log_event_str(", connectionId := ");
single_value->field_connectionId.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ConfigurationFields_template::log_match(const ConfigurationFields& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_protoTuple.match(match_value.protoTuple(), legacy)){
TTCN_Logger::log_logmatch_info(".protoTuple");
single_value->field_protoTuple.log_match(match_value.protoTuple(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_connectionId.match(match_value.connectionId(), legacy)){
TTCN_Logger::log_logmatch_info(".connectionId");
single_value->field_connectionId.log_match(match_value.connectionId(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ protoTuple := ");
single_value->field_protoTuple.log_match(match_value.protoTuple(), legacy);
TTCN_Logger::log_event_str(", connectionId := ");
single_value->field_connectionId.log_match(match_value.connectionId(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ConfigurationFields_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_protoTuple.encode_text(text_buf);
single_value->field_connectionId.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @oneM2MTester_Template.ConfigurationFields.");
}
}

void ConfigurationFields_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_protoTuple.decode_text(text_buf);
single_value->field_connectionId.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ConfigurationFields_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @oneM2MTester_Template.ConfigurationFields.");
}
}

void ConfigurationFields_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ConfigurationFields_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @oneM2MTester_Template.ConfigurationFields has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) protoTuple().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) connectionId().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "protoTuple")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          protoTuple().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "connectionId")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          connectionId().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @oneM2MTester_Template.ConfigurationFields: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@oneM2MTester_Template.ConfigurationFields");
  }
  is_ifpresent = param.get_ifpresent();
}

void ConfigurationFields_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_protoTuple.check_restriction(t_res, t_name ? t_name : "@oneM2MTester_Template.ConfigurationFields");
single_value->field_connectionId.check_restriction(t_res, t_name ? t_name : "@oneM2MTester_Template.ConfigurationFields");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@oneM2MTester_Template.ConfigurationFields");
}

boolean ConfigurationFields_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ConfigurationFields_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


/* Bodies of functions, altsteps and testcases */

INTEGER f__randomInteger(const INTEGER& p__lower, const INTEGER& p__upper)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 27, TTCN_Location::LOCATION_FUNCTION, "f_randomInteger");
current_location.update_lineno(29);
/* oneM2MTester_Template.ttcn, line 29 */
return (float2int((rnd() * int2float(((p__upper - p__lower) + 1)))) + p__lower);
}

ConfigurationFields_template m__configs(const Socket__API__Definitions::ProtoTuple_template& p__proTuple, const INTEGER_template& p__connId)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 42, TTCN_Location::LOCATION_TEMPLATE, "m_configs");
ConfigurationFields_template ret_val;
ret_val.protoTuple() = p__proTuple;
ret_val.connectionId() = p__connId;
return ret_val;
}

Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template t__connect(const INTEGER& p__id, const Mqtt__v3__1__1__Types::QoS& p__qos)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 73, TTCN_Location::LOCATION_TEMPLATE, "t_connect");
Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template ret_val;
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__Connect_template& tmp_0 = ret_val.connect__msg();
tmp_0.header().flags() = bs_0;
tmp_0.name() = cs_0;
tmp_0.protocol__level() = 4;
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__ConnectFlags_template& tmp_1 = tmp_0.flags();
tmp_1.user__name__flag() = bs_1;
tmp_1.password__flag() = bs_1;
tmp_1.will__retain() = bs_1;
tmp_1.will__qos() = p__qos;
tmp_1.will__flag() = bs_1;
tmp_1.clean__session() = bs_1;
}
tmp_0.keep__alive() = float2int(OneM2M__Constants::maxResponseTime);
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__ConnectPayload_template& tmp_2 = tmp_0.payload();
tmp_2.client__identifier() = (cs_1 + int2str(p__id));
tmp_2.will__topic() = OMIT_VALUE;
tmp_2.will__message() = OMIT_VALUE;
tmp_2.user__name() = OMIT_VALUE;
tmp_2.password() = OMIT_VALUE;
}
}
return ret_val;
}

Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template t__subscribe(const CHARSTRING& p__topic, const INTEGER& p__id, const Mqtt__v3__1__1__Types::QoS& p__qos)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 119, TTCN_Location::LOCATION_TEMPLATE, "t_subscribe");
Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template ret_val;
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__Subscribe_template& tmp_4 = ret_val.subscribe();
tmp_4.header().flags() = bs_0;
tmp_4.packet__identifier() = p__id;
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__SubscribePayloadList_template& tmp_5 = tmp_4.payload();
tmp_5.set_size(1);
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__SubscribePayload_template& tmp_6 = tmp_5[0];
tmp_6.topic__filter() = p__topic;
tmp_6.requested__qos() = p__qos;
}
}
}
return ret_val;
}

Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template tr__suback(const Mqtt__v3__1__1__Types::IntegerList_template& p__code, const INTEGER_template& p__id)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 135, TTCN_Location::LOCATION_TEMPLATE, "tr_suback");
Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template ret_val;
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__Suback_template& tmp_7 = ret_val.suback();
tmp_7.header().flags() = bs_0;
tmp_7.packet__identifier() = p__id;
tmp_7.payload().return__code() = p__code;
}
return ret_val;
}

Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template t__unsubscribe(const CHARSTRING& p__topic, const INTEGER& p__id)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 148, TTCN_Location::LOCATION_TEMPLATE, "t_unsubscribe");
Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template ret_val;
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__Unsubscribe_template& tmp_8 = ret_val.unsubscribe();
tmp_8.header().flags() = bs_0;
tmp_8.packet__identifier() = p__id;
{
Mqtt__v3__1__1__Types::UCHAR0__65535List_template& tmp_9 = tmp_8.payload().topic__filter();
tmp_9.set_size(1);
tmp_9[0] = p__topic;
}
}
return ret_val;
}

Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template tr__unsuback(const INTEGER_template& p__id)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 161, TTCN_Location::LOCATION_TEMPLATE, "tr_unsuback");
Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template ret_val;
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__Identifier_template& tmp_10 = ret_val.unsuback();
tmp_10.header().flags() = bs_0;
tmp_10.packet__identifier() = p__id;
}
return ret_val;
}

Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template t__publish(const CHARSTRING& p__topic, const INTEGER_template& p__id, const Mqtt__v3__1__1__Types::QoS& p__qos, const CHARSTRING& p__payload)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 172, TTCN_Location::LOCATION_TEMPLATE, "t_publish");
Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template ret_val;
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__Publish_template& tmp_11 = ret_val.publish();
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__PublishHeader_template& tmp_12 = tmp_11.header();
tmp_12.dup__flag() = bs_1;
tmp_12.qos__level() = p__qos;
tmp_12.retain__flag() = bs_1;
}
tmp_11.topic__name() = p__topic;
tmp_11.packet__identifier() = p__id;
tmp_11.payload() = char2oct(p__payload);
}
return ret_val;
}

Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template t__puback(const INTEGER_template& p__id)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 199, TTCN_Location::LOCATION_TEMPLATE, "t_puback");
Mqtt__v3__1__1__Types::MQTT__v3__1__1__ReqResp_template ret_val;
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__Identifier_template& tmp_15 = ret_val.puback();
tmp_15.header().flags() = bs_0;
tmp_15.packet__identifier() = p__id;
}
return ret_val;
}

CoAP__Types::CoAP__ReqResp_template t__COAP__TEST(const CoAP__Types::CoAP__OptionsList_template& p__option, const CoAP__Types::Code& p__requestMethod, const CHARSTRING& p__payload)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 217, TTCN_Location::LOCATION_TEMPLATE, "t_COAP_TEST");
CoAP__Types::CoAP__ReqResp_template ret_val;
{
CoAP__Types::Header_template& tmp_16 = ret_val.header();
tmp_16.version() = 1;
tmp_16.msg__type() = CoAP__Types::Type::CONFIRMABLE;
tmp_16.code() = p__requestMethod;
tmp_16.message__id() = f__randomInteger(1, 10000);
}
ret_val.token() = os_0;
ret_val.options() = p__option;
ret_val.payload() = char2oct(p__payload);
return ret_val;
}

CoAP__Types::CoAP__ReqResp_template t__COAP__POST__request(const INTEGER& p__content__format, const INTEGER& p__resource__type, const UNIVERSAL_CHARSTRING& p__from, const UNIVERSAL_CHARSTRING& p__request__id, const CHARSTRING& p__payload)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 236, TTCN_Location::LOCATION_TEMPLATE, "t_COAP_POST_request");
CoAP__Types::CoAP__ReqResp_template ret_val;
{
CoAP__Types::Header_template& tmp_17 = ret_val.header();
tmp_17.version() = 1;
tmp_17.msg__type() = CoAP__Types::Type::CONFIRMABLE;
tmp_17.code() = CoAP__Types::METHOD__POST;
tmp_17.message__id() = f__randomInteger(1, 10000);
}
ret_val.token() = os_0;
{
CoAP__Types::CoAP__OptionsList_template& tmp_18 = ret_val.options();
tmp_18.set_size(6);
tmp_18[0].uri__host() = const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remHost();
tmp_18[1].uri__port() = const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remPort();
tmp_18[2].content__format() = p__content__format;
tmp_18[3].oneM2M__TY() = p__resource__type;
tmp_18[4].oneM2M__RQI() = p__request__id;
tmp_18[5].oneM2M__FR() = p__from;
}
ret_val.payload() = char2oct(p__payload);
return ret_val;
}

CoAP__Types::CoAP__ReqResp_template t__COAP__GET__request(const INTEGER& p__content__format, const UNIVERSAL_CHARSTRING& p__from, const UNIVERSAL_CHARSTRING& p__request__id)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 275, TTCN_Location::LOCATION_TEMPLATE, "t_COAP_GET_request");
CoAP__Types::CoAP__ReqResp_template ret_val;
{
CoAP__Types::Header_template& tmp_19 = ret_val.header();
tmp_19.version() = 1;
tmp_19.msg__type() = CoAP__Types::Type::CONFIRMABLE;
tmp_19.code() = CoAP__Types::METHOD__GET;
tmp_19.message__id() = f__randomInteger(1, 10000);
}
ret_val.token() = os_0;
{
CoAP__Types::CoAP__OptionsList_template& tmp_20 = ret_val.options();
tmp_20.set_size(5);
tmp_20[0].uri__host() = const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remHost();
tmp_20[1].uri__port() = const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remPort();
tmp_20[2].content__format() = p__content__format;
tmp_20[3].oneM2M__RQI() = p__request__id;
tmp_20[4].oneM2M__FR() = p__from;
}
ret_val.payload() = OMIT_VALUE;
return ret_val;
}

CoAP__Types::CoAP__ReqResp_template t__COAP__PUT__request(const INTEGER& p__content__format, const UNIVERSAL_CHARSTRING& p__from, const UNIVERSAL_CHARSTRING& p__request__id, const CHARSTRING& p__payload)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 312, TTCN_Location::LOCATION_TEMPLATE, "t_COAP_PUT_request");
CoAP__Types::CoAP__ReqResp_template ret_val;
{
CoAP__Types::Header_template& tmp_21 = ret_val.header();
tmp_21.version() = 1;
tmp_21.msg__type() = CoAP__Types::Type::CONFIRMABLE;
tmp_21.code() = CoAP__Types::METHOD__PUT;
tmp_21.message__id() = f__randomInteger(1, 10000);
}
ret_val.token() = os_0;
{
CoAP__Types::CoAP__OptionsList_template& tmp_22 = ret_val.options();
tmp_22.set_size(5);
tmp_22[0].uri__host() = const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remHost();
tmp_22[1].uri__port() = const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remPort();
tmp_22[2].content__format() = p__content__format;
tmp_22[3].oneM2M__RQI() = p__request__id;
tmp_22[4].oneM2M__FR() = p__from;
}
ret_val.payload() = char2oct(p__payload);
return ret_val;
}

CoAP__Types::CoAP__ReqResp_template t__COAP__DELETE__request(const INTEGER& p__content__format, const UNIVERSAL_CHARSTRING& p__from, const UNIVERSAL_CHARSTRING& p__request__id)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 347, TTCN_Location::LOCATION_TEMPLATE, "t_COAP_DELETE_request");
CoAP__Types::CoAP__ReqResp_template ret_val;
{
CoAP__Types::Header_template& tmp_23 = ret_val.header();
tmp_23.version() = 1;
tmp_23.msg__type() = CoAP__Types::Type::CONFIRMABLE;
tmp_23.code() = CoAP__Types::METHOD__DELETE;
tmp_23.message__id() = f__randomInteger(1, 10000);
}
ret_val.token() = os_0;
{
CoAP__Types::CoAP__OptionsList_template& tmp_24 = ret_val.options();
tmp_24.set_size(5);
tmp_24[0].uri__host() = const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remHost();
tmp_24[1].uri__port() = const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remPort();
tmp_24[2].content__format() = p__content__format;
tmp_24[3].oneM2M__RQI() = p__request__id;
tmp_24[4].oneM2M__FR() = p__from;
}
ret_val.payload() = OMIT_VALUE;
return ret_val;
}

HTTPmsg__Types::HTTPRequest_template t__utTrigger__HTTP__POST__request(const INTEGER& p__clientId, const CHARSTRING& p__uri, const CHARSTRING& p__accept, const CHARSTRING& p__contentType, const CHARSTRING& p__payload)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 390, TTCN_Location::LOCATION_TEMPLATE, "t_utTrigger_HTTP_POST_request");
HTTPmsg__Types::HTTPRequest_template ret_val;
ret_val.client__id() = p__clientId;
ret_val.method() = OneM2M__Constants::POST__HTTP;
ret_val.uri() = p__uri;
ret_val.version__major() = 1;
ret_val.version__minor() = 1;
{
HTTPmsg__Types::HeaderLines_template& tmp_25 = ret_val.header();
tmp_25.set_size(4);
{
HTTPmsg__Types::HeaderLine_template& tmp_26 = tmp_25[0];
tmp_26.header__name() = OneM2M__Constants::HTTP__HOST;
tmp_26.header__value() = ((const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remHost() + cs_2) + int2str(const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remPort()));
}
{
HTTPmsg__Types::HeaderLine_template& tmp_27 = tmp_25[1];
tmp_27.header__name() = OneM2M__Constants::HTTP__ACCEPT;
tmp_27.header__value() = p__accept;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_28 = tmp_25[2];
tmp_28.header__name() = OneM2M__Constants::HTTP__CONTENT__TYPE;
tmp_28.header__value() = p__contentType;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_29 = tmp_25[3];
tmp_29.header__name() = OneM2M__Constants::HTTP__CONTENT__LENGTH;
tmp_29.header__value() = int2str(p__payload.lengthof());
}
}
ret_val.body() = p__payload;
return ret_val;
}

HTTPmsg__Types::HTTPRequest_template t__HTTP__POST__request(const INTEGER& p__clientId, const CHARSTRING& p__uri, const CHARSTRING& p__accept, const CHARSTRING& p__from, const CHARSTRING& p__requestId, const CHARSTRING& p__contentType, const CHARSTRING& p__payload)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 430, TTCN_Location::LOCATION_TEMPLATE, "t_HTTP_POST_request");
HTTPmsg__Types::HTTPRequest_template ret_val;
ret_val.client__id() = p__clientId;
ret_val.method() = OneM2M__Constants::POST__HTTP;
ret_val.uri() = p__uri;
ret_val.version__major() = 1;
ret_val.version__minor() = 1;
{
HTTPmsg__Types::HeaderLines_template& tmp_30 = ret_val.header();
tmp_30.set_size(6);
{
HTTPmsg__Types::HeaderLine_template& tmp_31 = tmp_30[0];
tmp_31.header__name() = OneM2M__Constants::HTTP__HOST;
tmp_31.header__value() = ((const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remHost() + cs_2) + int2str(const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remPort()));
}
{
HTTPmsg__Types::HeaderLine_template& tmp_32 = tmp_30[1];
tmp_32.header__name() = OneM2M__Constants::HTTP__ACCEPT;
tmp_32.header__value() = p__accept;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_33 = tmp_30[2];
tmp_33.header__name() = OneM2M__Constants::HTTP__M2M__ORIGIN;
tmp_33.header__value() = p__from;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_34 = tmp_30[3];
tmp_34.header__name() = OneM2M__Constants::HTTP__M2M__REQUEST__ID;
tmp_34.header__value() = p__requestId;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_35 = tmp_30[4];
tmp_35.header__name() = OneM2M__Constants::HTTP__CONTENT__TYPE;
tmp_35.header__value() = p__contentType;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_36 = tmp_30[5];
tmp_36.header__name() = OneM2M__Constants::HTTP__CONTENT__LENGTH;
tmp_36.header__value() = int2str(p__payload.lengthof());
}
}
ret_val.body() = p__payload;
return ret_val;
}

HTTPmsg__Types::HTTPRequest_template t__HTTP__GET__request(const INTEGER& p__clientId, const CHARSTRING& p__uri, const CHARSTRING& p__accept, const CHARSTRING& p__from, const CHARSTRING& p__requestId)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 480, TTCN_Location::LOCATION_TEMPLATE, "t_HTTP_GET_request");
HTTPmsg__Types::HTTPRequest_template ret_val;
ret_val.client__id() = p__clientId;
ret_val.method() = OneM2M__Constants::GET__HTTP;
ret_val.uri() = p__uri;
ret_val.version__major() = 1;
ret_val.version__minor() = 1;
{
HTTPmsg__Types::HeaderLines_template& tmp_37 = ret_val.header();
tmp_37.set_size(4);
{
HTTPmsg__Types::HeaderLine_template& tmp_38 = tmp_37[0];
tmp_38.header__name() = OneM2M__Constants::HTTP__HOST;
tmp_38.header__value() = ((const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remHost() + cs_2) + int2str(const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remPort()));
}
{
HTTPmsg__Types::HeaderLine_template& tmp_39 = tmp_37[1];
tmp_39.header__name() = OneM2M__Constants::HTTP__ACCEPT;
tmp_39.header__value() = p__accept;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_40 = tmp_37[2];
tmp_40.header__name() = OneM2M__Constants::HTTP__M2M__ORIGIN;
tmp_40.header__value() = p__from;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_41 = tmp_37[3];
tmp_41.header__name() = OneM2M__Constants::HTTP__M2M__REQUEST__ID;
tmp_41.header__value() = p__requestId;
}
}
ret_val.body() = cs_3;
return ret_val;
}

HTTPmsg__Types::HTTPRequest_template t__HTTP__PUT__request(const INTEGER& p__clientId, const CHARSTRING& p__uri, const CHARSTRING& p__accept, const CHARSTRING& p__from, const CHARSTRING& p__requestId, const CHARSTRING& p__contentType, const CHARSTRING& p__payload)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 520, TTCN_Location::LOCATION_TEMPLATE, "t_HTTP_PUT_request");
HTTPmsg__Types::HTTPRequest_template ret_val;
ret_val.client__id() = p__clientId;
ret_val.method() = OneM2M__Constants::PUT__HTTP;
ret_val.uri() = p__uri;
ret_val.version__major() = 1;
ret_val.version__minor() = 1;
{
HTTPmsg__Types::HeaderLines_template& tmp_42 = ret_val.header();
tmp_42.set_size(6);
{
HTTPmsg__Types::HeaderLine_template& tmp_43 = tmp_42[0];
tmp_43.header__name() = OneM2M__Constants::HTTP__HOST;
tmp_43.header__value() = ((const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remHost() + cs_2) + int2str(const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remPort()));
}
{
HTTPmsg__Types::HeaderLine_template& tmp_44 = tmp_42[1];
tmp_44.header__name() = OneM2M__Constants::HTTP__ACCEPT;
tmp_44.header__value() = p__accept;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_45 = tmp_42[2];
tmp_45.header__name() = OneM2M__Constants::HTTP__M2M__ORIGIN;
tmp_45.header__value() = p__from;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_46 = tmp_42[3];
tmp_46.header__name() = OneM2M__Constants::HTTP__M2M__REQUEST__ID;
tmp_46.header__value() = p__requestId;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_47 = tmp_42[4];
tmp_47.header__name() = OneM2M__Constants::HTTP__CONTENT__TYPE;
tmp_47.header__value() = p__contentType;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_48 = tmp_42[5];
tmp_48.header__name() = OneM2M__Constants::HTTP__CONTENT__LENGTH;
tmp_48.header__value() = int2str(p__payload.lengthof());
}
}
ret_val.body() = p__payload;
return ret_val;
}

HTTPmsg__Types::HTTPRequest_template t__HTTP__DELETE__request(const INTEGER& p__clientId, const CHARSTRING& p__uri, const CHARSTRING& p__accept, const CHARSTRING& p__from, const CHARSTRING& p__requestId)
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 570, TTCN_Location::LOCATION_TEMPLATE, "t_HTTP_DELETE_request");
HTTPmsg__Types::HTTPRequest_template ret_val;
ret_val.client__id() = p__clientId;
ret_val.method() = OneM2M__Constants::DELETE__HTTP;
ret_val.uri() = p__uri;
ret_val.version__major() = 1;
ret_val.version__minor() = 1;
{
HTTPmsg__Types::HeaderLines_template& tmp_49 = ret_val.header();
tmp_49.set_size(4);
{
HTTPmsg__Types::HeaderLine_template& tmp_50 = tmp_49[0];
tmp_50.header__name() = OneM2M__Constants::HTTP__HOST;
tmp_50.header__value() = ((const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remHost() + cs_2) + int2str(const_cast< const OneM2M__Constants::ConnectionParams&>(OneM2M__Constants::tsp__connectionParams).remPort()));
}
{
HTTPmsg__Types::HeaderLine_template& tmp_51 = tmp_49[1];
tmp_51.header__name() = OneM2M__Constants::HTTP__ACCEPT;
tmp_51.header__value() = p__accept;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_52 = tmp_49[2];
tmp_52.header__name() = OneM2M__Constants::HTTP__M2M__ORIGIN;
tmp_52.header__value() = p__from;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_53 = tmp_49[3];
tmp_53.header__name() = OneM2M__Constants::HTTP__M2M__REQUEST__ID;
tmp_53.header__value() = p__requestId;
}
}
ret_val.body() = cs_3;
return ret_val;
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "oneM2MTester_Template");
Mqtt__v3__1__1__Types::module_object.pre_init_module();
CoAP__Types::module_object.pre_init_module();
HTTPmsg__Types::module_object.pre_init_module();
Socket__API__Definitions::module_object.pre_init_module();
OneM2M__Constants::module_object.pre_init_module();
module_object.add_function("f_randomInteger", (genericfunc_t)&f__randomInteger, NULL);
}

static void post_init_module()
{
TTCN_Location current_location("oneM2MTester_Template.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "oneM2MTester_Template");
Mqtt__v3__1__1__Types::module_object.post_init_module();
CoAP__Types::module_object.post_init_module();
HTTPmsg__Types::module_object.post_init_module();
Socket__API__Definitions::module_object.post_init_module();
OneM2M__Constants::module_object.post_init_module();
current_location.update_lineno(55);
/* oneM2MTester_Template.ttcn, line 55 */
template_t__pingReq.pingreq().header().flags() = bs_0;
current_location.update_lineno(64);
/* oneM2MTester_Template.ttcn, line 64 */
template_tw__pingResp.pingresp().header().flags() = bs_0;
current_location.update_lineno(99);
/* oneM2MTester_Template.ttcn, line 99 */
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__Connack_template& tmp_3 = template_tr__connectAck.connack();
tmp_3.header().flags() = bs_0;
tmp_3.session__present__flag() = bs_1;
tmp_3.connect__return__code() = 0;
}
current_location.update_lineno(110);
/* oneM2MTester_Template.ttcn, line 110 */
template_t__disconnect.disconnect__msg().header().flags() = bs_0;
current_location.update_lineno(185);
/* oneM2MTester_Template.ttcn, line 185 */
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__Publish_template& tmp_13 = template_tw__publish.publish();
{
Mqtt__v3__1__1__Types::MQTT__v3__1__1__PublishHeader_template& tmp_14 = tmp_13.header();
tmp_14.dup__flag() = ANY_VALUE;
tmp_14.qos__level() = ANY_VALUE;
tmp_14.retain__flag() = ANY_VALUE;
}
tmp_13.topic__name() = ANY_VALUE;
tmp_13.packet__identifier() = ANY_OR_OMIT;
tmp_13.payload() = ANY_VALUE;
}
template_t__COAP__TEST_p__option_defval = OMIT_VALUE;
}


} /* end of namespace */
