# This Makefile was generated by the Makefile Generator
# of the TTCN-3 Test Executor version CRL 113 200/6 R1A
# for oneM2MTester (martin@ubuntu) on Wed May 31 13:52:04 2017

# Copyright (c) 2000-2017 Ericsson Telecom AB

# The following make commands are available:
# - make, make all      Builds the executable test suite.
# - make archive        Archives all source files.
# - make check          Checks the semantics of TTCN-3 and ASN.1modules.
# - make port           Generates port skeletons.
# - make clean          Removes all generated files.
# - make compile        Translates TTCN-3 and ASN.1 modules to C++.
# - make dep            Creates/updates dependency list.
# - make executable     Builds the executable test suite.
# - make library        Builds the library archive.
# - make objects        Builds the object files without linking the executable.
#
# Set these variables...
#

# The path of your TTCN-3 Test Executor installation:
# Uncomment this line to override the environment variable.
# TTCN3_DIR = 

# Your platform: (SOLARIS, SOLARIS8, LINUX, FREEBSD or WIN32)
PLATFORM = LINUX

# Your C++ compiler:
# (if you change the platform, you may need to change the compiler)
CXX = g++ 

# Flags for the C++ preprocessor (and makedepend as well):
CPPFLAGS = -D$(PLATFORM) -I$(TTCN3_DIR)/include

# Flags for preprocessing TTCN-3 files:
CPPFLAGS_TTCN3 =

# Flags for the C++ compiler:
CXXFLAGS = -Wall  

# Flags for the linker:
LDFLAGS = 

ifeq ($(PLATFORM), WIN32)
# Silence linker warnings.
LDFLAGS += -Wl,--enable-auto-import,--enable-runtime-pseudo-reloc
endif

# Utility to create library files
AR = ar
ARFLAGS = 

# Flags for the TTCN-3 and ASN.1 compiler:
COMPILER_FLAGS = -L 

# Execution mode: (either ttcn3 or ttcn3-parallel)
TTCN3_LIB = ttcn3-parallel

# The path of your libxml2 installation:
# If you do not have your own one, leave it unchanged.
XMLDIR = $(TTCN3_DIR)

# Directory to store the archived source files:
# Note: you can set any directory except ./archive
ARCHIVE_DIR = backup

#
# You may change these variables. Add your files if necessary...
#

# TTCN-3 modules of this project:
TTCN3_MODULES = LibCommon_AbstractData.ttcn LibCommon_BasicTypesAndValues.ttcn LibCommon_DataStrings.ttcn LibCommon_Sync.ttcn LibCommon_TextStrings.ttcn LibCommon_Time.ttcn LibCommon_VerdictControl.ttcn OneM2M_Functions.ttcn OneM2M_Pics.ttcn OneM2M_Pixits.ttcn OneM2M_Ports.ttcn OneM2M_Templates.ttcn OneM2M_TestSystem.ttcn OneM2M_Types.ttcn OneM2M_TypesAndValues.ttcn UsefulTtcn3Types.ttcn XSD.ttcn OneM2M_TestControl.ttcn OneM2M_Testcases.ttcn Socket_API_Definitions.ttcn TCCInterface_Functions.ttcn HTTPmsg_MessageLen.ttcn HTTPmsg_PortType.ttcn HTTPmsg_Types.ttcn IPL4asp_Functions.ttcn IPL4asp_PortType.ttcn IPL4asp_Types.ttcn CoAP_Types.ttcn Mqtt_v3_1_1_IPL4SizeFunction.ttcn Mqtt_v3_1_1_Types.ttcn OneM2M_Constants.ttcn OneM2M_Primitive_EncDec.ttcn OneM2M_DualFaceMapping.ttcn oneM2MTester_Functions.ttcn oneM2MTester_Template.ttcn

# ASN.1 modules of this project:
ASN1_MODULES =

# C++ source & header files generated from the TTCN-3 & ASN.1 modules of
# this project:
GENERATED_SOURCES = LibCommon_AbstractData.cc LibCommon_BasicTypesAndValues.cc LibCommon_DataStrings.cc LibCommon_Sync.cc LibCommon_TextStrings.cc LibCommon_Time.cc LibCommon_VerdictControl.cc OneM2M_Functions.cc OneM2M_Pics.cc OneM2M_Pixits.cc OneM2M_Ports.cc OneM2M_Templates.cc OneM2M_TestSystem.cc OneM2M_Types.cc OneM2M_TypesAndValues.cc UsefulTtcn3Types.cc XSD.cc OneM2M_TestControl.cc OneM2M_Testcases.cc Socket_API_Definitions.cc TCCInterface_Functions.cc HTTPmsg_MessageLen.cc HTTPmsg_PortType.cc HTTPmsg_Types.cc IPL4asp_Functions.cc IPL4asp_PortType.cc IPL4asp_Types.cc CoAP_Types.cc Mqtt_v3_1_1_IPL4SizeFunction.cc Mqtt_v3_1_1_Types.cc OneM2M_Constants.cc OneM2M_Primitive_EncDec.cc OneM2M_DualFaceMapping.cc oneM2MTester_Functions.cc oneM2MTester_Template.cc
GENERATED_HEADERS = LibCommon_AbstractData.hh LibCommon_BasicTypesAndValues.hh LibCommon_DataStrings.hh LibCommon_Sync.hh LibCommon_TextStrings.hh LibCommon_Time.hh LibCommon_VerdictControl.hh OneM2M_Functions.hh OneM2M_Pics.hh OneM2M_Pixits.hh OneM2M_Ports.hh OneM2M_Templates.hh OneM2M_TestSystem.hh OneM2M_Types.hh OneM2M_TypesAndValues.hh UsefulTtcn3Types.hh XSD.hh OneM2M_TestControl.hh OneM2M_Testcases.hh Socket_API_Definitions.hh TCCInterface_Functions.hh HTTPmsg_MessageLen.hh HTTPmsg_PortType.hh HTTPmsg_Types.hh IPL4asp_Functions.hh IPL4asp_PortType.hh IPL4asp_Types.hh CoAP_Types.hh Mqtt_v3_1_1_IPL4SizeFunction.hh Mqtt_v3_1_1_Types.hh OneM2M_Constants.hh OneM2M_Primitive_EncDec.hh OneM2M_DualFaceMapping.hh oneM2MTester_Functions.hh oneM2MTester_Template.hh

# C/C++ Source & header files of Test Ports, external functions and
# other modules:
USER_SOURCES = Abstract_Socket.cc jsoncpp.cc TCCInterface.cc tinyxml2.cc AdapterControlPort.cc HTTPmsg_MessageLen_Function.cc HTTPmsg_PT.cc IPL4asp_PT.cc IPL4asp_discovery.cc CoAP_EncDec.cc Mqtt_v3_1_1_EncDec.cc Mqtt_v3_1_1_Size.cc OneM2MTimeStampGEN.cc OneM2M_long2short_Enc.cc
USER_HEADERS = Abstract_Socket.hh HashMap.h HashNode.h KeyHash.h json-forwards.h json.h TCCInterface_ip.h tinyxml2.h AdapterControlPort.hh HTTPmsg_PT.hh IPL4asp_PT.hh IPL4asp_protocol_L234.hh External_function.hh

# Object files of this project that are needed for the executable test suite:
OBJECTS = $(GENERATED_OBJECTS) $(USER_OBJECTS)

GENERATED_OBJECTS = LibCommon_AbstractData.o LibCommon_BasicTypesAndValues.o LibCommon_DataStrings.o LibCommon_Sync.o LibCommon_TextStrings.o LibCommon_Time.o LibCommon_VerdictControl.o OneM2M_Functions.o OneM2M_Pics.o OneM2M_Pixits.o OneM2M_Ports.o OneM2M_Templates.o OneM2M_TestSystem.o OneM2M_Types.o OneM2M_TypesAndValues.o UsefulTtcn3Types.o XSD.o OneM2M_TestControl.o OneM2M_Testcases.o Socket_API_Definitions.o TCCInterface_Functions.o HTTPmsg_MessageLen.o HTTPmsg_PortType.o HTTPmsg_Types.o IPL4asp_Functions.o IPL4asp_PortType.o IPL4asp_Types.o CoAP_Types.o Mqtt_v3_1_1_IPL4SizeFunction.o Mqtt_v3_1_1_Types.o OneM2M_Constants.o OneM2M_Primitive_EncDec.o OneM2M_DualFaceMapping.o oneM2MTester_Functions.o oneM2MTester_Template.o

USER_OBJECTS = Abstract_Socket.o jsoncpp.o TCCInterface.o tinyxml2.o AdapterControlPort.o HTTPmsg_MessageLen_Function.o HTTPmsg_PT.o IPL4asp_PT.o IPL4asp_discovery.o CoAP_EncDec.o Mqtt_v3_1_1_EncDec.o Mqtt_v3_1_1_Size.o OneM2MTimeStampGEN.o OneM2M_long2short_Enc.o

# Other files of the project (Makefile, configuration files, etc.)
# that will be added to the archived source files:
OTHER_FILES = TS_HTTP_config.cfg long-2-short-mapping.txt short-2-long-mapping.txt oneM2MTester_v_2_0_0.tpd External_function.hh~ OneM2MTimeStampGEN.cc~ OneM2M_long2short_Enc.cc~ Makefile

# The name of the executable test suite:
EXECUTABLE = oneM2MTester_v_2_0_0



LIBRARY = lib$(EXECUTABLE).a

TARGET = $(EXECUTABLE)

#
# Do not modify these unless you know what you are doing...
# Platform specific additional libraries:
#
SOLARIS_LIBS = -lsocket -lnsl -lxml2
SOLARIS8_LIBS = -lsocket -lnsl -lxml2
LINUX_LIBS = -lxml2
FREEBSD_LIBS = -lxml2
WIN32_LIBS = -lxml2

#
# Rules for building the executable...
#

all: $(TARGET) ;

executable: $(EXECUTABLE) ;

library: $(LIBRARY) ;

objects: $(OBJECTS) compile;

$(EXECUTABLE): $(OBJECTS)
	if $(CXX) $(LDFLAGS) -o $@ $(OBJECTS) \
	-L$(TTCN3_DIR)/lib -l$(TTCN3_LIB) \
	-L$(OPENSSL_DIR)/lib -lcrypto \
	-L$(XMLDIR)/lib $($(PLATFORM)_LIBS); \
	then : ; else $(TTCN3_DIR)/bin/titanver $(OBJECTS); exit 1; fi

$(LIBRARY): $(OBJECTS)
	$(AR) -r $(ARFLAGS) $(LIBRARY) $(OBJECTS)

%.o: %.c $(GENERATED_HEADERS)
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) -o $@ $<

%.o: %.cc $(GENERATED_HEADERS)
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) -o $@ $<

$(GENERATED_SOURCES) $(GENERATED_HEADERS): compile
	@if [ ! -f $@ ]; then rm -f compile; $(MAKE) compile; fi

check: $(TTCN3_MODULES) $(ASN1_MODULES)
	$(TTCN3_DIR)/bin/compiler -s $(COMPILER_FLAGS) \
	$(TTCN3_MODULES) $(PREPROCESSED_TTCN3_MODULES) $(ASN1_MODULES)

port: $(TTCN3_MODULES)  $(ASN1_MODULES)
	$(TTCN3_DIR)/bin/compiler -t $(COMPILER_FLAGS) \
	$(TTCN3_MODULES) $(PREPROCESSED_TTCN3_MODULES) $(ASN1_MODULES)

compile: $(TTCN3_MODULES)  $(ASN1_MODULES)
	$(TTCN3_DIR)/bin/compiler $(COMPILER_FLAGS) \
	$(TTCN3_MODULES) $(ASN1_MODULES) - $?
	touch $@

clean:
	-rm -f $(EXECUTABLE) $(LIBRARY) $(OBJECTS) $(GENERATED_HEADERS) \
	$(GENERATED_SOURCES) compile \
	tags *.log

dep: $(GENERATED_SOURCES) $(USER_SOURCES) ;
	makedepend $(CPPFLAGS) -DMAKEDEPEND_RUN $(GENERATED_SOURCES) $(USER_SOURCES)

archive:
	mkdir -p $(ARCHIVE_DIR)
	tar -cvhf - $(TTCN3_MODULES) $(ASN1_MODULES) \
	$(USER_HEADERS) $(USER_SOURCES) $(OTHER_FILES) \
	| gzip >$(ARCHIVE_DIR)/`basename $(TARGET) .exe`-`date '+%y%m%d-%H%M'`.tgz

diag:
	$(TTCN3_DIR)/bin/compiler -v 2>&1
	$(TTCN3_DIR)/bin/mctr_cli -v 2>&1
	$(CXX) -v 2>&1
	$(AR) -V 2>&1
	@echo TTCN3_DIR=$(TTCN3_DIR)
	@echo OPENSSL_DIR=$(OPENSSL_DIR)
	@echo XMLDIR=$(XMLDIR)
	@echo PLATFORM=$(PLATFORM)

#
# Add your rules here if necessary...
#

