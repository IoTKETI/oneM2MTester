// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for oneM2MTester (martin@ubuntu) on Wed May 31 13:52:13 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef Mqtt__v3__1__1__Types_HH
#define Mqtt__v3__1__1__Types_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 60100
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef Mqtt__v3__1__1__Types_HH
#endif

namespace Mqtt__v3__1__1__Types {

/* Forward declarations of classes */

class QoS;
class QoS_template;
class Header;
class Header_template;
class MQTT__v3__1__1__PublishHeader;
class MQTT__v3__1__1__PublishHeader_template;
class MQTT__v3__1__1__ConnectFlags;
class MQTT__v3__1__1__ConnectFlags_template;
class MQTT__v3__1__1__ConnectPayload;
class MQTT__v3__1__1__ConnectPayload_template;
class MQTT__v3__1__1__Connect;
class MQTT__v3__1__1__Connect_template;
class MQTT__v3__1__1__Connack;
class MQTT__v3__1__1__Connack_template;
class MQTT__v3__1__1__Publish;
class MQTT__v3__1__1__Publish_template;
class MQTT__v3__1__1__Identifier;
class MQTT__v3__1__1__Identifier_template;
class MQTT__v3__1__1__SubscribePayload;
class MQTT__v3__1__1__SubscribePayload_template;
class MQTT__v3__1__1__SubscribePayloadList;
class MQTT__v3__1__1__SubscribePayloadList_template;
class MQTT__v3__1__1__Subscribe;
class MQTT__v3__1__1__Subscribe_template;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER IntegerList;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER_template IntegerList_template;
class MQTT__v3__1__1__SubackPayload;
class MQTT__v3__1__1__SubackPayload_template;
class MQTT__v3__1__1__Suback;
class MQTT__v3__1__1__Suback_template;
typedef PreGenRecordOf::PREGEN__RECORD__OF__UNIVERSAL__CHARSTRING UCHAR0__65535List;
typedef PreGenRecordOf::PREGEN__RECORD__OF__UNIVERSAL__CHARSTRING_template UCHAR0__65535List_template;
class MQTT__v3__1__1__UnsubscribePayload;
class MQTT__v3__1__1__UnsubscribePayload_template;
class MQTT__v3__1__1__Unsubscribe;
class MQTT__v3__1__1__Unsubscribe_template;
class MQTT__v3__1__1__Empty;
class MQTT__v3__1__1__Empty_template;
class MQTT__v3__1__1__ReqResp;
class MQTT__v3__1__1__ReqResp_template;
class MQTT__v3__1__1__Message;
class MQTT__v3__1__1__Message_template;

} /* end of namespace */

#ifndef Mqtt__v3__1__1__Types_HH
#define Mqtt__v3__1__1__Types_HH

namespace Mqtt__v3__1__1__Types {

/* Type definitions */

typedef OCTETSTRING OCT0__65535;
typedef OCTETSTRING_template OCT0__65535_template;
typedef UNIVERSAL_CHARSTRING UCHAR0__65535;
typedef UNIVERSAL_CHARSTRING_template UCHAR0__65535_template;
typedef BITSTRING BIT1n;
typedef BITSTRING_template BIT1n_template;
typedef BITSTRING BIT4n;
typedef BITSTRING_template BIT4n_template;
typedef INTEGER INT0__255;
typedef INTEGER_template INT0__255_template;

/* Class definitions */

class QoS : public Base_Type { // enum
friend class QoS_template;
public:
enum enum_type { AT__MOST__ONCE__DELIVERY = 0, AT__LEAST__ONCE__DELIVERY = 1, EXACTLY__ONE__DELIVERY = 2, RESERVED = 3, UNKNOWN_VALUE = 4, UNBOUND_VALUE = 5 };
private:
enum_type enum_value;

public:
QoS();
QoS(int other_value);
QoS(enum_type other_value);
QoS(const QoS& other_value);

QoS& operator=(int other_value);
QoS& operator=(enum_type other_value);
QoS& operator=(const QoS& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const QoS& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const QoS& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const QoS& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const QoS& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const QoS& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const QoS& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const QoS& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class QoS_template : public Base_Template {
union {
QoS::enum_type single_value;
struct {
unsigned int n_values;
QoS_template *list_value;
} value_list;
};

void copy_template(const QoS_template& other_value);

public:
QoS_template();
QoS_template(template_sel other_value);
QoS_template(int other_value);
QoS_template(QoS::enum_type other_value);
QoS_template(const QoS& other_value);
QoS_template(const OPTIONAL<QoS>& other_value);
QoS_template(const QoS_template& other_value);
~QoS_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
QoS_template& operator=(template_sel other_value);
QoS_template& operator=(int other_value);
QoS_template& operator=(QoS::enum_type other_value);
QoS_template& operator=(const QoS& other_value);
QoS_template& operator=(const OPTIONAL<QoS>& other_value);
QoS_template& operator=(const QoS_template& other_value);

boolean match(QoS::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const QoS& other_value, boolean legacy = FALSE) const;
QoS::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
QoS_template& list_item(unsigned int list_index);
void log() const;
void log_match(const QoS& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class Header {
  BITSTRING field_flags;
public:
  Header();
  Header(const BITSTRING& par_flags);
  Header(const Header& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Header& operator=(const Header& other_value);
  boolean operator==(const Header& other_value) const;
  inline boolean operator!=(const Header& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline BITSTRING& flags()
    {return field_flags;}
  inline const BITSTRING& flags() const
    {return field_flags;}
  inline int size_of() const
    {return 1;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class Header_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Header_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Header& other_value);
void copy_template(const Header_template& other_value);

public:
Header_template();
Header_template(template_sel other_value);
Header_template(const Header& other_value);
Header_template(const OPTIONAL<Header>& other_value);
Header_template(const Header_template& other_value);
~Header_template();
Header_template& operator=(template_sel other_value);
Header_template& operator=(const Header& other_value);
Header_template& operator=(const OPTIONAL<Header>& other_value);
Header_template& operator=(const Header_template& other_value);
boolean match(const Header& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Header valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Header_template& list_item(unsigned int list_index) const;
BITSTRING_template& flags();
const BITSTRING_template& flags() const;
int size_of() const;
void log() const;
void log_match(const Header& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__PublishHeader {
  BITSTRING field_dup__flag;
  QoS field_qos__level;
  BITSTRING field_retain__flag;
public:
  MQTT__v3__1__1__PublishHeader();
  MQTT__v3__1__1__PublishHeader(const BITSTRING& par_dup__flag,
    const QoS& par_qos__level,
    const BITSTRING& par_retain__flag);
  MQTT__v3__1__1__PublishHeader(const MQTT__v3__1__1__PublishHeader& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MQTT__v3__1__1__PublishHeader& operator=(const MQTT__v3__1__1__PublishHeader& other_value);
  boolean operator==(const MQTT__v3__1__1__PublishHeader& other_value) const;
  inline boolean operator!=(const MQTT__v3__1__1__PublishHeader& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline BITSTRING& dup__flag()
    {return field_dup__flag;}
  inline const BITSTRING& dup__flag() const
    {return field_dup__flag;}
  inline QoS& qos__level()
    {return field_qos__level;}
  inline const QoS& qos__level() const
    {return field_qos__level;}
  inline BITSTRING& retain__flag()
    {return field_retain__flag;}
  inline const BITSTRING& retain__flag() const
    {return field_retain__flag;}
  inline int size_of() const
    {return 3;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__PublishHeader_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__PublishHeader_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MQTT__v3__1__1__PublishHeader& other_value);
void copy_template(const MQTT__v3__1__1__PublishHeader_template& other_value);

public:
MQTT__v3__1__1__PublishHeader_template();
MQTT__v3__1__1__PublishHeader_template(template_sel other_value);
MQTT__v3__1__1__PublishHeader_template(const MQTT__v3__1__1__PublishHeader& other_value);
MQTT__v3__1__1__PublishHeader_template(const OPTIONAL<MQTT__v3__1__1__PublishHeader>& other_value);
MQTT__v3__1__1__PublishHeader_template(const MQTT__v3__1__1__PublishHeader_template& other_value);
~MQTT__v3__1__1__PublishHeader_template();
MQTT__v3__1__1__PublishHeader_template& operator=(template_sel other_value);
MQTT__v3__1__1__PublishHeader_template& operator=(const MQTT__v3__1__1__PublishHeader& other_value);
MQTT__v3__1__1__PublishHeader_template& operator=(const OPTIONAL<MQTT__v3__1__1__PublishHeader>& other_value);
MQTT__v3__1__1__PublishHeader_template& operator=(const MQTT__v3__1__1__PublishHeader_template& other_value);
boolean match(const MQTT__v3__1__1__PublishHeader& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MQTT__v3__1__1__PublishHeader valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__PublishHeader_template& list_item(unsigned int list_index) const;
BITSTRING_template& dup__flag();
const BITSTRING_template& dup__flag() const;
QoS_template& qos__level();
const QoS_template& qos__level() const;
BITSTRING_template& retain__flag();
const BITSTRING_template& retain__flag() const;
int size_of() const;
void log() const;
void log_match(const MQTT__v3__1__1__PublishHeader& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__ConnectFlags {
  BITSTRING field_user__name__flag;
  BITSTRING field_password__flag;
  BITSTRING field_will__retain;
  QoS field_will__qos;
  BITSTRING field_will__flag;
  BITSTRING field_clean__session;
public:
  MQTT__v3__1__1__ConnectFlags();
  MQTT__v3__1__1__ConnectFlags(const BITSTRING& par_user__name__flag,
    const BITSTRING& par_password__flag,
    const BITSTRING& par_will__retain,
    const QoS& par_will__qos,
    const BITSTRING& par_will__flag,
    const BITSTRING& par_clean__session);
  MQTT__v3__1__1__ConnectFlags(const MQTT__v3__1__1__ConnectFlags& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MQTT__v3__1__1__ConnectFlags& operator=(const MQTT__v3__1__1__ConnectFlags& other_value);
  boolean operator==(const MQTT__v3__1__1__ConnectFlags& other_value) const;
  inline boolean operator!=(const MQTT__v3__1__1__ConnectFlags& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline BITSTRING& user__name__flag()
    {return field_user__name__flag;}
  inline const BITSTRING& user__name__flag() const
    {return field_user__name__flag;}
  inline BITSTRING& password__flag()
    {return field_password__flag;}
  inline const BITSTRING& password__flag() const
    {return field_password__flag;}
  inline BITSTRING& will__retain()
    {return field_will__retain;}
  inline const BITSTRING& will__retain() const
    {return field_will__retain;}
  inline QoS& will__qos()
    {return field_will__qos;}
  inline const QoS& will__qos() const
    {return field_will__qos;}
  inline BITSTRING& will__flag()
    {return field_will__flag;}
  inline const BITSTRING& will__flag() const
    {return field_will__flag;}
  inline BITSTRING& clean__session()
    {return field_clean__session;}
  inline const BITSTRING& clean__session() const
    {return field_clean__session;}
  inline int size_of() const
    {return 6;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__ConnectFlags_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__ConnectFlags_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MQTT__v3__1__1__ConnectFlags& other_value);
void copy_template(const MQTT__v3__1__1__ConnectFlags_template& other_value);

public:
MQTT__v3__1__1__ConnectFlags_template();
MQTT__v3__1__1__ConnectFlags_template(template_sel other_value);
MQTT__v3__1__1__ConnectFlags_template(const MQTT__v3__1__1__ConnectFlags& other_value);
MQTT__v3__1__1__ConnectFlags_template(const OPTIONAL<MQTT__v3__1__1__ConnectFlags>& other_value);
MQTT__v3__1__1__ConnectFlags_template(const MQTT__v3__1__1__ConnectFlags_template& other_value);
~MQTT__v3__1__1__ConnectFlags_template();
MQTT__v3__1__1__ConnectFlags_template& operator=(template_sel other_value);
MQTT__v3__1__1__ConnectFlags_template& operator=(const MQTT__v3__1__1__ConnectFlags& other_value);
MQTT__v3__1__1__ConnectFlags_template& operator=(const OPTIONAL<MQTT__v3__1__1__ConnectFlags>& other_value);
MQTT__v3__1__1__ConnectFlags_template& operator=(const MQTT__v3__1__1__ConnectFlags_template& other_value);
boolean match(const MQTT__v3__1__1__ConnectFlags& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MQTT__v3__1__1__ConnectFlags valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__ConnectFlags_template& list_item(unsigned int list_index) const;
BITSTRING_template& user__name__flag();
const BITSTRING_template& user__name__flag() const;
BITSTRING_template& password__flag();
const BITSTRING_template& password__flag() const;
BITSTRING_template& will__retain();
const BITSTRING_template& will__retain() const;
QoS_template& will__qos();
const QoS_template& will__qos() const;
BITSTRING_template& will__flag();
const BITSTRING_template& will__flag() const;
BITSTRING_template& clean__session();
const BITSTRING_template& clean__session() const;
int size_of() const;
void log() const;
void log_match(const MQTT__v3__1__1__ConnectFlags& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__ConnectPayload {
  UNIVERSAL_CHARSTRING field_client__identifier;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_will__topic;
  OPTIONAL<OCTETSTRING> field_will__message;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_user__name;
  OPTIONAL<OCTETSTRING> field_password;
public:
  MQTT__v3__1__1__ConnectPayload();
  MQTT__v3__1__1__ConnectPayload(const UNIVERSAL_CHARSTRING& par_client__identifier,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_will__topic,
    const OPTIONAL<OCTETSTRING>& par_will__message,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_user__name,
    const OPTIONAL<OCTETSTRING>& par_password);
  MQTT__v3__1__1__ConnectPayload(const MQTT__v3__1__1__ConnectPayload& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MQTT__v3__1__1__ConnectPayload& operator=(const MQTT__v3__1__1__ConnectPayload& other_value);
  boolean operator==(const MQTT__v3__1__1__ConnectPayload& other_value) const;
  inline boolean operator!=(const MQTT__v3__1__1__ConnectPayload& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& client__identifier()
    {return field_client__identifier;}
  inline const UNIVERSAL_CHARSTRING& client__identifier() const
    {return field_client__identifier;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& will__topic()
    {return field_will__topic;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& will__topic() const
    {return field_will__topic;}
  inline OPTIONAL<OCTETSTRING>& will__message()
    {return field_will__message;}
  inline const OPTIONAL<OCTETSTRING>& will__message() const
    {return field_will__message;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& user__name()
    {return field_user__name;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& user__name() const
    {return field_user__name;}
  inline OPTIONAL<OCTETSTRING>& password()
    {return field_password;}
  inline const OPTIONAL<OCTETSTRING>& password() const
    {return field_password;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__ConnectPayload_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__ConnectPayload_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MQTT__v3__1__1__ConnectPayload& other_value);
void copy_template(const MQTT__v3__1__1__ConnectPayload_template& other_value);

public:
MQTT__v3__1__1__ConnectPayload_template();
MQTT__v3__1__1__ConnectPayload_template(template_sel other_value);
MQTT__v3__1__1__ConnectPayload_template(const MQTT__v3__1__1__ConnectPayload& other_value);
MQTT__v3__1__1__ConnectPayload_template(const OPTIONAL<MQTT__v3__1__1__ConnectPayload>& other_value);
MQTT__v3__1__1__ConnectPayload_template(const MQTT__v3__1__1__ConnectPayload_template& other_value);
~MQTT__v3__1__1__ConnectPayload_template();
MQTT__v3__1__1__ConnectPayload_template& operator=(template_sel other_value);
MQTT__v3__1__1__ConnectPayload_template& operator=(const MQTT__v3__1__1__ConnectPayload& other_value);
MQTT__v3__1__1__ConnectPayload_template& operator=(const OPTIONAL<MQTT__v3__1__1__ConnectPayload>& other_value);
MQTT__v3__1__1__ConnectPayload_template& operator=(const MQTT__v3__1__1__ConnectPayload_template& other_value);
boolean match(const MQTT__v3__1__1__ConnectPayload& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MQTT__v3__1__1__ConnectPayload valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__ConnectPayload_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& client__identifier();
const UNIVERSAL_CHARSTRING_template& client__identifier() const;
UNIVERSAL_CHARSTRING_template& will__topic();
const UNIVERSAL_CHARSTRING_template& will__topic() const;
OCTETSTRING_template& will__message();
const OCTETSTRING_template& will__message() const;
UNIVERSAL_CHARSTRING_template& user__name();
const UNIVERSAL_CHARSTRING_template& user__name() const;
OCTETSTRING_template& password();
const OCTETSTRING_template& password() const;
int size_of() const;
void log() const;
void log_match(const MQTT__v3__1__1__ConnectPayload& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__Connect {
  Header field_header;
  UNIVERSAL_CHARSTRING field_name;
  INTEGER field_protocol__level;
  MQTT__v3__1__1__ConnectFlags field_flags;
  INTEGER field_keep__alive;
  MQTT__v3__1__1__ConnectPayload field_payload;
public:
  MQTT__v3__1__1__Connect();
  MQTT__v3__1__1__Connect(const Header& par_header,
    const UNIVERSAL_CHARSTRING& par_name,
    const INTEGER& par_protocol__level,
    const MQTT__v3__1__1__ConnectFlags& par_flags,
    const INTEGER& par_keep__alive,
    const MQTT__v3__1__1__ConnectPayload& par_payload);
  MQTT__v3__1__1__Connect(const MQTT__v3__1__1__Connect& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MQTT__v3__1__1__Connect& operator=(const MQTT__v3__1__1__Connect& other_value);
  boolean operator==(const MQTT__v3__1__1__Connect& other_value) const;
  inline boolean operator!=(const MQTT__v3__1__1__Connect& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Header& header()
    {return field_header;}
  inline const Header& header() const
    {return field_header;}
  inline UNIVERSAL_CHARSTRING& name()
    {return field_name;}
  inline const UNIVERSAL_CHARSTRING& name() const
    {return field_name;}
  inline INTEGER& protocol__level()
    {return field_protocol__level;}
  inline const INTEGER& protocol__level() const
    {return field_protocol__level;}
  inline MQTT__v3__1__1__ConnectFlags& flags()
    {return field_flags;}
  inline const MQTT__v3__1__1__ConnectFlags& flags() const
    {return field_flags;}
  inline INTEGER& keep__alive()
    {return field_keep__alive;}
  inline const INTEGER& keep__alive() const
    {return field_keep__alive;}
  inline MQTT__v3__1__1__ConnectPayload& payload()
    {return field_payload;}
  inline const MQTT__v3__1__1__ConnectPayload& payload() const
    {return field_payload;}
  inline int size_of() const
    {return 6;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__Connect_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__Connect_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MQTT__v3__1__1__Connect& other_value);
void copy_template(const MQTT__v3__1__1__Connect_template& other_value);

public:
MQTT__v3__1__1__Connect_template();
MQTT__v3__1__1__Connect_template(template_sel other_value);
MQTT__v3__1__1__Connect_template(const MQTT__v3__1__1__Connect& other_value);
MQTT__v3__1__1__Connect_template(const OPTIONAL<MQTT__v3__1__1__Connect>& other_value);
MQTT__v3__1__1__Connect_template(const MQTT__v3__1__1__Connect_template& other_value);
~MQTT__v3__1__1__Connect_template();
MQTT__v3__1__1__Connect_template& operator=(template_sel other_value);
MQTT__v3__1__1__Connect_template& operator=(const MQTT__v3__1__1__Connect& other_value);
MQTT__v3__1__1__Connect_template& operator=(const OPTIONAL<MQTT__v3__1__1__Connect>& other_value);
MQTT__v3__1__1__Connect_template& operator=(const MQTT__v3__1__1__Connect_template& other_value);
boolean match(const MQTT__v3__1__1__Connect& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MQTT__v3__1__1__Connect valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__Connect_template& list_item(unsigned int list_index) const;
Header_template& header();
const Header_template& header() const;
UNIVERSAL_CHARSTRING_template& name();
const UNIVERSAL_CHARSTRING_template& name() const;
INTEGER_template& protocol__level();
const INTEGER_template& protocol__level() const;
MQTT__v3__1__1__ConnectFlags_template& flags();
const MQTT__v3__1__1__ConnectFlags_template& flags() const;
INTEGER_template& keep__alive();
const INTEGER_template& keep__alive() const;
MQTT__v3__1__1__ConnectPayload_template& payload();
const MQTT__v3__1__1__ConnectPayload_template& payload() const;
int size_of() const;
void log() const;
void log_match(const MQTT__v3__1__1__Connect& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__Connack {
  Header field_header;
  BITSTRING field_session__present__flag;
  INTEGER field_connect__return__code;
public:
  MQTT__v3__1__1__Connack();
  MQTT__v3__1__1__Connack(const Header& par_header,
    const BITSTRING& par_session__present__flag,
    const INTEGER& par_connect__return__code);
  MQTT__v3__1__1__Connack(const MQTT__v3__1__1__Connack& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MQTT__v3__1__1__Connack& operator=(const MQTT__v3__1__1__Connack& other_value);
  boolean operator==(const MQTT__v3__1__1__Connack& other_value) const;
  inline boolean operator!=(const MQTT__v3__1__1__Connack& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Header& header()
    {return field_header;}
  inline const Header& header() const
    {return field_header;}
  inline BITSTRING& session__present__flag()
    {return field_session__present__flag;}
  inline const BITSTRING& session__present__flag() const
    {return field_session__present__flag;}
  inline INTEGER& connect__return__code()
    {return field_connect__return__code;}
  inline const INTEGER& connect__return__code() const
    {return field_connect__return__code;}
  inline int size_of() const
    {return 3;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__Connack_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__Connack_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MQTT__v3__1__1__Connack& other_value);
void copy_template(const MQTT__v3__1__1__Connack_template& other_value);

public:
MQTT__v3__1__1__Connack_template();
MQTT__v3__1__1__Connack_template(template_sel other_value);
MQTT__v3__1__1__Connack_template(const MQTT__v3__1__1__Connack& other_value);
MQTT__v3__1__1__Connack_template(const OPTIONAL<MQTT__v3__1__1__Connack>& other_value);
MQTT__v3__1__1__Connack_template(const MQTT__v3__1__1__Connack_template& other_value);
~MQTT__v3__1__1__Connack_template();
MQTT__v3__1__1__Connack_template& operator=(template_sel other_value);
MQTT__v3__1__1__Connack_template& operator=(const MQTT__v3__1__1__Connack& other_value);
MQTT__v3__1__1__Connack_template& operator=(const OPTIONAL<MQTT__v3__1__1__Connack>& other_value);
MQTT__v3__1__1__Connack_template& operator=(const MQTT__v3__1__1__Connack_template& other_value);
boolean match(const MQTT__v3__1__1__Connack& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MQTT__v3__1__1__Connack valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__Connack_template& list_item(unsigned int list_index) const;
Header_template& header();
const Header_template& header() const;
BITSTRING_template& session__present__flag();
const BITSTRING_template& session__present__flag() const;
INTEGER_template& connect__return__code();
const INTEGER_template& connect__return__code() const;
int size_of() const;
void log() const;
void log_match(const MQTT__v3__1__1__Connack& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__Publish {
  MQTT__v3__1__1__PublishHeader field_header;
  UNIVERSAL_CHARSTRING field_topic__name;
  OPTIONAL<INTEGER> field_packet__identifier;
  OCTETSTRING field_payload;
public:
  MQTT__v3__1__1__Publish();
  MQTT__v3__1__1__Publish(const MQTT__v3__1__1__PublishHeader& par_header,
    const UNIVERSAL_CHARSTRING& par_topic__name,
    const OPTIONAL<INTEGER>& par_packet__identifier,
    const OCTETSTRING& par_payload);
  MQTT__v3__1__1__Publish(const MQTT__v3__1__1__Publish& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MQTT__v3__1__1__Publish& operator=(const MQTT__v3__1__1__Publish& other_value);
  boolean operator==(const MQTT__v3__1__1__Publish& other_value) const;
  inline boolean operator!=(const MQTT__v3__1__1__Publish& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline MQTT__v3__1__1__PublishHeader& header()
    {return field_header;}
  inline const MQTT__v3__1__1__PublishHeader& header() const
    {return field_header;}
  inline UNIVERSAL_CHARSTRING& topic__name()
    {return field_topic__name;}
  inline const UNIVERSAL_CHARSTRING& topic__name() const
    {return field_topic__name;}
  inline OPTIONAL<INTEGER>& packet__identifier()
    {return field_packet__identifier;}
  inline const OPTIONAL<INTEGER>& packet__identifier() const
    {return field_packet__identifier;}
  inline OCTETSTRING& payload()
    {return field_payload;}
  inline const OCTETSTRING& payload() const
    {return field_payload;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__Publish_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__Publish_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MQTT__v3__1__1__Publish& other_value);
void copy_template(const MQTT__v3__1__1__Publish_template& other_value);

public:
MQTT__v3__1__1__Publish_template();
MQTT__v3__1__1__Publish_template(template_sel other_value);
MQTT__v3__1__1__Publish_template(const MQTT__v3__1__1__Publish& other_value);
MQTT__v3__1__1__Publish_template(const OPTIONAL<MQTT__v3__1__1__Publish>& other_value);
MQTT__v3__1__1__Publish_template(const MQTT__v3__1__1__Publish_template& other_value);
~MQTT__v3__1__1__Publish_template();
MQTT__v3__1__1__Publish_template& operator=(template_sel other_value);
MQTT__v3__1__1__Publish_template& operator=(const MQTT__v3__1__1__Publish& other_value);
MQTT__v3__1__1__Publish_template& operator=(const OPTIONAL<MQTT__v3__1__1__Publish>& other_value);
MQTT__v3__1__1__Publish_template& operator=(const MQTT__v3__1__1__Publish_template& other_value);
boolean match(const MQTT__v3__1__1__Publish& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MQTT__v3__1__1__Publish valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__Publish_template& list_item(unsigned int list_index) const;
MQTT__v3__1__1__PublishHeader_template& header();
const MQTT__v3__1__1__PublishHeader_template& header() const;
UNIVERSAL_CHARSTRING_template& topic__name();
const UNIVERSAL_CHARSTRING_template& topic__name() const;
INTEGER_template& packet__identifier();
const INTEGER_template& packet__identifier() const;
OCTETSTRING_template& payload();
const OCTETSTRING_template& payload() const;
int size_of() const;
void log() const;
void log_match(const MQTT__v3__1__1__Publish& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__Identifier {
  Header field_header;
  INTEGER field_packet__identifier;
public:
  MQTT__v3__1__1__Identifier();
  MQTT__v3__1__1__Identifier(const Header& par_header,
    const INTEGER& par_packet__identifier);
  MQTT__v3__1__1__Identifier(const MQTT__v3__1__1__Identifier& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MQTT__v3__1__1__Identifier& operator=(const MQTT__v3__1__1__Identifier& other_value);
  boolean operator==(const MQTT__v3__1__1__Identifier& other_value) const;
  inline boolean operator!=(const MQTT__v3__1__1__Identifier& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Header& header()
    {return field_header;}
  inline const Header& header() const
    {return field_header;}
  inline INTEGER& packet__identifier()
    {return field_packet__identifier;}
  inline const INTEGER& packet__identifier() const
    {return field_packet__identifier;}
  inline int size_of() const
    {return 2;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__Identifier_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__Identifier_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MQTT__v3__1__1__Identifier& other_value);
void copy_template(const MQTT__v3__1__1__Identifier_template& other_value);

public:
MQTT__v3__1__1__Identifier_template();
MQTT__v3__1__1__Identifier_template(template_sel other_value);
MQTT__v3__1__1__Identifier_template(const MQTT__v3__1__1__Identifier& other_value);
MQTT__v3__1__1__Identifier_template(const OPTIONAL<MQTT__v3__1__1__Identifier>& other_value);
MQTT__v3__1__1__Identifier_template(const MQTT__v3__1__1__Identifier_template& other_value);
~MQTT__v3__1__1__Identifier_template();
MQTT__v3__1__1__Identifier_template& operator=(template_sel other_value);
MQTT__v3__1__1__Identifier_template& operator=(const MQTT__v3__1__1__Identifier& other_value);
MQTT__v3__1__1__Identifier_template& operator=(const OPTIONAL<MQTT__v3__1__1__Identifier>& other_value);
MQTT__v3__1__1__Identifier_template& operator=(const MQTT__v3__1__1__Identifier_template& other_value);
boolean match(const MQTT__v3__1__1__Identifier& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MQTT__v3__1__1__Identifier valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__Identifier_template& list_item(unsigned int list_index) const;
Header_template& header();
const Header_template& header() const;
INTEGER_template& packet__identifier();
const INTEGER_template& packet__identifier() const;
int size_of() const;
void log() const;
void log_match(const MQTT__v3__1__1__Identifier& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__SubscribePayload {
  UNIVERSAL_CHARSTRING field_topic__filter;
  QoS field_requested__qos;
public:
  MQTT__v3__1__1__SubscribePayload();
  MQTT__v3__1__1__SubscribePayload(const UNIVERSAL_CHARSTRING& par_topic__filter,
    const QoS& par_requested__qos);
  MQTT__v3__1__1__SubscribePayload(const MQTT__v3__1__1__SubscribePayload& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MQTT__v3__1__1__SubscribePayload& operator=(const MQTT__v3__1__1__SubscribePayload& other_value);
  boolean operator==(const MQTT__v3__1__1__SubscribePayload& other_value) const;
  inline boolean operator!=(const MQTT__v3__1__1__SubscribePayload& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& topic__filter()
    {return field_topic__filter;}
  inline const UNIVERSAL_CHARSTRING& topic__filter() const
    {return field_topic__filter;}
  inline QoS& requested__qos()
    {return field_requested__qos;}
  inline const QoS& requested__qos() const
    {return field_requested__qos;}
  inline int size_of() const
    {return 2;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__SubscribePayload_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__SubscribePayload_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MQTT__v3__1__1__SubscribePayload& other_value);
void copy_template(const MQTT__v3__1__1__SubscribePayload_template& other_value);

public:
MQTT__v3__1__1__SubscribePayload_template();
MQTT__v3__1__1__SubscribePayload_template(template_sel other_value);
MQTT__v3__1__1__SubscribePayload_template(const MQTT__v3__1__1__SubscribePayload& other_value);
MQTT__v3__1__1__SubscribePayload_template(const OPTIONAL<MQTT__v3__1__1__SubscribePayload>& other_value);
MQTT__v3__1__1__SubscribePayload_template(const MQTT__v3__1__1__SubscribePayload_template& other_value);
~MQTT__v3__1__1__SubscribePayload_template();
MQTT__v3__1__1__SubscribePayload_template& operator=(template_sel other_value);
MQTT__v3__1__1__SubscribePayload_template& operator=(const MQTT__v3__1__1__SubscribePayload& other_value);
MQTT__v3__1__1__SubscribePayload_template& operator=(const OPTIONAL<MQTT__v3__1__1__SubscribePayload>& other_value);
MQTT__v3__1__1__SubscribePayload_template& operator=(const MQTT__v3__1__1__SubscribePayload_template& other_value);
boolean match(const MQTT__v3__1__1__SubscribePayload& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MQTT__v3__1__1__SubscribePayload valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__SubscribePayload_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& topic__filter();
const UNIVERSAL_CHARSTRING_template& topic__filter() const;
QoS_template& requested__qos();
const QoS_template& requested__qos() const;
int size_of() const;
void log() const;
void log_match(const MQTT__v3__1__1__SubscribePayload& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__SubscribePayloadList : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
MQTT__v3__1__1__SubscribePayload **value_elements;
} *val_ptr;

static const MQTT__v3__1__1__SubscribePayload UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const MQTT__v3__1__1__SubscribePayloadList& other_value);

public:
  typedef MQTT__v3__1__1__SubscribePayload of_type;
MQTT__v3__1__1__SubscribePayloadList();
MQTT__v3__1__1__SubscribePayloadList(null_type other_value);
MQTT__v3__1__1__SubscribePayloadList(const MQTT__v3__1__1__SubscribePayloadList& other_value);
~MQTT__v3__1__1__SubscribePayloadList();

void clean_up();
MQTT__v3__1__1__SubscribePayloadList& operator=(null_type other_value);
MQTT__v3__1__1__SubscribePayloadList& operator=(const MQTT__v3__1__1__SubscribePayloadList& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const MQTT__v3__1__1__SubscribePayloadList& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const MQTT__v3__1__1__SubscribePayloadList& other_value) const { return !(*this == other_value); }

MQTT__v3__1__1__SubscribePayload& operator[](int index_value);
MQTT__v3__1__1__SubscribePayload& operator[](const INTEGER& index_value);
const MQTT__v3__1__1__SubscribePayload& operator[](int index_value) const;
const MQTT__v3__1__1__SubscribePayload& operator[](const INTEGER& index_value) const;

MQTT__v3__1__1__SubscribePayloadList operator<<=(int rotate_count) const;
MQTT__v3__1__1__SubscribePayloadList operator<<=(const INTEGER& rotate_count) const;
MQTT__v3__1__1__SubscribePayloadList operator>>=(int rotate_count) const;
MQTT__v3__1__1__SubscribePayloadList operator>>=(const INTEGER& rotate_count) const;

MQTT__v3__1__1__SubscribePayloadList operator+(const MQTT__v3__1__1__SubscribePayloadList& other_value) const;

MQTT__v3__1__1__SubscribePayloadList substr(int index, int returncount) const;

MQTT__v3__1__1__SubscribePayloadList replace(int index, int len, const MQTT__v3__1__1__SubscribePayloadList& repl) const;

MQTT__v3__1__1__SubscribePayloadList replace(int index, int len, const MQTT__v3__1__1__SubscribePayloadList_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__SubscribePayloadList_template : public Record_Of_Template {
union {
struct {
int n_elements;
MQTT__v3__1__1__SubscribePayload_template **value_elements;
} single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__SubscribePayloadList_template *list_value;
} value_list;
};
void copy_value(const MQTT__v3__1__1__SubscribePayloadList& other_value);
void copy_template(const MQTT__v3__1__1__SubscribePayloadList_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy);

public:
MQTT__v3__1__1__SubscribePayloadList_template();
MQTT__v3__1__1__SubscribePayloadList_template(template_sel other_value);
MQTT__v3__1__1__SubscribePayloadList_template(null_type other_value);
MQTT__v3__1__1__SubscribePayloadList_template(const MQTT__v3__1__1__SubscribePayloadList& other_value);
MQTT__v3__1__1__SubscribePayloadList_template(const OPTIONAL<MQTT__v3__1__1__SubscribePayloadList>& other_value);
MQTT__v3__1__1__SubscribePayloadList_template(const MQTT__v3__1__1__SubscribePayloadList_template& other_value);
~MQTT__v3__1__1__SubscribePayloadList_template();

void clean_up();
MQTT__v3__1__1__SubscribePayloadList_template& operator=(template_sel other_value);
MQTT__v3__1__1__SubscribePayloadList_template& operator=(null_type other_value);
MQTT__v3__1__1__SubscribePayloadList_template& operator=(const MQTT__v3__1__1__SubscribePayloadList& other_value);
MQTT__v3__1__1__SubscribePayloadList_template& operator=(const OPTIONAL<MQTT__v3__1__1__SubscribePayloadList>& other_value);
MQTT__v3__1__1__SubscribePayloadList_template& operator=(const MQTT__v3__1__1__SubscribePayloadList_template& other_value);

MQTT__v3__1__1__SubscribePayload_template& operator[](int index_value);
MQTT__v3__1__1__SubscribePayload_template& operator[](const INTEGER& index_value);
const MQTT__v3__1__1__SubscribePayload_template& operator[](int index_value) const;
const MQTT__v3__1__1__SubscribePayload_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const MQTT__v3__1__1__SubscribePayloadList& other_value, boolean legacy = FALSE) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
MQTT__v3__1__1__SubscribePayloadList valueof() const;
MQTT__v3__1__1__SubscribePayloadList substr(int index, int returncount) const;

MQTT__v3__1__1__SubscribePayloadList replace(int index, int len, const MQTT__v3__1__1__SubscribePayloadList_template& repl) const;

MQTT__v3__1__1__SubscribePayloadList replace(int index, int len, const MQTT__v3__1__1__SubscribePayloadList& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__SubscribePayloadList_template& list_item(unsigned int list_index);
void log() const;
void log_match(const MQTT__v3__1__1__SubscribePayloadList& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean get_istemplate_kind(const char* type) const;
};

class MQTT__v3__1__1__Subscribe {
  Header field_header;
  INTEGER field_packet__identifier;
  MQTT__v3__1__1__SubscribePayloadList field_payload;
public:
  MQTT__v3__1__1__Subscribe();
  MQTT__v3__1__1__Subscribe(const Header& par_header,
    const INTEGER& par_packet__identifier,
    const MQTT__v3__1__1__SubscribePayloadList& par_payload);
  MQTT__v3__1__1__Subscribe(const MQTT__v3__1__1__Subscribe& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MQTT__v3__1__1__Subscribe& operator=(const MQTT__v3__1__1__Subscribe& other_value);
  boolean operator==(const MQTT__v3__1__1__Subscribe& other_value) const;
  inline boolean operator!=(const MQTT__v3__1__1__Subscribe& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Header& header()
    {return field_header;}
  inline const Header& header() const
    {return field_header;}
  inline INTEGER& packet__identifier()
    {return field_packet__identifier;}
  inline const INTEGER& packet__identifier() const
    {return field_packet__identifier;}
  inline MQTT__v3__1__1__SubscribePayloadList& payload()
    {return field_payload;}
  inline const MQTT__v3__1__1__SubscribePayloadList& payload() const
    {return field_payload;}
  inline int size_of() const
    {return 3;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__Subscribe_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__Subscribe_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MQTT__v3__1__1__Subscribe& other_value);
void copy_template(const MQTT__v3__1__1__Subscribe_template& other_value);

public:
MQTT__v3__1__1__Subscribe_template();
MQTT__v3__1__1__Subscribe_template(template_sel other_value);
MQTT__v3__1__1__Subscribe_template(const MQTT__v3__1__1__Subscribe& other_value);
MQTT__v3__1__1__Subscribe_template(const OPTIONAL<MQTT__v3__1__1__Subscribe>& other_value);
MQTT__v3__1__1__Subscribe_template(const MQTT__v3__1__1__Subscribe_template& other_value);
~MQTT__v3__1__1__Subscribe_template();
MQTT__v3__1__1__Subscribe_template& operator=(template_sel other_value);
MQTT__v3__1__1__Subscribe_template& operator=(const MQTT__v3__1__1__Subscribe& other_value);
MQTT__v3__1__1__Subscribe_template& operator=(const OPTIONAL<MQTT__v3__1__1__Subscribe>& other_value);
MQTT__v3__1__1__Subscribe_template& operator=(const MQTT__v3__1__1__Subscribe_template& other_value);
boolean match(const MQTT__v3__1__1__Subscribe& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MQTT__v3__1__1__Subscribe valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__Subscribe_template& list_item(unsigned int list_index) const;
Header_template& header();
const Header_template& header() const;
INTEGER_template& packet__identifier();
const INTEGER_template& packet__identifier() const;
MQTT__v3__1__1__SubscribePayloadList_template& payload();
const MQTT__v3__1__1__SubscribePayloadList_template& payload() const;
int size_of() const;
void log() const;
void log_match(const MQTT__v3__1__1__Subscribe& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__SubackPayload {
  IntegerList field_return__code;
public:
  MQTT__v3__1__1__SubackPayload();
  MQTT__v3__1__1__SubackPayload(const IntegerList& par_return__code);
  MQTT__v3__1__1__SubackPayload(const MQTT__v3__1__1__SubackPayload& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MQTT__v3__1__1__SubackPayload& operator=(const MQTT__v3__1__1__SubackPayload& other_value);
  boolean operator==(const MQTT__v3__1__1__SubackPayload& other_value) const;
  inline boolean operator!=(const MQTT__v3__1__1__SubackPayload& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline IntegerList& return__code()
    {return field_return__code;}
  inline const IntegerList& return__code() const
    {return field_return__code;}
  inline int size_of() const
    {return 1;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__SubackPayload_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__SubackPayload_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MQTT__v3__1__1__SubackPayload& other_value);
void copy_template(const MQTT__v3__1__1__SubackPayload_template& other_value);

public:
MQTT__v3__1__1__SubackPayload_template();
MQTT__v3__1__1__SubackPayload_template(template_sel other_value);
MQTT__v3__1__1__SubackPayload_template(const MQTT__v3__1__1__SubackPayload& other_value);
MQTT__v3__1__1__SubackPayload_template(const OPTIONAL<MQTT__v3__1__1__SubackPayload>& other_value);
MQTT__v3__1__1__SubackPayload_template(const MQTT__v3__1__1__SubackPayload_template& other_value);
~MQTT__v3__1__1__SubackPayload_template();
MQTT__v3__1__1__SubackPayload_template& operator=(template_sel other_value);
MQTT__v3__1__1__SubackPayload_template& operator=(const MQTT__v3__1__1__SubackPayload& other_value);
MQTT__v3__1__1__SubackPayload_template& operator=(const OPTIONAL<MQTT__v3__1__1__SubackPayload>& other_value);
MQTT__v3__1__1__SubackPayload_template& operator=(const MQTT__v3__1__1__SubackPayload_template& other_value);
boolean match(const MQTT__v3__1__1__SubackPayload& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MQTT__v3__1__1__SubackPayload valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__SubackPayload_template& list_item(unsigned int list_index) const;
IntegerList_template& return__code();
const IntegerList_template& return__code() const;
int size_of() const;
void log() const;
void log_match(const MQTT__v3__1__1__SubackPayload& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__Suback {
  Header field_header;
  INTEGER field_packet__identifier;
  MQTT__v3__1__1__SubackPayload field_payload;
public:
  MQTT__v3__1__1__Suback();
  MQTT__v3__1__1__Suback(const Header& par_header,
    const INTEGER& par_packet__identifier,
    const MQTT__v3__1__1__SubackPayload& par_payload);
  MQTT__v3__1__1__Suback(const MQTT__v3__1__1__Suback& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MQTT__v3__1__1__Suback& operator=(const MQTT__v3__1__1__Suback& other_value);
  boolean operator==(const MQTT__v3__1__1__Suback& other_value) const;
  inline boolean operator!=(const MQTT__v3__1__1__Suback& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Header& header()
    {return field_header;}
  inline const Header& header() const
    {return field_header;}
  inline INTEGER& packet__identifier()
    {return field_packet__identifier;}
  inline const INTEGER& packet__identifier() const
    {return field_packet__identifier;}
  inline MQTT__v3__1__1__SubackPayload& payload()
    {return field_payload;}
  inline const MQTT__v3__1__1__SubackPayload& payload() const
    {return field_payload;}
  inline int size_of() const
    {return 3;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__Suback_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__Suback_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MQTT__v3__1__1__Suback& other_value);
void copy_template(const MQTT__v3__1__1__Suback_template& other_value);

public:
MQTT__v3__1__1__Suback_template();
MQTT__v3__1__1__Suback_template(template_sel other_value);
MQTT__v3__1__1__Suback_template(const MQTT__v3__1__1__Suback& other_value);
MQTT__v3__1__1__Suback_template(const OPTIONAL<MQTT__v3__1__1__Suback>& other_value);
MQTT__v3__1__1__Suback_template(const MQTT__v3__1__1__Suback_template& other_value);
~MQTT__v3__1__1__Suback_template();
MQTT__v3__1__1__Suback_template& operator=(template_sel other_value);
MQTT__v3__1__1__Suback_template& operator=(const MQTT__v3__1__1__Suback& other_value);
MQTT__v3__1__1__Suback_template& operator=(const OPTIONAL<MQTT__v3__1__1__Suback>& other_value);
MQTT__v3__1__1__Suback_template& operator=(const MQTT__v3__1__1__Suback_template& other_value);
boolean match(const MQTT__v3__1__1__Suback& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MQTT__v3__1__1__Suback valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__Suback_template& list_item(unsigned int list_index) const;
Header_template& header();
const Header_template& header() const;
INTEGER_template& packet__identifier();
const INTEGER_template& packet__identifier() const;
MQTT__v3__1__1__SubackPayload_template& payload();
const MQTT__v3__1__1__SubackPayload_template& payload() const;
int size_of() const;
void log() const;
void log_match(const MQTT__v3__1__1__Suback& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__UnsubscribePayload {
  UCHAR0__65535List field_topic__filter;
public:
  MQTT__v3__1__1__UnsubscribePayload();
  MQTT__v3__1__1__UnsubscribePayload(const UCHAR0__65535List& par_topic__filter);
  MQTT__v3__1__1__UnsubscribePayload(const MQTT__v3__1__1__UnsubscribePayload& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MQTT__v3__1__1__UnsubscribePayload& operator=(const MQTT__v3__1__1__UnsubscribePayload& other_value);
  boolean operator==(const MQTT__v3__1__1__UnsubscribePayload& other_value) const;
  inline boolean operator!=(const MQTT__v3__1__1__UnsubscribePayload& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UCHAR0__65535List& topic__filter()
    {return field_topic__filter;}
  inline const UCHAR0__65535List& topic__filter() const
    {return field_topic__filter;}
  inline int size_of() const
    {return 1;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__UnsubscribePayload_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__UnsubscribePayload_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MQTT__v3__1__1__UnsubscribePayload& other_value);
void copy_template(const MQTT__v3__1__1__UnsubscribePayload_template& other_value);

public:
MQTT__v3__1__1__UnsubscribePayload_template();
MQTT__v3__1__1__UnsubscribePayload_template(template_sel other_value);
MQTT__v3__1__1__UnsubscribePayload_template(const MQTT__v3__1__1__UnsubscribePayload& other_value);
MQTT__v3__1__1__UnsubscribePayload_template(const OPTIONAL<MQTT__v3__1__1__UnsubscribePayload>& other_value);
MQTT__v3__1__1__UnsubscribePayload_template(const MQTT__v3__1__1__UnsubscribePayload_template& other_value);
~MQTT__v3__1__1__UnsubscribePayload_template();
MQTT__v3__1__1__UnsubscribePayload_template& operator=(template_sel other_value);
MQTT__v3__1__1__UnsubscribePayload_template& operator=(const MQTT__v3__1__1__UnsubscribePayload& other_value);
MQTT__v3__1__1__UnsubscribePayload_template& operator=(const OPTIONAL<MQTT__v3__1__1__UnsubscribePayload>& other_value);
MQTT__v3__1__1__UnsubscribePayload_template& operator=(const MQTT__v3__1__1__UnsubscribePayload_template& other_value);
boolean match(const MQTT__v3__1__1__UnsubscribePayload& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MQTT__v3__1__1__UnsubscribePayload valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__UnsubscribePayload_template& list_item(unsigned int list_index) const;
UCHAR0__65535List_template& topic__filter();
const UCHAR0__65535List_template& topic__filter() const;
int size_of() const;
void log() const;
void log_match(const MQTT__v3__1__1__UnsubscribePayload& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__Unsubscribe {
  Header field_header;
  INTEGER field_packet__identifier;
  MQTT__v3__1__1__UnsubscribePayload field_payload;
public:
  MQTT__v3__1__1__Unsubscribe();
  MQTT__v3__1__1__Unsubscribe(const Header& par_header,
    const INTEGER& par_packet__identifier,
    const MQTT__v3__1__1__UnsubscribePayload& par_payload);
  MQTT__v3__1__1__Unsubscribe(const MQTT__v3__1__1__Unsubscribe& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MQTT__v3__1__1__Unsubscribe& operator=(const MQTT__v3__1__1__Unsubscribe& other_value);
  boolean operator==(const MQTT__v3__1__1__Unsubscribe& other_value) const;
  inline boolean operator!=(const MQTT__v3__1__1__Unsubscribe& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Header& header()
    {return field_header;}
  inline const Header& header() const
    {return field_header;}
  inline INTEGER& packet__identifier()
    {return field_packet__identifier;}
  inline const INTEGER& packet__identifier() const
    {return field_packet__identifier;}
  inline MQTT__v3__1__1__UnsubscribePayload& payload()
    {return field_payload;}
  inline const MQTT__v3__1__1__UnsubscribePayload& payload() const
    {return field_payload;}
  inline int size_of() const
    {return 3;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__Unsubscribe_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__Unsubscribe_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MQTT__v3__1__1__Unsubscribe& other_value);
void copy_template(const MQTT__v3__1__1__Unsubscribe_template& other_value);

public:
MQTT__v3__1__1__Unsubscribe_template();
MQTT__v3__1__1__Unsubscribe_template(template_sel other_value);
MQTT__v3__1__1__Unsubscribe_template(const MQTT__v3__1__1__Unsubscribe& other_value);
MQTT__v3__1__1__Unsubscribe_template(const OPTIONAL<MQTT__v3__1__1__Unsubscribe>& other_value);
MQTT__v3__1__1__Unsubscribe_template(const MQTT__v3__1__1__Unsubscribe_template& other_value);
~MQTT__v3__1__1__Unsubscribe_template();
MQTT__v3__1__1__Unsubscribe_template& operator=(template_sel other_value);
MQTT__v3__1__1__Unsubscribe_template& operator=(const MQTT__v3__1__1__Unsubscribe& other_value);
MQTT__v3__1__1__Unsubscribe_template& operator=(const OPTIONAL<MQTT__v3__1__1__Unsubscribe>& other_value);
MQTT__v3__1__1__Unsubscribe_template& operator=(const MQTT__v3__1__1__Unsubscribe_template& other_value);
boolean match(const MQTT__v3__1__1__Unsubscribe& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MQTT__v3__1__1__Unsubscribe valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__Unsubscribe_template& list_item(unsigned int list_index) const;
Header_template& header();
const Header_template& header() const;
INTEGER_template& packet__identifier();
const INTEGER_template& packet__identifier() const;
MQTT__v3__1__1__UnsubscribePayload_template& payload();
const MQTT__v3__1__1__UnsubscribePayload_template& payload() const;
int size_of() const;
void log() const;
void log_match(const MQTT__v3__1__1__Unsubscribe& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__Empty {
  Header field_header;
public:
  MQTT__v3__1__1__Empty();
  MQTT__v3__1__1__Empty(const Header& par_header);
  MQTT__v3__1__1__Empty(const MQTT__v3__1__1__Empty& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MQTT__v3__1__1__Empty& operator=(const MQTT__v3__1__1__Empty& other_value);
  boolean operator==(const MQTT__v3__1__1__Empty& other_value) const;
  inline boolean operator!=(const MQTT__v3__1__1__Empty& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Header& header()
    {return field_header;}
  inline const Header& header() const
    {return field_header;}
  inline int size_of() const
    {return 1;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__Empty_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__Empty_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MQTT__v3__1__1__Empty& other_value);
void copy_template(const MQTT__v3__1__1__Empty_template& other_value);

public:
MQTT__v3__1__1__Empty_template();
MQTT__v3__1__1__Empty_template(template_sel other_value);
MQTT__v3__1__1__Empty_template(const MQTT__v3__1__1__Empty& other_value);
MQTT__v3__1__1__Empty_template(const OPTIONAL<MQTT__v3__1__1__Empty>& other_value);
MQTT__v3__1__1__Empty_template(const MQTT__v3__1__1__Empty_template& other_value);
~MQTT__v3__1__1__Empty_template();
MQTT__v3__1__1__Empty_template& operator=(template_sel other_value);
MQTT__v3__1__1__Empty_template& operator=(const MQTT__v3__1__1__Empty& other_value);
MQTT__v3__1__1__Empty_template& operator=(const OPTIONAL<MQTT__v3__1__1__Empty>& other_value);
MQTT__v3__1__1__Empty_template& operator=(const MQTT__v3__1__1__Empty_template& other_value);
boolean match(const MQTT__v3__1__1__Empty& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MQTT__v3__1__1__Empty valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__Empty_template& list_item(unsigned int list_index) const;
Header_template& header();
const Header_template& header() const;
int size_of() const;
void log() const;
void log_match(const MQTT__v3__1__1__Empty& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__ReqResp : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_connect__msg = 1, ALT_connack = 2, ALT_publish = 3, ALT_puback = 4, ALT_pubrec = 5, ALT_pubrel = 6, ALT_pubcomp = 7, ALT_subscribe = 8, ALT_suback = 9, ALT_unsubscribe = 10, ALT_unsuback = 11, ALT_pingreq = 12, ALT_pingresp = 13, ALT_disconnect__msg = 14 };
private:
union_selection_type union_selection;
union {
MQTT__v3__1__1__Connect *field_connect__msg;
MQTT__v3__1__1__Connack *field_connack;
MQTT__v3__1__1__Publish *field_publish;
MQTT__v3__1__1__Identifier *field_puback;
MQTT__v3__1__1__Identifier *field_pubrec;
MQTT__v3__1__1__Identifier *field_pubrel;
MQTT__v3__1__1__Identifier *field_pubcomp;
MQTT__v3__1__1__Subscribe *field_subscribe;
MQTT__v3__1__1__Suback *field_suback;
MQTT__v3__1__1__Unsubscribe *field_unsubscribe;
MQTT__v3__1__1__Identifier *field_unsuback;
MQTT__v3__1__1__Empty *field_pingreq;
MQTT__v3__1__1__Empty *field_pingresp;
MQTT__v3__1__1__Empty *field_disconnect__msg;
};
void copy_value(const MQTT__v3__1__1__ReqResp& other_value);

public:
MQTT__v3__1__1__ReqResp();
MQTT__v3__1__1__ReqResp(const MQTT__v3__1__1__ReqResp& other_value);
~MQTT__v3__1__1__ReqResp();
MQTT__v3__1__1__ReqResp& operator=(const MQTT__v3__1__1__ReqResp& other_value);
boolean operator==(const MQTT__v3__1__1__ReqResp& other_value) const;
inline boolean operator!=(const MQTT__v3__1__1__ReqResp& other_value) const { return !(*this == other_value); }
MQTT__v3__1__1__Connect& connect__msg();
const MQTT__v3__1__1__Connect& connect__msg() const;
MQTT__v3__1__1__Connack& connack();
const MQTT__v3__1__1__Connack& connack() const;
MQTT__v3__1__1__Publish& publish();
const MQTT__v3__1__1__Publish& publish() const;
MQTT__v3__1__1__Identifier& puback();
const MQTT__v3__1__1__Identifier& puback() const;
MQTT__v3__1__1__Identifier& pubrec();
const MQTT__v3__1__1__Identifier& pubrec() const;
MQTT__v3__1__1__Identifier& pubrel();
const MQTT__v3__1__1__Identifier& pubrel() const;
MQTT__v3__1__1__Identifier& pubcomp();
const MQTT__v3__1__1__Identifier& pubcomp() const;
MQTT__v3__1__1__Subscribe& subscribe();
const MQTT__v3__1__1__Subscribe& subscribe() const;
MQTT__v3__1__1__Suback& suback();
const MQTT__v3__1__1__Suback& suback() const;
MQTT__v3__1__1__Unsubscribe& unsubscribe();
const MQTT__v3__1__1__Unsubscribe& unsubscribe() const;
MQTT__v3__1__1__Identifier& unsuback();
const MQTT__v3__1__1__Identifier& unsuback() const;
MQTT__v3__1__1__Empty& pingreq();
const MQTT__v3__1__1__Empty& pingreq() const;
MQTT__v3__1__1__Empty& pingresp();
const MQTT__v3__1__1__Empty& pingresp() const;
MQTT__v3__1__1__Empty& disconnect__msg();
const MQTT__v3__1__1__Empty& disconnect__msg() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__ReqResp_template : public Base_Template {
union {
struct {
MQTT__v3__1__1__ReqResp::union_selection_type union_selection;
union {
MQTT__v3__1__1__Connect_template *field_connect__msg;
MQTT__v3__1__1__Connack_template *field_connack;
MQTT__v3__1__1__Publish_template *field_publish;
MQTT__v3__1__1__Identifier_template *field_puback;
MQTT__v3__1__1__Identifier_template *field_pubrec;
MQTT__v3__1__1__Identifier_template *field_pubrel;
MQTT__v3__1__1__Identifier_template *field_pubcomp;
MQTT__v3__1__1__Subscribe_template *field_subscribe;
MQTT__v3__1__1__Suback_template *field_suback;
MQTT__v3__1__1__Unsubscribe_template *field_unsubscribe;
MQTT__v3__1__1__Identifier_template *field_unsuback;
MQTT__v3__1__1__Empty_template *field_pingreq;
MQTT__v3__1__1__Empty_template *field_pingresp;
MQTT__v3__1__1__Empty_template *field_disconnect__msg;
};
} single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__ReqResp_template *list_value;
} value_list;
};
void copy_value(const MQTT__v3__1__1__ReqResp& other_value);

void copy_template(const MQTT__v3__1__1__ReqResp_template& other_value);

public:
MQTT__v3__1__1__ReqResp_template();
MQTT__v3__1__1__ReqResp_template(template_sel other_value);
MQTT__v3__1__1__ReqResp_template(const MQTT__v3__1__1__ReqResp& other_value);
MQTT__v3__1__1__ReqResp_template(const OPTIONAL<MQTT__v3__1__1__ReqResp>& other_value);
MQTT__v3__1__1__ReqResp_template(const MQTT__v3__1__1__ReqResp_template& other_value);
~MQTT__v3__1__1__ReqResp_template();
void clean_up();
MQTT__v3__1__1__ReqResp_template& operator=(template_sel other_value);
MQTT__v3__1__1__ReqResp_template& operator=(const MQTT__v3__1__1__ReqResp& other_value);
MQTT__v3__1__1__ReqResp_template& operator=(const OPTIONAL<MQTT__v3__1__1__ReqResp>& other_value);
MQTT__v3__1__1__ReqResp_template& operator=(const MQTT__v3__1__1__ReqResp_template& other_value);
boolean match(const MQTT__v3__1__1__ReqResp& other_value, boolean legacy = FALSE) const;
boolean is_value() const;MQTT__v3__1__1__ReqResp valueof() const;
MQTT__v3__1__1__ReqResp_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__Connect_template& connect__msg();
const MQTT__v3__1__1__Connect_template& connect__msg() const;
MQTT__v3__1__1__Connack_template& connack();
const MQTT__v3__1__1__Connack_template& connack() const;
MQTT__v3__1__1__Publish_template& publish();
const MQTT__v3__1__1__Publish_template& publish() const;
MQTT__v3__1__1__Identifier_template& puback();
const MQTT__v3__1__1__Identifier_template& puback() const;
MQTT__v3__1__1__Identifier_template& pubrec();
const MQTT__v3__1__1__Identifier_template& pubrec() const;
MQTT__v3__1__1__Identifier_template& pubrel();
const MQTT__v3__1__1__Identifier_template& pubrel() const;
MQTT__v3__1__1__Identifier_template& pubcomp();
const MQTT__v3__1__1__Identifier_template& pubcomp() const;
MQTT__v3__1__1__Subscribe_template& subscribe();
const MQTT__v3__1__1__Subscribe_template& subscribe() const;
MQTT__v3__1__1__Suback_template& suback();
const MQTT__v3__1__1__Suback_template& suback() const;
MQTT__v3__1__1__Unsubscribe_template& unsubscribe();
const MQTT__v3__1__1__Unsubscribe_template& unsubscribe() const;
MQTT__v3__1__1__Identifier_template& unsuback();
const MQTT__v3__1__1__Identifier_template& unsuback() const;
MQTT__v3__1__1__Empty_template& pingreq();
const MQTT__v3__1__1__Empty_template& pingreq() const;
MQTT__v3__1__1__Empty_template& pingresp();
const MQTT__v3__1__1__Empty_template& pingresp() const;
MQTT__v3__1__1__Empty_template& disconnect__msg();
const MQTT__v3__1__1__Empty_template& disconnect__msg() const;
boolean ischosen(MQTT__v3__1__1__ReqResp::union_selection_type checked_selection) const;
void log() const;
void log_match(const MQTT__v3__1__1__ReqResp& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class MQTT__v3__1__1__Message : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_msg = 1, ALT_raw__message = 2 };
private:
union_selection_type union_selection;
union {
MQTT__v3__1__1__ReqResp *field_msg;
OCTETSTRING *field_raw__message;
};
void copy_value(const MQTT__v3__1__1__Message& other_value);

public:
MQTT__v3__1__1__Message();
MQTT__v3__1__1__Message(const MQTT__v3__1__1__Message& other_value);
~MQTT__v3__1__1__Message();
MQTT__v3__1__1__Message& operator=(const MQTT__v3__1__1__Message& other_value);
boolean operator==(const MQTT__v3__1__1__Message& other_value) const;
inline boolean operator!=(const MQTT__v3__1__1__Message& other_value) const { return !(*this == other_value); }
MQTT__v3__1__1__ReqResp& msg();
const MQTT__v3__1__1__ReqResp& msg() const;
OCTETSTRING& raw__message();
const OCTETSTRING& raw__message() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class MQTT__v3__1__1__Message_template : public Base_Template {
union {
struct {
MQTT__v3__1__1__Message::union_selection_type union_selection;
union {
MQTT__v3__1__1__ReqResp_template *field_msg;
OCTETSTRING_template *field_raw__message;
};
} single_value;
struct {
unsigned int n_values;
MQTT__v3__1__1__Message_template *list_value;
} value_list;
};
void copy_value(const MQTT__v3__1__1__Message& other_value);

void copy_template(const MQTT__v3__1__1__Message_template& other_value);

public:
MQTT__v3__1__1__Message_template();
MQTT__v3__1__1__Message_template(template_sel other_value);
MQTT__v3__1__1__Message_template(const MQTT__v3__1__1__Message& other_value);
MQTT__v3__1__1__Message_template(const OPTIONAL<MQTT__v3__1__1__Message>& other_value);
MQTT__v3__1__1__Message_template(const MQTT__v3__1__1__Message_template& other_value);
~MQTT__v3__1__1__Message_template();
void clean_up();
MQTT__v3__1__1__Message_template& operator=(template_sel other_value);
MQTT__v3__1__1__Message_template& operator=(const MQTT__v3__1__1__Message& other_value);
MQTT__v3__1__1__Message_template& operator=(const OPTIONAL<MQTT__v3__1__1__Message>& other_value);
MQTT__v3__1__1__Message_template& operator=(const MQTT__v3__1__1__Message_template& other_value);
boolean match(const MQTT__v3__1__1__Message& other_value, boolean legacy = FALSE) const;
boolean is_value() const;MQTT__v3__1__1__Message valueof() const;
MQTT__v3__1__1__Message_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
MQTT__v3__1__1__ReqResp_template& msg();
const MQTT__v3__1__1__ReqResp_template& msg() const;
OCTETSTRING_template& raw__message();
const OCTETSTRING_template& raw__message() const;
boolean ischosen(MQTT__v3__1__1__Message::union_selection_type checked_selection) const;
void log() const;
void log_match(const MQTT__v3__1__1__Message& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};


/* Function prototypes */

extern INTEGER f__MQTT__v3__1__1__enc(const MQTT__v3__1__1__Message& msg, OCTETSTRING& str);
extern INTEGER f__MQTT__v3__1__1__dec(const OCTETSTRING& str, MQTT__v3__1__1__Message& msg);
extern boolean operator==(null_type null_value, const MQTT__v3__1__1__SubscribePayloadList& other_value);
inline boolean operator!=(null_type null_value, const MQTT__v3__1__1__SubscribePayloadList& other_value) { return !(null_value == other_value); }

/* Global variable declarations */

extern const XERdescriptor_t OCT0__65535_xer_;
extern const TTCN_Typedescriptor_t OCT0__65535_descr_;
extern const XERdescriptor_t UCHAR0__65535_xer_;
extern const TTCN_Typedescriptor_t UCHAR0__65535_descr_;
extern const TTCN_RAWdescriptor_t BIT1n_raw_;
extern const XERdescriptor_t BIT1n_xer_;
extern const TTCN_Typedescriptor_t BIT1n_descr_;
extern const TTCN_RAWdescriptor_t BIT4n_raw_;
extern const XERdescriptor_t BIT4n_xer_;
extern const TTCN_Typedescriptor_t BIT4n_descr_;
extern const XERdescriptor_t INT0__255_xer_;
extern const TTCN_Typedescriptor_t INT0__255_descr_;
extern const TTCN_Typedescriptor_t QoS_descr_;
extern const XERdescriptor_t Header_flags_xer_;
extern const TTCN_Typedescriptor_t Header_flags_descr_;
extern const TTCN_Typedescriptor_t Header_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__PublishHeader_dup__flag_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__PublishHeader_dup__flag_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__PublishHeader_retain__flag_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__PublishHeader_retain__flag_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__PublishHeader_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__ConnectFlags_user__name__flag_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__ConnectFlags_user__name__flag_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__ConnectFlags_password__flag_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__ConnectFlags_password__flag_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__ConnectFlags_will__retain_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__ConnectFlags_will__retain_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__ConnectFlags_will__flag_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__ConnectFlags_will__flag_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__ConnectFlags_clean__session_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__ConnectFlags_clean__session_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__ConnectFlags_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__ConnectPayload_client__identifier_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__ConnectPayload_client__identifier_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__ConnectPayload_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__ConnectPayload_will__topic_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__ConnectPayload_will__topic_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__ConnectPayload_will__message_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__ConnectPayload_will__message_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__ConnectPayload_user__name_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__ConnectPayload_user__name_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__ConnectPayload_password_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__ConnectPayload_password_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__Connect_name_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Connect_name_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__Connect_protocol__level_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Connect_protocol__level_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__Connect_keep__alive_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Connect_keep__alive_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Connect_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__Connack_session__present__flag_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Connack_session__present__flag_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__Connack_connect__return__code_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Connack_connect__return__code_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Connack_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__Publish_topic__name_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Publish_topic__name_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__Publish_payload_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Publish_payload_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Publish_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__Publish_packet__identifier_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Publish_packet__identifier_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__Identifier_packet__identifier_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Identifier_packet__identifier_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Identifier_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__SubscribePayload_topic__filter_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__SubscribePayload_topic__filter_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__SubscribePayload_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__SubscribePayloadList_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__Subscribe_packet__identifier_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Subscribe_packet__identifier_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Subscribe_descr_;
extern const TTCN_Typedescriptor_t IntegerList_descr_;
extern const XERdescriptor_t IntegerList_0_xer_;
extern const TTCN_Typedescriptor_t IntegerList_0_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__SubackPayload_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__Suback_packet__identifier_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Suback_packet__identifier_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Suback_descr_;
extern const TTCN_Typedescriptor_t UCHAR0__65535List_descr_;
extern const XERdescriptor_t UCHAR0__65535List_0_xer_;
extern const TTCN_Typedescriptor_t UCHAR0__65535List_0_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__UnsubscribePayload_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__Unsubscribe_packet__identifier_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Unsubscribe_packet__identifier_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Unsubscribe_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Empty_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__ReqResp_descr_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Message_descr_;
extern const XERdescriptor_t MQTT__v3__1__1__Message_raw__message_xer_;
extern const TTCN_Typedescriptor_t MQTT__v3__1__1__Message_raw__message_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
