// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for oneM2MTester (martin@ubuntu) on Wed May 31 13:52:13 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef OneM2M__Constants_HH
#define OneM2M__Constants_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 60100
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef OneM2M__Constants_HH
#endif

namespace OneM2M__Constants {

/* Forward declarations of classes */

class ConnectionParams;
class ConnectionParams_template;

} /* end of namespace */

#ifndef OneM2M__Constants_HH
#define OneM2M__Constants_HH

namespace OneM2M__Constants {

/* Class definitions */

class ConnectionParams {
  CHARSTRING field_remHost;
  INTEGER field_remPort;
  CHARSTRING field_locHost;
  INTEGER field_locPort;
public:
  ConnectionParams();
  ConnectionParams(const CHARSTRING& par_remHost,
    const INTEGER& par_remPort,
    const CHARSTRING& par_locHost,
    const INTEGER& par_locPort);
  ConnectionParams(const ConnectionParams& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  ConnectionParams& operator=(const ConnectionParams& other_value);
  boolean operator==(const ConnectionParams& other_value) const;
  inline boolean operator!=(const ConnectionParams& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& remHost()
    {return field_remHost;}
  inline const CHARSTRING& remHost() const
    {return field_remHost;}
  inline INTEGER& remPort()
    {return field_remPort;}
  inline const INTEGER& remPort() const
    {return field_remPort;}
  inline CHARSTRING& locHost()
    {return field_locHost;}
  inline const CHARSTRING& locHost() const
    {return field_locHost;}
  inline INTEGER& locPort()
    {return field_locPort;}
  inline const INTEGER& locPort() const
    {return field_locPort;}
  inline int size_of() const
    {return 4;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class ConnectionParams_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
ConnectionParams_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const ConnectionParams& other_value);
void copy_template(const ConnectionParams_template& other_value);

public:
ConnectionParams_template();
ConnectionParams_template(template_sel other_value);
ConnectionParams_template(const ConnectionParams& other_value);
ConnectionParams_template(const OPTIONAL<ConnectionParams>& other_value);
ConnectionParams_template(const ConnectionParams_template& other_value);
~ConnectionParams_template();
ConnectionParams_template& operator=(template_sel other_value);
ConnectionParams_template& operator=(const ConnectionParams& other_value);
ConnectionParams_template& operator=(const OPTIONAL<ConnectionParams>& other_value);
ConnectionParams_template& operator=(const ConnectionParams_template& other_value);
boolean match(const ConnectionParams& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
ConnectionParams valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ConnectionParams_template& list_item(unsigned int list_index) const;
CHARSTRING_template& remHost();
const CHARSTRING_template& remHost() const;
INTEGER_template& remPort();
const INTEGER_template& remPort() const;
CHARSTRING_template& locHost();
const CHARSTRING_template& locHost() const;
INTEGER_template& locPort();
const INTEGER_template& locPort() const;
int size_of() const;
void log() const;
void log_match(const ConnectionParams& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};


/* Global variable declarations */

extern const XERdescriptor_t ConnectionParams_remHost_xer_;
extern const TTCN_Typedescriptor_t ConnectionParams_remHost_descr_;
extern const XERdescriptor_t ConnectionParams_remPort_xer_;
extern const TTCN_Typedescriptor_t ConnectionParams_remPort_descr_;
extern const XERdescriptor_t ConnectionParams_locHost_xer_;
extern const TTCN_Typedescriptor_t ConnectionParams_locHost_descr_;
extern const XERdescriptor_t ConnectionParams_locPort_xer_;
extern const TTCN_Typedescriptor_t ConnectionParams_locPort_descr_;
extern const TTCN_Typedescriptor_t ConnectionParams_descr_;
extern const ConnectionParams& tsp__connectionParams;
extern const FLOAT& maxResponseTime;
extern const CHARSTRING& PX__UT__URI;
extern const CHARSTRING& HTTP__BINDING;
extern const CHARSTRING& MQTT__BINDING;
extern const CHARSTRING& COAP__BINDING;
extern const CHARSTRING& JSON__SERIAL;
extern const CHARSTRING& XML__SERIAL;
extern const CHARSTRING& RESOURCE__NAME;
extern const CHARSTRING& HTTP__HOST;
extern const CHARSTRING& HTTP__ACCEPT;
extern const CHARSTRING& HTTP__CONTENT__TYPE;
extern const CHARSTRING& HTTP__CONTENT__LENGTH;
extern const CHARSTRING& HTTP__M2M__ORIGIN;
extern const CHARSTRING& HTTP__M2M__REQUEST__ID;
extern const CHARSTRING& POST__HTTP;
extern const CHARSTRING& GET__HTTP;
extern const CHARSTRING& PUT__HTTP;
extern const CHARSTRING& DELETE__HTTP;
extern const INTEGER& APPLICATION__XML__COAP;
extern const INTEGER& APPLICATION__JSON__COAP;
extern const CHARSTRING& ACCEPT__BASE;
extern const CHARSTRING& CONTENT__TYPE__BASE;
extern const CHARSTRING& RSC__OK;
extern const CHARSTRING& RSC__CREATED;
extern const CHARSTRING& RSC__UPDATED;
extern const CHARSTRING& RSC__DELETED;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
