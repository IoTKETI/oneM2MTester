// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for oneM2MTester (martin@ubuntu) on Wed May 31 13:52:13 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "OneM2M_DualFaceMapping.hh"

namespace OneM2M__DualFaceMapping {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const BITSTRING bs_0(0, NULL);
static const CHARSTRING cs_0(0, NULL),
cs_3('/'),
cs_4(2, "/_"),
cs_2(2, "/~"),
cs_7(4, ";ty="),
cs_5(5, "\?rcn="),
cs_9(8, "X-M2M-RI"),
cs_8(9, "X-M2M-RSC"),
cs_6(4, "rcn="),
cs_1(15, "{UNINITIALIZED}");
static const unsigned char module_checksum[] = { 0xb5, 0x2c, 0x40, 0x81, 0x96, 0x8d, 0x14, 0xc9, 0xbe, 0xea, 0x5d, 0x03, 0xee, 0xe7, 0xd3, 0x6e };

/* Global variable definitions */

static const size_t num_namespaces = 1;
static const namespace_t xml_namespaces[num_namespaces+1] = {
  { NULL, NULL },
  { "", "" }
};

TTCN_Module module_object("OneM2M_DualFaceMapping", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 1LU, xml_namespaces, post_init_module, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_1,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

void f__enc__M2MPrimitive__to__ASPSend(const OneM2M__Types::MsgOut& p__msgout, IPL4asp__Types::ASP__Send& p__asp__Send)
{
TTCN_Location current_location("OneM2M_DualFaceMapping.ttcn", 65, TTCN_Location::LOCATION_FUNCTION, "f_enc_M2MPrimitive_to_ASPSend");
p__asp__Send.clean_up();
current_location.update_lineno(67);
/* OneM2M_DualFaceMapping.ttcn, line 67 */
CHARSTRING v__protocol__type(cs_0);
current_location.update_lineno(68);
/* OneM2M_DualFaceMapping.ttcn, line 68 */
CHARSTRING v__serial__type(cs_0);
current_location.update_lineno(69);
/* OneM2M_DualFaceMapping.ttcn, line 69 */
CHARSTRING v__payload(cs_0);
current_location.update_lineno(70);
/* OneM2M_DualFaceMapping.ttcn, line 70 */
OCTETSTRING v__encoded__msg;
current_location.update_lineno(71);
/* OneM2M_DualFaceMapping.ttcn, line 71 */
OneM2M__Types::RequestPrimitive v__reqPrimitive;
current_location.update_lineno(72);
/* OneM2M_DualFaceMapping.ttcn, line 72 */
INTEGER v__resultContent;
current_location.update_lineno(73);
/* OneM2M_DualFaceMapping.ttcn, line 73 */
INTEGER v__operation;
current_location.update_lineno(74);
/* OneM2M_DualFaceMapping.ttcn, line 74 */
CHARSTRING v__from(cs_0);
current_location.update_lineno(75);
/* OneM2M_DualFaceMapping.ttcn, line 75 */
CHARSTRING v__to(cs_0);
current_location.update_lineno(76);
/* OneM2M_DualFaceMapping.ttcn, line 76 */
CHARSTRING v__reqID(cs_0);
current_location.update_lineno(77);
/* OneM2M_DualFaceMapping.ttcn, line 77 */
INTEGER v__ty;
current_location.update_lineno(78);
/* OneM2M_DualFaceMapping.ttcn, line 78 */
INTEGER v__connId__msgOut;
current_location.update_lineno(79);
/* OneM2M_DualFaceMapping.ttcn, line 79 */
CHARSTRING v__uri(cs_1);
current_location.update_lineno(81);
/* OneM2M_DualFaceMapping.ttcn, line 81 */
INTEGER v__len(0);
current_location.update_lineno(82);
/* OneM2M_DualFaceMapping.ttcn, line 82 */
CoAP__Types::Charstring__List csList;
current_location.update_lineno(83);
/* OneM2M_DualFaceMapping.ttcn, line 83 */
CHARSTRING v__contentType;
current_location.update_lineno(84);
/* OneM2M_DualFaceMapping.ttcn, line 84 */
INTEGER connectId__init(-1);
current_location.update_lineno(88);
/* OneM2M_DualFaceMapping.ttcn, line 88 */
{
boolean tmp_3;
{
boolean tmp_0 = p__msgout.is_bound();
if(tmp_0) {
const OPTIONAL<CHARSTRING>& tmp_1 = p__msgout.protocolBinding();
switch (tmp_1.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_0 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_0 = FALSE;
break;
default:
{
const CHARSTRING& tmp_2 = (const CHARSTRING&) tmp_1;
tmp_0 = tmp_2.is_present();
break;}
}
}
tmp_3 = tmp_0;
}
if (tmp_3) {
current_location.update_lineno(90);
/* OneM2M_DualFaceMapping.ttcn, line 90 */
v__protocol__type = f__upper2lower(const_cast< const OneM2M__Types::MsgOut&>(p__msgout).protocolBinding());
current_location.update_lineno(91);
/* OneM2M_DualFaceMapping.ttcn, line 91 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-Input Protocol Type: ");
v__protocol__type.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
current_location.update_lineno(95);
/* OneM2M_DualFaceMapping.ttcn, line 95 */
{
boolean tmp_8;
{
boolean tmp_5 = p__msgout.is_bound();
if(tmp_5) {
const OPTIONAL<CHARSTRING>& tmp_6 = p__msgout.serialization();
switch (tmp_6.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_5 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_5 = FALSE;
break;
default:
{
const CHARSTRING& tmp_7 = (const CHARSTRING&) tmp_6;
tmp_5 = tmp_7.is_present();
break;}
}
}
tmp_8 = tmp_5;
}
if (tmp_8) {
current_location.update_lineno(97);
/* OneM2M_DualFaceMapping.ttcn, line 97 */
v__serial__type = f__upper2lower(const_cast< const OneM2M__Types::MsgOut&>(p__msgout).serialization());
current_location.update_lineno(98);
/* OneM2M_DualFaceMapping.ttcn, line 98 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-Input Serial Type: ");
v__serial__type.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
current_location.update_lineno(101);
/* OneM2M_DualFaceMapping.ttcn, line 101 */
{
boolean tmp_13;
{
boolean tmp_10 = p__msgout.is_bound();
if(tmp_10) {
const OneM2M__Types::MsgOut& tmp_11 = p__msgout;
const OneM2M__Types::MsgOut_primitive& tmp_12 = tmp_11.primitive();
tmp_10 = tmp_12.is_present();
}
tmp_13 = tmp_10;
}
if (tmp_13) {
current_location.update_lineno(103);
/* OneM2M_DualFaceMapping.ttcn, line 103 */
if (const_cast< const OneM2M__Types::MsgOut&>(p__msgout).primitive().ischosen(OneM2M__Types::MsgOut_primitive::ALT_requestPrimitive)) {
current_location.update_lineno(105);
/* OneM2M_DualFaceMapping.ttcn, line 105 */
v__reqPrimitive = const_cast< const OneM2M__Types::MsgOut&>(p__msgout).primitive().requestPrimitive();
current_location.update_lineno(108);
/* OneM2M_DualFaceMapping.ttcn, line 108 */
{
boolean tmp_18;
{
boolean tmp_15 = v__reqPrimitive.is_bound();
if(tmp_15) {
const OPTIONAL<OneM2M__Types::PrimitiveContent>& tmp_16 = v__reqPrimitive.primitiveContent();
switch (tmp_16.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_15 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_15 = FALSE;
break;
default:
{
const OneM2M__Types::PrimitiveContent& tmp_17 = (const OneM2M__Types::PrimitiveContent&) tmp_16;
tmp_15 = tmp_17.is_present();
break;}
}
}
tmp_18 = tmp_15;
}
if (tmp_18) {
current_location.update_lineno(110);
/* OneM2M_DualFaceMapping.ttcn, line 110 */
BITSTRING v__bit__stream;
{
OCTETSTRING tmp_19;
TTCN_Buffer tmp_20;
OneM2M__Types::PrimitiveContent const& tmp_21 = const_cast< const OneM2M__Types::RequestPrimitive&>(v__reqPrimitive).primitiveContent()();
tmp_21.encode(OneM2M__Types::PrimitiveContent_descr_, tmp_20, TTCN_EncDec::CT_XER, XER_EXTENDED);
tmp_20.get_string(tmp_19);
v__bit__stream = oct2bit(tmp_19);
}
current_location.update_lineno(111);
/* OneM2M_DualFaceMapping.ttcn, line 111 */
if ((v__bit__stream != bs_0)) {
current_location.update_lineno(112);
/* OneM2M_DualFaceMapping.ttcn, line 112 */
CHARSTRING v__char__streamTest(oct2char(bit2oct(v__bit__stream)));
current_location.update_lineno(113);
/* OneM2M_DualFaceMapping.ttcn, line 113 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend v_char_streamTest ");
v__char__streamTest.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
}
current_location.update_lineno(118);
/* OneM2M_DualFaceMapping.ttcn, line 118 */
{
boolean tmp_25;
{
boolean tmp_22 = v__reqPrimitive.is_bound();
if(tmp_22) {
const OneM2M__Types::RequestPrimitive& tmp_23 = v__reqPrimitive;
const OneM2M__Types::Operation& tmp_24 = tmp_23.operation();
tmp_22 = tmp_24.is_present();
}
tmp_25 = tmp_22;
}
if (tmp_25) {
current_location.update_lineno(120);
/* OneM2M_DualFaceMapping.ttcn, line 120 */
v__operation = OneM2M__Types::Operation::enum2int(const_cast< const OneM2M__Types::RequestPrimitive&>(v__reqPrimitive).operation());
}
}
current_location.update_lineno(123);
/* OneM2M_DualFaceMapping.ttcn, line 123 */
{
boolean tmp_30;
{
boolean tmp_27 = v__reqPrimitive.is_bound();
if(tmp_27) {
const OPTIONAL<UNIVERSAL_CHARSTRING>& tmp_28 = v__reqPrimitive.from__();
switch (tmp_28.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_27 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_27 = FALSE;
break;
default:
{
const UNIVERSAL_CHARSTRING& tmp_29 = (const UNIVERSAL_CHARSTRING&) tmp_28;
tmp_27 = tmp_29.is_present();
break;}
}
}
tmp_30 = tmp_27;
}
if (tmp_30) {
current_location.update_lineno(125);
/* OneM2M_DualFaceMapping.ttcn, line 125 */
v__from = oct2char(unichar2oct(const_cast< const OneM2M__Types::RequestPrimitive&>(v__reqPrimitive).from__()()));
}
}
current_location.update_lineno(128);
/* OneM2M_DualFaceMapping.ttcn, line 128 */
{
boolean tmp_35;
{
boolean tmp_32 = v__reqPrimitive.is_bound();
if(tmp_32) {
const OneM2M__Types::RequestPrimitive& tmp_33 = v__reqPrimitive;
const UNIVERSAL_CHARSTRING& tmp_34 = tmp_33.to__();
tmp_32 = tmp_34.is_present();
}
tmp_35 = tmp_32;
}
if (tmp_35) {
current_location.update_lineno(130);
/* OneM2M_DualFaceMapping.ttcn, line 130 */
v__to = oct2char(unichar2oct(const_cast< const OneM2M__Types::RequestPrimitive&>(v__reqPrimitive).to__()));
current_location.update_lineno(131);
/* OneM2M_DualFaceMapping.ttcn, line 131 */
v__uri = v__to;
current_location.update_lineno(133);
/* OneM2M_DualFaceMapping.ttcn, line 133 */
if ((OneM2M__Types::AddressingFormat::e__spRelative == OneM2M__Pixits::PX__ADDRESSING__FORMAT)) {
current_location.update_lineno(135);
/* OneM2M_DualFaceMapping.ttcn, line 135 */
v__uri = (cs_2 + v__to);
current_location.update_lineno(136);
/* OneM2M_DualFaceMapping.ttcn, line 136 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-f_adressingFormatter(Sp-relative):");
v__uri.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
else {
current_location.update_lineno(138);
/* OneM2M_DualFaceMapping.ttcn, line 138 */
if ((OneM2M__Types::AddressingFormat::e__cseRelative == OneM2M__Pixits::PX__ADDRESSING__FORMAT)) {
current_location.update_lineno(140);
/* OneM2M_DualFaceMapping.ttcn, line 140 */
v__uri = (cs_3 + v__to);
current_location.update_lineno(141);
/* OneM2M_DualFaceMapping.ttcn, line 141 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-f_adressingFormatter(CSE-relative):");
v__uri.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
else {
current_location.update_lineno(143);
/* OneM2M_DualFaceMapping.ttcn, line 143 */
if ((OneM2M__Types::AddressingFormat::e__absolute == OneM2M__Pixits::PX__ADDRESSING__FORMAT)) {
current_location.update_lineno(145);
/* OneM2M_DualFaceMapping.ttcn, line 145 */
v__uri = f__adressingFormatter(v__to, cs_3, cs_4);
current_location.update_lineno(146);
/* OneM2M_DualFaceMapping.ttcn, line 146 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-f_adressingFormatter(Absolute-relative):");
v__uri.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
}
}
}
current_location.update_lineno(152);
/* OneM2M_DualFaceMapping.ttcn, line 152 */
{
boolean tmp_44;
{
boolean tmp_41 = v__reqPrimitive.is_bound();
if(tmp_41) {
const OPTIONAL<OneM2M__Types::ResourceType>& tmp_42 = v__reqPrimitive.resourceType();
switch (tmp_42.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_41 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_41 = FALSE;
break;
default:
{
const OneM2M__Types::ResourceType& tmp_43 = (const OneM2M__Types::ResourceType&) tmp_42;
tmp_41 = tmp_43.is_present();
break;}
}
}
tmp_44 = tmp_41;
}
if (tmp_44) {
current_location.update_lineno(154);
/* OneM2M_DualFaceMapping.ttcn, line 154 */
v__ty = OneM2M__Types::ResourceType::enum2int(const_cast< const OneM2M__Types::RequestPrimitive&>(v__reqPrimitive).resourceType()());
}
}
current_location.update_lineno(157);
/* OneM2M_DualFaceMapping.ttcn, line 157 */
{
boolean tmp_49;
{
boolean tmp_46 = v__reqPrimitive.is_bound();
if(tmp_46) {
const OneM2M__Types::RequestPrimitive& tmp_47 = v__reqPrimitive;
const UNIVERSAL_CHARSTRING& tmp_48 = tmp_47.requestIdentifier();
tmp_46 = tmp_48.is_present();
}
tmp_49 = tmp_46;
}
if (tmp_49) {
current_location.update_lineno(159);
/* OneM2M_DualFaceMapping.ttcn, line 159 */
v__reqID = oct2char(unichar2oct(const_cast< const OneM2M__Types::RequestPrimitive&>(v__reqPrimitive).requestIdentifier()));
}
}
current_location.update_lineno(162);
/* OneM2M_DualFaceMapping.ttcn, line 162 */
{
boolean tmp_54;
{
boolean tmp_51 = v__reqPrimitive.is_bound();
if(tmp_51) {
const OPTIONAL<OneM2M__Types::ResultContent>& tmp_52 = v__reqPrimitive.resultContent();
switch (tmp_52.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_51 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_51 = FALSE;
break;
default:
{
const OneM2M__Types::ResultContent& tmp_53 = (const OneM2M__Types::ResultContent&) tmp_52;
tmp_51 = tmp_53.is_present();
break;}
}
}
tmp_54 = tmp_51;
}
if (tmp_54) {
current_location.update_lineno(164);
/* OneM2M_DualFaceMapping.ttcn, line 164 */
v__resultContent = OneM2M__Types::ResultContent::enum2int(const_cast< const OneM2M__Types::RequestPrimitive&>(v__reqPrimitive).resultContent()());
current_location.update_lineno(166);
/* OneM2M_DualFaceMapping.ttcn, line 166 */
if ((OneM2M__Constants::HTTP__BINDING == v__protocol__type)) {
current_location.update_lineno(167);
/* OneM2M_DualFaceMapping.ttcn, line 167 */
{
CHARSTRING tmp_56;
tmp_56 = ((v__uri + cs_5) + int2str(v__resultContent));
v__uri = tmp_56;
}
}
}
}
current_location.update_lineno(175);
/* OneM2M_DualFaceMapping.ttcn, line 175 */
{
boolean tmp_57;
tmp_57 = (OneM2M__Constants::COAP__BINDING == v__protocol__type);
if (!tmp_57) tmp_57 = (OneM2M__Constants::HTTP__BINDING == v__protocol__type);
if (tmp_57) {
current_location.update_lineno(177);
/* OneM2M_DualFaceMapping.ttcn, line 177 */
CoAP__Types::CoAP__Message v__CoapMsgToSend;
current_location.update_lineno(178);
/* OneM2M_DualFaceMapping.ttcn, line 178 */
CoAP__Types::CoAP__ReqResp v__CoapMsg;
current_location.update_lineno(180);
/* OneM2M_DualFaceMapping.ttcn, line 180 */
INTEGER v__contentFormat(0);
current_location.update_lineno(182);
/* OneM2M_DualFaceMapping.ttcn, line 182 */
if ((OneM2M__Constants::XML__SERIAL == v__serial__type)) {
current_location.update_lineno(184);
/* OneM2M_DualFaceMapping.ttcn, line 184 */
v__contentFormat = OneM2M__Constants::APPLICATION__XML__COAP;
}
else {
current_location.update_lineno(186);
/* OneM2M_DualFaceMapping.ttcn, line 186 */
if ((OneM2M__Constants::JSON__SERIAL == v__serial__type)) {
current_location.update_lineno(188);
/* OneM2M_DualFaceMapping.ttcn, line 188 */
v__contentFormat = OneM2M__Constants::APPLICATION__JSON__COAP;
}
}
current_location.update_lineno(192);
/* OneM2M_DualFaceMapping.ttcn, line 192 */
if ((OneM2M__Constants::COAP__BINDING == v__protocol__type)) {
current_location.update_lineno(195);
/* OneM2M_DualFaceMapping.ttcn, line 195 */
csList = f__split__uri(v__uri, cs_3);
current_location.update_lineno(197);
/* OneM2M_DualFaceMapping.ttcn, line 197 */
if ((1 == v__operation)) {
current_location.update_lineno(200);
/* OneM2M_DualFaceMapping.ttcn, line 200 */
v__payload = OneM2M__Primitive__EncDec::f__encode__requestPrimitive(v__reqPrimitive, v__serial__type);
current_location.update_lineno(203);
/* OneM2M_DualFaceMapping.ttcn, line 203 */
if ((v__payload != cs_0)) {
current_location.update_lineno(204);
/* OneM2M_DualFaceMapping.ttcn, line 204 */
v__payload = f__serialization__Enc(v__payload, v__serial__type);
}
current_location.update_lineno(209);
/* OneM2M_DualFaceMapping.ttcn, line 209 */
v__CoapMsg = oneM2MTester__Template::t__COAP__POST__request(v__contentFormat, v__ty, v__from, v__reqID, v__payload).valueof();
{
current_location.update_lineno(212);
/* OneM2M_DualFaceMapping.ttcn, line 212 */
INTEGER i(0);
current_location.update_lineno(212);
/* OneM2M_DualFaceMapping.ttcn, line 212 */
for ( ; ; ) {
current_location.update_lineno(212);
/* OneM2M_DualFaceMapping.ttcn, line 212 */
if (!(i < csList.lengthof())) break;
current_location.update_lineno(214);
/* OneM2M_DualFaceMapping.ttcn, line 214 */
if ((const_cast< const CoAP__Types::Charstring__List&>(csList)[i] != cs_0)) {
current_location.update_lineno(216);
/* OneM2M_DualFaceMapping.ttcn, line 216 */
{
CoAP__Types::CoAP__Options& tmp_65 = v__CoapMsg.options()()[(i + 6)]; /* 7388 */
tmp_65.uri__path() = const_cast< const CoAP__Types::Charstring__List&>(csList)[i];
}
current_location.update_lineno(217);
/* OneM2M_DualFaceMapping.ttcn, line 217 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-outprint elements of Coap options");
const_cast< const CoAP__Types::CoAP__ReqResp&>(v__CoapMsg).options()()[(i + 6)].log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(219);
/* OneM2M_DualFaceMapping.ttcn, line 219 */
v__len = i;
}
current_location.update_lineno(212);
/* OneM2M_DualFaceMapping.ttcn, line 212 */
{
INTEGER tmp_67;
++i;
}
}
}
current_location.update_lineno(225);
/* OneM2M_DualFaceMapping.ttcn, line 225 */
{
boolean tmp_71;
{
boolean tmp_68 = v__reqPrimitive.is_bound();
if(tmp_68) {
const OPTIONAL<OneM2M__Types::ResultContent>& tmp_69 = v__reqPrimitive.resultContent();
switch (tmp_69.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_68 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_68 = FALSE;
break;
default:
{
const OneM2M__Types::ResultContent& tmp_70 = (const OneM2M__Types::ResultContent&) tmp_69;
tmp_68 = tmp_70.is_present();
break;}
}
}
tmp_71 = tmp_68;
}
if (tmp_71) {
current_location.update_lineno(227);
/* OneM2M_DualFaceMapping.ttcn, line 227 */
{
CoAP__Types::CoAP__Options& tmp_73 = v__CoapMsg.options()()[(v__len + 7)]; /* 7388 */
tmp_73.uri__query() = (cs_6 + int2str(v__resultContent));
}
}
}
}
else {
current_location.update_lineno(232);
/* OneM2M_DualFaceMapping.ttcn, line 232 */
boolean tmp_74;
{
boolean tmp_75;
tmp_75 = (2 == v__operation);
if (!tmp_75) tmp_75 = (3 == v__operation);
tmp_74 = tmp_75;
}
if (!tmp_74) tmp_74 = (4 == v__operation);
if (tmp_74) {
current_location.update_lineno(235);
/* OneM2M_DualFaceMapping.ttcn, line 235 */
if ((2 == v__operation)) {
current_location.update_lineno(237);
/* OneM2M_DualFaceMapping.ttcn, line 237 */
v__CoapMsg = oneM2MTester__Template::t__COAP__GET__request(v__contentFormat, v__from, v__reqID).valueof();
}
else {
current_location.update_lineno(239);
/* OneM2M_DualFaceMapping.ttcn, line 239 */
if ((3 == v__operation)) {
current_location.update_lineno(242);
/* OneM2M_DualFaceMapping.ttcn, line 242 */
v__payload = OneM2M__Primitive__EncDec::f__encode__requestPrimitive(v__reqPrimitive, v__serial__type);
current_location.update_lineno(245);
/* OneM2M_DualFaceMapping.ttcn, line 245 */
if ((v__payload != cs_0)) {
current_location.update_lineno(246);
/* OneM2M_DualFaceMapping.ttcn, line 246 */
v__payload = f__serialization__Enc(v__payload, v__serial__type);
}
current_location.update_lineno(250);
/* OneM2M_DualFaceMapping.ttcn, line 250 */
v__CoapMsg = oneM2MTester__Template::t__COAP__PUT__request(v__contentFormat, v__from, v__reqID, v__payload).valueof();
}
else {
current_location.update_lineno(252);
/* OneM2M_DualFaceMapping.ttcn, line 252 */
if ((4 == v__operation)) {
current_location.update_lineno(254);
/* OneM2M_DualFaceMapping.ttcn, line 254 */
v__CoapMsg = oneM2MTester__Template::t__COAP__DELETE__request(v__contentFormat, v__from, v__reqID).valueof();
}
}
}
{
current_location.update_lineno(259);
/* OneM2M_DualFaceMapping.ttcn, line 259 */
INTEGER i(0);
current_location.update_lineno(259);
/* OneM2M_DualFaceMapping.ttcn, line 259 */
for ( ; ; ) {
current_location.update_lineno(259);
/* OneM2M_DualFaceMapping.ttcn, line 259 */
if (!(i < csList.lengthof())) break;
current_location.update_lineno(261);
/* OneM2M_DualFaceMapping.ttcn, line 261 */
if ((const_cast< const CoAP__Types::Charstring__List&>(csList)[i] != cs_0)) {
current_location.update_lineno(263);
/* OneM2M_DualFaceMapping.ttcn, line 263 */
{
CoAP__Types::CoAP__Options& tmp_82 = v__CoapMsg.options()()[(i + 5)]; /* 7388 */
tmp_82.uri__path() = const_cast< const CoAP__Types::Charstring__List&>(csList)[i];
}
current_location.update_lineno(264);
/* OneM2M_DualFaceMapping.ttcn, line 264 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-outprint elements of Coap options");
const_cast< const CoAP__Types::CoAP__ReqResp&>(v__CoapMsg).options()()[(i + 5)].log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(266);
/* OneM2M_DualFaceMapping.ttcn, line 266 */
v__len = i;
}
current_location.update_lineno(259);
/* OneM2M_DualFaceMapping.ttcn, line 259 */
{
INTEGER tmp_84;
++i;
}
}
}
current_location.update_lineno(272);
/* OneM2M_DualFaceMapping.ttcn, line 272 */
{
boolean tmp_88;
{
boolean tmp_85 = v__reqPrimitive.is_bound();
if(tmp_85) {
const OPTIONAL<OneM2M__Types::ResultContent>& tmp_86 = v__reqPrimitive.resultContent();
switch (tmp_86.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_85 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_85 = FALSE;
break;
default:
{
const OneM2M__Types::ResultContent& tmp_87 = (const OneM2M__Types::ResultContent&) tmp_86;
tmp_85 = tmp_87.is_present();
break;}
}
}
tmp_88 = tmp_85;
}
if (tmp_88) {
current_location.update_lineno(273);
/* OneM2M_DualFaceMapping.ttcn, line 273 */
{
CoAP__Types::CoAP__Options& tmp_90 = v__CoapMsg.options()()[(v__len + 6)]; /* 7388 */
tmp_90.uri__query() = (cs_6 + int2str(v__resultContent));
}
}
}
}
else {
current_location.update_lineno(278);
/* OneM2M_DualFaceMapping.ttcn, line 278 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSendNot supported operation type!");
v__operation.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
current_location.update_lineno(282);
/* OneM2M_DualFaceMapping.ttcn, line 282 */
v__CoapMsgToSend.msg() = v__CoapMsg;
current_location.update_lineno(286);
/* OneM2M_DualFaceMapping.ttcn, line 286 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-v_CoapMsgToSend-CoAP Message: ");
v__CoapMsgToSend.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(289);
/* OneM2M_DualFaceMapping.ttcn, line 289 */
INTEGER int__debug(CoAP__Types::f__CoAP__enc(v__CoapMsgToSend, v__encoded__msg));
current_location.update_lineno(292);
/* OneM2M_DualFaceMapping.ttcn, line 292 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-f_CoAP_enc: encoded CoAP message:\n");
v__encoded__msg.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
else {
current_location.update_lineno(294);
/* OneM2M_DualFaceMapping.ttcn, line 294 */
if ((OneM2M__Constants::HTTP__BINDING == v__protocol__type)) {
current_location.update_lineno(296);
/* OneM2M_DualFaceMapping.ttcn, line 296 */
HTTPmsg__Types::HTTPRequest v__httpReqMsg;
current_location.update_lineno(297);
/* OneM2M_DualFaceMapping.ttcn, line 297 */
HTTPmsg__Types::HTTPMessage v__httpMsgToSend;
current_location.update_lineno(298);
/* OneM2M_DualFaceMapping.ttcn, line 298 */
CHARSTRING v__accept;
current_location.update_lineno(301);
/* OneM2M_DualFaceMapping.ttcn, line 301 */
v__accept = (OneM2M__Constants::ACCEPT__BASE + v__serial__type);
current_location.update_lineno(303);
/* OneM2M_DualFaceMapping.ttcn, line 303 */
if ((1 == v__operation)) {
current_location.update_lineno(305);
/* OneM2M_DualFaceMapping.ttcn, line 305 */
v__contentType = (((OneM2M__Constants::CONTENT__TYPE__BASE + v__serial__type) + cs_7) + int2str(v__ty));
current_location.update_lineno(308);
/* OneM2M_DualFaceMapping.ttcn, line 308 */
v__payload = OneM2M__Primitive__EncDec::f__encode__requestPrimitive(v__reqPrimitive, v__serial__type);
current_location.update_lineno(311);
/* OneM2M_DualFaceMapping.ttcn, line 311 */
if ((v__payload != cs_0)) {
current_location.update_lineno(312);
/* OneM2M_DualFaceMapping.ttcn, line 312 */
v__payload = f__serialization__Enc(v__payload, v__serial__type);
}
current_location.update_lineno(316);
/* OneM2M_DualFaceMapping.ttcn, line 316 */
v__httpReqMsg = oneM2MTester__Template::t__HTTP__POST__request(connectId__init, v__uri, v__accept, v__from, v__reqID, v__contentType, v__payload).valueof();
}
else {
current_location.update_lineno(318);
/* OneM2M_DualFaceMapping.ttcn, line 318 */
if ((2 == v__operation)) {
current_location.update_lineno(320);
/* OneM2M_DualFaceMapping.ttcn, line 320 */
v__httpReqMsg = oneM2MTester__Template::t__HTTP__GET__request(connectId__init, v__uri, v__accept, v__from, v__reqID).valueof();
}
else {
current_location.update_lineno(322);
/* OneM2M_DualFaceMapping.ttcn, line 322 */
if ((3 == v__operation)) {
current_location.update_lineno(325);
/* OneM2M_DualFaceMapping.ttcn, line 325 */
v__payload = OneM2M__Primitive__EncDec::f__encode__requestPrimitive(v__reqPrimitive, v__serial__type);
current_location.update_lineno(328);
/* OneM2M_DualFaceMapping.ttcn, line 328 */
if ((v__payload != cs_0)) {
current_location.update_lineno(329);
/* OneM2M_DualFaceMapping.ttcn, line 329 */
v__payload = f__serialization__Enc(v__payload, v__serial__type);
}
current_location.update_lineno(333);
/* OneM2M_DualFaceMapping.ttcn, line 333 */
v__contentType = (OneM2M__Constants::CONTENT__TYPE__BASE + v__serial__type);
current_location.update_lineno(335);
/* OneM2M_DualFaceMapping.ttcn, line 335 */
v__httpReqMsg = oneM2MTester__Template::t__HTTP__PUT__request(connectId__init, v__uri, v__accept, v__from, v__reqID, v__contentType, v__payload).valueof();
}
else {
current_location.update_lineno(337);
/* OneM2M_DualFaceMapping.ttcn, line 337 */
if ((4 == v__operation)) {
current_location.update_lineno(339);
/* OneM2M_DualFaceMapping.ttcn, line 339 */
v__httpReqMsg = oneM2MTester__Template::t__HTTP__DELETE__request(connectId__init, v__uri, v__accept, v__from, v__reqID).valueof();
}
else {
current_location.update_lineno(342);
/* OneM2M_DualFaceMapping.ttcn, line 342 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-Not supported operation type!");
v__operation.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
}
}
current_location.update_lineno(346);
/* OneM2M_DualFaceMapping.ttcn, line 346 */
v__httpMsgToSend.request() = v__httpReqMsg;
current_location.update_lineno(350);
/* OneM2M_DualFaceMapping.ttcn, line 350 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-HTTP Message to send ");
v__httpMsgToSend.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(352);
/* OneM2M_DualFaceMapping.ttcn, line 352 */
v__encoded__msg = HTTPmsg__Types::enc__HTTPMessage(v__httpMsgToSend);
current_location.update_lineno(353);
/* OneM2M_DualFaceMapping.ttcn, line 353 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_enc_M2MPrimitive_to_ASPSend-Encoded HTTP Message to send ");
v__encoded__msg.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
}
else {
current_location.update_lineno(358);
/* OneM2M_DualFaceMapping.ttcn, line 358 */
TTCN_Logger::log_str(TTCN_USER, "f_enc_M2MPrimitive_to_ASPSend-[warning]NOT SUPPORTED Serialization or Protocol binding TYPE !! ");
}
}
}
else {
current_location.update_lineno(361);
/* OneM2M_DualFaceMapping.ttcn, line 361 */
if (const_cast< const OneM2M__Types::MsgOut&>(p__msgout).primitive().ischosen(OneM2M__Types::MsgOut_primitive::ALT_responsePrimitive)) {
}
}
current_location.update_lineno(370);
/* OneM2M_DualFaceMapping.ttcn, line 370 */
p__asp__Send.connId() = connectId__init;
current_location.update_lineno(372);
/* OneM2M_DualFaceMapping.ttcn, line 372 */
if ((OneM2M__Constants::HTTP__BINDING == v__protocol__type)) {
current_location.update_lineno(374);
/* OneM2M_DualFaceMapping.ttcn, line 374 */
{
Socket__API__Definitions::ProtoTuple& tmp_107 = p__asp__Send.proto(); /* 7388 */
tmp_107.tcp() = NULL_VALUE;
}
}
else {
current_location.update_lineno(376);
/* OneM2M_DualFaceMapping.ttcn, line 376 */
if ((OneM2M__Constants::COAP__BINDING == v__protocol__type)) {
current_location.update_lineno(378);
/* OneM2M_DualFaceMapping.ttcn, line 378 */
{
Socket__API__Definitions::ProtoTuple& tmp_109 = p__asp__Send.proto(); /* 7388 */
tmp_109.udp() = NULL_VALUE;
}
}
}
current_location.update_lineno(381);
/* OneM2M_DualFaceMapping.ttcn, line 381 */
p__asp__Send.msg() = v__encoded__msg;
}
}
}

INTEGER f__dec__ASPRecvFrom__to__M2MPrimitive(const IPL4asp__Types::ASP__RecvFrom& p__aspRecvFrom, OneM2M__Types::MsgIn& p__msgin)
{
TTCN_Location current_location("OneM2M_DualFaceMapping.ttcn", 396, TTCN_Location::LOCATION_FUNCTION, "f_dec_ASPRecvFrom_to_M2MPrimitive");
p__msgin.clean_up();
current_location.update_lineno(398);
/* OneM2M_DualFaceMapping.ttcn, line 398 */
OneM2M__Types::MsgIn v__msgIn;
current_location.update_lineno(399);
/* OneM2M_DualFaceMapping.ttcn, line 399 */
OneM2M__Types::ResponsePrimitive v__responsePrimitive;
current_location.update_lineno(400);
/* OneM2M_DualFaceMapping.ttcn, line 400 */
OneM2M__Types::ResponseStatusCode v__responseStatusCode;
current_location.update_lineno(402);
/* OneM2M_DualFaceMapping.ttcn, line 402 */
Mqtt__v3__1__1__Types::MQTT__v3__1__1__Message v__mqttMsg;
current_location.update_lineno(403);
/* OneM2M_DualFaceMapping.ttcn, line 403 */
IPL4asp__Types::ASP__RecvFrom v__ipl4Recv(p__aspRecvFrom);
current_location.update_lineno(404);
/* OneM2M_DualFaceMapping.ttcn, line 404 */
OCTETSTRING v__aspRecv__msg;
current_location.update_lineno(405);
/* OneM2M_DualFaceMapping.ttcn, line 405 */
OCTETSTRING v__mqtt__payload;
current_location.update_lineno(406);
/* OneM2M_DualFaceMapping.ttcn, line 406 */
CHARSTRING v__protocol__type(f__upper2lower(OneM2M__Pixits::PX__PROTOCOL__BINDING));
current_location.update_lineno(407);
/* OneM2M_DualFaceMapping.ttcn, line 407 */
CHARSTRING v__serial__type(f__upper2lower(OneM2M__Pixits::PX__SERIALIZATION));
current_location.update_lineno(409);
/* OneM2M_DualFaceMapping.ttcn, line 409 */
CHARSTRING v__encoded__primitiveContent(cs_0);
current_location.update_lineno(411);
/* OneM2M_DualFaceMapping.ttcn, line 411 */
BOOLEAN enable__rsp__decode(TRUE);
current_location.update_lineno(414);
/* OneM2M_DualFaceMapping.ttcn, line 414 */
{
boolean tmp_114;
{
boolean tmp_111 = v__ipl4Recv.is_bound();
if(tmp_111) {
const IPL4asp__Types::ASP__RecvFrom& tmp_112 = v__ipl4Recv;
const OCTETSTRING& tmp_113 = tmp_112.msg();
tmp_111 = tmp_113.is_present();
}
tmp_114 = tmp_111;
}
if (tmp_114) {
current_location.update_lineno(416);
/* OneM2M_DualFaceMapping.ttcn, line 416 */
v__aspRecv__msg = const_cast< const IPL4asp__Types::ASP__RecvFrom&>(v__ipl4Recv).msg();
current_location.update_lineno(418);
/* OneM2M_DualFaceMapping.ttcn, line 418 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitivev_ipl4Recv.msg(ispresent)");
current_location.update_lineno(420);
/* OneM2M_DualFaceMapping.ttcn, line 420 */
{
boolean tmp_116;
tmp_116 = (OneM2M__Constants::HTTP__BINDING == v__protocol__type);
if (!tmp_116) tmp_116 = (OneM2M__Constants::COAP__BINDING == v__protocol__type);
if (tmp_116) {
current_location.update_lineno(422);
/* OneM2M_DualFaceMapping.ttcn, line 422 */
if ((OneM2M__Constants::HTTP__BINDING == v__protocol__type)) {
current_location.update_lineno(424);
/* OneM2M_DualFaceMapping.ttcn, line 424 */
HTTPmsg__Types::HTTPMessage v__httpMsg;
current_location.update_lineno(425);
/* OneM2M_DualFaceMapping.ttcn, line 425 */
HTTPmsg__Types::HTTPResponse v__httpResp;
current_location.update_lineno(426);
/* OneM2M_DualFaceMapping.ttcn, line 426 */
HTTPmsg__Types::HeaderLines v__headerLines;
current_location.update_lineno(427);
/* OneM2M_DualFaceMapping.ttcn, line 427 */
HTTPmsg__Types::HeaderLine v__header;
current_location.update_lineno(428);
/* OneM2M_DualFaceMapping.ttcn, line 428 */
CHARSTRING v__headerName(cs_0);
current_location.update_lineno(429);
/* OneM2M_DualFaceMapping.ttcn, line 429 */
CHARSTRING v__headerValue(cs_0);
current_location.update_lineno(430);
/* OneM2M_DualFaceMapping.ttcn, line 430 */
CHARSTRING v__httpRespBody(cs_0);
current_location.update_lineno(433);
/* OneM2M_DualFaceMapping.ttcn, line 433 */
INTEGER decode__state(HTTPmsg__Types::dec__HTTPMessage(v__aspRecv__msg, v__httpMsg, HTTPmsg__Types::tsp__socket__debugging));
current_location.update_lineno(434);
/* OneM2M_DualFaceMapping.ttcn, line 434 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitivedec_HTTPMessage: return value (if equal to zero then all response are decoded): ");
decode__state.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(436);
/* OneM2M_DualFaceMapping.ttcn, line 436 */
if ((0 == decode__state)) {
current_location.update_lineno(437);
/* OneM2M_DualFaceMapping.ttcn, line 437 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitiveAll message are decoded!!");
current_location.update_lineno(438);
/* OneM2M_DualFaceMapping.ttcn, line 438 */
if (v__httpMsg.ischosen(HTTPmsg__Types::HTTPMessage::ALT_response)) {
current_location.update_lineno(440);
/* OneM2M_DualFaceMapping.ttcn, line 440 */
v__httpResp = const_cast< const HTTPmsg__Types::HTTPMessage&>(v__httpMsg).response();
current_location.update_lineno(442);
/* OneM2M_DualFaceMapping.ttcn, line 442 */
{
boolean tmp_121;
{
boolean tmp_118 = v__httpResp.is_bound();
if(tmp_118) {
const HTTPmsg__Types::HTTPResponse& tmp_119 = v__httpResp;
const HTTPmsg__Types::HeaderLines& tmp_120 = tmp_119.header();
tmp_118 = tmp_120.is_present();
}
tmp_121 = tmp_118;
}
if (tmp_121) {
current_location.update_lineno(443);
/* OneM2M_DualFaceMapping.ttcn, line 443 */
v__headerLines = const_cast< const HTTPmsg__Types::HTTPResponse&>(v__httpResp).header();
}
else {
current_location.update_lineno(446);
/* OneM2M_DualFaceMapping.ttcn, line 446 */
return 1;
}
}
current_location.update_lineno(449);
/* OneM2M_DualFaceMapping.ttcn, line 449 */
{
boolean tmp_126;
{
boolean tmp_123 = v__httpResp.is_bound();
if(tmp_123) {
const HTTPmsg__Types::HTTPResponse& tmp_124 = v__httpResp;
const CHARSTRING& tmp_125 = tmp_124.body();
tmp_123 = tmp_125.is_present();
}
tmp_126 = tmp_123;
}
if (tmp_126) {
current_location.update_lineno(450);
/* OneM2M_DualFaceMapping.ttcn, line 450 */
v__httpRespBody = const_cast< const HTTPmsg__Types::HTTPResponse&>(v__httpResp).body();
}
else {
current_location.update_lineno(452);
/* OneM2M_DualFaceMapping.ttcn, line 452 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-no http body is received!!");
}
}
}
else {
current_location.update_lineno(457);
/* OneM2M_DualFaceMapping.ttcn, line 457 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[ERROR]v_httpMsg.response(): No Response is included in the HTTPMessage !!");
current_location.update_lineno(458);
/* OneM2M_DualFaceMapping.ttcn, line 458 */
v__responsePrimitive.primitiveContent() = OMIT_VALUE;
}
{
current_location.update_lineno(463);
/* OneM2M_DualFaceMapping.ttcn, line 463 */
INTEGER i(0);
current_location.update_lineno(463);
/* OneM2M_DualFaceMapping.ttcn, line 463 */
for ( ; ; ) {
current_location.update_lineno(463);
/* OneM2M_DualFaceMapping.ttcn, line 463 */
if (!(i < v__headerLines.lengthof())) break;
current_location.update_lineno(465);
/* OneM2M_DualFaceMapping.ttcn, line 465 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[DEBUG] ENTER PARSING HTTP HEADERS!!");
current_location.update_lineno(467);
/* OneM2M_DualFaceMapping.ttcn, line 467 */
v__header = const_cast< const HTTPmsg__Types::HeaderLines&>(v__headerLines)[i];
current_location.update_lineno(468);
/* OneM2M_DualFaceMapping.ttcn, line 468 */
v__headerName = const_cast< const HTTPmsg__Types::HeaderLine&>(v__header).header__name();
current_location.update_lineno(469);
/* OneM2M_DualFaceMapping.ttcn, line 469 */
v__headerValue = const_cast< const HTTPmsg__Types::HeaderLine&>(v__header).header__value();
current_location.update_lineno(472);
/* OneM2M_DualFaceMapping.ttcn, line 472 */
if ((cs_8 == v__headerName)) {
current_location.update_lineno(474);
/* OneM2M_DualFaceMapping.ttcn, line 474 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[DEBUG] ENTER PARSING HTTP HEADERS!!");
current_location.update_lineno(476);
/* OneM2M_DualFaceMapping.ttcn, line 476 */
{
boolean tmp_135;
{
boolean tmp_132;
{
boolean tmp_133;
{
boolean tmp_134;
tmp_134 = (OneM2M__Constants::RSC__OK == v__headerValue);
if (!tmp_134) tmp_134 = (OneM2M__Constants::RSC__CREATED == v__headerValue);
tmp_133 = tmp_134;
}
if (!tmp_133) tmp_133 = (OneM2M__Constants::RSC__UPDATED == v__headerValue);
tmp_132 = tmp_133;
}
if (!tmp_132) tmp_132 = (OneM2M__Constants::RSC__DELETED == v__headerValue);
tmp_135 = (!(tmp_132));
}
if (tmp_135) {
current_location.update_lineno(478);
/* OneM2M_DualFaceMapping.ttcn, line 478 */
enable__rsp__decode = FALSE;
}
}
current_location.update_lineno(481);
/* OneM2M_DualFaceMapping.ttcn, line 481 */
INTEGER v__rsc__int(str2int(v__headerValue));
current_location.update_lineno(483);
/* OneM2M_DualFaceMapping.ttcn, line 483 */
v__responseStatusCode.int2enum(v__rsc__int);
current_location.update_lineno(485);
/* OneM2M_DualFaceMapping.ttcn, line 485 */
v__responsePrimitive.responseStatusCode() = v__responseStatusCode;
}
current_location.update_lineno(489);
/* OneM2M_DualFaceMapping.ttcn, line 489 */
if ((cs_9 == v__headerName)) {
current_location.update_lineno(491);
/* OneM2M_DualFaceMapping.ttcn, line 491 */
v__responsePrimitive.requestIdentifier() = v__headerValue;
}
current_location.update_lineno(463);
/* OneM2M_DualFaceMapping.ttcn, line 463 */
{
INTEGER tmp_139;
++i;
}
}
}
current_location.update_lineno(499);
/* OneM2M_DualFaceMapping.ttcn, line 499 */
{
boolean tmp_140;
tmp_140 = (v__httpRespBody != cs_0);
if (tmp_140) tmp_140 = (!(enable__rsp__decode));
if (tmp_140) {
current_location.update_lineno(501);
/* OneM2M_DualFaceMapping.ttcn, line 501 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[ERROR]ERROR HTTP MESSAGE!!");
}
}
current_location.update_lineno(505);
/* OneM2M_DualFaceMapping.ttcn, line 505 */
{
boolean tmp_141;
tmp_141 = (v__httpRespBody != cs_0);
if (tmp_141) tmp_141 = (v__serial__type != cs_0);
if ((tmp_141 && enable__rsp__decode)) {
current_location.update_lineno(506);
/* OneM2M_DualFaceMapping.ttcn, line 506 */
v__encoded__primitiveContent = f__primitiveContent__Dec(v__httpRespBody, v__serial__type);
current_location.update_lineno(507);
/* OneM2M_DualFaceMapping.ttcn, line 507 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitive-v_serial_type: ");
v__serial__type.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
}
else {
current_location.update_lineno(512);
/* OneM2M_DualFaceMapping.ttcn, line 512 */
v__responsePrimitive.primitiveContent() = OMIT_VALUE;
current_location.update_lineno(513);
/* OneM2M_DualFaceMapping.ttcn, line 513 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[ERROR]dec_HTTPMessage(): fail to decode HTTP message!!");
}
}
else {
current_location.update_lineno(516);
/* OneM2M_DualFaceMapping.ttcn, line 516 */
if ((OneM2M__Constants::COAP__BINDING == v__protocol__type)) {
current_location.update_lineno(518);
/* OneM2M_DualFaceMapping.ttcn, line 518 */
CoAP__Types::CoAP__Message v__coapMsg;
current_location.update_lineno(519);
/* OneM2M_DualFaceMapping.ttcn, line 519 */
CoAP__Types::CoAP__ReqResp v__coapReqResp;
current_location.update_lineno(520);
/* OneM2M_DualFaceMapping.ttcn, line 520 */
CoAP__Types::Header v__coapHeaderList;
current_location.update_lineno(521);
/* OneM2M_DualFaceMapping.ttcn, line 521 */
CoAP__Types::CoAP__OptionsList v__coapOptionList;
current_location.update_lineno(522);
/* OneM2M_DualFaceMapping.ttcn, line 522 */
OCTETSTRING v__coapPayload;
current_location.update_lineno(523);
/* OneM2M_DualFaceMapping.ttcn, line 523 */
CHARSTRING v__coapRespBody(cs_0);
current_location.update_lineno(525);
/* OneM2M_DualFaceMapping.ttcn, line 525 */
INTEGER decode__state(CoAP__Types::f__CoAP__dec(v__aspRecv__msg, v__coapMsg));
current_location.update_lineno(526);
/* OneM2M_DualFaceMapping.ttcn, line 526 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitivef_CoAP_dec: return value (if equal to zero then means all response are decoded): ");
decode__state.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(528);
/* OneM2M_DualFaceMapping.ttcn, line 528 */
if ((0 == decode__state)) {
current_location.update_lineno(529);
/* OneM2M_DualFaceMapping.ttcn, line 529 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive[f_CoAP_dec]-All message are decoded!!");
current_location.update_lineno(530);
/* OneM2M_DualFaceMapping.ttcn, line 530 */
if (v__coapMsg.ischosen(CoAP__Types::CoAP__Message::ALT_msg)) {
current_location.update_lineno(532);
/* OneM2M_DualFaceMapping.ttcn, line 532 */
v__coapReqResp = const_cast< const CoAP__Types::CoAP__Message&>(v__coapMsg).msg();
current_location.update_lineno(535);
/* OneM2M_DualFaceMapping.ttcn, line 535 */
{
boolean tmp_148;
{
boolean tmp_145 = v__coapReqResp.is_bound();
if(tmp_145) {
const CoAP__Types::CoAP__ReqResp& tmp_146 = v__coapReqResp;
const CoAP__Types::Header& tmp_147 = tmp_146.header();
tmp_145 = tmp_147.is_present();
}
tmp_148 = tmp_145;
}
if (tmp_148) {
current_location.update_lineno(536);
/* OneM2M_DualFaceMapping.ttcn, line 536 */
v__coapHeaderList = const_cast< const CoAP__Types::CoAP__ReqResp&>(v__coapReqResp).header();
}
else {
current_location.update_lineno(540);
/* OneM2M_DualFaceMapping.ttcn, line 540 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[oneM2MTester-WARNING] No CoAP_Types.Header is returned!!");
}
}
current_location.update_lineno(544);
/* OneM2M_DualFaceMapping.ttcn, line 544 */
{
boolean tmp_153;
{
boolean tmp_150 = v__coapReqResp.is_bound();
if(tmp_150) {
const OPTIONAL<CoAP__Types::CoAP__OptionsList>& tmp_151 = v__coapReqResp.options();
switch (tmp_151.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_150 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_150 = FALSE;
break;
default:
{
const CoAP__Types::CoAP__OptionsList& tmp_152 = (const CoAP__Types::CoAP__OptionsList&) tmp_151;
tmp_150 = tmp_152.is_present();
break;}
}
}
tmp_153 = tmp_150;
}
if (tmp_153) {
current_location.update_lineno(546);
/* OneM2M_DualFaceMapping.ttcn, line 546 */
BOOLEAN RQI__option__flag(FALSE);
current_location.update_lineno(547);
/* OneM2M_DualFaceMapping.ttcn, line 547 */
BOOLEAN RSC__option__flag(FALSE);
current_location.update_lineno(549);
/* OneM2M_DualFaceMapping.ttcn, line 549 */
v__coapOptionList = const_cast< const CoAP__Types::CoAP__ReqResp&>(v__coapReqResp).options();
{
current_location.update_lineno(551);
/* OneM2M_DualFaceMapping.ttcn, line 551 */
INTEGER i(0);
current_location.update_lineno(551);
/* OneM2M_DualFaceMapping.ttcn, line 551 */
for ( ; ; ) {
current_location.update_lineno(551);
/* OneM2M_DualFaceMapping.ttcn, line 551 */
if (!(i < v__coapOptionList.lengthof())) break;
current_location.update_lineno(553);
/* OneM2M_DualFaceMapping.ttcn, line 553 */
if (const_cast< const CoAP__Types::CoAP__OptionsList&>(v__coapOptionList)[i].ischosen(CoAP__Types::CoAP__Options::ALT_oneM2M__RQI)) {
current_location.update_lineno(555);
/* OneM2M_DualFaceMapping.ttcn, line 555 */
v__responsePrimitive.requestIdentifier() = const_cast< const CoAP__Types::CoAP__OptionsList&>(v__coapOptionList)[i].oneM2M__RQI();
current_location.update_lineno(556);
/* OneM2M_DualFaceMapping.ttcn, line 556 */
RQI__option__flag = TRUE;
}
current_location.update_lineno(561);
/* OneM2M_DualFaceMapping.ttcn, line 561 */
if (const_cast< const CoAP__Types::CoAP__OptionsList&>(v__coapOptionList)[i].ischosen(CoAP__Types::CoAP__Options::ALT_oneM2M__RSC)) {
current_location.update_lineno(562);
/* OneM2M_DualFaceMapping.ttcn, line 562 */
RSC__option__flag = TRUE;
current_location.update_lineno(564);
/* OneM2M_DualFaceMapping.ttcn, line 564 */
INTEGER v__coapRSC(const_cast< const CoAP__Types::CoAP__OptionsList&>(v__coapOptionList)[i].oneM2M__RSC());
current_location.update_lineno(566);
/* OneM2M_DualFaceMapping.ttcn, line 566 */
v__responseStatusCode.int2enum(v__coapRSC);
current_location.update_lineno(568);
/* OneM2M_DualFaceMapping.ttcn, line 568 */
v__responsePrimitive.responseStatusCode() = v__responseStatusCode;
current_location.update_lineno(570);
/* OneM2M_DualFaceMapping.ttcn, line 570 */
CHARSTRING v__coapRSC__tmp(int2str(v__coapRSC));
current_location.update_lineno(572);
/* OneM2M_DualFaceMapping.ttcn, line 572 */
{
boolean tmp_162;
{
boolean tmp_159;
{
boolean tmp_160;
{
boolean tmp_161;
tmp_161 = (OneM2M__Constants::RSC__OK == v__coapRSC__tmp);
if (!tmp_161) tmp_161 = (OneM2M__Constants::RSC__CREATED == v__coapRSC__tmp);
tmp_160 = tmp_161;
}
if (!tmp_160) tmp_160 = (OneM2M__Constants::RSC__UPDATED == v__coapRSC__tmp);
tmp_159 = tmp_160;
}
if (!tmp_159) tmp_159 = (OneM2M__Constants::RSC__DELETED == v__coapRSC__tmp);
tmp_162 = (!(tmp_159));
}
if (tmp_162) {
current_location.update_lineno(574);
/* OneM2M_DualFaceMapping.ttcn, line 574 */
enable__rsp__decode = FALSE;
}
}
}
current_location.update_lineno(551);
/* OneM2M_DualFaceMapping.ttcn, line 551 */
{
INTEGER tmp_164;
++i;
}
}
}
current_location.update_lineno(580);
/* OneM2M_DualFaceMapping.ttcn, line 580 */
{
boolean tmp_165;
{
boolean tmp_166;
tmp_166 = (!(RSC__option__flag));
if (!tmp_166) tmp_166 = (!(RQI__option__flag));
tmp_165 = tmp_166;
}
if (!tmp_165) tmp_165 = (!((RQI__option__flag && RSC__option__flag)));
if (tmp_165) {
current_location.update_lineno(582);
/* OneM2M_DualFaceMapping.ttcn, line 582 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[oneM2MTester-WARNING]-Mandatory option oneM2M_RQI option or oneM2M_RSC is missing!!");
current_location.update_lineno(583);
/* OneM2M_DualFaceMapping.ttcn, line 583 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("[oneM2MTester]-Mandatory CoAP option is not returned"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(584);
/* OneM2M_DualFaceMapping.ttcn, line 584 */
TTCN_Runtime::stop_component(MTC_COMPREF);
}
}
}
}
current_location.update_lineno(591);
/* OneM2M_DualFaceMapping.ttcn, line 591 */
{
boolean tmp_170;
{
boolean tmp_167 = v__coapReqResp.is_bound();
if(tmp_167) {
const OPTIONAL<OCTETSTRING>& tmp_168 = v__coapReqResp.payload();
switch (tmp_168.get_selection()) {
case OPTIONAL_UNBOUND:
tmp_167 = FALSE;
break;
case OPTIONAL_OMIT:
tmp_167 = FALSE;
break;
default:
{
const OCTETSTRING& tmp_169 = (const OCTETSTRING&) tmp_168;
tmp_167 = tmp_169.is_present();
break;}
}
}
tmp_170 = tmp_167;
}
if (tmp_170) {
current_location.update_lineno(592);
/* OneM2M_DualFaceMapping.ttcn, line 592 */
v__coapPayload = const_cast< const CoAP__Types::CoAP__ReqResp&>(v__coapReqResp).payload();
current_location.update_lineno(594);
/* OneM2M_DualFaceMapping.ttcn, line 594 */
v__coapRespBody = oct2char(v__coapPayload);
current_location.update_lineno(596);
/* OneM2M_DualFaceMapping.ttcn, line 596 */
{
boolean tmp_173;
tmp_173 = (v__coapRespBody != cs_0);
if (tmp_173) tmp_173 = (v__serial__type != cs_0);
if ((tmp_173 && enable__rsp__decode)) {
current_location.update_lineno(598);
/* OneM2M_DualFaceMapping.ttcn, line 598 */
v__encoded__primitiveContent = f__primitiveContent__Dec(v__coapRespBody, v__serial__type);
}
}
}
else {
current_location.update_lineno(604);
/* OneM2M_DualFaceMapping.ttcn, line 604 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-No Coap body!!!!");
}
}
}
else {
current_location.update_lineno(608);
/* OneM2M_DualFaceMapping.ttcn, line 608 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[ERROR]v_coapMsg.msg(): No CoAP_ReqResp is included in the CoAP_Message response !!");
current_location.update_lineno(609);
/* OneM2M_DualFaceMapping.ttcn, line 609 */
v__responsePrimitive.primitiveContent() = OMIT_VALUE;
}
}
else {
current_location.update_lineno(614);
/* OneM2M_DualFaceMapping.ttcn, line 614 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[ERROR]f_CoAP_dec(): fail to decode coap message!!");
current_location.update_lineno(615);
/* OneM2M_DualFaceMapping.ttcn, line 615 */
v__responsePrimitive.primitiveContent() = OMIT_VALUE;
}
}
}
current_location.update_lineno(621);
/* OneM2M_DualFaceMapping.ttcn, line 621 */
if ((v__encoded__primitiveContent != cs_0)) {
current_location.update_lineno(622);
/* OneM2M_DualFaceMapping.ttcn, line 622 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitive-v_encoded_primitiveContent(): ");
v__encoded__primitiveContent.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(623);
/* OneM2M_DualFaceMapping.ttcn, line 623 */
BITSTRING v__bitStream(oct2bit(char2oct(v__encoded__primitiveContent)));
current_location.update_lineno(624);
/* OneM2M_DualFaceMapping.ttcn, line 624 */
INTEGER dec__state__int(-1);
current_location.update_lineno(626);
/* OneM2M_DualFaceMapping.ttcn, line 626 */
if (enable__rsp__decode) {
current_location.update_lineno(628);
/* OneM2M_DualFaceMapping.ttcn, line 628 */
if ((OneM2M__Constants::JSON__SERIAL == v__serial__type)) {
current_location.update_lineno(631);
/* OneM2M_DualFaceMapping.ttcn, line 631 */
dec__state__int = OneM2M__Primitive__EncDec::f__dec__JSON__resourcePrimitive(char2oct(v__encoded__primitiveContent), v__responsePrimitive.primitiveContent());
current_location.update_lineno(633);
/* OneM2M_DualFaceMapping.ttcn, line 633 */
if ((0 == dec__state__int)) {
current_location.update_lineno(634);
/* OneM2M_DualFaceMapping.ttcn, line 634 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitive-f_dec_JSON_resourcePrimitive(): decode suceeded!!: ");
dec__state__int.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
else {
current_location.update_lineno(637);
/* OneM2M_DualFaceMapping.ttcn, line 637 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitive-f_dec_JSON_resourcePrimitive(): decode failed!!: ");
dec__state__int.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(638);
/* OneM2M_DualFaceMapping.ttcn, line 638 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("[Titan Codec]Received protocol messages could not be decoded successfully"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(639);
/* OneM2M_DualFaceMapping.ttcn, line 639 */
TTCN_Runtime::stop_component(MTC_COMPREF);
}
}
else {
current_location.update_lineno(643);
/* OneM2M_DualFaceMapping.ttcn, line 643 */
if ((OneM2M__Constants::XML__SERIAL == v__serial__type)) {
current_location.update_lineno(646);
/* OneM2M_DualFaceMapping.ttcn, line 646 */
dec__state__int = OneM2M__Primitive__EncDec::f__dec__XER__resourcePrimitive(char2oct(v__encoded__primitiveContent), v__responsePrimitive.primitiveContent());
current_location.update_lineno(647);
/* OneM2M_DualFaceMapping.ttcn, line 647 */
if ((0 == dec__state__int)) {
current_location.update_lineno(649);
/* OneM2M_DualFaceMapping.ttcn, line 649 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitive-f_dec_XER_resourcePrimitive(): decode suceeded!!: ");
dec__state__int.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
else {
current_location.update_lineno(652);
/* OneM2M_DualFaceMapping.ttcn, line 652 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("f_dec_ASPRecvFrom_to_M2MPrimitive-f_dec_XER_resourcePrimitive(): decode failed!!: ");
dec__state__int.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(653);
/* OneM2M_DualFaceMapping.ttcn, line 653 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("[Titan Codec]Received protocol messages could not be decoded successfully"),TTCN_Logger::end_event_log2str()));
current_location.update_lineno(654);
/* OneM2M_DualFaceMapping.ttcn, line 654 */
TTCN_Runtime::stop_component(MTC_COMPREF);
}
}
}
}
else {
current_location.update_lineno(660);
/* OneM2M_DualFaceMapping.ttcn, line 660 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[oneM2MTester_DEBUG]enable_rsp_decode(false): Not decode oneM2M resource primitive!!");
current_location.update_lineno(661);
/* OneM2M_DualFaceMapping.ttcn, line 661 */
v__responsePrimitive.primitiveContent() = OMIT_VALUE;
}
}
else {
current_location.update_lineno(665);
/* OneM2M_DualFaceMapping.ttcn, line 665 */
TTCN_Logger::log_str(TTCN_USER, "f_dec_ASPRecvFrom_to_M2MPrimitive-[Decoding Parsing ERROR]f_primitiveContent_Dec(): PrimitiveContent object parsing failed!!");
current_location.update_lineno(666);
/* OneM2M_DualFaceMapping.ttcn, line 666 */
v__responsePrimitive.primitiveContent() = OMIT_VALUE;
}
}
else {
current_location.update_lineno(671);
/* OneM2M_DualFaceMapping.ttcn, line 671 */
return 1;
}
}
current_location.update_lineno(675);
/* OneM2M_DualFaceMapping.ttcn, line 675 */
v__responsePrimitive.to__() = OneM2M__Pixits::PX__AE1__ID__STEM;
current_location.update_lineno(676);
/* OneM2M_DualFaceMapping.ttcn, line 676 */
v__responsePrimitive.from__() = OneM2M__Pixits::PX__CSE__NAME;
current_location.update_lineno(677);
/* OneM2M_DualFaceMapping.ttcn, line 677 */
v__responsePrimitive.originatingTimestamp() = OMIT_VALUE;
current_location.update_lineno(678);
/* OneM2M_DualFaceMapping.ttcn, line 678 */
v__responsePrimitive.resultExpirationTimestamp() = OMIT_VALUE;
current_location.update_lineno(679);
/* OneM2M_DualFaceMapping.ttcn, line 679 */
v__responsePrimitive.eventCategory() = OMIT_VALUE;
current_location.update_lineno(680);
/* OneM2M_DualFaceMapping.ttcn, line 680 */
v__responsePrimitive.contentStatus() = OMIT_VALUE;
current_location.update_lineno(681);
/* OneM2M_DualFaceMapping.ttcn, line 681 */
v__responsePrimitive.contentOffset() = OMIT_VALUE;
current_location.update_lineno(682);
/* OneM2M_DualFaceMapping.ttcn, line 682 */
v__responsePrimitive.assignedTokenIdentifiers() = OMIT_VALUE;
current_location.update_lineno(683);
/* OneM2M_DualFaceMapping.ttcn, line 683 */
v__responsePrimitive.tokenRequestInformation() = OMIT_VALUE;
current_location.update_lineno(686);
/* OneM2M_DualFaceMapping.ttcn, line 686 */
v__msgIn.primitive().responsePrimitive() = v__responsePrimitive;
current_location.update_lineno(687);
/* OneM2M_DualFaceMapping.ttcn, line 687 */
p__msgin = v__msgIn;
current_location.update_lineno(688);
/* OneM2M_DualFaceMapping.ttcn, line 688 */
return 0;
}
else {
current_location.update_lineno(692);
/* OneM2M_DualFaceMapping.ttcn, line 692 */
return 1;
}
}
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("OneM2M_DualFaceMapping.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "OneM2M_DualFaceMapping");
IPL4asp__PortType::module_object.pre_init_module();
OneM2M__Primitive__EncDec::module_object.pre_init_module();
OneM2M__Pixits::module_object.pre_init_module();
oneM2MTester__Template::module_object.pre_init_module();
module_object.add_function("f_primitiveContent_Dec", (genericfunc_t)&f__primitiveContent__Dec, NULL);
module_object.add_function("f_upper2lower", (genericfunc_t)&f__upper2lower, NULL);
module_object.add_function("f_serialization_Enc", (genericfunc_t)&f__serialization__Enc, NULL);
module_object.add_function("f_split", (genericfunc_t)&f__split, NULL);
module_object.add_function("f_split_uri", (genericfunc_t)&f__split__uri, NULL);
module_object.add_function("f_replace", (genericfunc_t)&f__replace, NULL);
module_object.add_function("f_adressingFormatter", (genericfunc_t)&f__adressingFormatter, NULL);
module_object.add_function("f_enc_M2MPrimitive_to_ASPSend", (genericfunc_t)&f__enc__M2MPrimitive__to__ASPSend, NULL);
module_object.add_function("f_dec_ASPRecvFrom_to_M2MPrimitive", (genericfunc_t)&f__dec__ASPRecvFrom__to__M2MPrimitive, NULL);
}

static void post_init_module()
{
TTCN_Location current_location("OneM2M_DualFaceMapping.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "OneM2M_DualFaceMapping");
IPL4asp__PortType::module_object.post_init_module();
OneM2M__Primitive__EncDec::module_object.post_init_module();
OneM2M__Pixits::module_object.post_init_module();
oneM2MTester__Template::module_object.post_init_module();
}


} /* end of namespace */
