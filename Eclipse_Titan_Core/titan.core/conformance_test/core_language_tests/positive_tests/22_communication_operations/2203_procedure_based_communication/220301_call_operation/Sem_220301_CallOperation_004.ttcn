/******************************************************************************
 * Copyright (C) 2017 ETSI  All Rights Reserved.
 *
 * Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.3.1, Ensure that the IUT correctly handles non-blocking procedure call 
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

module Sem_220301_CallOperation_004 {

    /**
    * @desc testing of inline return template for remote procedure call
    * @param p_par1 only input parameter
    * @param p_par2 must have value 4 at return
    * @param p_par3 must have value 5 at return
    * @return must return value 1
    */
    signature p_Sem_220301_CallOperation_004(in integer p_par1, in integer p_par2) noblock;

    template p_Sem_220301_CallOperation_004 s_callTemplate := {
        p_par1 := 5,
		p_par2 := 3
    }

    type port remotePort procedure {
        inout p_Sem_220301_CallOperation_004;
    } with {extension "internal"}

    type component GeneralComp {
        port remotePort PCO;
    }

    function f_ClientQuery() runs on GeneralComp {
        var integer v_zero:=0;
        var integer v_one:=1;
        timer t_timer := 5.0;
	
        PCO.call(p_Sem_220301_CallOperation_004:s_callTemplate);  //call on non-blocking signature

    }

    function f_ServerResponses() runs on GeneralComp {
	
        var integer v_par1;
        var integer v_par2;
        timer t_timeout := 30.0;
		
        template p_Sem_220301_CallOperation_004 s_acceptTemplate := {
            p_par1 := ?,
            p_par2 := ?
        };

		
        t_timeout.start;
	
        alt {
            [] PCO.getcall(p_Sem_220301_CallOperation_004:s_acceptTemplate) -> param(v_par1, v_par2) {
               	if(v_par1 == 5 and v_par2 == 3)
				{ setverdict(pass); }
				else
				{ setverdict(fail); }
            }
            [] t_timeout.timeout {
                setverdict(fail);
            }
        }
	 
    }

    testcase TC_Sem_220301_CallOperation_004() runs on GeneralComp system GeneralComp {
        var GeneralComp server := GeneralComp.create("RemoteProcedure Service");
        var GeneralComp client := GeneralComp.create("RemoteProcedure Client");

        connect(server:PCO, client:PCO);

        server.start(f_ServerResponses());
        client.start(f_ClientQuery());

        alt {
            [] client.done {
                server.stop;
            }
        }

        alt {
            [] all component.done {}
        }

        disconnect(server:PCO, client:PCO);
    }

    control{
        execute(TC_Sem_220301_CallOperation_004());
    }

}
