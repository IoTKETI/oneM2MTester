/******************************************************************************
 * Copyright (C) 2017 ETSI  All Rights Reserved.
 *
 * Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.3.4, @decoded redirect value assignment of a charstring field
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

// The following requirements are tested:
// When assigning individual fields of a reply, encoded parameters can be decoded 
// prior to assignment using the @decoded modifier. In this case, the referenced 
// parameter on the right hand sided of the assignment shall be one of the 
// bitstring, hexstring, octetstring, charstring or universal charstring types. It 
// shall be decoded into a value of the same type as the variable on the left hand 
// side of the assignment.

module Sem_220304_getreply_operation_018 {
	type record R {
        integer id,
         universal charstring payload
    }

	type integer I with {variant "32 bit"};
    
    signature S() return R;
    
	type port P procedure {
		inout S;
	} with {extension "internal"}
	
    type component GeneralComp {
		port P p;
	}
    
    function f_server() runs on GeneralComp {
        var I v_src := 1953719668;
        var R v_rec := { id := 4, payload := oct2char(bit2oct(encvalue(v_src))) };
        p.getcall(S:{});
        p.reply(S:{} value v_rec)
    }
	
    testcase TC_Sem_220304_getreply_operation_018() runs on GeneralComp system GeneralComp {
        var I v_res;        
        var GeneralComp v_ptc := GeneralComp.create("PTC");
        connect(self:p, v_ptc:p);
        v_ptc.start(f_server());

        p.call(S:{}) {
            [] p.getreply(S: {} value R:?) -> value (v_res := @decoded payload) { 
                if (v_res == 1953719668) { setverdict (pass); }
                else { setverdict(fail); }
            }
            [] p.getreply { setverdict(fail); }
        }
    }

    control {
        execute(TC_Sem_220304_getreply_operation_018(), 5.0);
    }
} with { encode "RAW"}
