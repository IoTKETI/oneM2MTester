/******************************************************************************
 * Copyright (C) 2017 ETSI  All Rights Reserved.
 *
 * Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.3.6, incompatible decmatch and @decoded value redirect
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

// The following requirements are tested:
// When assigning implicitly decoded exception fields (by using the @decoded modifier) 
// in cases where the value or template to be matched uses the MatchDecodedContent 
// (decmatch) matching for the parameter to be stored, the type of the template in 
// the MatchDecodedContent matching shall be type-compatible to the type of the 
// variable the decoded field is stored into.

module NegSem_220306_catch_operation_014 {
	type record R {
        integer id,
        bitstring payload
    }
    signature S() exception (R);

	type integer I with {variant "32 bit"};
    
	type port P procedure {
		inout S;
	} with {extension "internal"}
	
    type component GeneralComp {
		port P p;
	}
    
    type record Wrapped {
        integer num
    } with { variant ""}
    
    function f_server() runs on GeneralComp {
        var I v_src := 5;
        var R v_rec := { id := 1, payload := encvalue(v_src) };
        p.getcall(S:{});
        p.raise(S, v_rec);
    }
	
    testcase TC_NegSem_220306_catch_operation_014() runs on GeneralComp system GeneralComp {
        var Wrapped v_res;        
        var GeneralComp v_ptc := GeneralComp.create("PTC");
        connect(self:p, v_ptc:p);
        v_ptc.start(f_server());

        p.call(S:{}) {
            [] p.catch(S, R:{ id := ?, payload := decmatch I:? }) -> value (v_res := @decoded payload) { 
                setverdict (pass);
            }
            [] p.catch { setverdict(pass); }
        }        
    }

    control {
        execute(TC_NegSem_220306_catch_operation_014(), 5.0);
    }
} with {encode "RAW"}
