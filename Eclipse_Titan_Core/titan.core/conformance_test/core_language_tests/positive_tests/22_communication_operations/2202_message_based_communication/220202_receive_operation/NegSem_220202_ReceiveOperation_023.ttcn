/******************************************************************************
 * Copyright (C) 2017 ETSI  All Rights Reserved.
 *
 * Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.2.2, incompatible decmatch and @decoded value redirect 
 ** @verdict  pass reject
 *****************************************************************/

// The following requirements are tested:
// When assigning implicitly decoded message fields (by using the @decoded modifier) in 
// cases where the value or template to be matched uses the MatchDecodedContent (decmatch) 
// matching for the field to be stored, the type of the template in the MatchDecodedContent 
// matching shall be type-compatible to the type of the variable the decoded field is stored into.

module NegSem_220202_ReceiveOperation_023 {

    type record R {
        integer id,
        bitstring payload
    }

	type integer I with { variant "32 bit"};
    
    type record Wrapped {
        octetstring num
    } with { variant ""}
    
    type port P message {
		inout R;
	} with {extension "internal"}
	
    type component GeneralComp {
		port P p;
	}
	    
    testcase TC_NegSem_220202_ReceiveOperation_023() runs on GeneralComp {
		var I input := 5;

        var Wrapped v_res;
        var R v_rec := { id := 0, payload := encvalue(input) };

		connect(self:p, self:p);

        p.send(v_rec);
        alt {
            [] p.receive(R:{ id := ?, payload := decmatch I:? }) -> value (v_res := @decoded payload) 			{}
            [] p.receive {}
        } 
        setverdict(pass);
    }

    control {
        execute(TC_NegSem_220202_ReceiveOperation_023(), 5.0);
    }
} with { encode "RAW" }
