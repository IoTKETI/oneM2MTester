/******************************************************************************
 * Copyright (C) 2017 ETSI  All Rights Reserved.
 *
 * Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:15.6.4, Test modification of signature parameters.
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

module Sem_150604_ReferencingSignatureParameters_001 {

/**
 * @desc testing of inline return template for remote procedure call
 * @param p_par1 only input parameter
 * @param p_par2 must have value 4 at return
 * @param p_par3 must have value 5 at return
 * @return must return value 1
 */
	 
	signature p_Sem_150604_ReferencingSignatureParameters_001(in integer p_par1, out integer p_par2, inout integer p_par3) return integer;

	template p_Sem_150604_ReferencingSignatureParameters_001 s_baseTemplate := { 
		p_par1 := 0, // p_par1 := - core dump
		p_par2 := 4,
		p_par3 := ?
	}

	template p_Sem_150604_ReferencingSignatureParameters_001 s_returnTemplate modifies s_baseTemplate := { 
		p_par3 := 5
	}

	template p_Sem_150604_ReferencingSignatureParameters_001 s_wrongTemplate modifies s_baseTemplate := { 
		p_par3 := 3
	}

	template p_Sem_150604_ReferencingSignatureParameters_001 s_callTemplate := { 
		p_par1 := 1,
		p_par2 := 0, // p_par2 := - core dump
		p_par3 := 3
	}

	type port remotePort procedure {
		inout p_Sem_150604_ReferencingSignatureParameters_001;
	} with {extension "internal"}

	type component GeneralComp {	    	    
		port remotePort PCO;
	}	

	function f_client() runs on GeneralComp
	{
		PCO.call(p_Sem_150604_ReferencingSignatureParameters_001:s_callTemplate, 5.0) {
	
			[] PCO.getreply(p_Sem_150604_ReferencingSignatureParameters_001:s_wrongTemplate value 1) {		
				setverdict(fail);
			} 
			[] PCO.getreply(p_Sem_150604_ReferencingSignatureParameters_001:s_returnTemplate value 2) {		
				setverdict(fail);
			} 
			[] PCO.getreply(p_Sem_150604_ReferencingSignatureParameters_001:s_returnTemplate value 1) {		//check that procedure is returning correct values
				setverdict(pass);
			} 
			[] PCO.catch (timeout) {
				setverdict(fail);
			}
	 	}
	}

	function f_server() runs on GeneralComp
	{
		var integer v_par1;
		var integer v_par3;
		timer t_timeout:=30.0;
		
		template p_Sem_150604_ReferencingSignatureParameters_001 s_acceptTemplate := {
		    p_par1 := ?,
		    p_par2 := ?,
		    p_par3 := ?
		};

		t_timeout.start;
	
		alt {
		  	 [] PCO.getcall(p_Sem_150604_ReferencingSignatureParameters_001:s_acceptTemplate) -> param(v_par1, v_par3) {
		    	PCO.reply(p_Sem_150604_ReferencingSignatureParameters_001:{p_par1 := 0, p_par2 := v_par1+v_par3, p_par3 := v_par1+v_par3+1} value v_par1);  	//procedure return values are sent // p_par1 := - core dump
				repeat;
		  	}
		  	[] t_timeout.timeout {
		    	setverdict(fail);
		  	}
		} 
	}

	testcase TC_Sem_150604_ReferencingSignatureParameters_001() runs on GeneralComp {

		var GeneralComp server := GeneralComp.create("RemoteProcedure Service");
       	var GeneralComp client := GeneralComp.create("RemoteProcedure Client");
		connect(server:PCO, client:PCO);
	
	 	server.start(f_server());
      	client.start(f_client());

       	alt {
           [] client.done {
               server.stop;
           }
       	}

       	alt {
           [] all component.done {}
       	} 

       	disconnect(server:PCO, client:PCO); 
	}

	control{
		execute(TC_Sem_150604_ReferencingSignatureParameters_001());
	}

}
