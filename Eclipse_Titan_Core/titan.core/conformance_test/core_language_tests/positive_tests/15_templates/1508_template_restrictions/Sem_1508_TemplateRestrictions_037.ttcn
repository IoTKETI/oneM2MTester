/******************************************************************************
 * Copyright (C) 2017 ETSI  All Rights Reserved.
 *
 * Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:15.8, Ensure that decoded content match is allowed for present template restriction
 ** @verdict  pass accept, ttcn3verdict:pass
 ***************************************************/

//RAW encoding adds extra bits, up to 8 bit, to a bitstring because it encodes anything into an octetstring

module Sem_1508_TemplateRestrictions_037 { 

	type record MessageType {
	  	hexstring payload
	}
	
	type record Mymessage {
	  	integer field1,
	  	bitstring field2 optional
    } with { variant " "};
	

   	type port loopbackPort message
	{inout MessageType} with {extension "internal"};
	

	type component GeneralComp {	    	    
		  port loopbackPort messagePort
	}	

	testcase TC_Sem_1508_TemplateRestrictions_037() runs on GeneralComp {
		var bitstring v_enc;
		var Mymessage v_testMessage;
		var MessageType Message;

		var MessageType got;
		var Mymessage dec_got;
		
		v_testMessage:=  {  
		    field1 := 10,
		    field2 := '1001'B
		} 

		Message.payload := bit2hex(encvalue(v_testMessage)); //encode message to payload
		      
 		template (present) MessageType mw_matchingTemplate:=
  		{  			
  			payload :=  decmatch Mymessage: {field1:= 10, field2 := '00001001'B}
  		} 

		connect(self:messagePort, self:messagePort);
	  	messagePort.send(Message);	//send message

		var bitstring bitpayload := hex2bit(Message.payload);

		var integer v_res := decvalue(bitpayload, dec_got);

		alt {
		 	[] messagePort.receive(mw_matchingTemplate) {
		    	setverdict(pass);
		 	}
		 	[] messagePort.receive(MessageType:?) -> value got  {
		    	setverdict(fail,"exepted: ", mw_matchingTemplate, " recieved: ", dec_got);
		 	}
		}
    
	}

	control{
		execute(TC_Sem_1508_TemplateRestrictions_037());
	}

} with { encode "RAW"}
 
