.******************************************************************************
.* Copyright (C) 2017 ETSI  All Rights Reserved.
.*
.* Contributors:
.*   Adrien Kirjak 
.*
.******************************************************************************/
text.
:lang eng.
.*
:docname.Test Description
:docno.xz/152 91-CRL 113 200 Uen
:rev.PA1
:date.2016-04-04
.*
:prep.ETH/XZ EADRKIR
:subresp.EADRKIR
:appr.ETH/XZ (Elemer Lelik)
:checked.
.*
:title.ETSI TTCN3 Negative Conformance Test
:contents level=3.
.*---------------------------------------------------------------------*
:h1.PREREQUISITES AND PREPARATIONS
.*---------------------------------------------------------------------*	
.*---------------------------------------------------------------------*
:h2.Scope of the Test Object
.*---------------------------------------------------------------------*
:xmp tab=1 nokeep.
This TD contains tests with not pass verdicts from ETSI TTCN3 Conformance Test's 24_test_verdict_operations and 26_module_control folders. 

:exmp.

.*---------------------------------------------------------------------*
:h2.Test Tools
.*---------------------------------------------------------------------*
:p.:us.Software Tools:eus.
:xmp tab=2 nokeep.

	SAtester.pl

:exmp.
:np.

.*---------------------------------------------------------------------*
:h1.REQUIREMENT-BASED TESTS
.*---------------------------------------------------------------------*

.*---------------------------------------------------------------------*
:h2. 24_test_verdict_operations folder
.*---------------------------------------------------------------------*

*---------------------------------------------------------------------*
:h3. Sem_2401_GlobalVerdict_002 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_002 Ensure overwriting rules for global verdict: inconc can overwrite none. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_GlobalVerdict_002 Sem_2401_GlobalVerdict_002.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for global verdict: inconc can overwrite none.
 ** @verdict  pass accept, ttcn3verdict:inconc
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/


module Sem_2401_GlobalVerdict_002 {
	type component GeneralComp {}
    
	function set_PTC_verdict_none() runs on GeneralComp {
		setverdict(none);
	}
	
	function set_PTC_verdict_inconc() runs on GeneralComp {
		setverdict(inconc);
	}
	
    testcase TC_Sem_2401_GlobalVerdict_002() runs on GeneralComp system GeneralComp {
    	var GeneralComp PTC1, PTC2;
    	
    	PTC1 :=  GeneralComp.create;
    	PTC2 :=  GeneralComp.create;
    	PTC1.start(set_PTC_verdict_none());
    	PTC2.start(set_PTC_verdict_inconc());
    	all component.done;
    	// Verdict inconc can overwrite none
    }
    
    control{
        execute(TC_Sem_2401_GlobalVerdict_002());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: inconc
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_GlobalVerdict_003 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_003 Ensure overwriting rules for global verdict: fail can overwrite none. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_GlobalVerdict_003 Sem_2401_GlobalVerdict_003.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for global verdict: fail can overwrite none.
 ** @verdict  pass accept, ttcn3verdict:fail
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/


module Sem_2401_GlobalVerdict_003 {
	type component GeneralComp {}
    
	function set_PTC_verdict_none() runs on GeneralComp {
		setverdict(none);
	}
	
	function set_PTC_verdict_fail() runs on GeneralComp {
		setverdict(fail);
	}
	
    testcase TC_Sem_2401_GlobalVerdict_003() runs on GeneralComp system GeneralComp {
    	var GeneralComp PTC1, PTC2;
    	
    	PTC1 :=  GeneralComp.create;
    	PTC2 :=  GeneralComp.create;
    	PTC1.start(set_PTC_verdict_none());
    	PTC2.start(set_PTC_verdict_fail());
    	all component.done;
    	// Verdict fail can overwrite none
    }
    
    control{
        execute(TC_Sem_2401_GlobalVerdict_003());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: fail
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_GlobalVerdict_005 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_005 Ensure overwriting rules for global verdict: inconc can overwrite pass. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_GlobalVerdict_005 Sem_2401_GlobalVerdict_005.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for global verdict: inconc can overwrite pass.
 ** @verdict  pass accept, ttcn3verdict:inconc
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/


module Sem_2401_GlobalVerdict_005 {
	type component GeneralComp {}
    
	function set_PTC_verdict_pass() runs on GeneralComp {
		setverdict(pass);
	}
	
	function set_PTC_verdict_inconc() runs on GeneralComp {
		setverdict(inconc);
	}
	
    testcase TC_Sem_2401_GlobalVerdict_005() runs on GeneralComp system GeneralComp {
    	var GeneralComp PTC1, PTC2;
    	
    	PTC1 :=  GeneralComp.create;
    	PTC2 :=  GeneralComp.create;
    	PTC1.start(set_PTC_verdict_pass());
    	PTC2.start(set_PTC_verdict_inconc());
    	all component.done;
    	// Verdict inconc can overwrite pass
    }
    
    control{
        execute(TC_Sem_2401_GlobalVerdict_005());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: inconc
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_GlobalVerdict_006 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_006 Ensure overwriting rules for global verdict: fail can overwrite pass. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_GlobalVerdict_006 Sem_2401_GlobalVerdict_006.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for global verdict: fail can overwrite pass.
 ** @verdict  pass accept, ttcn3verdict:fail
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/


module Sem_2401_GlobalVerdict_006 {
	type component GeneralComp {}
    
	function set_PTC_verdict_pass() runs on GeneralComp {
		setverdict(pass);
	}
	
	function set_PTC_verdict_fail() runs on GeneralComp {
		setverdict(fail);
	}
	
    testcase TC_Sem_2401_GlobalVerdict_006() runs on GeneralComp system GeneralComp {
    	var GeneralComp PTC1, PTC2;
    	
    	PTC1 :=  GeneralComp.create;
    	PTC2 :=  GeneralComp.create;
    	PTC1.start(set_PTC_verdict_pass());
    	PTC2.start(set_PTC_verdict_fail());
    	all component.done;
    	// Verdict fail can overwrite pass
    }
    
    control{
        execute(TC_Sem_2401_GlobalVerdict_006());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: fail
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_GlobalVerdict_007 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_007 Ensure overwriting rules for global verdict: none can't overwrite inconc. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_GlobalVerdict_007 Sem_2401_GlobalVerdict_007.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for global verdict: none can't overwrite inconc.
 ** @verdict  pass accept, ttcn3verdict:inconc
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/


module Sem_2401_GlobalVerdict_007 {
	type component GeneralComp {}
    
	function set_PTC_verdict_inconc() runs on GeneralComp {
		setverdict(inconc);
	}
	
	function set_PTC_verdict_none() runs on GeneralComp {
		setverdict(none);
	}
	
    testcase TC_Sem_2401_GlobalVerdict_007() runs on GeneralComp system GeneralComp {
    	var GeneralComp PTC1, PTC2;
    	
    	PTC1 :=  GeneralComp.create;
    	PTC2 :=  GeneralComp.create;
    	PTC1.start(set_PTC_verdict_inconc());
    	PTC2.start(set_PTC_verdict_none());
    	all component.done;
    	// Verdict none can't overwrite inconc
    }
    
    control{
        execute(TC_Sem_2401_GlobalVerdict_007());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: inconc
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_GlobalVerdict_008 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_008 Ensure overwriting rules for global verdict: pass can't overwrite inconc. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_GlobalVerdict_008 Sem_2401_GlobalVerdict_008.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for global verdict: pass can't overwrite inconc.
 ** @verdict  pass accept, ttcn3verdict:inconc
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/


module Sem_2401_GlobalVerdict_008 {
	type component GeneralComp {}
    
	function set_PTC_verdict_inconc() runs on GeneralComp {
		setverdict(inconc);
	}
	
	function set_PTC_verdict_pass() runs on GeneralComp {
		setverdict(pass);
	}
	
    testcase TC_Sem_2401_GlobalVerdict_008() runs on GeneralComp system GeneralComp {
    	var GeneralComp PTC1, PTC2;
    	
    	PTC1 :=  GeneralComp.create;
    	PTC2 :=  GeneralComp.create;
    	PTC1.start(set_PTC_verdict_inconc());
    	PTC2.start(set_PTC_verdict_pass());
    	all component.done;
    	// Verdict pass can't overwrite inconc
    }
    
    control{
        execute(TC_Sem_2401_GlobalVerdict_008());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: inconc
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_GlobalVerdict_009 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_009 Ensure overwriting rules for global verdict: fail can overwrite inconc. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_GlobalVerdict_009 Sem_2401_GlobalVerdict_009.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for global verdict: fail can overwrite inconc.
 ** @verdict  pass accept, ttcn3verdict:fail
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/


module Sem_2401_GlobalVerdict_009 {
	type component GeneralComp {}
    
	function set_PTC_verdict_inconc() runs on GeneralComp {
		setverdict(inconc);
	}
	
	function set_PTC_verdict_fail() runs on GeneralComp {
		setverdict(fail);
	}
	
    testcase TC_Sem_2401_GlobalVerdict_009() runs on GeneralComp system GeneralComp {
    	var GeneralComp PTC1, PTC2;
    	
    	PTC1 :=  GeneralComp.create;
    	PTC2 :=  GeneralComp.create;
    	PTC1.start(set_PTC_verdict_inconc());
    	PTC2.start(set_PTC_verdict_fail());
    	all component.done;
    	// Verdict fail can overwrite inconc
    }
    
    control{
        execute(TC_Sem_2401_GlobalVerdict_009());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: fail
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_GlobalVerdict_010 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_010 Ensure overwriting rules for global verdict: none can't overwrite fail. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_GlobalVerdict_010 Sem_2401_GlobalVerdict_010.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for global verdict: none can't overwrite fail.
 ** @verdict  pass accept, ttcn3verdict:fail
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/


module Sem_2401_GlobalVerdict_010 {
	type component GeneralComp {}
    
	function set_PTC_verdict_fail() runs on GeneralComp {
		setverdict(fail);
	}
	
	function set_PTC_verdict_none() runs on GeneralComp {
		setverdict(none);
	}
	
    testcase TC_Sem_2401_GlobalVerdict_010() runs on GeneralComp system GeneralComp {
    	var GeneralComp PTC1, PTC2;
    	
    	PTC1 :=  GeneralComp.create;
    	PTC2 :=  GeneralComp.create;
    	PTC1.start(set_PTC_verdict_fail());
    	PTC2.start(set_PTC_verdict_none());
    	all component.done;
    	// Verdict none can't overwrite fail
    }
    
    control{
        execute(TC_Sem_2401_GlobalVerdict_010());
    }	
}	
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: fail
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_GlobalVerdict_011 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_011 Ensure overwriting rules for global verdict: pass can't overwrite fail. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_GlobalVerdict_011 Sem_2401_GlobalVerdict_011.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for global verdict: pass can't overwrite fail.
 ** @verdict  pass accept, ttcn3verdict:fail
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/


module Sem_2401_GlobalVerdict_011 {
	type component GeneralComp {}
    
	function set_PTC_verdict_fail() runs on GeneralComp {
		setverdict(fail);
	}
	
	function set_PTC_verdict_pass() runs on GeneralComp {
		setverdict(pass);
	}
	
    testcase TC_Sem_2401_GlobalVerdict_011() runs on GeneralComp system GeneralComp {
    	var GeneralComp PTC1, PTC2;
    	
    	PTC1 :=  GeneralComp.create;
    	PTC2 :=  GeneralComp.create;
    	PTC1.start(set_PTC_verdict_fail());
    	PTC2.start(set_PTC_verdict_pass());
    	all component.done;
    	// Verdict pass can't overwrite fail
    }
    
    control{
        execute(TC_Sem_2401_GlobalVerdict_011());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: fail
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_GlobalVerdict_012 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_012 Ensure overwriting rules for global verdict: inconc can't overwrite fail. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_GlobalVerdict_012 Sem_2401_GlobalVerdict_012.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for global verdict: inconc can't overwrite fail.
 ** @verdict  pass accept, ttcn3verdict:fail
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/


module Sem_2401_GlobalVerdict_012 {
	type component GeneralComp {}
    
	function set_PTC_verdict_fail() runs on GeneralComp {
		setverdict(fail);
	}
	
	function set_PTC_verdict_inconc() runs on GeneralComp {
		setverdict(inconc);
	}
	
    testcase TC_Sem_2401_GlobalVerdict_012() runs on GeneralComp system GeneralComp {
    	var GeneralComp PTC1, PTC2;
    	
    	PTC1 :=  GeneralComp.create;
    	PTC2 :=  GeneralComp.create;
    	PTC1.start(set_PTC_verdict_fail());
    	PTC2.start(set_PTC_verdict_inconc());
    	all component.done;
    	// Verdict inconc can't overwrite fail
    }
    
    control{
        execute(TC_Sem_2401_GlobalVerdict_012());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: fail
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_LocalVerdict_002 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_002 Ensure overwriting rules for local verdict: inconc can overwrite none. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_LocalVerdict_002 Sem_2401_LocalVerdict_002.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for local verdict: inconc can overwrite none.
 ** @verdict  pass accept, ttcn3verdict:inconc
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.2 The Setverdict operation/The value of the local verdict is changed with the setverdict operation.
 **/


module Sem_2401_LocalVerdict_002 {
	type component GeneralComp {}
    
    testcase TC_Sem_2401_LocalVerdict_002() runs on GeneralComp {
		setverdict(none);
		setverdict(inconc);
		
		// The verdict is evaluated by the validation tool according to @verdict header
    }
    
    control{
        execute(TC_Sem_2401_LocalVerdict_002());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: inconc
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_LocalVerdict_003 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_003 Ensure overwriting rules for local verdict: fail can overwrite none. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_LocalVerdict_003 Sem_2401_LocalVerdict_003.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for local verdict: fail can overwrite none.
 ** @verdict  pass accept, ttcn3verdict:fail
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.2 The Setverdict operation/The value of the local verdict is changed with the setverdict operation.
 **/


module Sem_2401_LocalVerdict_003 {
	type component GeneralComp {}
    
    testcase TC_Sem_2401_LocalVerdict_003() runs on GeneralComp {
		setverdict(none);
		setverdict(fail);
		
		// The verdict is evaluated by the validation tool according to @verdict header
    }
    
    control{
        execute(TC_Sem_2401_LocalVerdict_003());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: fail
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_LocalVerdict_005 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_005 Ensure overwriting rules for local verdict: inconc can overwrite pass. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_LocalVerdict_005 Sem_2401_LocalVerdict_005.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for local verdict: inconc can overwrite pass.
 ** @verdict  pass accept, ttcn3verdict:inconc
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.2 The Setverdict operation/The value of the local verdict is changed with the setverdict operation.
 **/


module Sem_2401_LocalVerdict_005 {
	type component GeneralComp {}
    
    testcase TC_Sem_2401_LocalVerdict_005() runs on GeneralComp {
		setverdict(pass);
		setverdict(inconc);
		
		// The verdict is evaluated by the validation tool according to @verdict header
    }
    
    control{
        execute(TC_Sem_2401_LocalVerdict_005());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: inconc
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_LocalVerdict_006 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_006 Ensure overwriting rules for local verdict: fail can overwrite pass. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_LocalVerdict_006 Sem_2401_LocalVerdict_006.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for local verdict: fail can overwrite pass.
 ** @verdict  pass accept, ttcn3verdict:fail
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.2 The Setverdict operation/The value of the local verdict is changed with the setverdict operation.
 **/


module Sem_2401_LocalVerdict_006 {
	type component GeneralComp {}
    
    testcase TC_Sem_2401_LocalVerdict_006() runs on GeneralComp {
		setverdict(pass);
		setverdict(fail);
		
		// The verdict is evaluated by the validation tool according to @verdict header
    }
    
    control{
        execute(TC_Sem_2401_LocalVerdict_006());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: fail
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_LocalVerdict_007 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_007 Ensure overwriting rules for local verdict: none can't overwrite inconc. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_LocalVerdict_007 Sem_2401_LocalVerdict_007.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for local verdict: none can't overwrite inconc.
 ** @verdict  pass accept, ttcn3verdict:inconc
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.2 The Setverdict operation/The value of the local verdict is changed with the setverdict operation.
 **/


module Sem_2401_LocalVerdict_007 {
	type component GeneralComp {}
    
    testcase TC_Sem_2401_LocalVerdict_007() runs on GeneralComp {
		setverdict(inconc);
		setverdict(none);
		
		// The verdict is evaluated by the validation tool according to @verdict header
    }
    
    control{
        execute(TC_Sem_2401_LocalVerdict_007());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: inconc
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_LocalVerdict_008 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_008 Ensure overwriting rules for local verdict: pass can't overwrite inconc. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_LocalVerdict_008 Sem_2401_LocalVerdict_008.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for local verdict: pass can't overwrite inconc.
 ** @verdict  pass accept, ttcn3verdict:inconc
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.2 The Setverdict operation/The value of the local verdict is changed with the setverdict operation.
 **/


module Sem_2401_LocalVerdict_008 {
	type component GeneralComp {}
    
    testcase TC_Sem_2401_LocalVerdict_008() runs on GeneralComp {
		setverdict(inconc);
		setverdict(pass);
		
		// The verdict is evaluated by the validation tool according to @verdict header
    }
    
    control{
        execute(TC_Sem_2401_LocalVerdict_008());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: inconc
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_LocalVerdict_009 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_009 Ensure overwriting rules for local verdict: fail can overwrite inconc. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_LocalVerdict_009 Sem_2401_LocalVerdict_009.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for local verdict: fail can overwrite inconc.
 ** @verdict  pass accept, ttcn3verdict:fail
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.2 The Setverdict operation/The value of the local verdict is changed with the setverdict operation.
 **/


module Sem_2401_LocalVerdict_009 {
	type component GeneralComp {}
    
    testcase TC_Sem_2401_LocalVerdict_009() runs on GeneralComp {
		setverdict(inconc);
		setverdict(fail);
		
		// The verdict is evaluated by the validation tool according to @verdict header
    }
    
    control{
        execute(TC_Sem_2401_LocalVerdict_009());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: fail
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_LocalVerdict_010 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_010 Ensure overwriting rules for local verdict: none can't overwrite fail. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_LocalVerdict_010 Sem_2401_LocalVerdict_010.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for local verdict: none can't overwrite fail.
 ** @verdict  pass accept, ttcn3verdict:fail
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.2 The Setverdict operation/The value of the local verdict is changed with the setverdict operation.
 **/


module Sem_2401_LocalVerdict_010 {
	type component GeneralComp {}
    
    testcase TC_Sem_2401_LocalVerdict_010() runs on GeneralComp {
		setverdict(fail);
		setverdict(none);
		
		// The verdict is evaluated by the validation tool according to @verdict header
    }
    
    control{
        execute(TC_Sem_2401_LocalVerdict_010());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: fail
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_LocalVerdict_011 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_011 Ensure overwriting rules for local verdict: pass can't overwrite fail. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_LocalVerdict_011 Sem_2401_LocalVerdict_011.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for local verdict: pass can't overwrite fail.
 ** @verdict  pass accept, ttcn3verdict:fail
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.2 The Setverdict operation/The value of the local verdict is changed with the setverdict operation.
 **/


module Sem_2401_LocalVerdict_011 {
	type component GeneralComp {}
    
    testcase TC_Sem_2401_LocalVerdict_011() runs on GeneralComp {
		setverdict(fail);
		setverdict(pass);
		
		// The verdict is evaluated by the validation tool according to @verdict header
    }
    
    control{
        execute(TC_Sem_2401_LocalVerdict_011());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: fail
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2401_LocalVerdict_012 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2401_012 Ensure overwriting rules for local verdict: inconc can't overwrite fail. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2401_LocalVerdict_012 Sem_2401_LocalVerdict_012.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.1, Ensure overwriting rules for local verdict: inconc can't overwrite fail.
 ** @verdict  pass accept, ttcn3verdict:fail
 *****************************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.1 The Verdict mechanism/Overwriting rules for setverdict
 **/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.2 The Setverdict operation/The value of the local verdict is changed with the setverdict operation.
 **/


module Sem_2401_LocalVerdict_012 {
	type component GeneralComp {}
    
    testcase TC_Sem_2401_LocalVerdict_012() runs on GeneralComp {
		setverdict(fail);
		setverdict(inconc);
		
		// The verdict is evaluated by the validation tool according to @verdict header
    }
    
    control{
        execute(TC_Sem_2401_LocalVerdict_012());
    }	
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: fail
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2403_getverdict_002 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2403_002 Ensure getverdict returns the actual verdict inconc >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2403_getverdict_002 Sem_2403_getverdict_002.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:24.3, Ensure getverdict returns the actual verdict inconc
 ** @verdict  pass accept, ttcn3verdict:inconc
 ***************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.3  The Getverdict operation/Getverdict returns local verdict value
 **/

module Sem_2403_getverdict_002 {
    type component TComp {}
    
    testcase TC_Sem_2403_getverdict_002() runs on TComp {
        var verdicttype v_verdict;
        setverdict(inconc);
        v_verdict := getverdict;
        if (v_verdict != inconc)
        {
            setverdict(fail);
        }
        
    }
    
    control {
        execute(TC_Sem_2403_getverdict_002())
    } 
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: inconc
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2403_getverdict_004 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2403_004 Ensure getverdict returns the actual verdict fail >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2403_getverdict_004 Sem_2403_getverdict_004.ttcn >
/***************************************************
 ** @version  0.0.2
 ** @purpose  1:24.3, Ensure getverdict returns the actual verdict fail
 ** @verdict  pass accept, ttcn3verdict:fail
 ***************************************************/
/*
 * #reqname  /Requirements/24 Test verdict operations/24.3  The Getverdict operation/Getverdict returns local verdict value
 **/

module Sem_2403_getverdict_004 {
    type component TComp {}
    
    testcase TC_Sem_2403_getverdict_004() runs on TComp {
        var verdicttype v_verdict;
        setverdict(fail);
        v_verdict := getverdict;
        if (v_verdict != fail)
        {
        	// Set error verdict
            testcase.stop;
        }        
    }
    
    control {
        execute(TC_Sem_2403_getverdict_004())
    } 
}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: fail
<END_RESULT>

<END_TC>
:exmp

.*---------------------------------------------------------------------*
:h2. 26_module_control folder
.*---------------------------------------------------------------------*

*---------------------------------------------------------------------*
:h3. Sem_2601_ExecuteStatement_003 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2601_003 Ensure that the timeout specified with the execute statement is respected. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2601_ExecuteStatement_003 Sem_2601_ExecuteStatement_003.ttcn >
/*****************************************************************
 ** @version  0.0.1
 ** @purpose  1:26.1, Ensure that the timeout specified with the execute statement is respected.
 ** @verdict  pass accept, ttcn3verdict:error
 *****************************************************************/

module Sem_2601_ExecuteStatement_003 {

	type component GeneralComp { }

	testcase TC_Sem_2601_ExecuteStatement_003() runs on GeneralComp {
		alt { // this alt is intentionally blocking!
			[] any port.receive {
				repeat;
			}
			[else]
			{ repeat; }
		}
		setverdict(pass);
	}

	control {
		execute(TC_Sem_2601_ExecuteStatement_003(), 2.0); // let the testcase timeout after 2 seconds
	}

}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: error
<END_RESULT>
<RESULT COUNT 1>
Dynamic test case error: Guard timer has expired. Execution of current test case will be interrupted.
<END_RESULT>


<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2601_ExecuteStatement_004 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2601_004 Ensure that the verdict none works correctly. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2601_ExecuteStatement_004 Sem_2601_ExecuteStatement_004.ttcn >
/*****************************************************************
 ** @version  0.0.1
 ** @purpose  1:26.1, Ensure that the verdict none works correctly.
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

module Sem_2601_ExecuteStatement_004 {

	type component GeneralComp { }

	testcase TC_Sem_2601_ExecuteStatement_004() runs on GeneralComp {
		setverdict(none);
	}

	testcase TC_Sem_2601_ExecuteStatement_004_second(verdicttype p_verdict) runs on GeneralComp {
		if (p_verdict == none) {
			setverdict(pass);
		} else {
			setverdict(fail);
		}
	}

	control {
		var verdicttype v_result;
	
		v_result := execute(TC_Sem_2601_ExecuteStatement_004());
		execute(TC_Sem_2601_ExecuteStatement_004_second(v_result));
	}

}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: none
<END_RESULT>
<RESULT IF_PASS POSITIVE>
Verdict: pass
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2601_ExecuteStatement_006 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2601_006 Ensure that the verdict inconc works correctly. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2601_ExecuteStatement_006 Sem_2601_ExecuteStatement_006.ttcn >
/*****************************************************************
 ** @version  0.0.1
 ** @purpose  1:26.1, Ensure that the verdict inconc works correctly.
 ** @verdict  pass accept, ttcn3verdict:inconc
 *****************************************************************/

module Sem_2601_ExecuteStatement_006 {

	type component GeneralComp { }

	testcase TC_Sem_2601_ExecuteStatement_006() runs on GeneralComp {
		setverdict(inconc);
	}

	testcase TC_Sem_2601_ExecuteStatement_006_second(verdicttype p_verdict) runs on GeneralComp {
		if (p_verdict == inconc) {
			setverdict(pass);
		} else {
			setverdict(fail);
		}
	}

	control {
		var verdicttype v_result;
	
		v_result := execute(TC_Sem_2601_ExecuteStatement_006());
		execute(TC_Sem_2601_ExecuteStatement_006_second(v_result));
	}

}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: inconc
<END_RESULT>
<RESULT IF_PASS POSITIVE>
Verdict: pass
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2601_ExecuteStatement_008 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2601_008 Ensure that the user error sets the verdict error correctly. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2601_ExecuteStatement_008 Sem_2601_ExecuteStatement_008.ttcn >
/*****************************************************************
 ** @version  0.0.1
 ** @purpose  1:26.1, Ensure that the user error sets the verdict error correctly.
 ** @verdict  pass accept, ttcn3verdict:error
 *****************************************************************/

module Sem_2601_ExecuteStatement_008 {

    type component GeneralComp { }

    testcase TC_Sem_2601_ExecuteStatement_008() runs on GeneralComp {
        testcase.stop("User error!");
    }

    control {
        var verdicttype v_result;
	
        execute(TC_Sem_2601_ExecuteStatement_008());
    }

}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: error
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Sem_2602_TheControlPart_003 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 2602_003 Ensure that the selection of test cases can be achieven based on resulting verdict types. >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Sem_2602_TheControlPart_003 Sem_2602_TheControlPart_003.ttcn >
/*****************************************************************
 ** @version  0.0.1
 ** @purpose  1:26.2, Ensure that the selection of test cases can be achieven based on resulting verdict types.
 ** @verdict  pass accept, ttcn3verdict:fail
 *****************************************************************/

module Sem_2602_TheControlPart_003 {

    type component GeneralComp { }

    testcase TC_Sem_2602_TheControlPart_003() runs on GeneralComp {
        setverdict(pass);
    }

    testcase TC_Sem_2602_TheControlPart_003_second() runs on GeneralComp {
        setverdict(fail);
    }

    control {
        var verdicttype v_result;
        v_result := execute(TC_Sem_2602_TheControlPart_003());
	
        if (v_result == pass) {
            execute(TC_Sem_2602_TheControlPart_003_second());
        }
    }

}
<END_MODULE>

<RESULT IF_PASS POSITIVE>
Verdict: pass
<END_RESULT>
<RESULT IF_PASS POSITIVE>
Verdict: fail
<END_RESULT>

<END_TC>
:exmp

.*---------------------------------------------------------------------*
:h1.References
.*---------------------------------------------------------------------*
:list.
:li D='[1]'.1/174 02-CRL 113 200/5 Uen
:nl.Statement of Compliance for TITAN project
:li D='[2]'.ETSI ES 201 873-1, v4.7.1 Mockup v1 (2015-06):
:nl.Testing and Test Control Notation version 3.,
:nl.Part 1: TTCN-3 Core Language
:elist.
