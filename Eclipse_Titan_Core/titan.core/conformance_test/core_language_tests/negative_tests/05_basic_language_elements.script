.******************************************************************************
.* Copyright (C) 2017 ETSI  All Rights Reserved.
.*
.* Contributors:
.*   Adrien Kirjak 
.*
.******************************************************************************/
text.
:lang eng.
.*
:docname.Test Description
:docno.xz/152 91-CRL 113 200 Uen
:rev.PA1
:date.2016-04-04
.*
:prep.ETH/XZ EADRKIR
:subresp.EADRKIR
:appr.ETH/XZ (Elemer Lelik)
:checked.
.*
:title.ETSI TTCN3 Negative Conformance Test
:contents level=3.
.*---------------------------------------------------------------------*
:h1.PREREQUISITES AND PREPARATIONS
.*---------------------------------------------------------------------*	
.*---------------------------------------------------------------------*
:h2.Scope of the Test Object
.*---------------------------------------------------------------------*
:xmp tab=1 nokeep.
This TD contains negative tests from ETSI TTCN3 Conformance Test's 05_basic_language_elements folder. 

:exmp.

.*---------------------------------------------------------------------*
:h2.Test Tools
.*---------------------------------------------------------------------*
:p.:us.Software Tools:eus.
:xmp tab=2 nokeep.

	SAtester.pl

:exmp.
:np.

.*---------------------------------------------------------------------*
:h1.REQUIREMENT-BASED TESTS
.*---------------------------------------------------------------------*

.*---------------------------------------------------------------------*
:h2. 05_toplevel folder
.*---------------------------------------------------------------------*

*---------------------------------------------------------------------*
:h3. NegSyn_05_TopLevel_001 positive test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05_001 Ensure that when the IUT loads a module containing some definitions before the module declaration then the module is rejected. >

<COMPILE>

<MODULE TTCN NegSyn_05_TopLevel_001 NegSyn_05_TopLevel_001.ttcn >

const integer wrongTopLevel := 1;     
 
/*****************************************************************
 ** @version  0.0.1
 ** @purpose  1:5, Ensure that when the IUT loads a module containing some definitions before the module declaration then the module is rejected.
 ** @verdict  pass reject
 *****************************************************************/
module NegSyn_05_TopLevel_001 {

}
<END_MODULE>

<RESULT COUNT>
error: Cannot recognize file `NegSyn_05_TopLevel_001.ttcn' as an ASN.1 or TTCN-3 module.
<END_RESULT>

<END_TC>
:exmp

.*---------------------------------------------------------------------*
:h2. 0501_identifiers_and_keywords folder
.*---------------------------------------------------------------------*

*---------------------------------------------------------------------*
:h3. NegSem_0501_Identifier_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 0501_001 Ensure that cannot pass a charstring value to an integer variable.  >

<COMPILE>

<MODULE TTCN NegSem_0501_Identifier_001 NegSem_0501_Identifier_001.ttcn >
/*****************************************************************
 ** @version  0.0.1
 ** @purpose  1:5.1, Ensure that cannot pass a charstring value to an integer variable.
 ** @verdict  pass reject
 *****************************************************************/
module NegSem_0501_Identifier_001 {

	type component GeneralComp {	    	    
	}	

	testcase TC_NegSem_0501_Identifier_001() runs on GeneralComp {
		var integer v_i := "wrong_type";     
	}			

	control{
		execute(TC_NegSem_0501_Identifier_001(), 1.0);
	}

}
<END_MODULE>

<RESULT COUNT 1>
error: integer value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_0501_Identifier_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 0501_001 Ensure that when the IUT loads a module containing an identifier named with a keyword then the module is rejected.  >

<COMPILE>

<MODULE TTCN NegSyn_0501_Identifier_001 NegSyn_0501_Identifier_001.ttcn >
/*****************************************************************
 ** @version  0.0.1
 ** @purpose  1:5.1, Ensure that when the IUT loads a module containing an identifier named with a keyword then the module is rejected.
 ** @verdict  pass reject
 *****************************************************************/
module NegSyn_0501_Identifier_001 {

	type component GeneralComp {	    	    
	}	

	testcase TC_NegSyn_0501_Identifier_001() runs on GeneralComp {
		var integer component := 1;     
	}			

	control{
		execute(TC_NegSyn_0501_Identifier_001(), 1.0);
	}

}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `component': syntax error, unexpected ComponentKeyword, expecting Identifier
<END_RESULT>

<END_TC>
:exmp

.*---------------------------------------------------------------------*
:h2. 0502_scope_rules folder
.*---------------------------------------------------------------------*

*---------------------------------------------------------------------*
:h3. NegSem_0502_Scope_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 0502_001 Ensure that the IUT correctly handles definitions of local scope  >

<COMPILE>

<MODULE TTCN NegSem_0502_Scope_001 NegSem_0502_Scope_001.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @desc     Test cases for clause 5.2 Scope rules                     
 ** @purpose  1:5.2, Ensure that the IUT correctly handles definitions of local scope
 ** @verdict  pass reject
 ***************************************************/
module NegSem_0502_Scope_001 {

type component GeneralComp {	    	    
    var integer vc_component := 0;
}	

function f_funcScope() runs on GeneralComp {	    
    var integer v_function := 0;
}		

testcase TC_NegSem_0502_Scope_001() runs on GeneralComp {
    f_funcScope();
    if ( match(v_function, 0) ){
    }
}

control{
    var integer v_control := 0;
    execute(TC_NegSem_0502_Scope_001());
}

}
<END_MODULE>

<RESULT COUNT 1>
error: There is no local or imported definition with name `v_function'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_0502_Scope_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 0502_002 Ensure that the IUT correctly handles definitions of local scope  >

<COMPILE>

<MODULE TTCN NegSem_0502_Scope_002 NegSem_0502_Scope_002.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @desc     Test cases for clause 5.2 Scope rules                     
 ** @purpose  1:5.2, Ensure that the IUT correctly handles definitions of local scope
 ** @verdict  pass reject
 ***************************************************/
module NegSem_0502_Scope_002 {

type component GeneralComp {	    	    
    var integer vc_component := 0;
}	

function f_funcScope() runs on GeneralComp {	    
    var integer v_function := 1;
}		

testcase TC_NegSem_0502_Scope_002() runs on GeneralComp  {
    if ( match(v_control, 0) ){
    }
}

control{
    var integer v_control := 0;
    execute(TC_NegSem_0502_Scope_002());
}

}
<END_MODULE>

<RESULT COUNT 1>
error: There is no local or imported definition with name `v_control'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_0502_Scope_003 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 0502_003 Ensure that the IUT correctly handles definitions of local scope  >

<COMPILE>

<MODULE TTCN NegSem_0502_Scope_003 NegSem_0502_Scope_003.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @desc     Test cases for clause 5.2 Scope rules                     
 ** @purpose  1:5.2, Ensure that the IUT correctly handles definitions of local scope
 ** @verdict  pass reject
 ***************************************************/
module NegSem_0502_Scope_003 {

type component GeneralComp {	    	    
    var integer vc_component := 0;
}	

function f_funcScope() runs on GeneralComp {	    
    var integer v_function := 0;
}		

testcase TC_NegSem_0502_Scope_003() runs on GeneralComp  {
    if(true) {
     var integer v_statement := 0;
    }
    if ( match(v_statement, 0) ) {
    }
}

control{
    var integer v_control := 0;
    execute(TC_NegSem_0502_Scope_003());
}

}
<END_MODULE>

<RESULT COUNT 1>
error: There is no local or imported definition with name `v_statement'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050202_Uniqueness_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050202_001 Ensure that the IUT correctly handles the uniqueness of variable names in its scope  >

<COMPILE>

<MODULE TTCN NegSem_050202_Uniqueness_001 NegSem_050202_Uniqueness_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  1:5.2.2, Ensure that the IUT correctly handles the uniqueness of variable names in its scope
 ** @verdict  pass reject
 ***************************************************/
module NegSem_050202_Uniqueness_001 {
	type component GeneralComp {
		const integer cl_int := 0;
	}

	testcase TC_NegSem_050202_Uniqueness_001() runs on GeneralComp {
		const integer cl_int := 0;
	}
	control {
		execute(TC_NegSem_050202_Uniqueness_001());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Definition with identifier `cl_int' is not unique in the scope hierarchy
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050202_Uniqueness_004 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050202_004 Ensure that the IUT correctly handles the uniqueness of variable names in its scope  >

<COMPILE>

<MODULE TTCN NegSem_050202_Uniqueness_004 NegSem_050202_Uniqueness_004.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  1:5.2.2, Ensure that the IUT correctly handles the uniqueness of variable names in its scope
 ** @verdict  pass reject
 ***************************************************/
module NegSem_050202_Uniqueness_004 {
	const integer c_int := 0;

	type component GeneralComp {
	}

	function f_funcScope() {}

	testcase TC_NegSem_050202_Uniqueness_004() runs on GeneralComp {
		const integer c_int := 0;
		f_funcScope();
	}
	control {
		execute(TC_NegSem_050202_Uniqueness_004());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Definition with identifier `c_int' is not unique in the scope hierarchy
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050202_Uniqueness_005 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050202_005 Ensure that the IUT correctly handles the uniqueness of variable names in its scope  >

<COMPILE>

<MODULE TTCN NegSem_050202_Uniqueness_005 NegSem_050202_Uniqueness_005.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  1:5.2.2, Ensure that the IUT correctly handles the uniqueness of variable names in its scope
 ** @verdict  pass reject
 ***************************************************/
module NegSem_050202_Uniqueness_005 {
	const integer c_int := 0;

	type component GeneralComp {
	}

	function f_funcScope() {
		const integer c_int := 0;
	}

	testcase TC_NegSem_050202_Uniqueness_005() runs on GeneralComp {
		f_funcScope();
	}
	control {
		execute(TC_NegSem_050202_Uniqueness_005());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Definition with identifier `c_int' is not unique in the scope hierarchy
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050202_Uniqueness_006 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050202_006 Ensure that the IUT correctly handles the uniqueness of variable names in its scope  >

<COMPILE>

<MODULE TTCN NegSem_050202_Uniqueness_006 NegSem_050202_Uniqueness_006.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  1:5.2.2, Ensure that the IUT correctly handles the uniqueness of variable names in its scope
 ** @verdict  pass reject
 ***************************************************/
module NegSem_050202_Uniqueness_006 {
	type component GeneralComp {
		const integer repeatedIdentifier := 0;
	}

	testcase TC_NegSem_050202_Uniqueness_006() runs on GeneralComp {
		var boolean repeatedIdentifier := true;
	}
	control {
		execute(TC_NegSem_050202_Uniqueness_006());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Definition with identifier `repeatedIdentifier' is not unique in the scope hierarchy
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050202_Uniqueness_007 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050202_007 Ensure that the IUT correctly handles the uniqueness of variable names in its scope  >

<COMPILE>

<MODULE TTCN NegSem_050202_Uniqueness_007 NegSem_050202_Uniqueness_007.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  1:5.2.2, Ensure that the IUT correctly handles the uniqueness of variable names in its scope
 ** @verdict  pass reject
 ***************************************************/
module NegSem_050202_Uniqueness_007 {
	type component GeneralComp {
		const integer repeatedIdentifier := 0;
	}

	function f_funcScope() runs on GeneralComp {
		var boolean repeatedIdentifier := true;
	}

	testcase TC_NegSem_050202_Uniqueness_007() runs on GeneralComp {
		f_funcScope();
	}
	control {
		execute(TC_NegSem_050202_Uniqueness_007());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Definition with identifier `repeatedIdentifier' is not unique in the scope hierarchy
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050202_Uniqueness_008 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure that the IUT correctly handles the uniqueness of variable names in its scope  >

<COMPILE>

<MODULE TTCN NegSem_050202_Uniqueness_008 NegSem_050202_Uniqueness_008.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  1:5.2.2, Ensure that the IUT correctly handles the uniqueness of variable names in its scope
 ** @verdict  pass reject
 ***************************************************/
module NegSem_050202_Uniqueness_008 {
	type component GeneralComp {
	}

	function f_funcScope(boolean repeatedIdentifier) {
		const integer repeatedIdentifier := 0;
	}

	testcase TC_NegSem_050202_Uniqueness_008() runs on GeneralComp {
		var boolean v_boolean := true;
		f_funcScope(v_boolean);
	}
	control {
		execute(TC_NegSem_050202_Uniqueness_008());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Definition with identifier `repeatedIdentifier' is not unique in the scope hierarchy
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050202_Uniqueness_009 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050202_009 Ensure that the IUT correctly handles the uniqueness of variable names in its scope  >

<COMPILE>

<MODULE TTCN NegSem_050202_Uniqueness_009 NegSem_050202_Uniqueness_009.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  1:5.2.2, Ensure that the IUT correctly handles the uniqueness of variable names in its scope
 ** @verdict  pass reject
 ***************************************************/
module NegSem_050202_Uniqueness_009 {
	const integer repeatedIdentifier := 0;

	type component GeneralComp {
	}

	function f_funcScope() {}

	testcase TC_NegSem_050202_Uniqueness_009() runs on GeneralComp {
		var boolean repeatedIdentifier := true;
		f_funcScope();
	}
	control {
		execute(TC_NegSem_050202_Uniqueness_009());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Definition with identifier `repeatedIdentifier' is not unique in the scope hierarchy
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050202_Uniqueness_010 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050202_010 Ensure that the IUT correctly handles the uniqueness of variable names in its scope  >

<COMPILE>

<MODULE TTCN NegSem_050202_Uniqueness_010 NegSem_050202_Uniqueness_010.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  1:5.2.2, Ensure that the IUT correctly handles the uniqueness of variable names in its scope
 ** @verdict  pass reject
 ***************************************************/
module NegSem_050202_Uniqueness_010 {
	const integer repeatedIdentifier := 0;

	type component GeneralComp {
	}

	function f_funcScope() {
		var boolean repeatedIdentifier := true;
	}

	testcase TC_NegSem_050202_Uniqueness_010() runs on GeneralComp {
		f_funcScope();
	}
	control {
		execute(TC_NegSem_050202_Uniqueness_010());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Definition with identifier `repeatedIdentifier' is not unique in the scope hierarchy
<END_RESULT>

<END_TC>
:exmp

.*---------------------------------------------------------------------*
:h2. 0503_ordering_of_declarations folder
.*---------------------------------------------------------------------*

*---------------------------------------------------------------------*
:h3. NegSem_0503_Ordering_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 0503_001 Ensure that declarations are in the allowed ordering >

<COMPILE>

<MODULE TTCN NegSem_0503_Ordering_001 NegSem_0503_Ordering_001.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @desc     Test cases for clause 5.2 Scope rules                     
 ** @purpose  1:5.3, Ensure that declarations are in the allowed ordering
 ** @verdict  pass reject
 ***************************************************/
module NegSem_0503_Ordering_001 {

    type component GeneralComp {
        var integer vc_component := 0;
    }

    function f_function() runs on GeneralComp {
        var integer v_function := 0;
    }

    testcase TC_NegSem_0503_Ordering_001() runs on GeneralComp  {
        if(true) {
            var integer v_statement := 0;
            if (v_nested_statement == 0) {		// attempt to access a variable defined in the next scope
                var integer v_nested_statement := 0;
            }

        }
    }

    control {
        var integer v_control := 0;
        execute(TC_NegSem_0503_Ordering_001());
    }

}
<END_MODULE>

<RESULT COUNT 1>
error: There is no local or imported definition with name `v_nested_statement'
<END_RESULT>

<END_TC>
:exmp

.*---------------------------------------------------------------------*
:h2. 0504_parametrization folder
.*---------------------------------------------------------------------*

*---------------------------------------------------------------------*
:h3. NegSem_0504_parametrization_incompatibility_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 0504_001 Ensure that the IUT correctly handles received testcase parametrization type incompatibility. >

<COMPILE>

<MODULE TTCN NegSem_0504_parametrization_incompatibility_001 NegSem_0504_parametrization_incompatibility_001.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4, Ensure that the IUT correctly handles received testcase parametrization type incompatibility.
 ** @verdict  pass reject
 ***************************************************/
module NegSem_0504_parametrization_incompatibility_001 {

type enumerated MyEnumeratedType {e_black, e_white}
type integer address;

type record MyRecord {
 integer field1,
 boolean field2,
 address field3,
 MyEnumeratedType field4,
 integer field5
}


type component GeneralComp {	    	    

}	


testcase TC_NegSem_0504_parametrization_incompatibility_001 (
  MyRecord ExpectedMatch,
  integer p_integer := 0,
  boolean p_boolean := true,
  address p_address := null,
  MyEnumeratedType p_enumerated := e_black,
  template integer p_integerTemplate := ?
 ) runs on GeneralComp {

 // MyRecord cannot be built from the default p_integerTemplate parameter 
 var MyRecord ReceivedRecord := {p_integer, p_boolean, p_address, p_enumerated, p_integerTemplate};

    if ( ReceivedRecord == ExpectedMatch ) {
        setverdict(pass);
    }
    else {
        setverdict(fail);
    }		
 
}


control{

 var MyRecord DefaultValues  := {
  field1 := 0,
  field2 := true,
  field3 := null,
  field4 := e_black,
  field5 := 1			//any number can be used here to correspond with ? matching
 }

    execute(TC_NegSem_0504_parametrization_incompatibility_001(DefaultValues));
}

}
<END_MODULE>

<RESULT COUNT 2>
error: integer value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_0504_forbidden_parametrization_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 0504_002 Ensure that the IUT rejects forbidden module parametrization types. >

<COMPILE>

<MODULE TTCN NegSyn_0504_forbidden_parametrization_002 NegSyn_0504_forbidden_parametrization_002.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4, Ensure that the IUT rejects forbidden module parametrization types.
 ** @verdict  pass reject
 ***************************************************/
module NegSyn_0504_forbidden_parametrization_002 {

modulepar { timer TIMER_MODULE_PARAMETER }

type component GeneralComp {	    	    
}	


testcase TC_NegSyn_0504_forbidden_parametrization_002() runs on GeneralComp { 
}

control{
    execute(TC_NegSyn_0504_forbidden_parametrization_002());
}

}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `timer': syntax error, unexpected TimerKeyword
<END_RESULT>

<END_TC>
:exmp


*---------------------------------------------------------------------*
:h3. NegSem_050401_top_level_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050401_001 verify that error is generated for incompatible actual value of in parameter >

<COMPILE>

<MODULE TTCN NegSem_050401_top_level_001 NegSem_050401_top_level_001.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1, verify that error is generated for incompatible actual value of in parameter
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// If parameters are passed by value (i.e. in case of in and out parameters), type compatibility 
// rules specified in 6.3 apply.

module NegSem_050401_top_level_001 {

	type component GeneralComp {
	}
    
	type record R1 {
		integer field1,
		integer field2
	}
    
	type record R2 {
		integer option1,
		integer option2 optional
	}
	
	function f(R2 p_rec) {
		if (match(p_rec, {1, 2})) {
			setverdict(pass);
		} else {
			setverdict(fail, "p_rec value not matching ", p_rec, R1:{1, 2});
		}
	}
	
	testcase TC_NegSem_050401_top_level_001() runs on GeneralComp {
		var R1 v_rec := {field1 := 1, field2 := 2};
		f(v_rec);
	}

	control{
		execute(TC_NegSem_050401_top_level_001());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Type mismatch: `@NegSem_050401_top_level_001.R2.option2' of type `integer' and `@NegSem_050401_top_level_001.R1.field2' of type `integer' are not compatible: The optionality of fields in record/SEQUENCE types must be the same
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050401_top_level_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050401_002 verify that error is generated for incompatible actual value of out parameter >

<COMPILE>

<MODULE TTCN NegSem_050401_top_level_002 NegSem_050401_top_level_002.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1, verify that error is generated for incompatible actual value of out parameter
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// If parameters are passed by value (i.e. in case of in and out parameters), type compatibility 
// rules specified in 6.3 apply.

module NegSem_050401_top_level_002 { 

	type component GeneralComp {
	}
    
    type record R1 {
        integer field1,
        integer field2
    }
    
    type record R2 {
        integer option1,
        integer option2 optional
    }
	
	function f(out R2 p_rec) {
        p_rec.option1 := 1;
        p_rec.option2 := 2; 
	}
	
	testcase TC_NegSem_050401_top_level_002() runs on GeneralComp {
        var R1 v_rec;
		f(v_rec);
        if ( match(v_rec, {1, 2})) { setverdict(pass); } 
        else { setverdict(fail, "p_rec value not matching ", v_rec, R1:{1, 2}); }
	}

	control{
		execute(TC_NegSem_050401_top_level_002());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Type mismatch: `@NegSem_050401_top_level_002.R2.option2' of type `integer' and `@NegSem_050401_top_level_002.R1.field2' of type `integer' are not compatible: The optionality of fields in record/SEQUENCE types must be the same
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_001 verify that in value formal parameters of template cannot used dash as default value >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_001 NegSem_05040101_parameters_of_kind_value_001.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that in value formal parameters of template cannot used dash as default value
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Formal parameters of modified templates may inherit the default values from the corresponding 
// parameters of their parent templates; this shall explicitly be denoted by using a dash (don't 
// change) symbol at the place of the modified template parameters' default value.

module NegSem_05040101_parameters_of_kind_value_001 { 

	type component GeneralComp {
	}	
    
    type record R
    {
        integer field1,
        integer field2
    }
	
    template R m_t(integer p_int1 := 3, in integer p_int2 := -) := {
        field1 := p_int1,
        field2 := p_int2
    }
}
<END_MODULE>

<RESULT COUNT 1>
error: integer value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_002 verify that modified template cannot used dash as default value when original value parameter had no default value >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_002 NegSem_05040101_parameters_of_kind_value_002.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that modified template cannot used dash as default value when original value parameter had no default value
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Formal parameters of modified templates may inherit the default values from the corresponding 
// parameters of their parent templates; this shall explicitly be denoted by using a dash (don't 
// change) symbol at the place of the modified template parameters' default value.

module NegSem_05040101_parameters_of_kind_value_002 { 

	type component GeneralComp {
	}	
    
    type record R
    {
        integer field1,
        integer field2
    }
	
    template R m_t(integer p_int1, in integer p_int2 := 4) := {
        field1 := p_int1,
        field2 := p_int2
    }
    
    template R m_tmod(integer p_int1 := -, in integer p_int2 := 6) modifies m_t := {
        field1 := p_int1,
        field2 := p_int2
    }
}
<END_MODULE>

<RESULT COUNT 1>
error: integer value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_003 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - verify that template definitions cannot contain out value formal parameters >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_003 NegSem_05040101_parameters_of_kind_value_003.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that template definitions cannot contain out value formal parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction b)
// Formal value parameters of templates ... shall always be in parameters.

module NegSem_05040101_parameters_of_kind_value_003 { 
	type component GeneralComp {
	}	
    
    type record R
    {
        integer field1,
        integer field2
    }

    function f(out integer p_int) return integer {
        p_int := 2;
        return p_int;
    }
    
    template R m_t(out integer p_int) := {
        field1 := 0,
        field2 := f(p_int)
    }
    
	testcase TC_NegSem_05040101_parameters_of_kind_value_003() runs on GeneralComp {
        var integer v_int;
        log(m_t(v_int));        
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_003());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: A template cannot have `out' value parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_004 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_004 verify that template definitions cannot contain inout value formal parameters >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_004 NegSem_05040101_parameters_of_kind_value_004.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that template definitions cannot contain inout value formal parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction b)
// Formal value parameters of templates ... shall always be in parameters.

module NegSem_05040101_parameters_of_kind_value_004 { 
	type component GeneralComp {
	}	
    
    type record R
    {
        integer field1,
        integer field2
    }

    function f(inout integer p_int) return integer {
        p_int := p_int * 2;
        return p_int;
    }
    
    template R m_t(inout integer p_int) := {
        field1 := 0,
        field2 := f(p_int)
    }
    
	testcase TC_NegSem_05040101_parameters_of_kind_value_004() runs on GeneralComp {
        var integer v_int := 1;
        log(m_t(v_int));        
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_004());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: A template cannot have `inout' value parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_005 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_005 verify that out value formal parameters cannot have default values >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_005 NegSem_05040101_parameters_of_kind_value_005.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that out value formal parameters cannot have default values
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction d)
// Default values can be provided for in parameters only.

module NegSem_05040101_parameters_of_kind_value_005 { 
	type component GeneralComp {
	}	

    function f(out integer p_int := 5) {
    }
    
	testcase TC_NegSem_05040101_parameters_of_kind_value_005() runs on GeneralComp {
        var integer v_int;
        f(v_int);
        log(v_int);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_005());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `out' value parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_006 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_006 verify that inout value formal parameters cannot have default values >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_006 NegSem_05040101_parameters_of_kind_value_006.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that inout value formal parameters cannot have default values
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction d)
// Default values can be provided for in parameters only.

module NegSem_05040101_parameters_of_kind_value_006 { 
	type component GeneralComp {
	}	

    function f(inout integer p_int := 5) {
    }
    
	testcase TC_NegSem_05040101_parameters_of_kind_value_006() runs on GeneralComp {
        var integer v_int := 0;
        f(v_int);
        log(v_int);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_006());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_007 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_007 verify that incompatible value in default value assignment of value formal parameters causes error >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_007 NegSem_05040101_parameters_of_kind_value_007.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that incompatible value in default value assignment of value formal parameters causes error
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction e)
// The expression of the formal parameters' default value has to be compatible with the type of the parameter.

module NegSem_05040101_parameters_of_kind_value_007 { 
	type component GeneralComp {
	}	
    
    function f(in integer p_int := 5.0) {
    }
    
	testcase TC_NegSem_05040101_parameters_of_kind_value_007() runs on GeneralComp {
        f();
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_007());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: integer value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_008 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_008 verify that default value of value formal parameters cannot reference component variables >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_008 NegSem_05040101_parameters_of_kind_value_008.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that default value of value formal parameters cannot reference component variables
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction e)
// The expression shall not refer to elements of the component type of the optional runs on clause.

module NegSem_05040101_parameters_of_kind_value_008 { 
	type component GeneralComp {
        var integer vc_int := 0;
	}	
    
    function f(in integer p_int := vc_int) runs on GeneralComp {
    }
    
	testcase TC_NegSem_05040101_parameters_of_kind_value_008() runs on GeneralComp {
        f();
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_008());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a static value was expected instead of variable `@NegSem_05040101_parameters_of_kind_value_008.GeneralComp.vc_int'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_009 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_009 verify that default value of value formal parameters cannot reference other parameters >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_009 NegSem_05040101_parameters_of_kind_value_009.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that default value of value formal parameters cannot reference other parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction e)
// The expression shall not refer to other parameters of the same parameter list.

module NegSem_05040101_parameters_of_kind_value_009 { 
	type component GeneralComp {
	}	
    
    function f(in integer p_int, in integer p_int2 := p_int) runs on GeneralComp {
    }
    
	testcase TC_NegSem_05040101_parameters_of_kind_value_009() runs on GeneralComp {
        f(2);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_009());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: There is no local or imported definition with name `p_int' 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_010 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_010 verify that default value of value formal parameters cannot invoke functions with runs on clause >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_010 NegSem_05040101_parameters_of_kind_value_010.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that default value of value formal parameters cannot invoke functions with runs on clause
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction e)
// The expression shall not contain the invocation of functions with a runs on clause.

module NegSem_05040101_parameters_of_kind_value_010 { 
	type component GeneralComp {
        var integer vc_int;
	}
    
    function fx() runs on GeneralComp return integer {
        return vc_int + 1;
    }
    
    function f(in integer p_int := fx()) runs on GeneralComp {
        log(p_int);
    }
    
	testcase TC_NegSem_05040101_parameters_of_kind_value_010() runs on GeneralComp {
        f();
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_010());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a static value was expected instead of the return value of function `@NegSem_05040101_parameters_of_kind_value_010.fx' 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_011 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_011 verify that error is generated if formal value parameter of function contains dash >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_011 NegSem_05040101_parameters_of_kind_value_011.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that error is generated if formal value parameter of function contains dash
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction h)
// The dash (don't change) symbol shall be used with formal parameters of modified templates only

module NegSem_05040101_parameters_of_kind_value_011 { 

	type component GeneralComp {
	}	
    
    function f (integer p_int := -) {
        log(p_int);
    }
	
	testcase TC_NegSem_05040102_parameters_of_kind_value_011() runs on GeneralComp {
        f(1);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040102_parameters_of_kind_value_011());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: integer value was expected 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_012 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_012 verify that error is generated if formal value parameter of altstep contains dash >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_012 NegSem_05040101_parameters_of_kind_value_012.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that error is generated if formal value parameter of altstep contains dash
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction h)
// The dash (don't change) symbol shall be used with formal parameters of modified templates only

module NegSem_05040101_parameters_of_kind_value_012 { 

	type component GeneralComp {
	}	
    
    altstep a(integer p_int := -) {
        []any timer.timeout {}
        [else] {}
    }
	
	testcase TC_NegSem_05040101_parameters_of_kind_value_012() runs on GeneralComp {
        a(1);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_012());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: integer value was expected 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_013 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_013 verify that error is generated if formal value parameter of test case contains dash >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_013 NegSem_05040101_parameters_of_kind_value_013.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that error is generated if formal value parameter of test case contains dash
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction h)
// The dash (don't change) symbol shall be used with formal parameters of modified templates only

module NegSem_05040101_parameters_of_kind_value_013 { 

	type component GeneralComp {
	}	
	
	testcase TC_NegSem_05040101_parameters_of_kind_value_013(integer p_int := -) runs on GeneralComp {
        log(p_int);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_013(1));
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: integer value was expected 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_014 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_014 verify that out formal value parameters cannot have lazy modifier >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_014 NegSem_05040101_parameters_of_kind_value_014.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that out formal value parameters cannot have lazy modifier
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction j)
// Only in parameters can be declared lazy or fuzzy.

module NegSem_05040101_parameters_of_kind_value_014 { 

	type component GeneralComp {
	}	
	
    function f(out @lazy integer p_int) {
        p_int := 6;
    }
	testcase TC_NegSem_05040101_parameters_of_kind_value_014() runs on GeneralComp {
        var integer v_int;
        f(v_int);
        log(v_int);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_014());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `@lazy': syntax error, unexpected LazyKeyword
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_015 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_015 verify that out formal value parameters cannot have fuzzy modifier >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_015 NegSem_05040101_parameters_of_kind_value_015.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that out formal value parameters cannot have fuzzy modifier
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction j)
// Only in parameters can be declared lazy or fuzzy.

module NegSem_05040101_parameters_of_kind_value_015 { 

	type component GeneralComp {
	}	
	
    function f(out @fuzzy integer p_int) {
        p_int := 6;
    }
	testcase TC_NegSem_05040101_parameters_of_kind_value_015() runs on GeneralComp {
        var integer v_int;
        f(v_int);
        log(v_int);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_015());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `@fuzzy': syntax error, unexpected FuzzyKeyword
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_016 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_016 verify that inout formal value parameters cannot have lazy modifier >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_016 NegSem_05040101_parameters_of_kind_value_016.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that inout formal value parameters cannot have lazy modifier
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction j)
// Only in parameters can be declared lazy or fuzzy.

module NegSem_05040101_parameters_of_kind_value_016 { 

	type component GeneralComp {
	}	
	
    function f(inout @lazy integer p_int) {
        p_int := 6;
    }
	testcase TC_NegSem_05040101_parameters_of_kind_value_016() runs on GeneralComp {
        var integer v_int := 0;
        f(v_int);
        log(v_int);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_016());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `@lazy': syntax error, unexpected LazyKeyword
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040101_parameters_of_kind_value_017 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_017 verify that inout formal value parameters cannot have fuzzy modifier >

<COMPILE>

<MODULE TTCN NegSem_05040101_parameters_of_kind_value_017 NegSem_05040101_parameters_of_kind_value_017.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that inout formal value parameters cannot have fuzzy modifier
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction j)
// Only in parameters can be declared lazy or fuzzy.

module NegSem_05040101_parameters_of_kind_value_017 { 

	type component GeneralComp {
	}	
	
    function f(inout @fuzzy integer p_int) {
        p_int := 6;
    }
	testcase TC_NegSem_05040101_parameters_of_kind_value_017() runs on GeneralComp {
        var integer v_int := 0;
        f(v_int);
        log(v_int);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_017());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `@fuzzy': syntax error, unexpected FuzzyKeyword
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_05040101_parameters_of_kind_value_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_001 verify that const definition cannot be parameterized >

<COMPILE>

<MODULE TTCN NegSyn_05040101_parameters_of_kind_value_001 NegSyn_05040101_parameters_of_kind_value_001.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that const definition cannot be parameterized
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction a) 
// Language elements which cannot be parameterized are: const, var, timer, control, record of, 
// set of, enumerated, port, component and subtype definitions, group and import.

module NegSyn_05040101_parameters_of_kind_value_001 { 

	const integer c_int(integer p_int) := p_int + 2;
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `\(': syntax error, unexpected '\(', expecting := or '\['
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_05040101_parameters_of_kind_value_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_002 verify that var definition cannot be parameterized >

<COMPILE>

<MODULE TTCN NegSyn_05040101_parameters_of_kind_value_002 NegSyn_05040101_parameters_of_kind_value_002.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that var definition cannot be parameterized
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction a) 
// Language elements which cannot be parameterized are: const, var, timer, control, record of, 
// set of, enumerated, port, component and subtype definitions, group and import.

module NegSyn_05040101_parameters_of_kind_value_002 { 

    function f() {
	    var integer c_int(integer p_int) := p_int + 2;
    }
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `\(': syntax error, unexpected '\('
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_05040101_parameters_of_kind_value_003 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_003 verify that template variable definition cannot be parameterized >

<COMPILE>

<MODULE TTCN NegSyn_05040101_parameters_of_kind_value_003 NegSyn_05040101_parameters_of_kind_value_003.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that template variable definition cannot be parameterized
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction a) 
// Language elements which cannot be parameterized are: const, var, timer, control, record of, 
// set of, enumerated, port, component and subtype definitions, group and import.

module NegSyn_05040101_parameters_of_kind_value_003 { 

    function f() {
	    var template integer c_int(integer p_int) := p_int + 2;
    }
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `\(': syntax error, unexpected '\('
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_05040101_parameters_of_kind_value_004 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_004 verify that timer definition cannot be parameterized >

<COMPILE>

<MODULE TTCN NegSyn_05040101_parameters_of_kind_value_004 NegSyn_05040101_parameters_of_kind_value_004.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that timer definition cannot be parameterized
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction a) 
// Language elements which cannot be parameterized are: const, var, timer, control, record of, 
// set of, enumerated, port, component and subtype definitions, group and import.

module NegSyn_05040101_parameters_of_kind_value_004 { 

    function f() {
	    timer t_timer(float p_float) := p_float * 2;
    }
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `\(': syntax error, unexpected '\('
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_05040101_parameters_of_kind_value_005 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_005 verify that control definition cannot be parameterized >

<COMPILE>

<MODULE TTCN NegSyn_05040101_parameters_of_kind_value_005 NegSyn_05040101_parameters_of_kind_value_005.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that control definition cannot be parameterized
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction a) 
// Language elements which cannot be parameterized are: const, var, timer, control, record of, 
// set of, enumerated, port, component and subtype definitions, group and import.

module NegSyn_05040101_parameters_of_kind_value_005 { 

    control(integer p_int) {
	    log(p_int);
    }
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `\(': syntax error, unexpected '\('
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_05040101_parameters_of_kind_value_006 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_006 verify that record of definition cannot be parameterized >

<COMPILE>

<MODULE TTCN NegSyn_05040101_parameters_of_kind_value_006 NegSyn_05040101_parameters_of_kind_value_006.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that record of definition cannot be parameterized
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction a) 
// Language elements which cannot be parameterized are: const, var, timer, control, record of, 
// set of, enumerated, port, component and subtype definitions, group and import.

module NegSyn_05040101_parameters_of_kind_value_006 { 

	type record of integer RoI (integer p_int);
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `integer': syntax error, unexpected IntegerKeyword
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_05040101_parameters_of_kind_value_007 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_007 verify that set of definition cannot be parameterized >

<COMPILE>

<MODULE TTCN NegSyn_05040101_parameters_of_kind_value_007 NegSyn_05040101_parameters_of_kind_value_007.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that set of definition cannot be parameterized
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction a) 
// Language elements which cannot be parameterized are: const, var, timer, control, record of, 
// set of, enumerated, port, component and subtype definitions, group and import.

module NegSyn_05040101_parameters_of_kind_value_007 { 

	type set of integer SoI (integer p_int);
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `integer': syntax error, unexpected IntegerKeyword
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_05040101_parameters_of_kind_value_008 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_008 verify that enumerated definition cannot be parameterized >

<COMPILE>

<MODULE TTCN NegSyn_05040101_parameters_of_kind_value_008 NegSyn_05040101_parameters_of_kind_value_008.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that enumerated definition cannot be parameterized
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction a) 
// Language elements which cannot be parameterized are: const, var, timer, control, record of, 
// set of, enumerated, port, component and subtype definitions, group and import.

module NegSyn_05040101_parameters_of_kind_value_008 { 

	type enumerated EColour(integer p_int) { red, blue, green }
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `\(': syntax error, unexpected '\(', expecting '\{'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_05040101_parameters_of_kind_value_009 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_009 verify that port definition cannot be parameterized >

<COMPILE>

<MODULE TTCN NegSyn_05040101_parameters_of_kind_value_009 NegSyn_05040101_parameters_of_kind_value_009.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that port definition cannot be parameterized
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction a) 
// Language elements which cannot be parameterized are: const, var, timer, control, record of, 
// set of, enumerated, port, component and subtype definitions, group and import.

module NegSyn_05040101_parameters_of_kind_value_009 { 

	type port P(integer p_int) message {
        inout integer;
        map param(integer p_par := p_int);
    }
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `map': syntax error, unexpected MapKeyword
<END_RESULT>

<RESULT COUNT 1>
error: at or before token `\(': syntax error, unexpected '\(', expecting MessageKeyword or MixedKeyword or ProcedureKeyword
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_05040101_parameters_of_kind_value_010 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_010 verify that component definition cannot be parameterized >

<COMPILE>

<MODULE TTCN NegSyn_05040101_parameters_of_kind_value_010 NegSyn_05040101_parameters_of_kind_value_010.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that component definition cannot be parameterized
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction a) 
// Language elements which cannot be parameterized are: const, var, timer, control, record of, 
// set of, enumerated, port, component and subtype definitions, group and import.

module NegSyn_05040101_parameters_of_kind_value_010 { 

	type component C (integer p_int) {
        var integer v_int := p_int;
    }
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `\(': syntax error, unexpected '\(', expecting ExtendsKeyword or '\{'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_05040101_parameters_of_kind_value_011 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_011 verify that subtype definition cannot be parameterized >

<COMPILE>

<MODULE TTCN NegSyn_05040101_parameters_of_kind_value_011 NegSyn_05040101_parameters_of_kind_value_011.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that subtype definition cannot be parameterized
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction a) 
// Language elements which cannot be parameterized are: const, var, timer, control, record of, 
// set of, enumerated, port, component and subtype definitions, group and import.

module NegSyn_05040101_parameters_of_kind_value_011 { 

	type integer MyInt(integer p_int);
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `integer': syntax error, unexpected IntegerKeyword
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_05040101_parameters_of_kind_value_012 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_012 verify that group definition cannot be parameterized >

<COMPILE>

<MODULE TTCN NegSyn_05040101_parameters_of_kind_value_012 NegSyn_05040101_parameters_of_kind_value_012.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that group definition cannot be parameterized
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction a) 
// Language elements which cannot be parameterized are: const, var, timer, control, record of, 
// set of, enumerated, port, component and subtype definitions, group and import.

module NegSyn_05040101_parameters_of_kind_value_012 { 

    group Group1 (integer p_int) {    
	    const integer c_int := 2 * p_int;
    }
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `\(': syntax error, unexpected '\(', expecting '\{'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSyn_05040101_parameters_of_kind_value_013 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040101_013 verify that import definition cannot be parameterized >

<COMPILE>

<MODULE TTCN NegSyn_05040101_parameters_of_kind_value_013 NegSyn_05040101_parameters_of_kind_value_013.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.1, verify that import definition cannot be parameterized
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction a) 
// Language elements which cannot be parameterized are: const, var, timer, control, record of, 
// set of, enumerated, port, component and subtype definitions, group and import.

module NegSyn_05040101_parameters_of_kind_value_013 { 

    import from Sem_05040101_parameters_of_kind_value_001 (integer INTEGER_MODULE_PARAMETER) all;
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `\(': syntax error, unexpected '\(', expecting AllKeyword or '\{'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040102_parameters_of_kind_template_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040102_001 verify that in template formal parameters of template cannot used dash as default value >

<COMPILE>

<MODULE TTCN NegSem_05040102_parameters_of_kind_template_001 NegSem_05040102_parameters_of_kind_template_001.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.2, verify that in template formal parameters of template cannot used dash as default value
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Formal template parameters of modified templates may inherit their default templates from the 
// corresponding parameters of their parent templates; this shall explicitly be denoted by using 
// a dash (don't change) symbol at the place of the modified template parameter's default template.

module NegSem_05040102_parameters_of_kind_template_001 { 

	type component GeneralComp {
	}	
    
    type record R
    {
        integer field1,
        integer field2
    }
	
    template R mw_t(template integer p_int1 := ?, in template integer p_int2 := -) := {
        field1 := p_int1,
        field2 := p_int2
    }
}
<END_MODULE>

<RESULT COUNT 1>
error: Only modified templates are allowed to use the not used symbol \(`-'\) as the default parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040102_parameters_of_kind_template_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040102_002 that modified template cannot used dash as default value when original template parameter had no default value >

<COMPILE>

<MODULE TTCN NegSem_05040102_parameters_of_kind_template_002 NegSem_05040102_parameters_of_kind_template_002.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.2, verify that modified template cannot used dash as default value when original template parameter had no default value
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Formal template parameters of modified templates may inherit their default templates from the 
// corresponding parameters of their parent templates; this shall explicitly be denoted by using 
// a dash (don't change) symbol at the place of the modified template parameter's default template.

module NegSem_05040102_parameters_of_kind_template_002 { 

	type component GeneralComp {
	}	
    
    type record R
    {
        integer field1,
        integer field2
    }
	
    template R m_t(template integer p_int1, in template integer p_int2 := 4) := {
        field1 := p_int1,
        field2 := p_int2
    }
    
    template R m_tmod(template integer p_int1 := -, in template integer p_int2 := ?) modifies m_t := {
        field1 := p_int1,
        field2 := p_int2
    }
}
<END_MODULE>

<RESULT COUNT 1>
error: Not used symbol \(`-'\) doesn't have the corresponding default parameter in the base template
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040102_parameters_of_kind_template_003 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040102_003 verify that template definitions cannot contain out template formal parameters >

<COMPILE>

<MODULE TTCN NegSem_05040102_parameters_of_kind_template_003 NegSem_05040102_parameters_of_kind_template_003.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.2, verify that template definitions cannot contain out template formal parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction b)
// Formal template parameters of templates ... shall always be in parameters.

module NegSem_05040101_parameters_of_kind_template_003 { 
	type component GeneralComp {
	}	
    
    type record R
    {
        integer field1,
        integer field2
    }

    function f(out template integer p_int) return template integer {
        p_int := ?;
        return p_int;
    }
    
    template R m_t(out template integer p_int) := {
        field1 := 0,
        field2 := f(p_int)
    }
    
	testcase TC_NegSem_05040101_parameters_of_kind_template_003() runs on GeneralComp {
        var template integer v_int;
        log(m_t(v_int));        
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_template_003());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: A template cannot have `out' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040102_parameters_of_kind_template_004 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040102_004 verify that template definitions cannot contain inout template formal parameters >

<COMPILE>

<MODULE TTCN NegSem_05040102_parameters_of_kind_template_004 NegSem_05040102_parameters_of_kind_template_004.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.2, verify that template definitions cannot contain inout template formal parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction b)
// Formal value parameters of templates ... shall always be in parameters.

module NegSem_05040102_parameters_of_kind_template_004 { 
	type component GeneralComp {
	}	
    
    type record R
    {
        integer field1,
        integer field2
    }

    function f(inout template integer p_int) return template integer {
        p_int := ?;
        return p_int;
    }
    
    template R m_t(inout template integer p_int) := {
        field1 := 0,
        field2 := f(p_int)
    }
    
	testcase TC_NegSem_05040102_parameters_of_kind_template_004() runs on GeneralComp {
        var template integer v_int := 1;
        log(m_t(v_int));        
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040102_parameters_of_kind_template_004());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: A template cannot have `inout' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040102_parameters_of_kind_template_005 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040102_005 verify that out template formal parameters cannot have default values >

<COMPILE>

<MODULE TTCN NegSem_05040102_parameters_of_kind_template_005 NegSem_05040102_parameters_of_kind_template_005.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.2, verify that out template formal parameters cannot have default values
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction c)
// Default templates can be provided for in parameters only.

module NegSem_05040102_parameters_of_kind_template_005 { 
	type component GeneralComp {
	}	

    function f(out template integer p_int := ?) {
    }
    
	testcase TC_NegSem_05040102_parameters_of_kind_template_005() runs on GeneralComp {
        var template integer v_int;
        f(v_int);
        log(v_int);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040102_parameters_of_kind_template_005());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a template variable or template parameter was expected for an `out' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040102_parameters_of_kind_template_006 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040102_006 verify that inout template formal parameters cannot have default values >

<COMPILE>

<MODULE TTCN NegSem_05040102_parameters_of_kind_template_006 NegSem_05040102_parameters_of_kind_template_006.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.2, verify that inout template formal parameters cannot have default values
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction c)
// Default templates can be provided for in parameters only.

module NegSem_05040102_parameters_of_kind_template_006 { 
	type component GeneralComp {
	}	

    function f(inout template integer p_int := ?) {
    }
    
	testcase TC_NegSem_05040102_parameters_of_kind_template_006() runs on GeneralComp {
        var template integer v_int := 0;
        f(v_int);
        log(v_int);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040102_parameters_of_kind_template_006());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a template variable or template parameter was expected for an `inout' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040102_parameters_of_kind_template_007 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040102_007 verify that incompatible template instance in default template assignment of template formal parameters causes error >

<COMPILE>

<MODULE TTCN NegSem_05040102_parameters_of_kind_template_007 NegSem_05040102_parameters_of_kind_template_007.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.2, verify that incompatible template instance in default template assignment of template formal parameters causes error
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction d)
// The default template instance has to be compatible with the type of the parameter.

module NegSem_05040102_parameters_of_kind_template_007 { 
	type component GeneralComp {
	}	
    
    function f(in template integer p_int := (-20.0..5.0)) { //-infinity causes segfault
    }
    
	testcase TC_NegSem_05040102_parameters_of_kind_template_007() runs on GeneralComp {
        f();
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040102_parameters_of_kind_template_007());
	}
}
<END_MODULE>

<RESULT COUNT 2>
error: integer value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040102_parameters_of_kind_template_008 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040102_008 verify that default template instance of template formal parameters cannot reference component elements >

<COMPILE>

<EXECUTE_PARALLEL>

<MODULE TTCN NegSem_05040102_parameters_of_kind_template_008 NegSem_05040102_parameters_of_kind_template_008.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.2, verify that default template instance of template formal parameters cannot reference component elements
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction e)
// The template instance shall not refer to elements of the component type in a runs on clause.

module NegSem_05040102_parameters_of_kind_template_008 { 
	type component GeneralComp {
        var template integer vc_int := ?;
	}	
    
    function f(in template integer p_int := vc_int) runs on GeneralComp {
    }
    
	testcase TC_NegSem_05040102_parameters_of_kind_template_008() runs on GeneralComp {
        f();
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040102_parameters_of_kind_template_008());
	}
}
<END_MODULE>

<RESULT COUNT 1>
Dynamic test case error: Copying an uninitialized/unsupported integer template.
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040102_parameters_of_kind_template_009 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040102_009 verify that default template instance of template formal parameters cannot reference component elements >

<COMPILE>

<MODULE TTCN NegSem_05040102_parameters_of_kind_template_009 NegSem_05040102_parameters_of_kind_template_009.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.2, verify that default template instance of template formal parameters cannot reference other parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction e)
// The template instance shall not refer to other parameters in the same parameter list.

module NegSem_05040102_parameters_of_kind_template_009 { 
	type component GeneralComp {
	}	
    
    function f(in template integer p_int, in template integer p_int2 := p_int) runs on GeneralComp {
    }
    
	testcase TC_NegSem_05040102_parameters_of_kind_template_009() runs on GeneralComp {
        f(?);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040102_parameters_of_kind_template_009());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: There is no local or imported definition with name `p_int'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040102_parameters_of_kind_template_010 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040102_010 verify that default template instance of template formal parameters cannot reference component elements >

<COMPILE>

<EXECUTE_PARALLEL>

<MODULE TTCN NegSem_05040102_parameters_of_kind_template_010 NegSem_05040102_parameters_of_kind_template_010.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.2, verify that default template instance of template formal parameters cannot invoke functions with runs on clause
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction e)
// The template instance shall not contain the invocation of functions with a runs on clause.

module NegSem_05040102_parameters_of_kind_value_010 { 
	type component GeneralComp {
        var integer vc_int;
	}
    
    function fx() runs on GeneralComp return integer {
        return vc_int + 1;
    }
    
    function f(in template integer p_int := fx()) runs on GeneralComp {
        log(p_int);
    }
    
	testcase TC_NegSem_05040101_parameters_of_kind_value_010() runs on GeneralComp {
        f();
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040101_parameters_of_kind_value_010());
	}
}
<END_MODULE>

<RESULT COUNT 1>
Dynamic test case error: Unbound left operand of integer addition.
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040102_parameters_of_kind_template_014 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040102_014 verify that out formal template parameters cannot have lazy modifier >

<COMPILE>

<MODULE TTCN NegSem_05040102_parameters_of_kind_template_014 NegSem_05040102_parameters_of_kind_template_014.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.2, verify that out formal template parameters cannot have lazy modifier
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction h)
// Only in template parameters can be declared lazy or fuzzy.

module NegSem_05040102_parameters_of_kind_template_014 { 

	type component GeneralComp {
	}	
	
    function f(out template @lazy integer p_int) {
        p_int := ?;
    }
	testcase TC_NegSem_05040102_parameters_of_kind_template_014() runs on GeneralComp {
        var template integer v_int;
        f(v_int);
        log(v_int);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040102_parameters_of_kind_template_014());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `@lazy': syntax error, unexpected LazyKeyword
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040102_parameters_of_kind_template_015 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040102_015 verify that out formal template parameters cannot have fuzzy modifier >

<COMPILE>

<MODULE TTCN NegSem_05040102_parameters_of_kind_template_015 NegSem_05040102_parameters_of_kind_template_015.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.2, verify that out formal template parameters cannot have fuzzy modifier
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction h)
// Only in template parameters can be declared lazy or fuzzy.

module NegSem_05040102_parameters_of_kind_template_015 { 

	type component GeneralComp {
	}	
	
    function f(out template @fuzzy integer p_int) {
        p_int := ?;
    }
	testcase TC_NegSem_05040102_parameters_of_kind_template_015() runs on GeneralComp {
        var template integer v_int;
        f(v_int);
        log(v_int);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040102_parameters_of_kind_template_015());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `@fuzzy': syntax error, unexpected FuzzyKeyword
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040102_parameters_of_kind_template_016 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040102_016 verify that inout formal template parameters cannot have lazy modifier >

<COMPILE>

<MODULE TTCN NegSem_05040102_parameters_of_kind_template_016 NegSem_05040102_parameters_of_kind_template_016.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.2, verify that inout formal template parameters cannot have lazy modifier
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction h)
// Only in template parameters can be declared lazy or fuzzy.

module NegSem_05040102_parameters_of_kind_template_016 { 

	type component GeneralComp {
	}	
	
    function f(inout template @lazy integer p_int) {
        p_int := ?;
    }
	testcase TC_NegSem_05040102_parameters_of_kind_template_016() runs on GeneralComp {
        var template integer v_int := 0;
        f(v_int);
        log(v_int);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040102_parameters_of_kind_template_016());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `@lazy': syntax error, unexpected LazyKeyword
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_05040102_parameters_of_kind_template_017 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 05040102_017 verify that inout formal template parameters cannot have fuzzy modifier >

<COMPILE>

<MODULE TTCN NegSem_05040102_parameters_of_kind_template_017 NegSem_05040102_parameters_of_kind_template_017.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.1.2, verify that inout formal template parameters cannot have fuzzy modifier
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Restriction h)
// Only in template parameters can be declared lazy or fuzzy.

module NegSem_05040102_parameters_of_kind_template_017 { 

	type component GeneralComp {
	}	
	
    function f(inout template @fuzzy integer p_int) {
        p_int := ?;
    }
	testcase TC_NegSem_05040102_parameters_of_kind_template_017() runs on GeneralComp {
        var template integer v_int := 0;
        f(v_int);
        log(v_int);
        setverdict(pass);
	}

	control{
		execute(TC_NegSem_05040102_parameters_of_kind_template_017());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `@fuzzy': syntax error, unexpected FuzzyKeyword
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_001 verify that template parameters cannot be used as in formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_001 NegSem_050402_actual_parameters_001.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template parameters cannot be used as in formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_001 { 

    type component GeneralComp {
	}
    
    template integer m_msg := 1;
    
    function f_test(in integer p_val) {
        if (p_val == 1) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_001() runs on GeneralComp {
        f_test(m_msg); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_001());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of template `@NegSem_050402_actual_parameters_001.m_msg' 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_002 verify that template variables cannot be used as in formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_002 NegSem_050402_actual_parameters_002.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template variables cannot be used as in formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_002 { 

    type component GeneralComp {
	}
    
    function f_test(in integer p_val) {
        if (p_val == 2) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_002() runs on GeneralComp {
        var template integer vm_msg := 2;
        f_test(vm_msg); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_002());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of template variable `vm_msg' 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_003 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_003 verify that template in parameters cannot be used as in formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_003 NegSem_050402_actual_parameters_003.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template in parameters cannot be used as in formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_003 { 

    type component GeneralComp {
    }
    
    function f_test(in integer p_val) {
        if (p_val == 3) { setverdict(pass); }
        else { setverdict(fail); }
    }

    function f_caller(in template integer p_val) {
        f_test(p_val); // tested parameter passing
    }

    
    testcase TC_NegSem_050402_actual_parameters_003() runs on GeneralComp {
        f_caller(3); // this parameter passing is not a subject of the test
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_003());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_004 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_004 verify that template out parameters cannot be used as in formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_004 NegSem_050402_actual_parameters_004.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template out parameters cannot be used as in formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_004 { 

    type component GeneralComp {
    }
    
    function f_test(in integer p_val) {
        if (p_val == 4) { setverdict(pass); }
        else { setverdict(fail); }
    }

    function f_caller(out template integer p_val) {
        p_val := 4; // out parameter shall have a value before we can pass it to a function
        f_test(p_val); // tested parameter passing
    }

    
    testcase TC_NegSem_050402_actual_parameters_004() runs on GeneralComp {
        var template integer v_val;
        f_caller(v_val); // this parameter passing is not a subject of the test
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_004());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of `out' template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_005 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_005 verify that template inout parameters cannot be used as in formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_005 NegSem_050402_actual_parameters_005.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template inout parameters cannot be used as in formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_005 { 

    type component GeneralComp {
    }
    
    function f_test(in integer p_val) {
        if (p_val == 4) { setverdict(pass); }
        else { setverdict(fail); }
    }

    function f_caller(inout template integer p_val) {
        f_test(p_val); // tested parameter passing
    }

    
    testcase TC_NegSem_050402_actual_parameters_005() runs on GeneralComp {
        var template integer v_val := 5;
        f_caller(v_val); // this parameter passing is not a subject of the test
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_005());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of `inout' template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_006 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_006 verify that template parameters cannot be used as in formal value parameters of templates >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_006 NegSem_050402_actual_parameters_006.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template parameters cannot be used as in formal value parameters of templates
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_006 { 

    type component GeneralComp {
	}	

    template integer m_msg := 1;
    
    template integer m_test(in integer p_val) := 5 + p_val;

    testcase TC_NegSem_050402_actual_parameters_006() runs on GeneralComp {
        if (match(6, m_test(m_msg))) { // tested parameter passing
            setverdict(pass);
        } else {
            setverdict(fail);
        }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_006());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of template `@NegSem_050402_actual_parameters_006.m_msg'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_007 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_007 verify that template variables cannot be used as in formal value parameters of templates >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_007 NegSem_050402_actual_parameters_007.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template variables cannot be used as in formal value parameters of templates
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_007 { 

    type component GeneralComp {
	}
    
    template integer m_test(in integer p_val) := 5 + p_val;

    testcase TC_NegSem_050402_actual_parameters_007() runs on GeneralComp {
        var template integer vm_msg := 2;
        if (match(7, m_test(vm_msg))) { // tested parameter passing
            setverdict(pass);
        } else {
            setverdict(fail);
        }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_007());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of template variable `vm_msg'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_008 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_008 verify that template in parameters cannot be used as in formal value parameters of templates >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_008 NegSem_050402_actual_parameters_008.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template in parameters cannot be used as in formal value parameters of templates
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_008 { 

    type component GeneralComp {
    }
    
    template integer m_test(in integer p_val) := 5 + p_val;

    function f_caller(in template integer p_val) {
        if (match(8, m_test(p_val))) { // tested parameter passing
            setverdict(pass);
        } else {
            setverdict(fail);
        }
    }

    
    testcase TC_NegSem_050402_actual_parameters_008() runs on GeneralComp {
        f_caller(3); // this parameter passing is not a subject of the test
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_008());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_009 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_009 verify that template out parameters cannot be used as in formal value parameters of templates >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_009 NegSem_050402_actual_parameters_009.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template out parameters cannot be used as in formal value parameters of templates
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_009 { 

    type component GeneralComp {
    }
    
    template integer m_test(in integer p_val) := 5 + p_val;

    function f_caller(out template integer p_val) {
        p_val := 4; // out parameter shall have a value before we can pass it to a function
        if (match(9, m_test(p_val))) { // tested parameter passing
            setverdict(pass);
        } else {
            setverdict(fail);
        }
    }

    
    testcase TC_NegSem_050402_actual_parameters_009() runs on GeneralComp {
        var template integer v_val;
        f_caller(v_val); // this parameter passing is not a subject of the test
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_009());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of `out' template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_010 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_010 verify that template out parameters cannot be used as in formal value parameters of templates >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_010 NegSem_050402_actual_parameters_010.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template inout parameters cannot be used as in formal value parameters of templates
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_010 { 

    type component GeneralComp {
    }
    
    template integer m_test(in integer p_val) := 5 + p_val;

    function f_caller(inout template integer p_val) {
        if (match(10, m_test(p_val))) { // tested parameter passing
            setverdict(pass);
        } else {
            setverdict(fail);
        }
    }

    
    testcase TC_NegSem_050402_actual_parameters_010() runs on GeneralComp {
        var template integer v_val := 5;
        f_caller(v_val); // this parameter passing is not a subject of the test
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_010());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of `inout' template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_011 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_011 verify that template parameters cannot be used as in formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_011 NegSem_050402_actual_parameters_011.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template parameters cannot be used as in formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_011 { 

    type component GeneralComp {
        timer t := 0.0;
	}	

    template integer m_msg := 1;
    
    altstep a_test(integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 1) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    testcase TC_NegSem_050402_actual_parameters_011() runs on GeneralComp {
        t.start;
        a_test(m_msg); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_011());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of template `@NegSem_050402_actual_parameters_011.m_msg'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_012 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_012 verify that template variables cannot be used as in formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_012 NegSem_050402_actual_parameters_012.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template variables cannot be used as in formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_012 { 

    type component GeneralComp {
        timer t := 0.0;
	}
    
    altstep a_test(integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 2) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    testcase TC_NegSem_050402_actual_parameters_012() runs on GeneralComp {
        var template integer vm_msg := 2;
        t.start;
        a_test(vm_msg); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_012());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of template variable `vm_msg'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_014 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_014 verify that template out parameters cannot be used as in formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_014 NegSem_050402_actual_parameters_014.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template out parameters cannot be used as in formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_014 { 

    type component GeneralComp {
        timer t := 0.0;
    }
    
    altstep a_test(integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 4) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    function f_caller(out template integer p_val) runs on GeneralComp {
        p_val := 4; // out parameter shall have a value before we can pass it to a function
        a_test(p_val); // tested parameter passing
    }

    
    testcase TC_NegSem_050402_actual_parameters_014() runs on GeneralComp {
        var template integer v_val;
        t.start;
        f_caller(v_val); // this parameter passing is not a subject of the test
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_014());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of `out' template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_015 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_015 verify that template inout parameters cannot be used as in formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_015 NegSem_050402_actual_parameters_015.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template inout parameters cannot be used as in formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_015 { 

    type component GeneralComp {
        timer t := 0.0;
    }
    
    altstep a_test(integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 5) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    function f_caller(inout template integer p_val) runs on GeneralComp {
        a_test(p_val); // tested parameter passing
    }

    
    testcase TC_NegSem_050402_actual_parameters_015() runs on GeneralComp {
        var template integer v_val := 5;
        t.start;
        f_caller(v_val); // this parameter passing is not a subject of the test
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_015());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of `inout' template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_016 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_016 verify that template inout parameters cannot be used as in formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_016 NegSem_050402_actual_parameters_016.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template parameters cannot be used as in formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_016 { 

    type component GeneralComp {
	}
    
    template integer m_msg := 1;

    testcase TC_NegSem_050402_actual_parameters_016(in integer p_val) runs on GeneralComp {
        if (p_val == 1) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_016(m_msg)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of template `@NegSem_050402_actual_parameters_016.m_msg'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_017 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_017 verify that template variables cannot be used as in formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_017 NegSem_050402_actual_parameters_017.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template variables cannot be used as in formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_017 { 

    type component GeneralComp {
	}
    
    testcase TC_NegSem_050402_actual_parameters_017(in integer p_val) runs on GeneralComp {
        if (p_val == 2) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
        var template integer vm_msg := 2;
		execute(TC_NegSem_050402_actual_parameters_017(vm_msg)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of template variable `vm_msg'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_018 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_018 verify that template in parameters cannot be used as in formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_018 NegSem_050402_actual_parameters_018.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template in parameters cannot be used as in formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_018 { 

    type component GeneralComp {
    }
    
    testcase TC_NegSem_050402_actual_parameters_018(in integer p_val) runs on GeneralComp {
        if (p_val == 3) { setverdict(pass); }
        else { setverdict(fail); }
	}
    
    function f_caller(in template integer p_val) {
        execute(TC_NegSem_050402_actual_parameters_018(p_val)); // tested parameter passing
    }

	control {
		f_caller(3); // this parameter passing is not a subject of the test
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_019 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_019 verify that template out parameters cannot be used as in formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_019 NegSem_050402_actual_parameters_019.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template out parameters cannot be used as in formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_019 { 

    type component GeneralComp {
    }
    
    testcase TC_NegSem_050402_actual_parameters_019(in integer p_val) runs on GeneralComp {
        if (p_val == 4) { setverdict(pass); }
        else { setverdict(fail); }
	}
    
    function f_caller(out template integer p_val) {
        p_val := 4; // out parameter shall have a value before we can pass it to a function
        execute(TC_NegSem_050402_actual_parameters_019(p_val)); // tested parameter passing
    }

	control {
        var template integer vm_val;
        f_caller(vm_val);
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of `out' template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_020 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_020 verify that template inout parameters cannot be used as in formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_020 NegSem_050402_actual_parameters_020.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template inout parameters cannot be used as in formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed by value to in formal value parameters shall be 
// variables, literal values, module parameters, constants, variables, value returning 
// (external) functions, formal value parameters (of in, inout or out parameterization) 
// of the current scope or expressions composed of the above.

module NegSem_050402_actual_parameters_020 { 

    type component GeneralComp {
    }
    
    testcase TC_NegSem_050402_actual_parameters_020(in integer p_val) runs on GeneralComp {
        if (p_val == 5) { setverdict(pass); }
        else { setverdict(fail); }
	}

    function f_caller(inout template integer p_val) {
        execute(TC_NegSem_050402_actual_parameters_020(p_val)); // tested parameter passing
    }

	control {
        var template integer vm_val := 5;
		f_caller(vm_val);
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of `inout' template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_021 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_021 verify that literals cannot be used as inout formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_021 NegSem_050402_actual_parameters_021.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that literals cannot be used as inout formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_021 { 

    type component GeneralComp {
	}	

    function f_test(inout integer p_val) {
        if (p_val == 1) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_021() runs on GeneralComp {
        f_test(1); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_021());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_022 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC -050402_022 verify that literals cannot be used as inout formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_022 NegSem_050402_actual_parameters_022.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that module parameters cannot be used as inout formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_022 { 

    type component GeneralComp {
	}	

    modulepar integer PX_VAL := 2;
    
    function f_test(inout integer p_val) {
        if (p_val == 2) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_022() runs on GeneralComp {
        f_test(PX_VAL); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_022());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of module parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_023 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_023 verify that constants cannot be used as inout formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_023 NegSem_050402_actual_parameters_023.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that constants cannot be used as inout formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_023 { 

    type component GeneralComp {
	}	

    const integer c_val := 3;
    
    function f_test(inout integer p_val) {
        if (p_val == 3) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_023() runs on GeneralComp {
        f_test(c_val); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_023());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of constant 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_024 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_024 verify that function calls cannot be used as inout formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_024 NegSem_050402_actual_parameters_024.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that function calls cannot be used as inout formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_024 { 

    type component GeneralComp {
    }
    
    function f_ret() return integer {
        return 5;
    }
    
    function f_test(inout integer p_val) {
        if (p_val == 5) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_024() runs on GeneralComp {
        f_test(f_ret()); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_024());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of function 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_025 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_025 verify that expressions cannot be used as inout formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_025 NegSem_050402_actual_parameters_025.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that expressions cannot be used as inout formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_025 { 

    type component GeneralComp {
    }
    
    function f_ret() return integer {
        return 4;
    }
    
    function f_test(inout integer p_val) {
        if (p_val == 9) { setverdict(pass); }
        else { setverdict(fail); }
    }
    
    testcase TC_NegSem_050402_actual_parameters_025() runs on GeneralComp {
        var integer v_val := 5;
        f_test(10 + f_ret() - v_val); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_025());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_026 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_026 verify that template parameters cannot be used as inout formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_026 NegSem_050402_actual_parameters_026.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template parameters cannot be used as inout formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_026 { 

    type component GeneralComp {
	}
    
    template integer m_msg := 1;
    
    function f_test(inout integer p_val) {
        if (p_val == 1) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_026() runs on GeneralComp {
        f_test(m_msg); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_026());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_027 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_027 verify that template variables cannot be used as inout formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_027 NegSem_050402_actual_parameters_027.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template variables cannot be used as inout formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_027 { 

    type component GeneralComp {
	}
    
    function f_test(inout integer p_val) {
        if (p_val == 2) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_027() runs on GeneralComp {
        var template integer vm_msg := 2;
        f_test(vm_msg); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_027());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template variable `vm_msg'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_028 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_028 verify that template in parameters cannot be used as inout formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_028 NegSem_050402_actual_parameters_028.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template in parameters cannot be used as inout formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_028 { 

    type component GeneralComp {
    }
    
    function f_test(inout integer p_val) {
        if (p_val == 3) { setverdict(pass); }
        else { setverdict(fail); }
    }

    function f_caller(in template integer p_val) {
        f_test(p_val); // tested parameter passing
    }

    
    testcase TC_NegSem_050402_actual_parameters_028() runs on GeneralComp {
        f_caller(3); // this parameter passing is not a subject of the test
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_028());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_029 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_029 verify that template out parameters cannot be used as inout formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_029 NegSem_050402_actual_parameters_029.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template out parameters cannot be used as inout formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_029 { 

    type component GeneralComp {
    }
    
    function f_test(inout integer p_val) {
        if (p_val == 4) { setverdict(pass); }
        else { setverdict(fail); }
    }

    function f_caller(out template integer p_val) {
        p_val := 4; // out parameter shall have a value before we can pass it to a function
        f_test(p_val); // tested parameter passing
    }

    
    testcase TC_NegSem_050402_actual_parameters_029() runs on GeneralComp {
        var template integer v_val;
        f_caller(v_val); // this parameter passing is not a subject of the test
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_029());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of `out' template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_030 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_030 verify that template inout parameters cannot be used as inout formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_030 NegSem_050402_actual_parameters_030.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template inout parameters cannot be used as inout formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_030 { 

    type component GeneralComp {
    }
    
    function f_test(in integer p_val) {
        if (p_val == 4) { setverdict(pass); }
        else { setverdict(fail); }
    }

    function f_caller(inout template integer p_val) {
        f_test(p_val); // tested parameter passing
    }

    
    testcase TC_NegSem_050402_actual_parameters_030() runs on GeneralComp {
        var template integer v_val := 5;
        f_caller(v_val); // this parameter passing is not a subject of the test
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_030());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a value was expected instead of `inout' template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_031 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_031 verify that template variable element reference cannot be used as inout formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_031 NegSem_050402_actual_parameters_031.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template variable element reference cannot be used as inout formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_031 { 

    type component GeneralComp {
    }
    
    type record R {
        integer field1
    }
    
    function f_test(inout integer p_val) {
        if (p_val == 10) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_031() runs on GeneralComp {
        var template R v_val := { field1 := 10 };
        f_test(v_val.field1); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_031());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template variable `v_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_032 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_032 verify that reference to elements of formal value parameters cannot be used as inout formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_032 NegSem_050402_actual_parameters_032.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that reference to elements of formal value parameters cannot be used as inout formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_032 { 

    type component GeneralComp {
    }
    
    type record R {
        integer field1
    }
    
    function f_test(inout integer p_val) {
        if (p_val == 11) { setverdict(pass); }
        else { setverdict(fail); }
    }
    
    function f_caller(in template R p_param) {
        f_test(p_param.field1); // tested parameter passing
    }

    testcase TC_NegSem_050402_actual_parameters_032() runs on GeneralComp {
        f_caller({field1 := 11 });        
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_032());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template parameter `p_param'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_033 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_033 verify that literals cannot be used as inout formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_033 NegSem_050402_actual_parameters_033.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that literals cannot be used as inout formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_033 { 

    type component GeneralComp {
        timer t := 0.0;
	}	

    altstep a_test(inout integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 1) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    testcase TC_NegSem_050402_actual_parameters_033() runs on GeneralComp {
        t.start;
        a_test(1); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_033());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_034 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_034 verify that module parameters cannot be used as inout formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_034 NegSem_050402_actual_parameters_034.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that module parameters cannot be used as inout formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_034 { 

    type component GeneralComp {
        timer t := 0.0;
	}	

    modulepar integer PX_VAL := 2;
    
    altstep a_test(inout integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 2) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    testcase TC_NegSem_050402_actual_parameters_034() runs on GeneralComp {
        t.start;
        a_test(PX_VAL); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_034());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of module parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_035 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_035 verify that constants cannot be used as inout formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_035 NegSem_050402_actual_parameters_035.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that constants cannot be used as inout formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_035 { 

    type component GeneralComp {
        timer t := 0.0;
	}	

    const integer c_val := 3;
    
    altstep a_test(inout integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 3) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    testcase TC_NegSem_050402_actual_parameters_035() runs on GeneralComp {
        t.start;
        a_test(c_val); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_035());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of constant `@NegSem_050402_actual_parameters_035.c_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_036 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_036 verify that function calls cannot be used as inout formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_036 NegSem_050402_actual_parameters_036.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that function calls cannot be used as inout formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_036 { 

    type component GeneralComp {
        timer t := 0.0;
    }
    
    function f_ret() return integer {
        return 5;
    }
    
    altstep a_test(inout integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 5) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    testcase TC_NegSem_050402_actual_parameters_036() runs on GeneralComp {
        t.start;
        a_test(f_ret()); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_036());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of function `@NegSem_050402_actual_parameters_036.f_ret'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_037 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_037 verify that expressions cannot be used as inout formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_037 NegSem_050402_actual_parameters_037.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that expressions cannot be used as inout formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_037 { 

    type component GeneralComp {
        timer t := 0.0;
    }
    
    function f_ret() return integer {
        return 4;
    }
    
    altstep a_test(inout integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 9) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }
    
    testcase TC_NegSem_050402_actual_parameters_037() runs on GeneralComp {
        var integer v_val := 5;
        t.start;
        a_test(10 + f_ret() - v_val); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_037());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_038 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_038 verify that template parameters cannot be used as inout formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_038 NegSem_050402_actual_parameters_038.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template parameters cannot be used as inout formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_038 { 

    type component GeneralComp {
        timer t := 0.0;
	}	

    template integer m_msg := 1;
    
    altstep a_test(inout integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 1) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    testcase TC_NegSem_050402_actual_parameters_038() runs on GeneralComp {
        t.start;
        a_test(m_msg); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_038());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_039 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_039 verify that template variables cannot be used as inout formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_039 NegSem_050402_actual_parameters_039.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template variables cannot be used as inout formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_039 { 

    type component GeneralComp {
        timer t := 0.0;
	}
    
    altstep a_test(inout integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 1) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    testcase TC_NegSem_050402_actual_parameters_039() runs on GeneralComp {
        var template integer vm_msg := 2;
        t.start;
        a_test(vm_msg); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_039());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template variable `vm_msg'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_040 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_040 verify that template in parameters cannot be used as inout formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_040 NegSem_050402_actual_parameters_040.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template in parameters cannot be used as inout formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types..

module NegSem_050402_actual_parameters_040 { 

    type component GeneralComp {
        timer t := 0.0;
    }
    
    altstep a_test(inout integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 1) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    function f_caller(in template integer p_val) runs on GeneralComp {
        a_test(p_val); // tested parameter passing
    }

    
    testcase TC_NegSem_050402_actual_parameters_040() runs on GeneralComp {
        t.start;
        f_caller(3); // this parameter passing is not a subject of the test
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_040());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_041 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_041 verify that template out parameters cannot be used as inout formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_041 NegSem_050402_actual_parameters_041.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template out parameters cannot be used as inout formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_041 { 

    type component GeneralComp {
        timer t := 0.0;
    }
    
    altstep a_test(inout integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 1) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    function f_caller(out template integer p_val) runs on GeneralComp {
        p_val := 4; // out parameter shall have a value before we can pass it to a function
        a_test(p_val); // tested parameter passing
    }

    
    testcase TC_NegSem_050402_actual_parameters_041() runs on GeneralComp {
        var template integer v_val;
        t.start;
        f_caller(v_val); // this parameter passing is not a subject of the test
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_041());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of `out' template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_042 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_042 verify that template inout parameters cannot be used as inout formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_042 NegSem_050402_actual_parameters_042.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template inout parameters cannot be used as inout formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_042 { 

    type component GeneralComp {
        timer t := 0.0;
    }
    
    altstep a_test(inout integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 1) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    function f_caller(inout template integer p_val) runs on GeneralComp {
        a_test(p_val); // tested parameter passing
    }

    
    testcase TC_NegSem_050402_actual_parameters_042() runs on GeneralComp {
        var template integer v_val := 5;
        t.start;
        f_caller(v_val); // this parameter passing is not a subject of the test
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_042());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of `inout' template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_043 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_043 verify that template variable element reference cannot be used as inout formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_043 NegSem_050402_actual_parameters_043.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template variable element reference cannot be used as inout formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_043 { 

    type component GeneralComp {
        timer t := 0.0;
    }
    
    type record R {
        integer field1
    }
    
    altstep a_test(inout integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 10) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    testcase TC_NegSem_050402_actual_parameters_043() runs on GeneralComp {
        var template R v_val := { field1 := 10 };
        t.start;
        a_test(v_val.field1); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_043());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template variable `v_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_044 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_044 verify that reference to elements of formal value parameters cannot be used as inout formal value parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_044 NegSem_050402_actual_parameters_044.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that reference to elements of formal value parameters cannot be used as inout formal value parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_044 { 

    type component GeneralComp {
        timer t := 0.0;
    }
    
    type record R {
        integer field1
    }
    
    altstep a_test(inout integer p_val) runs on GeneralComp {
        []t.timeout {
            if (p_val == 11) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }
    
    function f_caller(in template R p_param) runs on GeneralComp {
        a_test(p_param.field1); // tested parameter passing
    }

    testcase TC_NegSem_050402_actual_parameters_044() runs on GeneralComp {
        t.start;
        f_caller({field1 := 11 });        
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_044());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template parameter `p_param'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_045 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_045 verify that literals cannot be used as inout formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_045 NegSem_050402_actual_parameters_045.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that literals cannot be used as inout formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_045 { 

    type component GeneralComp {
	}	

    testcase TC_NegSem_050402_actual_parameters_045(inout integer p_val) runs on GeneralComp {
        if (p_val == 1) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_045(1)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_046 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_046 verify that module parameters cannot be used as inout formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_046 NegSem_050402_actual_parameters_046.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that module parameters cannot be used as inout formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_046 { 

    type component GeneralComp {
	}	

    modulepar integer PX_VAL := 2;    

    testcase TC_NegSem_050402_actual_parameters_046(inout integer p_val) runs on GeneralComp {
        if (p_val == 2) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_046(PX_VAL)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of module parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_047 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_047 verify that constants cannot be used as inout formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_047 NegSem_050402_actual_parameters_047.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that constants cannot be used as inout formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_047 { 

    type component GeneralComp {
	}	

    const integer c_val := 3;

    testcase TC_NegSem_050402_actual_parameters_047(inout integer p_val) runs on GeneralComp {
        if (p_val == 3) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_047(c_val)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of constant 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_048 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_048 verify that function calls cannot be used as inout formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_048 NegSem_050402_actual_parameters_048.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that function calls cannot be used as inout formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_048 { 

    type component GeneralComp {
    }
    
    function f_ret() return integer {
        return 5;
    }

    testcase TC_NegSem_050402_actual_parameters_048(inout integer p_val) runs on GeneralComp {
        if (p_val == 5) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_048(f_ret())); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of function `@NegSem_050402_actual_parameters_048.f_ret' 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_049 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_049 verify that expressions cannot be used as inout formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_049 NegSem_050402_actual_parameters_049.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that expressions cannot be used as inout formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_049 { 

    type component GeneralComp {
    }
    
    function f_ret() return integer {
        return 4;
    }
    
    testcase TC_NegSem_050402_actual_parameters_049(inout integer p_val) runs on GeneralComp {
        if (p_val == 9) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
        var integer v_val := 5;
		execute(TC_NegSem_050402_actual_parameters_049(10 + f_ret() - v_val)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_050 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_050 verify that template parameters cannot be used as inout formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_050 NegSem_050402_actual_parameters_050.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template parameters cannot be used as inout formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_050 { 

    type component GeneralComp {
	}
    
    template integer m_msg := 1;

    testcase TC_NegSem_050402_actual_parameters_050(inout integer p_val) runs on GeneralComp {
        if (p_val == 1) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_050(m_msg)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template `@NegSem_050402_actual_parameters_050.m_msg' 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_051 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_051 verify that template variables cannot be used as inout formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_051 NegSem_050402_actual_parameters_051.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template variables cannot be used as inout formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.
module NegSem_050402_actual_parameters_051 { 

    type component GeneralComp {
	}
    
    testcase TC_NegSem_050402_actual_parameters_051(inout integer p_val) runs on GeneralComp {
        if (p_val == 2) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
        var template integer vm_msg := 2;
		execute(TC_NegSem_050402_actual_parameters_051(vm_msg)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template variable `vm_msg' 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_052 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_052 verify that template in parameters cannot be used as inout formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_052 NegSem_050402_actual_parameters_052.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template in parameters cannot be used as inout formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_052 { 

    type component GeneralComp {
    }
    
    testcase TC_NegSem_050402_actual_parameters_052(inout integer p_val) runs on GeneralComp {
        if (p_val == 3) { setverdict(pass); }
        else { setverdict(fail); }
	}
    
    function f_caller(in template integer p_val) {
        execute(TC_NegSem_050402_actual_parameters_052(p_val)); // tested parameter passing
    }

	control {
		f_caller(3); // this parameter passing is not a subject of the test
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_053 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_053 verify that template in parameters cannot be used as inout formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_053 NegSem_050402_actual_parameters_053.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template out parameters cannot be used as inout formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_053 { 

    type component GeneralComp {
    }
    
    testcase TC_NegSem_050402_actual_parameters_053(inout integer p_val) runs on GeneralComp {
        if (p_val == 4) { setverdict(pass); }
        else { setverdict(fail); }
	}
    
    function f_caller(out template integer p_val) {
        p_val := 4; // out parameter shall have a value before we can pass it to a function
        execute(TC_NegSem_050402_actual_parameters_053(p_val)); // tested parameter passing
    }

	control {
        var template integer vm_val;
        f_caller(vm_val);
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of `out' template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_054 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_054 verify that template inout parameters cannot be used as inout formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_054 NegSem_050402_actual_parameters_054.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template inout parameters cannot be used as inout formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_054 { 

    type component GeneralComp {
    }
    
    testcase TC_NegSem_050402_actual_parameters_054(inout integer p_val) runs on GeneralComp {
        if (p_val == 5) { setverdict(pass); }
        else { setverdict(fail); }
	}

    function f_caller(inout template integer p_val) {
        execute(TC_NegSem_050402_actual_parameters_054(p_val)); // tested parameter passing
    }

	control {
        var template integer vm_val := 5;
		f_caller(vm_val);
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of `inout' template parameter `p_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_055 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_055 verify that template variable element reference cannot be used as inout formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_055 NegSem_050402_actual_parameters_055.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template variable element reference cannot be used as inout formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_055 { 

    type component GeneralComp {
    }
    
    type record R {
        integer field1
    }

    testcase TC_NegSem_050402_actual_parameters_055(inout integer p_val) runs on GeneralComp {
        if (p_val == 10) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
        var template R v_val := { field1 := 10 };
		execute(TC_NegSem_050402_actual_parameters_055(v_val.field1)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template variable `v_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_056 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_056 verify that reference to elements of formal value parameters cannot be used as inout formal value parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_056 NegSem_050402_actual_parameters_056.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that reference to elements of formal value parameters cannot be used as inout formal value parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.

module NegSem_050402_actual_parameters_056 { 

    type component GeneralComp {
    }
    
    type record R {
        integer field1
    } 

    testcase TC_NegSem_050402_actual_parameters_056(inout integer p_val) runs on GeneralComp {
        if (p_val == 11) { setverdict(pass); }
        else { setverdict(fail); }             
	}
    
    function f_caller(in template R p_param) {
        execute(TC_NegSem_050402_actual_parameters_056(p_param.field1)); // tested parameter passing
    }

	control {
		f_caller({field1 := 11 });
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a variable or value parameter was expected for an `inout' value parameter instead of template parameter `p_param'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_057 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_057 verify that literals cannot be used as out formal template parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_057 NegSem_050402_actual_parameters_057.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that literals cannot be used as out formal template parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_057 { 

    type component GeneralComp {
	}	

    function f_test(out template integer p_val) {
        p_val := ?;
        setverdict(pass);
    }

    testcase TC_NegSem_050402_actual_parameters_057() runs on GeneralComp {
        f_test(1); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_057());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_058 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_058 verify that module parameters cannot be used as out formal template parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_058 NegSem_050402_actual_parameters_058.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that module parameters cannot be used as out formal template parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_058 { 

    type component GeneralComp {
	}	

    modulepar integer PX_VAL := 2;
    
    function f_test(out template integer p_val) {
        p_val := ?;
        setverdict(pass);
    }

    testcase TC_NegSem_050402_actual_parameters_058() runs on GeneralComp {
        f_test(PX_VAL); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_058());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter instead of module parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_059 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_059 verify that constants cannot be used as out formal template parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_059 NegSem_050402_actual_parameters_059.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that constants cannot be used as out formal template parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_059 { 

    type component GeneralComp {
	}	

    const integer c_val := 3;
    
    function f_test(out template integer p_val) {
        p_val := ?;
        setverdict(pass);
    }

    testcase TC_NegSem_050402_actual_parameters_059() runs on GeneralComp {
        f_test(c_val); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_059());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter instead of constant
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_060 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_060 verify that function calls cannot be used as out formal template parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_060 NegSem_050402_actual_parameters_060.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that function calls cannot be used as out formal template parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_060 { 

    type component GeneralComp {
    }
    
    function f_ret() return integer {
        return 5;
    }
    
    function f_test(out template integer p_val) {
        p_val := ?;
        setverdict(pass);
    }

    testcase TC_NegSem_050402_actual_parameters_060() runs on GeneralComp {
        f_test(f_ret()); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_060());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter instead of function 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_061 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_061 verify that expressions cannot be used as out formal template parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_061 NegSem_050402_actual_parameters_061.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that expressions cannot be used as out formal template parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_061 { 

    type component GeneralComp {
    }
    
    function f_ret() return integer {
        return 4;
    }
    
    function f_test(out template integer p_val) {
        p_val := ?;
        setverdict(pass);
    }
    
    testcase TC_NegSem_050402_actual_parameters_061() runs on GeneralComp {
        var integer v_val := 5;
        f_test(10 + f_ret() - v_val); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_061());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_062 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_062 verify that template parameters cannot be used as out formal template parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_062 NegSem_050402_actual_parameters_062.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template parameters cannot be used as out formal template parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_062 { 

    type component GeneralComp {
	}
    
    template integer m_msg := 1;
    
    function f_test(out template integer p_val) {
        p_val := ?;
        setverdict(pass);
    }

    testcase TC_NegSem_050402_actual_parameters_062() runs on GeneralComp {
        f_test(m_msg); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_062());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter instead of template `@NegSem_050402_actual_parameters_062.m_msg'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_063 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_063 verify that literals cannot be used as out formal template parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_063 NegSem_050402_actual_parameters_063.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that literals cannot be used as out formal template parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_063 { 

    type component GeneralComp {
        timer t := 0.0;
	}	

    altstep a_test(out template integer p_val) runs on GeneralComp {
        []t.timeout {
            p_val := ?;
            setverdict(pass);
        }
    }

    testcase TC_NegSem_050402_actual_parameters_063() runs on GeneralComp {
        t.start;
        a_test(1); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_063());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_064 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_064 verify that module parameters cannot be used as out formal template parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_064 NegSem_050402_actual_parameters_064.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that module parameters cannot be used as out formal template parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_064 { 

    type component GeneralComp {
        timer t := 0.0;
	}	

    modulepar integer PX_VAL := 2;
    
    altstep a_test(out template integer p_val) runs on GeneralComp {
        []t.timeout {
            p_val := ?;
            setverdict(pass);
        }
    }

    testcase TC_NegSem_050402_actual_parameters_064() runs on GeneralComp {
        t.start;
        a_test(PX_VAL); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_064());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter instead of module parameter 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_065 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_065 verify that constants cannot be used as out formal template parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_065 NegSem_050402_actual_parameters_065.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that constants cannot be used as out formal template parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_065 { 

    type component GeneralComp {
        timer t := 0.0;
	}	

    const integer c_val := 3;
    
    altstep a_test(out template integer p_val) runs on GeneralComp {
        []t.timeout {
            p_val := ?;
            setverdict(pass);
        }
    }

    testcase TC_NegSem_050402_actual_parameters_065() runs on GeneralComp {
        t.start;
        a_test(c_val); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_065());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter instead of constant 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_066 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_066 verify that function calls cannot be used as out formal template parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_066 NegSem_050402_actual_parameters_066.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that function calls cannot be used as out formal template parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_066 { 

    type component GeneralComp {
        timer t := 0.0;
    }
    
    function f_ret() return integer {
        return 5;
    }
    
    altstep a_test(out template integer p_val) runs on GeneralComp {
        []t.timeout {
            p_val := ?;
            setverdict(pass);
        }
    }

    testcase TC_NegSem_050402_actual_parameters_066() runs on GeneralComp {
        t.start;
        a_test(f_ret()); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_066());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter instead of function 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_067 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_067 verify that expressions cannot be used as out formal template parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_067 NegSem_050402_actual_parameters_067.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that expressions cannot be used as out formal template parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_067 { 

    type component GeneralComp {
        timer t := 0.0;
    }
    
    function f_ret() return integer {
        return 4;
    }
    
    altstep a_test(out template integer p_val) runs on GeneralComp {
        []t.timeout {
            p_val := ?;
            setverdict(pass);
        }
    }
    
    testcase TC_NegSem_050402_actual_parameters_067() runs on GeneralComp {
        var integer v_val := 5;
        t.start;
        a_test(10 + f_ret() - v_val); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_067());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_068 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_068 verify that template parameters cannot be used as out formal template parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_068 NegSem_050402_actual_parameters_068.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template parameters cannot be used as out formal template parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_068 { 

    type component GeneralComp {
        timer t := 0.0;
	}	

    template integer m_msg := 1;
    
    altstep a_test(out template integer p_val) runs on GeneralComp {
        []t.timeout {
            p_val := ?;
            setverdict(pass);
        }
    }

    testcase TC_NegSem_050402_actual_parameters_068() runs on GeneralComp {
        t.start;
        a_test(m_msg); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_068());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter instead of template 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_069 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_069 verify that literals cannot be used as out formal template parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_069 NegSem_050402_actual_parameters_069.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that literals cannot be used as out formal template parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_069 { 

    type component GeneralComp {
	}	

    testcase TC_NegSem_050402_actual_parameters_069(out template integer p_val) runs on GeneralComp {
        p_val := ?;
        setverdict(pass);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_069(1)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_070 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_070 verify that module parameters cannot be used as out formal template parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_070 NegSem_050402_actual_parameters_070.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that module parameters cannot be used as out formal template parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_070 { 

    type component GeneralComp {
	}	

    modulepar integer PX_VAL := 2;    

    testcase TC_NegSem_050402_actual_parameters_070(out template integer p_val) runs on GeneralComp {
        p_val := ?;
        setverdict(pass);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_070(PX_VAL)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter instead of module parameter `@NegSem_050402_actual_parameters_070.PX_VAL'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_071 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_071 verify that constants cannot be used as out formal template parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_071 NegSem_050402_actual_parameters_071.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that constants cannot be used as out formal template parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_071 { 

    type component GeneralComp {
	}	

    const integer c_val := 3;

    testcase TC_NegSem_050402_actual_parameters_071(out template integer p_val) runs on GeneralComp {
        p_val := ?;
        setverdict(pass);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_071(c_val)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter instead of constant
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_072 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_072 verify that function calls cannot be used as out formal template parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_072 NegSem_050402_actual_parameters_072.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that function calls cannot be used as out formal template parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_072 { 

    type component GeneralComp {
    }
    
    function f_ret() return integer {
        return 5;
    }

    testcase TC_NegSem_050402_actual_parameters_072(out template integer p_val) runs on GeneralComp {
        p_val := ?;
        setverdict(pass);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_072(f_ret())); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter instead of function `@NegSem_050402_actual_parameters_072.f_ret'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_073 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_073 verify that expressions cannot be used as out formal template parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_073 NegSem_050402_actual_parameters_073.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that expressions cannot be used as out formal template parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_073 { 

    type component GeneralComp {
    }
    
    function f_ret() return integer {
        return 4;
    }
    
    testcase TC_NegSem_050402_actual_parameters_073(out template integer p_val) runs on GeneralComp {
        p_val := ?;
        setverdict(pass);
	}

	control {
        var integer v_val := 5;
		execute(TC_NegSem_050402_actual_parameters_073(10 + f_ret() - v_val)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_074 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_074 verify that template parameters cannot be used as out formal template parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_074 NegSem_050402_actual_parameters_074.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template parameters cannot be used as out formal template parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to out formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_074 { 

    type component GeneralComp {
	}
    
    template integer m_msg := 1;

    testcase TC_NegSem_050402_actual_parameters_074(out template integer p_val) runs on GeneralComp {
        p_val := ?;
        setverdict(pass);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_074(m_msg)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `out' template parameter instead of template `@NegSem_050402_actual_parameters_074.m_msg'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_075 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_075 verify that literals cannot be used as inout formal template parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_075 NegSem_050402_actual_parameters_075.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that literals cannot be used as inout formal template parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_075 { 

    type component GeneralComp {
	}	

    function f_test(inout template integer p_val) {
        if (match(1, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_075() runs on GeneralComp {
        f_test(1); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_075());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_076 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_076 verify that module parameters cannot be used as inout formal template parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_076 NegSem_050402_actual_parameters_076.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that module parameters cannot be used as inout formal template parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_076 { 

    type component GeneralComp {
	}	

    modulepar integer PX_VAL := 2;
    
    function f_test(inout template integer p_val) {
        if (match(2, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_076() runs on GeneralComp {
        f_test(PX_VAL); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_076());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter instead of module parameter `@NegSem_050402_actual_parameters_076.PX_VAL'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_077 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_077 verify that constants cannot be used as inout formal template parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_077 NegSem_050402_actual_parameters_077.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that constants cannot be used as inout formal template parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_077 { 

    type component GeneralComp {
	}	

    const integer c_val := 3;
    
    function f_test(inout template integer p_val) {
        if (match(3, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_077() runs on GeneralComp {
        f_test(c_val); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_077());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter instead of constant `@NegSem_050402_actual_parameters_077.c_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_078 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_078 verify that constants cannot be used as inout formal template parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_078 NegSem_050402_actual_parameters_078.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that function calls cannot be used as inout formal template parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_078 { 

    type component GeneralComp {
    }
    
    function f_ret() return integer {
        return 5;
    }
    
    function f_test(inout template integer p_val) {
        if (match(5, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_078() runs on GeneralComp {
        f_test(f_ret()); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_078());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter instead of function `@NegSem_050402_actual_parameters_078.f_ret'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_079 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_079 verify that expressions cannot be used as inout formal template parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_079 NegSem_050402_actual_parameters_079.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that expressions cannot be used as inout formal template parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_079 { 

    type component GeneralComp {
    }
    
    function f_ret() return integer {
        return 4;
    }
    
    function f_test(inout template integer p_val) {
        if (match(9, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
    }
    
    testcase TC_NegSem_050402_actual_parameters_079() runs on GeneralComp {
        var integer v_val := 5;
        f_test(10 + f_ret() - v_val); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_079());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_080 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_080 verify that template parameters cannot be used as inout formal template parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_080 NegSem_050402_actual_parameters_080.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template parameters cannot be used as inout formal template parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_080 { 

    type component GeneralComp {
	}
    
    template integer m_msg := 1;
    
    function f_test(inout template integer p_val) {
        if (match(1, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_080() runs on GeneralComp {
        f_test(m_msg); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_080());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter instead of template `@NegSem_050402_actual_parameters_080.m_msg'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_081 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_081 verify that literals cannot be used as inout formal template parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_081 NegSem_050402_actual_parameters_081.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that literals cannot be used as inout formal template parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.
module NegSem_050402_actual_parameters_081 { 

    type component GeneralComp {
        timer t := 0.0;
	}	

    altstep a_test(inout template integer p_val) runs on GeneralComp {
        []t.timeout {
            if (match(1, p_val)) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    testcase TC_NegSem_050402_actual_parameters_081() runs on GeneralComp {
        t.start;
        a_test(1); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_081());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_082 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_082 verify that module parameters cannot be used as inout formal template parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_082 NegSem_050402_actual_parameters_082.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that module parameters cannot be used as inout formal template parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.
module NegSem_050402_actual_parameters_082 { 

    type component GeneralComp {
        timer t := 0.0;
	}	

    modulepar integer PX_VAL := 2;
    
    altstep a_test(inout template integer p_val) runs on GeneralComp {
        []t.timeout {
            if (match(2, p_val)) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    testcase TC_NegSem_050402_actual_parameters_082() runs on GeneralComp {
        t.start;
        a_test(PX_VAL); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_082());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter instead of module parameter `@NegSem_050402_actual_parameters_082.PX_VAL'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_083 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_083 verify that module parameters cannot be used as inout formal template parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_083 NegSem_050402_actual_parameters_083.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that constants cannot be used as inout formal template parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_083 { 

    type component GeneralComp {
        timer t := 0.0;
	}	

    const integer c_val := 3;
    
    altstep a_test(inout template integer p_val) runs on GeneralComp {
        []t.timeout {
            if (match(3, p_val)) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    testcase TC_NegSem_050402_actual_parameters_083() runs on GeneralComp {
        t.start;
        a_test(c_val); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_083());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter instead of constant `@NegSem_050402_actual_parameters_083.c_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_084 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_084 verify that function calls cannot be used as inout formal template parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_084 NegSem_050402_actual_parameters_084.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that function calls cannot be used as inout formal template parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_084 { 

    type component GeneralComp {
        timer t := 0.0;
    }
    
    function f_ret() return integer {
        return 5;
    }
    
    altstep a_test(inout template integer p_val) runs on GeneralComp {
        []t.timeout {
            if (match(5, p_val)) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    testcase TC_NegSem_050402_actual_parameters_084() runs on GeneralComp {
        t.start;
        a_test(f_ret()); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_084());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter instead of function `@NegSem_050402_actual_parameters_084.f_ret'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_085 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_085 verify that expressions cannot be used as inout formal template parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_085 NegSem_050402_actual_parameters_085.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that expressions cannot be used as inout formal template parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_085 { 

    type component GeneralComp {
        timer t := 0.0;
    }
    
    function f_ret() return integer {
        return 4;
    }
    
    altstep a_test(inout template integer p_val) runs on GeneralComp {
        []t.timeout {
            if (match(9, p_val)) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }
    
    testcase TC_NegSem_050402_actual_parameters_085() runs on GeneralComp {
        var integer v_val := 5;
        t.start;
        a_test(10 + f_ret() - v_val); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_085());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_086 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_086 verify that template parameters cannot be used as inout formal template parameters of altsteps >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_086 NegSem_050402_actual_parameters_086.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template parameters cannot be used as inout formal template parameters of altsteps
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value parameters, formal template parameters or references 
// to elements of variables, template variables, formal value parameters or formal template 
// parameters of structured types.

module NegSem_050402_actual_parameters_086 { 

    type component GeneralComp {
        timer t := 0.0;
	}	

    template integer m_msg := 1;
    
    altstep a_test(inout template integer p_val) runs on GeneralComp {
        []t.timeout {
            if (match(1, p_val)) { setverdict(pass); }
            else { setverdict(fail); }
        }
    }

    testcase TC_NegSem_050402_actual_parameters_086() runs on GeneralComp {
        t.start;
        a_test(m_msg); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_086());
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter instead of template `@NegSem_050402_actual_parameters_086.m_msg'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_087 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_087 verify that literals cannot be used as inout formal template parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_087 NegSem_050402_actual_parameters_087.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that literals cannot be used as inout formal template parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_087 { 

    type component GeneralComp {
	}	

    testcase TC_NegSem_050402_actual_parameters_087(inout template integer p_val) runs on GeneralComp {
        if (match(1, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_087(1)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_088 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_088 verify that module parameters cannot be used as inout formal template parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_088 NegSem_050402_actual_parameters_088.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that module parameters cannot be used as inout formal template parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_088 { 

    type component GeneralComp {
	}	

    modulepar integer PX_VAL := 2;    

    testcase TC_NegSem_050402_actual_parameters_088(inout template integer p_val) runs on GeneralComp {
        if (match(2, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_088(PX_VAL)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter instead of module parameter `@NegSem_050402_actual_parameters_088.PX_VAL'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_089 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_089 verify that constants cannot be used as inout formal template parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_089 NegSem_050402_actual_parameters_089.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that constants cannot be used as inout formal template parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_089 { 

    type component GeneralComp {
	}	

    const integer c_val := 3;

    testcase TC_NegSem_050402_actual_parameters_089(inout template integer p_val) runs on GeneralComp {
        if (match(3, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_089(c_val)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter instead of constant `@NegSem_050402_actual_parameters_089.c_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_090 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_090 verify that function calls cannot be used as inout formal template parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_090 NegSem_050402_actual_parameters_090.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that function calls cannot be used as inout formal template parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_090 { 

    type component GeneralComp {
    }
    
    function f_ret() return integer {
        return 5;
    }

    testcase TC_NegSem_050402_actual_parameters_090(inout template integer p_val) runs on GeneralComp {
        if (match(5, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_090(f_ret())); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter instead of function `@NegSem_050402_actual_parameters_090.f_ret'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_091 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_091 verify that expressions cannot be used as inout formal template parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_091 NegSem_050402_actual_parameters_091.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that expressions cannot be used as inout formal template parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_091 { 

    type component GeneralComp {
    }
    
    function f_ret() return integer {
        return 4;
    }
    
    testcase TC_NegSem_050402_actual_parameters_091(inout template integer p_val) runs on GeneralComp {
        if (match(9, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
        var integer v_val := 5;
		execute(TC_NegSem_050402_actual_parameters_091(10 + f_ret() - v_val)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_092 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_092 verify that template parameters cannot be used as inout formal template parameters of test cases >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_092 NegSem_050402_actual_parameters_092.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that template parameters cannot be used as inout formal template parameters of test cases
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal template parameters shall be variables, 
// template variables, formal value or template parameters (of in, inout or out 
// parameterization) of the current scope or references to elements of (template) variables 
// or formal (template) parameters of structured types.

module NegSem_050402_actual_parameters_092 { 

    type component GeneralComp {
	}
    
    template integer m_msg := 1;

    testcase TC_NegSem_050402_actual_parameters_092(inout template integer p_val) runs on GeneralComp {
        if (match(1, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_092(m_msg)); // tested parameter passing
	}
}
<END_MODULE>

<RESULT COUNT 1>
 error: Reference to a template variable or template parameter was expected for an `inout' template parameter instead of template `@NegSem_050402_actual_parameters_092.m_msg'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_093 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_093 verify that referencing errors are detected in actual parameters passed to in formal value parameters >

<COMPILE>

<EXECUTE_PARALLEL>

<MODULE TTCN NegSem_050402_actual_parameters_093 NegSem_050402_actual_parameters_093.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that referencing errors are detected in actual parameters passed to in formal value parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// When actual parameters that are passed to in formal value or template parameters 
// contain a value or template reference, rules for using references on the right hand 
// side of assignments apply. 

module NegSem_050402_actual_parameters_093 { 

    type component GeneralComp {
	}
    
    type record R {
        integer field1,
        record {
            integer subfield1,
            integer subfield2
        } field2 optional
    }

    function f_test(in integer p_val) {
        if (p_val == 2) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_093() runs on GeneralComp {
        var R v_rec := {
            field1 := 1,
            field2 := omit
        }
        f_test(v_rec.field2.subfield1); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_093());
	}
}
<END_MODULE>

<RESULT COUNT 1>
Dynamic test case error: Using the value of an optional field containing omit
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_094 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_094 verify that referencing errors are detected in actual parameters passed to in formal template parameters >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_094 NegSem_050402_actual_parameters_094.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that referencing errors are detected in actual parameters passed to in formal template parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// When actual parameters that are passed to in formal value or template parameters 
// contain a value or template reference, rules for using references on the right hand 
// side of assignments apply. 

module NegSem_050402_actual_parameters_094 { 

    type component GeneralComp {
	}
    
    type record R {
        integer field1,
        record {
            integer subfield1,
            integer subfield2
        } field2 optional
    }
    
    template R mw_rec := {
        field1 := 1,
        field2 := *
    }

    function f_test(in template integer p_val) {
        if (match(255, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_094() runs on GeneralComp {        
        f_test(mw_rec.field2.subfield1); // tested parameter passing (using referencing rules specified at 15.6.2)
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_094());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to field `subfield1' of any or omit `@NegSem_050402_actual_parameters_094.mw_rec.field2'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_095 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_095 verify that referencing errors are detected in actual parameters passed to in formal template parameters >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN NegSem_050402_actual_parameters_095 NegSem_050402_actual_parameters_095.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that referencing errors are detected in actual parameters passed to out formal template parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// When actual parameters that are passed to inout and out formal value or template 
// parameters contain a value or template reference, rules for using references on 
// the left hand side of assignments apply.

module NegSem_050402_actual_parameters_095 { 

    type component GeneralComp {
	}
    
    type record R {
        integer field1,
        record {
            integer subfield1,
            integer subfield2
        } field2 optional
    }

    function f_test(out template integer p_val) {
        p_val := 10;
    }

    testcase TC_NegSem_050402_actual_parameters_095() runs on GeneralComp {
        var template R v_rec := {
            field1 := 1,
            field2 := ({ subfield1 := 0, subfield2 := 1}, { subfield1 := 2, subfield2 := 3 })
        };
        f_test(v_rec.field2.subfield1); // tested parameter passing (using referencing rules specified at 15.6.2)
        if (valueof(v_rec.field2.subfield1) == 10 and match(0, v_rec.field2.subfield2)) { setverdict(pass); }
        else { setverdict(fail); }

	}

	control {
		execute(TC_NegSem_050402_actual_parameters_095());
	}
}
<END_MODULE>

<RESULT COUNT 1>
Dynamic test case error: Matching with an uninitialized/unsupported integer template.
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_096 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_096 verify that referencing rules are correctly applied to actual parameters of inout formal template parameters >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN NegSem_050402_actual_parameters_096 NegSem_050402_actual_parameters_096.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that referencing rules are correctly applied to actual parameters of inout formal template parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// When actual parameters that are passed to inout and out formal value or template 
// parameters contain a value or template reference, rules for using references on 
// the left hand side of assignments apply.

module NegSem_050402_actual_parameters_096 { 

    type component GeneralComp {
	}
    
    type record R {
        integer field1,
        record {
            integer subfield1,
            integer subfield2
        } field2 optional
    }

    function f_test(inout template integer p_val) {
        p_val := 10;
    }

    testcase TC_NegSem_050402_actual_parameters_096() runs on GeneralComp {
        var template R v_rec := {
            field1 := 1,
            field2 := ({ subfield1 := 0, subfield2 := 1}, { subfield1 := 2, subfield2 := 3 })
        };
        // expected error since v_rec.field2.subfield1 not defined since v_rec.field2 is not *, ? or omit (see expansion rules)
        f_test(v_rec.field2.subfield1); // tested parameter passing (using referencing rules specified at 15.6.2)
        log(v_rec);
        if (valueof(v_rec.field2.subfield1) == 10 and match(0, v_rec.field2.subfield2)) { setverdict(pass); }
        else { setverdict(fail); } 
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_096());
	}
}
<END_MODULE>

<RESULT COUNT 1>
Dynamic test case error: Matching with an uninitialized/unsupported integer template.
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_097 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_097 verify that string item references cannot be used as inout formal value parameters of functions >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_097 NegSem_050402_actual_parameters_097.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that string item references cannot be used as inout formal value parameters of functions
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to inout formal value parameters shall be variables 
// or formal value parameters (of in, inout or out parameterization) or references to 
// elements of variables or formal value parameters of structured types.
// (see also the NOTE from 5.4.2)

module NegSem_050402_actual_parameters_097 { 

    type component GeneralComp {
	}	
    
    function f_test(inout charstring p_val) {
        if (p_val == "t") { setverdict(pass); }
        else { setverdict(fail); }
        p_val := "r";
    }

    testcase TC_NegSem_050402_actual_parameters_097() runs on GeneralComp {
        var charstring v_val := "test";
        f_test(v_val[0]); // tested parameter passing
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_097());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a string element of type `charstring' cannot be used in this context
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_098 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_098 verify that ordinary values cannot be passed to timer parameters >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_098 NegSem_050402_actual_parameters_098.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that ordinary values cannot be passed to timer parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to formal timer parameters shall be component 
// timers, local timers or formal timer parameters of the current scope.

module NegSem_050402_actual_parameters_098 { 

    type component GeneralComp {
	}
    
    function f_test(timer t_par) {
        t_par.start;
        if (t_par.running) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_098() runs on GeneralComp {
        f_test(5.0); // tested parameter passing: it should not be possible to pass a float value to a timer parameter
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_098());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a timer or timer parameter was expected for a timer parameter
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_099 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_099 verify that values cannot be passed to port parameters >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_099 NegSem_050402_actual_parameters_099.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that values cannot be passed to port parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters that are passed to formal port parameters shall be component 
// ports or formal port parameters of the current scope.

module NegSem_050402_actual_parameters_099 { 

    type port IntPort message {
        inout integer;
    }
    
    type component GeneralComp {
        port IntPort p;
	}
    
    function f_test(IntPort p_port) {
        p_port.stop;
    }

    testcase TC_NegSem_050402_actual_parameters_099() runs on GeneralComp {
        var integer v_val := 5;
        f_test(v_val); // tested parameter passing
        setverdict(pass);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_099());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to a port or port parameter was expected for a port parameter instead of variable `v_val'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_100 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_100 verify that list notation containing actual parameters in wrong order is not accepted >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_100 NegSem_050402_actual_parameters_100.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that list notation containing actual parameters in wrong order is not accepted
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// When using list notation, the order of elements in the actual parameter list shall 
// be the same as their order in the corresponding formal parameter list.

module NegSem_050402_actual_parameters_100 { 

    type component GeneralComp {
	}

    function f_test (integer p_val1, charstring p_val2) {
        if ( match(p_val1, 1) and match(p_val2, "test")) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_100() runs on GeneralComp {
        f_test("test", 1);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_100());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: integer value was expected
<END_RESULT>
<RESULT COUNT 1>
error: character string value was expected 
<END_RESULT>
<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_101 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_101 verify that list notation containing less actual parameters than required is not accepted >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_101 NegSem_050402_actual_parameters_101.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that list notation containing less actual parameters than required is not accepted
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// For each formal parameter without a default there shall be an actual parameter.

module NegSem_050402_actual_parameters_101 { 

    type component GeneralComp {
	}

    function f_test (integer p_val1, charstring p_val2) {
        if (p_val1 == 1) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_101() runs on GeneralComp {
        f_test(1);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_101());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Too few parameters: 2 was expected instead of 1 
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_102 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_102 verify that parameter without default value cannot be skipped >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_102 NegSem_050402_actual_parameters_102.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that parameter without default value cannot be skipped
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// For each formal parameter without a default there shall be an actual parameter.

module NegSem_050402_actual_parameters_102 { 

    type component GeneralComp {
	}

    function f_test (integer p_val1, charstring p_val2) {
        if (p_val1 == 1) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_102() runs on GeneralComp {
        f_test(1, -);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_102());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Not used symbol \(`-'\) cannot be used for parameter that does not have default value
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_103 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_103 verify that mixing list and assignment notation is not allowed in parameterized calls (value as actual parameter) >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_103 NegSem_050402_actual_parameters_103.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that mixing list and assignment notation is not allowed in parameterized calls (value as actual parameter)
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Either list notation or assignment notation shall be used in a single parameter 
// list. They shall not be mixed.

module NegSem_050402_actual_parameters_103 { 

    type component GeneralComp {
	}

    function f_test (integer p_val1, charstring p_val2) {
        if ( match(p_val1, 1) and match(p_val2, "test")) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_103() runs on GeneralComp {
        f_test(p_val1 := 1, "test");
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_103());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `"': syntax error, unexpected Cstring
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_104 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_104 verify that mixing list and assignment notation is not allowed in parameterized calls (skipped actual parameter) >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_104 NegSem_050402_actual_parameters_104.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that mixing list and assignment notation is not allowed in parameterized calls (skipped actual parameter)
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Either list notation or assignment notation shall be used in a single parameter 
// list. They shall not be mixed.

module NegSem_050402_actual_parameters_104 { 

    type component GeneralComp {
	}

    function f_test (integer p_val1, charstring p_val2 := "test") {
        if ( match(p_val1, 1) and match(p_val2, "test")) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_104() runs on GeneralComp {
        f_test(p_val1 := 1, -);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_104());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `-': syntax error, unexpected '-'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_105 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_105 verify that parameters cannot be assigned more than once in assignment notation >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_105 NegSem_050402_actual_parameters_105.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that parameters cannot be assigned more than once in assignment notation
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// When using assignment notation, each formal parameter shall be assigned an actual 
// parameter at most once.

module NegSem_050402_actual_parameters_105 { 

    type component GeneralComp {
	}

    function f_test (integer p_val1, charstring p_val2) {
        if (match(p_val1 == 1 and p_val2 == "test") { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_105() runs on GeneralComp {
        f_test(p_val1 := 1, p_val2 := "test", p_val1 := 1);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_105());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `\)': syntax error, unexpected '\)'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_106 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_106 verify that assignment notation that doesn't contain all parameters is not accepted >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_106 NegSem_050402_actual_parameters_106.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that assignment notation that doesn't contain all parameters is not accepted
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// For each formal parameter without default value, there shall be an actual parameter.

module NegSem_050402_actual_parameters_106 { 

    type component GeneralComp {
	}

    function f_test (integer p_val1, charstring p_val2, integer p_val3) {
        if (match(p_val1, 1) and match(p_val2, "test") and match(p_val3, 3)) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_106() runs on GeneralComp {
        f_test(p_val2 := "test", p_val3 := 3);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_106());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Parameter not specified
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_107 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_107 verify that incompatible values cannot be passed to in formal parameters >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_107 NegSem_050402_actual_parameters_107.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that incompatible values cannot be passed to in formal parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// The type of each actual parameter shall be compatible with the type of each 
// corresponding formal parameter.

module NegSem_050402_actual_parameters_107 { 

    type component GeneralComp {
	}
    
    type record R1 {
        integer field1,
        integer field2
    }
    
    type record R2 {
        integer elem1,
        integer elem2 optional
    }

    function f_test (R1 p_val) {
        if (p_val == { field1 := 1, field2 := 2 }) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_107() runs on GeneralComp {
        var R2 v_rec := { 1, 2 };
        f_test(v_rec);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_107());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Type mismatch: `@NegSem_050402_actual_parameters_107.R1.field2' of type `integer' and `@NegSem_050402_actual_parameters_107.R2.elem2' of type `integer' are not compatible: The optionality of fields in record/SEQUENCE types must be the same
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_108 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_108 verify that incompatible values cannot be passed from out formal parameters >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_108 NegSem_050402_actual_parameters_108.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that incompatible values cannot be passed from out formal parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// The type of each actual parameter shall be compatible with the type of each 
// corresponding formal parameter.

module NegSem_050402_actual_parameters_108 { 

    type component GeneralComp {
	}
    
    type record R1 {
        integer field1,
        integer field2 optional
    }
    
    type record R2 {
        integer elem1,
        integer elem2
    }

    function f_test (out R1 p_val) {
        p_val.field1 := 1;
        p_val.field2 := 2;
    }

    testcase TC_NegSem_050402_actual_parameters_108() runs on GeneralComp {
        var R2 v_rec;
        f_test(v_rec);
        if (v_rec == { elem1 := 1, elem2 := 2 }) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_108());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Type mismatch: `@NegSem_050402_actual_parameters_108.R1.field2' of type `integer' and `@NegSem_050402_actual_parameters_108.R2.elem2' of type `integer' are not compatible: The optionality of fields in record/SEQUENCE types must be the same
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_109 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_109 verify that incompatible values cannot be passed to inout formal parameters >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_109 NegSem_050402_actual_parameters_109.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that incompatible values cannot be passed to inout formal parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Strong typing is required for parameters passed by reference.

module NegSem_050402_actual_parameters_109 { 

    type component GeneralComp {
	}
    
    type record R1 {
        integer field1,
        integer field2 optional
    }
    
    type record R2 {
        integer elem1,
        integer elem2
    }

    function f_test (inout R1 p_val) {
        if (p_val == { field1 := 1, field2 := 2 }) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_109() runs on GeneralComp {
        var R2 v_rec := { 1, 2 };
        f_test(v_rec);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_109());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Type mismatch: `@NegSem_050402_actual_parameters_109.R1.field2' of type `integer' and `@NegSem_050402_actual_parameters_109.R2.elem2' of type `integer' are not compatible: The optionality of fields in record/SEQUENCE types must be the same
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_111 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_111 verify that incompatible templates cannot be passed to template parameters with omit restriction >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_111 NegSem_050402_actual_parameters_111.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that incompatible templates cannot be passed to template parameters with omit restriction
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters passed to restricted formal template parameters shall obey 
// the restrictions given in clause 15.8.

module NegSem_050402_actual_parameters_111 { 

    type component GeneralComp {
	}

    function f_test (omit integer p_val) {
        if (match(1, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_111() runs on GeneralComp {
        f_test((0..10));
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_111());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Restriction on template formal parameter does not allow usage of value range match
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_112 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_112 verify that compatible templates can be passed to template parameters with value restriction >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_112 NegSem_050402_actual_parameters_112.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that compatible templates can be passed to template parameters with value restriction
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters passed to restricted formal template parameters shall obey 
// the restrictions given in clause 15.8.

module NegSem_050402_actual_parameters_112 { 

    type component GeneralComp {
	}

    function f_test (template(value) integer p_val) {
        if (match(1, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_112() runs on GeneralComp {
        f_test((1, 2, 3));
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_112());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Restriction on template formal parameter does not allow usage of value list match
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_113 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_113 verify that compatible templates can be passed to template parameters with present restriction >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_113 NegSem_050402_actual_parameters_113.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that compatible templates can be passed to template parameters with present restriction
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Actual parameters passed to restricted formal template parameters shall obey 
// the restrictions given in clause 15.8.

module NegSem_050402_actual_parameters_113 { 

    type component GeneralComp {
	}

    function f_test (template(present) integer p_val) {
        if (match(1, p_val)) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_113() runs on GeneralComp {
        f_test(*);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_113());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Restriction on template formal parameter does not allow usage of any or omit
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_114 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_114 verify that compatible templates can be passed to template parameters with present restriction >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_114 NegSem_050402_actual_parameters_114.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that parametrized entities used as actual parameter cannot be passed without parameter list
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// All parameterized entities specified as an actual parameter shall have their
// own parameters resolved in the top-level actual parameter list.

module NegSem_050402_actual_parameters_114 { 

    type component GeneralComp {
	}
    
    type record R {
        integer field1,
        integer field2 optional
    }
        
    template R mw_rec(template integer p_field2) := {
        field1 := 1,
        field2 := p_field2
    }

    function f_test (template R p_match) {
        if (match({1, omit}, p_match)) { setverdict(pass); }
        else { setverdict(fail); }
    }

    testcase TC_NegSem_050402_actual_parameters_114() runs on GeneralComp {
        f_test(mw_rec);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_114());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to parameterized definition `mw_rec' without actual parameter list
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_115 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_115 verify that error is generated when no actual parameter list is used for functions with no parameters >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_115 NegSem_050402_actual_parameters_115.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that error is generated when no actual parameter list is used for functions with no parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// If the formal parameter list of TTCN-3 objects function, testcase, signature, 
// altstep or external function is empty, then the empty parentheses shall be 
// included both in the declaration and in the invocation of that object. In all 
// other cases the empty parentheses shall be omitted.

module NegSem_050402_actual_parameters_115 { 

    type component GeneralComp {
	}

    function f_test () return integer {
        setverdict(pass);
        return 1;
    }

    testcase TC_NegSem_050402_actual_parameters_115() runs on GeneralComp {
        log(f_test);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_115());
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: Reference to parameterized definition `f_test' without actual parameter list
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_116 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_116 verify that error is generated when no actual parameter list is used for test cases with no parameters >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_116 NegSem_050402_actual_parameters_116.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that error is generated when no actual parameter list is used for test cases with no parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// If the formal parameter list of TTCN-3 objects function, testcase, signature, 
// altstep or external function is empty, then the empty parentheses shall be 
// included both in the declaration and in the invocation of that object. In all 
// other cases the empty parentheses shall be omitted.

module NegSem_050402_actual_parameters_116 { 

    type component GeneralComp {
	}

    testcase TC_NegSem_050402_actual_parameters_116() runs on GeneralComp {
        setverdict(pass);
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_116);
	}
}
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `\)': syntax error, unexpected '\)', expecting '\('
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_117 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_117 verify that error is generated when no actual parameter list is used for altsteps with no parameters >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_117 NegSem_050402_actual_parameters_117.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that error is generated when no actual parameter list is used for altsteps with no parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// If the formal parameter list of TTCN-3 objects function, testcase, signature, 
// altstep or external function is empty, then the empty parentheses shall be 
// included both in the declaration and in the invocation of that object. In all 
// other cases the empty parentheses shall be omitted.

module NegSem_050402_actual_parameters_117 { 

    type component GeneralComp {
	}

    altstep a_test () {
        [] any timer.timeout { setverdict(pass); }
    }

    testcase TC_NegSem_050402_actual_parameters_117() runs on GeneralComp {
        timer t_instant := 0.0;
        t_instant.start;
        alt {
            [] a_test {
                setverdict(pass);
            }
        }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_117());
	}
}
<END_MODULE>


<RESULT COUNT 1>
error: at or before token `\{': syntax error, unexpected '\{'
<END_RESULT>
<RESULT COUNT 1>
error: at or before token `control': syntax error, unexpected ControlKeyword, expecting \$end
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_050402_actual_parameters_118 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 050402_118 verify that error is generated when empty actual parameter list is used for templates with no parameters >

<COMPILE>

<MODULE TTCN NegSem_050402_actual_parameters_118 NegSem_050402_actual_parameters_118.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.4.2, verify that error is generated when empty actual parameter list is used for templates with no parameters
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// If the formal parameter list of TTCN-3 objects function, testcase, signature, 
// altstep or external function is empty, then the empty parentheses shall be 
// included both in the declaration and in the invocation of that object. In all 
// other cases the empty parentheses shall be omitted.

module NegSem_050402_actual_parameters_118 { 

    type component GeneralComp {
	}

    template integer mw_allInt := ?;

    testcase TC_NegSem_050402_actual_parameters_118() runs on GeneralComp {
        if (match(1, mw_allInt())) { setverdict(pass); }
        else { setverdict(fail); }
	}

	control {
		execute(TC_NegSem_050402_actual_parameters_118());
	}
}
<END_MODULE>


<RESULT COUNT 1>
error: The referenced template `@NegSem_050402_actual_parameters_118.mw_allInt' cannot have actual parameters
<END_RESULT>

<END_TC>
:exmp

.*---------------------------------------------------------------------*
:h2. 0505_cyclic_definitions folder
.*---------------------------------------------------------------------*

*---------------------------------------------------------------------*
:h3. NegSem_0505_cyclic_definitions_001 test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 0505_001 Verify that an error is detected when two constants reference each other >

<COMPILE>

<MODULE TTCN NegSem_0505_cyclic_definitions_001 NegSem_0505_cyclic_definitions_001.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.5, Verify that an error is detected when two constants reference each other
 ** @verdict  pass reject
 ***************************************************/

// The following requirements are tested:
// Direct and indirect cyclic definitions are not allowed with the exception of the 
// following cases:
// a) for recursive type definitions (see clause 6.2);
// b) function and altstep definitions (i.e. recursive function or altstep calls);
// c) cyclic import definitions, if the imported definitions only form allowed cyclic 
// definitions.
// The test is a copy of example 1 from the chapter 5.5
module NegSem_0505_cyclic_definitions_001 {

	type record ARecordType { integer a, integer b };
	const ARecordType c_test1 := { 1 , c_test2.b}; // c_test1 refers to c_test2
	const ARecordType c_test2 := { 1 , c_test1.b}; // c_test2 refers to c_test1
	
}
<END_MODULE>

<RESULT COUNT 1>
error: Circular reference in constant definition `c_test1'
<END_RESULT>
<RESULT COUNT 1>
error: Circular reference in constant definition `c_test2' 
<END_RESULT>
<RESULT COUNT 1>
error: While searching referenced value: Circular reference: `@NegSem_0505_cyclic_definitions_001.c_test2.b' -> `@NegSem_0505_cyclic_definitions_001.c_test1.b' -> `@NegSem_0505_cyclic_definitions_001.c_test2.b'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. NegSem_0505_cyclic_definitions_002 test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - 0505_002 Verify that an error is detected when a forbidded cyclic reference occurs in cyclic import >

<COMPILE>

<MODULE TTCN NegSem_0505_cyclic_definitions_002 NegSem_0505_cyclic_definitions_002.ttcn >
/***************************************************
 ** @version  0.0.1
 ** @purpose  1:5.5, Verify that an error is detected when a forbidded cyclic reference occurs in cyclic import
 ** @verdict  pass reject
 ***************************************************/

// The following requirements are tested:
// Direct and indirect cyclic definitions are not allowed with the exception of the 
// following cases:
// a) for recursive type definitions (see clause 6.2);
// b) function and altstep definitions (i.e. recursive function or altstep calls);
// c) cyclic import definitions, if the imported definitions only form allowed cyclic 
// definitions.
// The test is a modification of example 1 from the chapter 5.5 that defines both constants
// in different modules.

module NegSem_0505_cyclic_definitions_002 {
	import from NegSem_0505_cyclic_definitions_002_import { const c_test1 }
	type record ARecordType { integer a, integer b };
	const ARecordType c_test2 := { 1 , c_test1.b}; // c_test2 refers to c_test1
}
<END_MODULE>

<MODULE TTCN NegSem_0505_cyclic_definitions_002_import NegSem_0505_cyclic_definitions_002_import.ttcn >
module NegSem_0505_cyclic_definitions_002_import {
	import from NegSem_0505_cyclic_definitions_002 all;
	const ARecordType c_test1 := { 1 , c_test2.b}; // c_test1 refers to c_test2		
}
<END_MODULE>

<RESULT COUNT 1>
error: Circular reference in constant definition `c_test1'
<END_RESULT>
<RESULT COUNT 1>
error: Circular reference in constant definition `c_test2' 
<END_RESULT>
<RESULT COUNT 1>
error: While searching referenced value: Circular reference: `@NegSem_0505_cyclic_definitions_002.c_test2.b' -> `@NegSem_0505_cyclic_definitions_002_import.c_test1.b' -> `@NegSem_0505_cyclic_definitions_002.c_test2.b'
<END_RESULT>

<END_TC>
:exmp

.*---------------------------------------------------------------------*
:h1.References
.*---------------------------------------------------------------------*
:list.
:li D='[1]'.1/174 02-CRL 113 200/5 Uen 
:nl.Statement of Compliance for TITAN project
:li D='[2]'.ETSI ES 201 873-1, v4.7.1 Mockup v1 (2015-06):
:nl.Testing and Test Control Notation version 3.,
:nl.Part 1: TTCN-3 Core Language
:elist.
