.******************************************************************************
.* Copyright (C) 2017 ETSI  All Rights Reserved.
.*
.* Contributors:
.*   Adrien Kirjak 
.*
.******************************************************************************/
text.
:lang eng.
.*
:docname.Test Description
:docno.xz/152 91-CRL 113 200 Uen
:rev.PA1
:date.2016-04-04
.*
:prep.ETH/XZ EADRKIR
:subresp.EADRKIR
:appr.ETH/XZ (Elemer Lelik)
:checked.
.*
:title.ETSI TTCN3 Negative Conformance Test
:contents level=3.
.*---------------------------------------------------------------------*
:h1.PREREQUISITES AND PREPARATIONS
.*---------------------------------------------------------------------*	
.*---------------------------------------------------------------------*
:h2.Scope of the Test Object
.*---------------------------------------------------------------------*
:xmp tab=1 nokeep.
This TD contains negative tests from ETSI TTCN3 Conformance Test's XML part. 

:exmp.

.*---------------------------------------------------------------------*
:h2.Test Tools
.*---------------------------------------------------------------------*
:p.:us.Software Tools:eus.
:xmp tab=2 nokeep.

	SAtester_XML.pl

:exmp.
:np.

.*---------------------------------------------------------------------*
:h1.REQUIREMENT-BASED TESTS
.*---------------------------------------------------------------------*

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
It will not run without XSD.ttcn and UsefulTtcn3Types.ttcn files, they should be linked to every testcase to be able to run this file.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

*---------------------------------------------------------------------*
:h2. Neg_050103_imports_001 negative test
.*---------------------------------------------------------------------*

:xmp tab=0.

<TC - Verify that it is not allowed to import imports from XSD schemas >

<COMPILE>

<MODULE TTCN Neg_050103_imports_001 Neg_050103_imports_001.ttcn >

/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:5.1.3, Verify that it is not allowed to import imports from XSD schemas
 ** @verdict  pass reject
***************************************************/
// The following requirements are tested:
// It is not allowed to import XSD import statements to TTCN-3 (i.e. there is no transitive import
// of XSD import statements as defined for TTCN-3, see clause 8.2.3.7 of ES 201 873-1 [1]). 

module Neg_050103_imports_001 {

    import from schema_Neg_050103_imports_001 language "XSD" { import all };

    template MyType m_msg := 1;

	external function enc_MyType(in MyType pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return MyType
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout MyType, Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_050103_imports_001() runs on C system C {
        connect(self:p, self:p1);

        // encode the message
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

        unmap(self:p, system:p);
    }

    control {
        execute(TC_Neg_050103_imports_001(), PX_TC_EXECUTION_TIMEOUT);
    }


}
<END_MODULE>

<MODULE TTCN schema_Neg_050103_imports_001 schema_Neg_050103_imports_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_050103_imports_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 10:49:11 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_050103_imports_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_050103_imports_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_050103_imports_001 {


import from XSD all;


import from schema_Neg_050103_imports_001_1 all;


type XSD.String MyType2
with {
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_050103_imports_001' prefix 'ns1'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: There is no local or imported definition with name `MyType'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060101_length_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that a length-restricted XSD type shall be mapped to a corresponding length restricted TTCN 3 type. >

<COMPILE>

<MODULE TTCN Neg_060101_length_001 Neg_060101_length_001.ttcn >

/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.1.1, Verify that a length-restricted XSD type shall be mapped to a corresponding length restricted TTCN 3 type.
 ** @verdict  pass reject
 ***************************************************/
module Neg_060101_length_001 {

    import from schema_Neg_060101_length_001 language "XSD" all;

    template E1 m_msg := {"A","B","C","D"}; //length is 3

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout E1;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060101_length_001() runs on C system C {
        connect(self:p, self:p1);

        // encode the message
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060101_length_001(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060101_length_001 schema_Neg_060101_length_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060101_length_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 12:35:41 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060101_length_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060101_length_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060101_length_001 {


import from XSD all;


type XSD.NMTOKENS T1 length(3)
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060101_length_001' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: There must not be more than 3 elements in the list
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060105_enumeration_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify if tool rejects validation in case of restricted value due xsd type declaration. >

<COMPILE>

<MODULE TTCN Neg_060105_enumeration_001 Neg_060105_enumeration_001.ttcn >

/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.1.5, Verify if tool rejects validation in case of restricted value due xsd type declaration.
 ** @verdict  pass reject
 ***************************************************/
module Neg_060105_enumeration_001 {

    import from schema_Neg_060105_enumeration_001 language "XSD" all;
    
    template E1 m_msg :=5;

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout E1;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060105_enumeration_001() runs on C system C {
        connect(self:p, self:p1);

        // encode the message
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060105_enumeration_001(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060105_enumeration_001 schema_Neg_060105_enumeration_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060105_enumeration_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 12:35:41 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060105_enumeration_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060105_enumeration_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060105_enumeration_001 {


import from XSD all;


type XSD.Integer T1 (!5 .. 10)
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060105_enumeration_001' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: 5 is not a valid value for type `integer' which has subtype \(6..10\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060105_enumeration_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify if tool rejects validation in case of restricted value due xsd type declaration. >

<COMPILE>

<MODULE TTCN Neg_060105_enumeration_002 Neg_060105_enumeration_002.ttcn >

/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.1.5, Verify if tool rejects validation in case of restricted enumerated value length due xsd type declaration.
 ** @verdict  pass reject
 ***************************************************/
module Neg_060105_enumeration_002 {

    import from schema_Neg_060105_enumeration_002 language "XSD" all;
    
    template E1 m_msg := black; // only enumeration elements with 2 to 4 chars are allowed

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout E1, Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060105_enumeration_002() runs on C system C {
        connect(self:p, self:p);

        // encode the message
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060105_enumeration_002(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060105_enumeration_002 schema_Neg_060105_enumeration_002.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060105_enumeration_002.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 12:35:41 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060105_enumeration_002.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060105_enumeration_002" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060105_enumeration_002 {


import from XSD all;


type enumerated T1
{
	red
}
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060105_enumeration_002' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: There is no local or imported definition with name `black'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060105_enumeration_003 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify if tool rejects validation in case of restricted value due xsd type declaration. >

<COMPILE>

<MODULE TTCN Neg_060105_enumeration_003 Neg_060105_enumeration_003.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.1.5, Verify if tool rejects validation in case of restricted value due xsd type declaration.
 ** @verdict  pass reject
 ***************************************************/
module Neg_060105_enumeration_003 {

    import from schema_Neg_060105_enumeration_003 language "XSD" all;

	template E1 m_msg := 1;

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout E1;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060105_enumeration_003() runs on C system C {
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));

        // encode the message
        p.send(m_msg);
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060105_enumeration_003(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060105_enumeration_003 schema_Neg_060105_enumeration_003.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060105_enumeration_003.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 12:35:41 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060105_enumeration_003.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060105_enumeration_003" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060105_enumeration_003 {


import from XSD all;


type XSD.Integer T1 (!5 .. 10)
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060105_enumeration_003' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: 1 is not a valid value for type `integer' which has subtype \(6..10\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060105_enumeration_004 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify if tool rejects validation in case of restricted value due xsd type declaration. >

<COMPILE>

<MODULE TTCN Neg_060105_enumeration_004 Neg_060105_enumeration_004.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.1.5, disallow enumeration values removed by restriction
 ** @verdict  pass reject
 ***************************************************/
module Neg_060105_enumeration_004 {

    import from schema_Neg_060105_enumeration_004 language "XSD" all;
    
    template C2 m_msg := uNKNOWN;

	external function enc_MyType(in C2 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return C2
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout C2, Raw;
    } with {extension "internal"}

    type component Comp {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060105_enumeration_004() runs on Comp system Comp {
        connect(self:p, self:p1);

        // encode the message
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060105_enumeration_004(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060105_enumeration_004 schema_Neg_060105_enumeration_004.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5B01                     
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060105_enumeration_004.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Mon Oct 10 13:56:48 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060105_enumeration_004.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060105_enumeration_004" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060105_enumeration_004 {


import from XSD all;


type CType C
with {
  variant "element";
};


type enumerated CType
{
	b2,
	uNKNOWN
}
with {
  variant "text 'b2' as capitalized";
  variant "text 'uNKNOWN' as capitalized";
};


type enumerated CTypeEnum
{
	b2
}
with {
  variant "text 'b2' as capitalized";
};


type CTypeEnum C2
with {
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060105_enumeration_004' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: There is no local or imported definition with name `uNKNOWN'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060109_minexclusive_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify if tool rejects validation in case of restricted value due xsd type declaration. >

<COMPILE>

<MODULE TTCN Neg_060109_minexclusive_001 Neg_060109_minexclusive_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.1.9, Verify if tool rejects validation in case of restricted value due xsd type declaration.
 ** @verdict  pass reject
 ***************************************************/
module Neg_060109_minexclusive_001 {

    import from schema_Neg_060109_minexclusive_001 language "XSD" all;

    template E1 m_msg := 2; // valid values 6..10

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060109_minexclusive_001() runs on C system C {
        connect(self:p, self:p1);

        // encode the message
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060109_minexclusive_001(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060109_minexclusive_001 schema_Neg_060109_minexclusive_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060109_minexclusive_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 13:20:59 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060109_minexclusive_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060109_minexclusive_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060109_minexclusive_001 {


import from XSD all;


type XSD.Integer T1 (!5 .. 10)
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060109_minexclusive_001' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: 2 is not a valid value for type `integer' which has subtype \(6..10\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060109_minexclusive_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify if tool rejects validation in case of restricted value due xsd type declaration. >

<COMPILE>

<MODULE TTCN Neg_060109_minexclusive_002 Neg_060109_minexclusive_002.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.1.9, Verify if tool rejects validation in case of restricted value due xsd type declaration.
 ** @verdict  pass reject
 ***************************************************/
module Neg_060109_minexclusive_002 {

    import from schema_Neg_060109_minexclusive_002 language "XSD" all;

    template E1 m_msg := 5; // valid values 6..10

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060109_minexclusive_002() runs on C system C {
        connect(self:p, self:p1);

        // encode the message
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060109_minexclusive_002(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060109_minexclusive_002 schema_Neg_060109_minexclusive_002.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060109_minexclusive_002.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 13:20:59 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060109_minexclusive_002.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060109_minexclusive_002" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060109_minexclusive_002 {


import from XSD all;


type XSD.Integer T1 (!5 .. 10)
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060109_minexclusive_002' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: 5 is not a valid value for type `integer' which has subtype \(6..10\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060110_maxexclusive_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that INF (negative infinity) or NaN (not-a-number), this type shall not be translated to TTCN-3 >

<COMPILE>

<MODULE TTCN Neg_060110_maxexclusive_001 Neg_060110_maxexclusive_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.1.10, Verify that INF (negative infinity) or NaN (not-a-number), this type shall not be translated to TTCN-3
 ** @verdict  pass reject
 ***************************************************/
module Neg_060110_maxexclusive_001 {

    import from schema_Neg_060110_maxexclusive_001 language "XSD" all;

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
	 	port P p1;
    }

    testcase TC_Neg_060110_maxexclusive_001() runs on C system C {
        connect(self:p, self:p1);

        // encode the message
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060110_maxexclusive_001(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060110_maxexclusive_001 schema_Neg_060110_maxexclusive_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060110_maxexclusive_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 13:20:59 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060110_maxexclusive_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060110_maxexclusive_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060110_maxexclusive_001 {


import from XSD all;


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060110_maxexclusive_001' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: There is no local or imported definition with name `T1'
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060111_total_digits_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Check that totalDigits are converted to value boundaries >

<COMPILE>

<MODULE TTCN Neg_060111_total_digits_001 Neg_060111_total_digits_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.1.11, Check that totalDigits are converted to value boundaries
 ** @verdict  pass reject
 ***************************************************/
module Neg_060111_total_digits_001 {

    import from schema_Neg_060111_total_digits_001 language "XSD" all;

    template E1 m_msg := 0;

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060111_total_digits_001() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));

        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060111_total_digits_001(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060111_total_digits_001 schema_Neg_060111_total_digits_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060111_total_digits_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 13:20:59 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060111_total_digits_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060111_total_digits_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060111_total_digits_001 {


import from XSD all;


type XSD.NegativeInteger T1 (-999 .. -1)
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060111_total_digits_001' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: 0 is not a valid value for type `integer' which has subtype \(-999..-1\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060111_total_digits_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Check that totalDigits are converted to value boundaries >

<COMPILE>

<MODULE TTCN Neg_060111_total_digits_002 Neg_060111_total_digits_002.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.1.11, Check that totalDigits are converted to value boundaries
 ** @verdict  pass reject
 ***************************************************/
module Neg_060111_total_digits_002 {

    import from schema_Neg_060111_total_digits_002 language "XSD" all;

    template E1 m_msg := -1000;

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060111_total_digits_002() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060111_total_digits_002(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060111_total_digits_002 schema_Neg_060111_total_digits_002.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060111_total_digits_002.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 13:20:59 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060111_total_digits_002.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060111_total_digits_002" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060111_total_digits_002 {


import from XSD all;


type XSD.NegativeInteger T1 (-999 .. -1)
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060111_total_digits_002' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: -1000 is not a valid value for type `integer' which has subtype \(-999..-1\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060111_total_digits_003 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Check that totalDigits are converted to value boundaries >

<COMPILE>

<MODULE TTCN Neg_060111_total_digits_003 Neg_060111_total_digits_003.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.1.11, Check that totalDigits are converted to value boundaries
 ** @verdict  pass reject
 ***************************************************/
module Neg_060111_total_digits_003 {

    import from schema_Neg_060111_total_digits_003 language "XSD" all;

    template E1 m_msg := -100000.0;

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060111_total_digits_003() runs on C system C {

        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060111_total_digits_003(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060111_total_digits_003 schema_Neg_060111_total_digits_003.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060111_total_digits_003.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 13:20:59 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060111_total_digits_003.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060111_total_digits_003" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060111_total_digits_003 {


import from XSD all;


type XSD.Decimal T1 (-9999.0 .. 9999.0)
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060111_total_digits_003' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: -1.0e5 is not a valid value for type `float' which has subtype \(-9.999e3..9.999e3\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060111_total_digits_004 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Check that totalDigits are converted to value boundaries >

<COMPILE>

<MODULE TTCN Neg_060111_total_digits_004 Neg_060111_total_digits_004.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.1.11, Check that totalDigits are converted to value boundaries
 ** @verdict  pass reject
 ***************************************************/
module Neg_060111_total_digits_004 {

    import from schema_Neg_060111_total_digits_004 language "XSD" all;

	template E1 m_msg := 999999.0;

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060111_total_digits_004() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060111_total_digits_004(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060111_total_digits_004 schema_Neg_060111_total_digits_004.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060111_total_digits_004.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 13:20:59 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060111_total_digits_004.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060111_total_digits_004" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060111_total_digits_004 {


import from XSD all;


type XSD.Decimal T1 (-9999.0 .. 9999.0)
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060111_total_digits_004' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: 9.99999e5 is not a valid value for type `float' which has subtype \(-9.999e3..9.999e3\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060212_any_uri_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify mapping of an anyURI type >

<COMPILE>

<MODULE TTCN Neg_060212_any_uri_001 Neg_060212_any_uri_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.2.12, Verify mapping of an anyURI type
 ** @verdict  pass reject
 ***************************************************/
module Neg_060212_any_uri_001 {

    import from schema_Neg_060212_any_uri_001 language "XSD" all;
    
    template E1 m_msg := "http://etsi.org\r\n\t";//String with no CRLFHT

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060212_any_uri_001() runs on C system C {
        connect(self:p, self:p1);

        // encode the message
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060212_any_uri_001(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060212_any_uri_001 schema_Neg_060212_any_uri_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060212_any_uri_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060212_any_uri_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060212_any_uri_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060212_any_uri_001 {


import from XSD all;


type XSD.AnyURI T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060212_any_uri_001' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "http://etsi.org\\r\\n\\t" is not a valid value for type `universal charstring' which has subtype from\(" "..char\(0, 0, 215, 255\),char\(0, 0, 224, 0\)..char\(0, 0, 255, 253\),char\(0, 1, 0, 0\)..char\(0, 16, 255, 253\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060212_any_uri_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify mapping of an anyURI type >

<COMPILE>

<MODULE TTCN Neg_060212_any_uri_002 Neg_060212_any_uri_002.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.2.12, Verify mapping of an anyURI type
 ** @verdict  pass reject
 ***************************************************/
module Neg_060212_any_uri_002 {

    import from schema_Neg_060212_any_uri_002 language "XSD" all;
    
    template E1 m_msg := "http://etsi.org	";//String with no HT - Horizontal TAB

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060212_any_uri_002() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060212_any_uri_002(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060212_any_uri_002 schema_Neg_060212_any_uri_002.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060212_any_uri_002.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060212_any_uri_002.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060212_any_uri_002" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060212_any_uri_002 {


import from XSD all;


type XSD.AnyURI T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060212_any_uri_002' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "http://etsi.org\\t" is not a valid value for type `universal charstring' which has subtype from\(" "..char\(0, 0, 215, 255\),char\(0, 0, 224, 0\)..char\(0, 0, 255, 253\),char\(0, 1, 0, 0\)..char\(0, 16, 255, 253\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060502_date_and_time_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that the dateTime type shall be translated to TTCN-3 using the pattern-restricted charstring >

<COMPILE>

<MODULE TTCN Neg_060502_date_and_time_001 Neg_060502_date_and_time_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.5.2, Verify that the dateTime type shall be translated to TTCN-3 using the pattern-restricted charstring
 ** @verdict  pass reject
 ***************************************************/
module Neg_060502_date_and_time_001 {

    import from schema_Neg_060502_date_and_time_001 language "XSD" all;

    template E1 m_msg := "2014-04-17T13:59"; //invalid value

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060502_date_and_time_001() runs on C system C {
        connect(self:p, self:p1);

        // encode the message
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060502_date_and_time_001(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060502_date_and_time_001 schema_Neg_060502_date_and_time_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060502_date_and_time_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060502_date_and_time_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060502_date_and_time_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060502_date_and_time_001 {


import from XSD all;


type XSD.DateTime T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060502_date_and_time_001' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "2014-04-17T13:59" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)-\(0[1-9]|[12][0-9]|3[01]\)T\(\([01][0-9]|2[0-3]\):\([0-5][0-9]\):\([0-5][0-9]\)\(.[0-9]#\(1,\)\)#\(,1\)|24:00:00\(.0#\(1,\)\)#\(,1\)\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060502_date_and_time_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that the dateTime type shall be translated to TTCN-3 using the pattern-restricted charstring >

<COMPILE>

<MODULE TTCN Neg_060502_date_and_time_002 Neg_060502_date_and_time_002.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.5.2, Verify that the dateTime type shall be translated to TTCN-3 using the pattern-restricted charstring
 ** @verdict  pass reject
 ***************************************************/
module Neg_060502_date_and_time_002 {

    import from schema_Neg_060502_date_and_time_002 language "XSD" all;

    template E1 m_msg := "2014-04-1713:59"; //invalid value

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060502_date_and_time_002() runs on C system C {
        connect(self:p, self:p1);

        // encode the message
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060502_date_and_time_002(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060502_date_and_time_002 schema_Neg_060502_date_and_time_002.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060502_date_and_time_002.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060502_date_and_time_002.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060502_date_and_time_002" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060502_date_and_time_002 {


import from XSD all;


type XSD.DateTime T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060502_date_and_time_002' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "2014-04-1713:59" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)-\(0[1-9]|[12][0-9]|3[01]\)T\(\([01][0-9]|2[0-3]\):\([0-5][0-9]\):\([0-5][0-9]\)\(.[0-9]#\(1,\)\)#\(,1\)|24:00:00\(.0#\(1,\)\)#\(,1\)\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060502_date_and_time_003 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that the dateTime type shall be translated to TTCN-3 using the pattern-restricted charstring >

<COMPILE>

<MODULE TTCN Neg_060502_date_and_time_003 Neg_060502_date_and_time_003.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.5.2, Verify that the dateTime type shall be translated to TTCN-3 using the pattern-restricted charstring
 ** @verdict  pass reject
 ***************************************************/
module Neg_060502_date_and_time_003 {

    import from schema_Neg_060502_date_and_time_003 language "XSD" all;

    template E1 m_msg := "99-04-17T13:59"; //invalid value

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060502_date_and_time_003() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060502_date_and_time_003(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060502_date_and_time_003 schema_Neg_060502_date_and_time_003.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060502_date_and_time_003.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060502_date_and_time_003.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060502_date_and_time_003" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060502_date_and_time_003 {


import from XSD all;


type XSD.DateTime T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060502_date_and_time_003' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "99-04-17T13:59" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)-\(0[1-9]|[12][0-9]|3[01]\)T\(\([01][0-9]|2[0-3]\):\([0-5][0-9]\):\([0-5][0-9]\)\(.[0-9]#\(1,\)\)#\(,1\)|24:00:00\(.0#\(1,\)\)#\(,1\)\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060502_date_and_time_004 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that the dateTime type shall be translated to TTCN-3 using the pattern-restricted charstring >

<COMPILE>

<MODULE TTCN Neg_060502_date_and_time_004 Neg_060502_date_and_time_004.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.5.2, Verify that the dateTime type shall be translated to TTCN-3 using the pattern-restricted charstring
 ** @verdict  pass reject
 ***************************************************/
module Neg_060502_date_and_time_004 {

    import from schema_Neg_060502_date_and_time_004 language "XSD" all;

    template E1 m_msg := "2014-04-17"; //invalid value

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060502_date_and_time_004() runs on C system C {
        connect(self:p, self:p1);

        // encode the message
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060502_date_and_time_004(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060502_date_and_time_004 schema_Neg_060502_date_and_time_004.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060502_date_and_time_004.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060502_date_and_time_004.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060502_date_and_time_004" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060502_date_and_time_004 {


import from XSD all;


type XSD.DateTime T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060502_date_and_time_004' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "2014-04-17" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)-\(0[1-9]|[12][0-9]|3[01]\)T\(\([01][0-9]|2[0-3]\):\([0-5][0-9]\):\([0-5][0-9]\)\(.[0-9]#\(1,\)\)#\(,1\)|24:00:00\(.0#\(1,\)\)#\(,1\)\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060504_date_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that the date type shall be translated to TTCN-3 using the pattern-restricted charstring >

<COMPILE>

<MODULE TTCN Neg_060504_date_001 Neg_060504_date_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.5.4, Verify that the date type shall be translated to TTCN-3 using the pattern-restricted charstring
 ** @verdict  pass reject
 ***************************************************/
module Neg_060504_date_001 {

    import from schema_Neg_060504_date_001 language "XSD" all;

    template E1 m_msg := "99-04-12"; //wrong format

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060504_date_001() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060504_date_001(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060504_date_001 schema_Neg_060504_date_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060504_date_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060504_date_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060504_date_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060504_date_001 {


import from XSD all;


type XSD.Date T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060504_date_001' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "99-04-12" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)-\(0[1-9]|[12][0-9]|3[01]\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060504_date_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that the date type shall be translated to TTCN-3 using the pattern-restricted charstring >

<COMPILE>

<MODULE TTCN Neg_060504_date_002 Neg_060504_date_002.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.5.4, Verify that the date type shall be translated to TTCN-3 using the pattern-restricted charstring
 ** @verdict  pass reject
 ***************************************************/
module Neg_060504_date_002 {

    import from schema_Neg_060504_date_002 language "XSD" all;

    template E1 m_msg := "2014-4-2"; //wrong format

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060504_date_002() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");
    }

    control {
        execute(TC_Neg_060504_date_002(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060504_date_002 schema_Neg_060504_date_002.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060504_date_002.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060504_date_002.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060504_date_002" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060504_date_002 {


import from XSD all;


type XSD.DateTime T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060504_date_002' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "2014-4-2" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)-\(0[1-9]|[12][0-9]|3[01]\)T\(\([01][0-9]|2[0-3]\):\([0-5][0-9]\):\([0-5][0-9]\)\(.[0-9]#\(1,\)\)#\(,1\)|24:00:00\(.0#\(1,\)\)#\(,1\)\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060504_date_003 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that the date type shall be translated to TTCN-3 using the pattern-restricted charstring >

<COMPILE>

<MODULE TTCN Neg_060504_date_003 Neg_060504_date_003.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.5.4, Verify that the date type shall be translated to TTCN-3 using the pattern-restricted charstring
 ** @verdict  pass reject
 ***************************************************/
module Neg_060504_date_003 {

    import from schema_Neg_060504_date_003 language "XSD" all;

    template E1 m_msg := "2014/04/02"; //wrong format - slash not alowed

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060504_date_003() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060504_date_003(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060504_date_003 schema_Neg_060504_date_003.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060504_date_003.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060504_date_003.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060504_date_003" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060504_date_003 {


import from XSD all;


type XSD.DateTime T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060504_date_003' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "2014/04/02" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)-\(0[1-9]|[12][0-9]|3[01]\)T\(\([01][0-9]|2[0-3]\):\([0-5][0-9]\):\([0-5][0-9]\)\(.[0-9]#\(1,\)\)#\(,1\)|24:00:00\(.0#\(1,\)\)#\(,1\)\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060504_date_004 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that the date type shall be translated to TTCN-3 using the pattern-restricted charstring >

<COMPILE>

<MODULE TTCN Neg_060504_date_004 Neg_060504_date_004.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.5.4, Verify that the date type shall be translated to TTCN-3 using the pattern-restricted charstring
 ** @verdict  pass reject
 ***************************************************/
module Neg_060504_date_004 {

    import from schema_Neg_060504_date_004 language "XSD" all;

    template E1 m_msg := "04-12-2014"; //wrong format must be 2014-04-12

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060504_date_004() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060504_date_004(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060504_date_004 schema_Neg_060504_date_004.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060504_date_004.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060504_date_004.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060504_date_004" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060504_date_004 {


import from XSD all;


type XSD.DateTime T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060504_date_004' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "04-12-2014" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)-\(0[1-9]|[12][0-9]|3[01]\)T\(\([01][0-9]|2[0-3]\):\([0-5][0-9]\):\([0-5][0-9]\)\(.[0-9]#\(1,\)\)#\(,1\)|24:00:00\(.0#\(1,\)\)#\(,1\)\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060505_gregorian_year_and_month_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that the gYearMonth type shall be translated to TTCN-3 using the pattern-restricted charstring >

<COMPILE>

<MODULE TTCN Neg_060505_gregorian_year_and_month_001 Neg_060505_gregorian_year_and_month_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.5.5, Verify that the gYearMonth type shall be translated to TTCN-3 using the pattern-restricted charstring
 ** @verdict  pass reject
 ***************************************************/
module Neg_060505_gregorian_year_and_month_001 {

    import from schema_Neg_060505_gregorian_year_and_month_001 language "XSD" all;

    template E1 m_msg := "99-04"; //wrong format

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060505_gregorian_year_and_month_001() runs on C system C {

        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");
    }

    control {
        execute(TC_Neg_060505_gregorian_year_and_month_001(), PX_TC_EXECUTION_TIMEOUT);
    }

}

<END_MODULE>

<MODULE TTCN schema_Neg_060505_gregorian_year_and_month_001 schema_Neg_060505_gregorian_year_and_month_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060505_gregorian_year_and_month_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060505_gregorian_year_and_month_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060505_gregorian_year_and_month_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060505_gregorian_year_and_month_001 {


import from XSD all;


type XSD.GYearMonth T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060505_gregorian_year_and_month_001' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "99-04" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060505_gregorian_year_and_month_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that the gYearMonth type shall be translated to TTCN-3 using the pattern-restricted charstring >

<COMPILE>

<MODULE TTCN Neg_060505_gregorian_year_and_month_002 Neg_060505_gregorian_year_and_month_002.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.5.5, Verify that the gYearMonth type shall be translated to TTCN-3 using the pattern-restricted charstring
 ** @verdict  pass reject
 ***************************************************/
module Neg_060505_gregorian_year_and_month_002 {

    import from schema_Neg_060505_gregorian_year_and_month_002 language "XSD" all;

    template E1 m_msg := "2014"; //wrong format

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060505_gregorian_year_and_month_002() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060505_gregorian_year_and_month_002(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060505_gregorian_year_and_month_002 schema_Neg_060505_gregorian_year_and_month_002.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060505_gregorian_year_and_month_002.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060505_gregorian_year_and_month_002.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060505_gregorian_year_and_month_002" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060505_gregorian_year_and_month_002 {


import from XSD all;


type XSD.GYearMonth T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060505_gregorian_year_and_month_002' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "2014" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060505_gregorian_year_and_month_003 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that the gYearMonth type shall be translated to TTCN-3 using the pattern-restricted charstring >

<COMPILE>

<MODULE TTCN Neg_060505_gregorian_year_and_month_003 Neg_060505_gregorian_year_and_month_003.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.5.5, Verify that the gYearMonth type shall be translated to TTCN-3 using the pattern-restricted charstring
 ** @verdict  pass reject
 ***************************************************/
module Neg_060505_gregorian_year_and_month_003 {

    import from schema_Neg_060505_gregorian_year_and_month_003 language "XSD" all;

    template E1 m_msg := "2004-4"; //wrong format

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060505_gregorian_year_and_month_003() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060505_gregorian_year_and_month_003(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060505_gregorian_year_and_month_003 schema_Neg_060505_gregorian_year_and_month_003.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060505_gregorian_year_and_month_003.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060505_gregorian_year_and_month_003.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060505_gregorian_year_and_month_003" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060505_gregorian_year_and_month_003 {


import from XSD all;


type XSD.GYearMonth T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060505_gregorian_year_and_month_003' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "2004-4" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060505_gregorian_year_and_month_004 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that the gYearMonth type shall be translated to TTCN-3 using the pattern-restricted charstring >

<COMPILE>

<MODULE TTCN Neg_060505_gregorian_year_and_month_004 Neg_060505_gregorian_year_and_month_004.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.5.5, Verify that the gYearMonth type shall be translated to TTCN-3 using the pattern-restricted charstring
 ** @verdict  pass reject
 ***************************************************/
module Neg_060505_gregorian_year_and_month_004 {

    import from schema_Neg_060505_gregorian_year_and_month_004 language "XSD" all;

    template E1 m_msg := "2004-13"; //wrong format

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060505_gregorian_year_and_month_004() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060505_gregorian_year_and_month_004(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060505_gregorian_year_and_month_004 schema_Neg_060505_gregorian_year_and_month_004.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060505_gregorian_year_and_month_004.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060505_gregorian_year_and_month_004.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060505_gregorian_year_and_month_004" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060505_gregorian_year_and_month_004 {


import from XSD all;


type XSD.GYearMonth T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060505_gregorian_year_and_month_004' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "2004-13" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_060506_gregorian_year_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that the gYear type shall be translated to TTCN-3 using the pattern-restricted charstring >

<COMPILE>

<MODULE TTCN Neg_060506_gregorian_year_001 Neg_060506_gregorian_year_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:6.5.6, Verify that the gYear type shall be translated to TTCN-3 using the pattern-restricted charstring
 ** @verdict  pass reject
 ***************************************************/
module Neg_060506_gregorian_year_001 {

    import from schema_Neg_060506_gregorian_year_001 language "XSD" all;

    template E1 m_msg := "99";

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_060506_gregorian_year_001() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_060506_gregorian_year_001(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_060506_gregorian_year_001 schema_Neg_060506_gregorian_year_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_060506_gregorian_year_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 14:33:12 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_060506_gregorian_year_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_060506_gregorian_year_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_060506_gregorian_year_001 {


import from XSD all;


type XSD.GYear T1
with {
  variant "name as uncapitalized";
};


type T1 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_060506_gregorian_year_001' prefix 'types'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "99" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_070104_minoccurs_and_maxoccurs_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - a list with minOccurs 0 should not be mapped optional in TTCN-3 >

<COMPILE>

<MODULE TTCN Neg_070104_minoccurs_and_maxoccurs_001 Neg_070104_minoccurs_and_maxoccurs_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:7.1.4, a list with minOccurs 0 should not be mapped optional in TTCN-3
 ** @verdict  pass reject
 ***************************************************/
module Neg_070104_minoccurs_and_maxoccurs_001 {

    import from schema_Neg_070104_minoccurs_and_maxoccurs_001 language "XSD" all;

	// foo_list should not be optional
    template ElemE15b m_msg := {foo_list := omit, bar := 3.0}

	external function enc_MyType(in ElemE15b pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return ElemE15b
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_070104_minoccurs_and_maxoccurs_001() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");
    }

    control {
        execute(TC_Neg_070104_minoccurs_and_maxoccurs_001(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_070104_minoccurs_and_maxoccurs_001 schema_Neg_070104_minoccurs_and_maxoccurs_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_070104_minoccurs_and_maxoccurs_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 15:53:28 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_070104_minoccurs_and_maxoccurs_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_070104_minoccurs_and_maxoccurs_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_070104_minoccurs_and_maxoccurs_001 {


import from XSD all;


/* The unrestricted case: */


type record E15b
{
	record of XSD.Integer foo_list,
	XSD.Float bar
}
with {
  variant "name as uncapitalized";
  variant (foo_list) "untagged";
  variant (foo_list[-]) "name as 'foo'";
};


type E15b ElemE15b
with {
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_070104_minoccurs_and_maxoccurs_001' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: `omit' value is not allowed in this context
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_070104_minoccurs_and_maxoccurs_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - A restricted length list [5, 10] should not allow less than 5 elements >

<COMPILE>

<MODULE TTCN Neg_070104_minoccurs_and_maxoccurs_002 Neg_070104_minoccurs_and_maxoccurs_002.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:7.1.4, A restricted length list [5, 10] should not allow less than 5 elements
 ** @verdict  pass reject
 ***************************************************/
module Neg_070104_minoccurs_and_maxoccurs_002 {

    import from schema_Neg_070104_minoccurs_and_maxoccurs_002 language "XSD" all;

    template ElemE15c m_msg := {foo_list := {1, 2, 3, 4}, bar := 3.0}

	external function enc_MyType(in ElemE15c pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return ElemE15c
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_070104_minoccurs_and_maxoccurs_002() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");
    }

    control {
        execute(TC_Neg_070104_minoccurs_and_maxoccurs_002(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_070104_minoccurs_and_maxoccurs_002 schema_Neg_070104_minoccurs_and_maxoccurs_002.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_070104_minoccurs_and_maxoccurs_002.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 15:53:28 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_070104_minoccurs_and_maxoccurs_002.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_070104_minoccurs_and_maxoccurs_002" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_070104_minoccurs_and_maxoccurs_002 {


import from XSD all;


/* The length restricted case: */


type record E15c
{
	record length(5 .. 10) of XSD.Integer foo_list,
	XSD.Float bar
}
with {
  variant "name as uncapitalized";
  variant (foo_list) "untagged";
  variant (foo_list[-]) "name as 'foo'";
};


type E15c ElemE15c
with {
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_070104_minoccurs_and_maxoccurs_002' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: At least 5 elements must be present in the list
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_070104_minoccurs_and_maxoccurs_003 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - A restricted length list [5, 10] should not allow more than 10 elements >

<COMPILE>

<MODULE TTCN Neg_070104_minoccurs_and_maxoccurs_003 Neg_070104_minoccurs_and_maxoccurs_003.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:7.1.4, A restricted length list [5, 10] should not allow more than 10 elements
 ** @verdict  pass reject
 ***************************************************/
module Neg_070104_minoccurs_and_maxoccurs_003 {

    import from schema_Neg_070104_minoccurs_and_maxoccurs_003 language "XSD" all;

    template ElemE15c m_msg := {foo_list := {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, bar := 3.0}

	external function enc_MyType(in ElemE15c pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return ElemE15c
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_070104_minoccurs_and_maxoccurs_003() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");
    }

    control {
        execute(TC_Neg_070104_minoccurs_and_maxoccurs_003(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_070104_minoccurs_and_maxoccurs_003 schema_Neg_070104_minoccurs_and_maxoccurs_003.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_070104_minoccurs_and_maxoccurs_003.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 15:53:28 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_070104_minoccurs_and_maxoccurs_003.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_070104_minoccurs_and_maxoccurs_003" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_070104_minoccurs_and_maxoccurs_003 {


import from XSD all;


/* The length restricted case: */


type record E15c
{
	record length(5 .. 10) of XSD.Integer foo_list,
	XSD.Float bar
}
with {
  variant "name as uncapitalized";
  variant (foo_list) "untagged";
  variant (foo_list[-]) "name as 'foo'";
};


type E15c ElemE15c
with {
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_070104_minoccurs_and_maxoccurs_003' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: There must not be more than 10 elements in the list
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_070105_default_and_fixed_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify constraint of type based on XSD definition with fixed attribute >

<COMPILE>

<MODULE TTCN Neg_070105_default_and_fixed_001 Neg_070105_default_and_fixed_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:7.1.5, Verify constraint of type based on XSD definition with fixed attribute
 ** @verdict  pass reject
***************************************************/
// The following requirements are tested:
// The fixed attribute applied to attribute or element elements shall be mapped 
// to a subtype definition with the single allowed value identical to the value 
// of the fixed attribute plus a "defaultForEmpty â¦" encoding instruction 
// identifying the value of the fixed attribute as well. The fixed attribute 
// applied to XSD facets shall be ignored.

module Neg_070105_default_and_fixed_001 {

   import from schema_Neg_070105_default_and_fixed_001 language "XSD" all;

   template MyType m_msg := "notFixedValue";

	external function enc_MyType(in MyType pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return MyType
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_070105_default_and_fixed_001() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");
    }

    control {
        execute(TC_Neg_070105_default_and_fixed_001(), PX_TC_EXECUTION_TIMEOUT);
    }


}
<END_MODULE>

<MODULE TTCN schema_Neg_070105_default_and_fixed_001 schema_Neg_070105_default_and_fixed_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_070105_default_and_fixed_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Jul  7 15:53:28 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_070105_default_and_fixed_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_070105_default_and_fixed_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_070105_default_and_fixed_001 {


import from XSD all;


type XSD.String MyType ("fixedValue")
with {
  variant "defaultForEmpty as 'fixedValue'";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_070105_default_and_fixed_001' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "notFixedValue" is not a valid value for type `universal charstring' which has subtype \("fixedValue"\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_070112_use_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify that attribute with required use cannot be omitted >

<COMPILE>

<MODULE TTCN Neg_070112_use_001 Neg_070112_use_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:7.1.12, Verify that attribute with required use cannot be omitted
 ** @verdict  pass reject
***************************************************/
// The following requirements are tested:
// If the value of the use attribute is required, the TTCN-3 field corresponding
// to the XSD attribute shall be mandatory (i.e. without optional).

module Neg_070112_use_001 {

   import from schema_Neg_070112_use_001 language "XSD" all;

   template MyType m_msg := {
       foo := {
           attr := omit,
           base := 5
       }
   };

	external function enc_MyType(in MyType pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return MyType
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_070112_use_001() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");

    }

    control {
        execute(TC_Neg_070112_use_001(), PX_TC_EXECUTION_TIMEOUT);
    }


}
<END_MODULE>

<MODULE TTCN schema_Neg_070112_use_001 schema_Neg_070112_use_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_070112_use_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Mon Jul 11 10:05:40 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neq_070112_use_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_070112_use_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_070112_use_001 {


import from XSD all;


type record MyType
{
	record {
		XSD.String attr,
		XSD.Integer base
	} foo
}
with {
  variant "element";
  variant (foo.attr) "attribute";
  variant (foo.base) "untagged";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_070112_use_001' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: `omit' value is not allowed in this context
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_070502_derivation_by_list_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify length constraint imposed on type derived by list >

<COMPILE>

<MODULE TTCN Neg_070502_derivation_by_list_001 Neg_070502_derivation_by_list_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:7.5.2, Verify length constraint imposed on type derived by list
 ** @verdict  pass reject
***************************************************/
// The following requirements are tested:
// When using any of the supported XSD facets (length, maxLength, minLength) the 
// translation shall follow the mapping for built-in list types, with the difference 
// that the base type shall be determined by an anonymous inner list item type.
module Neg_070502_derivation_by_list_001 {

   import from schema_Neg_070502_derivation_by_list_001 language "XSD" all;

   template MyType m_msg := { "abcd", "efgh" };

	external function enc_MyType(in MyType pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return MyType
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_070502_derivation_by_list_001() runs on C system C {
		connect(self:p, self:p1);

        p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

		setverdict(fail, "Invalid template should not be encoded");
    }

    control {
        execute(TC_Neg_070502_derivation_by_list_001(), PX_TC_EXECUTION_TIMEOUT);
    }


}
<END_MODULE>

<MODULE TTCN schema_Neg_070502_derivation_by_list_001 schema_Neg_070502_derivation_by_list_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/6 R1A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_070502_derivation_by_list_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Fri Oct 21 09:53:22 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_070502_derivation_by_list_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_070502_derivation_by_list_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_070502_derivation_by_list_001 {


import from XSD all;


type record length(3) of XSD.String Test length(4)
with {
  variant "name as uncapitalized";
  variant "list";
};


type Test MyType
with {
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_070502_derivation_by_list_001' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: At least 3 elements must be present in the list
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_070502_derivation_by_list_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify constraint imposed on inner type defined inside XSD list >

<COMPILE>

<MODULE TTCN Neg_070502_derivation_by_list_002 Neg_070502_derivation_by_list_002.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:7.5.2, Verify constraint imposed on inner type defined inside XSD list
 ** @verdict  pass reject
***************************************************/
// The following requirements are tested:
// The other XSD facets shall be mapped accordingly (refer to respective 6.1 clauses). 
// If no itemType is given, the mapping has to be implemented using the given inner 
// type (see clause 7.5.3).
module Neg_070502_derivation_by_list_002 {

   import from schema_Neg_070502_derivation_by_list_002 language "XSD" all;

   template MyType m_msg := { "abcd", "efgh", "ij" }; // "ij" contains only two characters

	external function enc_MyType(in MyType pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return MyType
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_070502_derivation_by_list_002() runs on C system C {
       connect(self:p, self:p1);

        p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

		setverdict(fail, "Invalid template should not be encoded");
    }

    control {
        execute(TC_Neg_070502_derivation_by_list_002(), PX_TC_EXECUTION_TIMEOUT);
    }


}
<END_MODULE>

<MODULE TTCN schema_Neg_070502_derivation_by_list_001 schema_Neg_070502_derivation_by_list_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/6 R1A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_070502_derivation_by_list_002.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Fri Oct 21 10:05:18 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_070502_derivation_by_list_002.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_070502_derivation_by_list_002" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_070502_derivation_by_list_002 {


import from XSD all;


type record length(3) of XSD.String Test length(4)
with {
  variant "name as uncapitalized";
  variant "list";
};


type Test MyType
with {
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_070502_derivation_by_list_002' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "ij" is not a valid value for type `universal charstring' which has subtype \(length\(4\) intersection from\("\\t".."\\n","\\r"," "..char\(0, 0, 215, 255\),char\(0, 0, 224, 0\)..char\(0, 0, 255, 253\),char\(0, 1, 0, 0\)..char\(0, 16, 255, 253\)\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_07060102_restricting_simple_content_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Verify restriction of a base type >

<COMPILE>

<MODULE TTCN Neg_07060102_restricting_simple_content_001 Neg_07060102_restricting_simple_content_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:7.6.1.2, Verify restriction of a base type
 ** @verdict  pass reject
 ***************************************************/
module Neg_07060102_restricting_simple_content_001 {

    import from schema_Neg_07060102_restricting_simple_content_001 language "XSD" all;

    template E1 m_msg := {
      bar := 1,
      foo := 2.0,
      base := "someone" //error because of length 4
    }

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_07060102_restricting_simple_content_001() runs on C system C {
        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));
        log("template should either be rejected by compiler or by runtime latest while encoding");

        setverdict(fail, "Invalid template should not be encoded");
    }

    control {
        execute(TC_Neg_07060102_restricting_simple_content_001(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_07060102_restricting_simple_content_001 schema_Neg_07060102_restricting_simple_content_001.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_07060102_restricting_simple_content_001.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Mon Jul 11 10:37:55 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_07060102_restricting_simple_content_001.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_07060102_restricting_simple_content_001" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_07060102_restricting_simple_content_001 {


import from XSD all;


type record C1
{
	XSD.Integer bar optional,
	XSD.Float foo optional,
	XSD.String base
}
with {
  variant "name as uncapitalized";
  variant (bar) "attribute";
  variant (foo) "attribute";
  variant (base) "untagged";
};


type record C2
{
	XSD.Integer bar optional,
	XSD.Float foo optional,
	XSD.String base length(4)
}
with {
  variant "name as uncapitalized";
  variant (bar) "attribute";
  variant (foo) "attribute";
  variant (base) "untagged";
};


type C2 E1
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_07060102_restricting_simple_content_001' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "someone" is not a valid value for type `universal charstring' which has subtype \(length\(4\) intersection from\("\\t".."\\n","\\r"," "..char\(0, 0, 215, 255\),char\(0, 0, 224, 0\)..char\(0, 0, 255, 253\),char\(0, 1, 0, 0\)..char\(0, 16, 255, 253\)\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_080101_head_elements_of_substitution_groups_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Show effect of the block and abstract attributes on element substitution >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Neg_080101_head_elements_of_substitution_groups_002 Neg_080101_head_elements_of_substitution_groups_002.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:8.1.1, Show effect of the block and abstract attributes on element substitution
 ** @verdict  pass reject, ttcn3verdict:error
 ***************************************************/
module Neg_080101_head_elements_of_substitution_groups_002 {

    import from schema_Neg_080101_head_elements_of_substitution_groups_002 language "XSD" all;

    template Ize m_msg := {
		head_list := {
			{ head := "anything" }, //<-- abstract cannot be decoded
			{ member1 := "any thing" },
			{ member2 := something }, //<-- blocked cannot be decoded
			{ member3 := { bar:= 5, foo := omit, base := "anything else" } }
		}
    }

	external function enc_MyType(in Ize pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return Ize
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_080101_head_elements_of_substitution_groups_002() runs on C system C {
        var Raw v_rcv;

        var Raw  v_Raw:="<ns:ize xmlns:ns='schema:Neg_080101_head_elements_of_substitution_groups_002'>\n\t<ns:head>anything</ns:head>\n\t<ns:member1>any thing</ns:member1>\n\t<ns:member2>something</ns:member2>\n\t<ns:member3 bar='5'>anything else</ns:member3>\n</ns:ize>\n\n";

        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));

        alt {
            // compare the encoded message with the reference XML file
            [] p1.check(receive(Raw:?) -> value v_rcv) {
                log("XML message ", v_rcv);
                if (match(v_rcv, v_Raw) ) {
					alt {
                     	[] p1.receive(Raw:?) {
							if(match(dec_MyType(unichar2oct(v_rcv)),m_msg))	{
								setverdict(pass, "Decoded value matches encoded template and reference XML");
							}
							else 
								{setverdict(fail, "XML decoding failure, reason:", dec_MyType(unichar2oct(v_rcv)));}	
						}
					}
                } else {
                    setverdict(fail, "Unexpected message: ", v_rcv, " expected: ", v_Raw);
                }
            }
            [] p1.receive {
                setverdict(fail, "Raw decoding failure");
            }
        }
    }

    control {
        execute(TC_Neg_080101_head_elements_of_substitution_groups_002(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_080101_head_elements_of_substitution_groups_002 schema_Neg_080101_head_elements_of_substitution_groups_002.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_080101_head_elements_of_substitution_groups_002.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Mon Jul 11 16:32:40 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_080101_head_elements_of_substitution_groups_002.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_080101_head_elements_of_substitution_groups_002" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_080101_head_elements_of_substitution_groups_002 {


import from XSD all;


/* THE HEAD ELEMENT */


/* SUBSTITUTION ELEMENT OF THE SAME TYPE AS THE HEAD */


type XSD.String Member1
with {
  variant "name as uncapitalized";
  variant "element";
};


/* SUBSTITUTION ELEMENT OF A TYPE RESTRICTING THE TYPE OF THE HEAD */


type enumerated StringEnum
{
	else_,
	something
}
with {
  variant "text 'else_' as 'else'";
  variant "name as uncapitalized";
};


type StringEnum Member2
with {
  variant "name as uncapitalized";
  variant "element";
};


/* SUBSTITUTION ELEMENT OF A TYPE EXTENDING THE TYPE OF THE HEAD */


type record ComplexEnum
{
	XSD.Integer bar optional,
	XSD.Float foo optional,
	XSD.String base
}
with {
  variant "name as uncapitalized";
  variant (bar) "attribute";
  variant (foo) "attribute";
  variant (base) "untagged";
};


type ComplexEnum Member3
with {
  variant "name as uncapitalized";
  variant "element";
};


/* TOP LEVEL ELEMENT TO DEMONSTRATE SUBSTITUTION */


type record Ize
{
	record of Head_group head_list
}
with {
  variant "name as uncapitalized";
  variant "element";
  variant (head_list) "untagged";
  variant (head_list[-]) "name as 'head'";
};


type union Head_group
{
	XSD.String head,
	Member1 member1,
	Member2 member2,
	Member3 member3
}
with {
  variant "untagged";
  variant (head) "form as qualified";
  variant (head) "abstract";
  variant (member2) "block";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_080101_head_elements_of_substitution_groups_002' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
Dynamic test case error: While XER-decoding type '@schema_Neg_080101_head_elements_of_substitution_groups_002.Ize': Component 'head_list': Index 0: Alternative 'head': Attempting to decode blocked or abstract field.
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_080101_head_elements_of_substitution_groups_003 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Blocking substitution >

<COMPILE>
<EXECUTE_PARALLEL>

<MODULE TTCN Neg_080101_head_elements_of_substitution_groups_003 Neg_080101_head_elements_of_substitution_groups_003.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:8.1.1, Blocking substitution
 ** @verdict  pass reject, ttcn3verdict:error
 ***************************************************/
module Neg_080101_head_elements_of_substitution_groups_003 {

    import from schema_Neg_080101_head_elements_of_substitution_groups_003 language "XSD" all;

    template Ize m_msg := {
		headNoSubstition_list:= {
			{ headNoSubstition := "anything" },
			{ groupMember1 := "any thing" }, //<-- substitude blocked cannot be decoded
			{ groupMember2 := "something" } //<-- substitude blocked cannot be decoded
		}
    }

	external function enc_MyType(in Ize pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return Ize
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Neg_080101_head_elements_of_substitution_groups_003() runs on C system C {
        var Raw v_rcv;

        var Raw  v_Raw:="<ns:ize xmlns:ns='schema:Neg_080101_head_elements_of_substitution_groups_003'>\n\t<ns:headNoSubstition>anything</ns:headNoSubstition>\n\t<ns:groupMember1>any thing</ns:groupMember1>\n\t<ns:groupMember2>something</ns:groupMember2>\n</ns:ize>\n\n";

        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));

        alt {
            // compare the encoded message with the reference XML file
            [] p1.check(receive(Raw:?) -> value v_rcv) {
                log("XML message ", v_rcv);
                if (match(v_rcv, v_Raw) ) {
					alt {
                     	[] p1.receive(Raw:?) {
							if(match(dec_MyType(unichar2oct(v_rcv)),m_msg))	{
								setverdict(pass, "Decoded value matches encoded template and reference XML");
							}
							else 
								{setverdict(fail, "XML decoding failure, reason:", dec_MyType(unichar2oct(v_rcv)));}	
						}
					}
                } else {
                    setverdict(fail, "Unexpected message: ", v_rcv, " expected: ", v_Raw);
                }
            }
            [] p1.receive {
                setverdict(fail, "Raw decoding failure");
            }
        }
    }

    control {
        execute(TC_Neg_080101_head_elements_of_substitution_groups_003(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN schema_Neg_080101_head_elements_of_substitution_groups_003 schema_Neg_080101_head_elements_of_substitution_groups_003.ttcn >
/*******************************************************************************
* Copyright (c) 2000-2016 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: CRL 113 200/5 R5A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
//
//  File:          schema_Neg_080101_head_elements_of_substitution_groups_003.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Mon Jul 11 16:32:40 2016
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Neg_080101_head_elements_of_substitution_groups_003.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "schema:Neg_080101_head_elements_of_substitution_groups_003" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module schema_Neg_080101_head_elements_of_substitution_groups_003 {


import from XSD all;


/* THE HEAD ELEMENT */


type XSD.String GroupMember1
with {
  variant "name as uncapitalized";
  variant "element";
};


type XSD.String GroupMember2
with {
  variant "name as uncapitalized";
  variant "element";
};


/* TOP LEVEL ELEMENT TO DEMONSTRATE SUBSTITUTION */


type record Ize
{
	record of HeadNoSubstition_group headNoSubstition_list
}
with {
  variant "name as uncapitalized";
  variant "element";
  variant (headNoSubstition_list) "untagged";
  variant (headNoSubstition_list[-]) "name as 'headNoSubstition'";
};


type union HeadNoSubstition_group
{
	XSD.String headNoSubstition,
	GroupMember1 groupMember1,
	GroupMember2 groupMember2
}
with {
  variant "untagged";
  variant (headNoSubstition) "form as qualified";
  variant (groupMember1) "block";
  variant (groupMember2) "block";
};


}
with {
  encode "XML";
  variant "namespace as 'schema:Neg_080101_head_elements_of_substitution_groups_003' prefix 'ns'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
Dynamic test case error: While XER-decoding type '@schema_Neg_080101_head_elements_of_substitution_groups_003.Ize': Component 'headNoSubstition_list': Index 1: Alternative 'groupMember1': Attempting to decode blocked or abstract field.
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_001 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type AnySimpleType allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_001 Neg_A_ttcn3_module_xsd_001.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type AnySimpleType allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_001 {

	import from XSD all;

	template AnySimpleType m_msg := 1;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_001() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_001(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: character string value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_002 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type AnyType allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_002 Neg_A_ttcn3_module_xsd_002.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type AnyType allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_002 {

	import from XSD all;

	template AnyType m_msg := {{2},{1}}

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_002() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_002(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: character string value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_003 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type String allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_003 Neg_A_ttcn3_module_xsd_003.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type String allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_003 {

	import from XSD all;

	template String m_msg := 1;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_003() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_003(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: character string value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_004 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type NormalizedString allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_004 Neg_A_ttcn3_module_xsd_004.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type NormalizedString allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_004 {

	import from XSD all;

	template NormalizedString m_msg := 123;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_004() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_004(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: character string value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_005 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Token allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_005 Neg_A_ttcn3_module_xsd_005.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Token allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_005 {

	import from XSD all;

	template Token m_msg := 123;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_005() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_005(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: character string value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_006 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Name allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_006 Neg_A_ttcn3_module_xsd_006.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Name allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_006 {

	import from XSD all;

	template Name m_msg := "string with whitespace";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_006() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_006(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "string with whitespace" is not a valid value for type `universal charstring' which has subtype from\("!"..char\(0, 0, 215, 255\),char\(0, 0, 224, 0\)..char\(0, 0, 255, 253\),char\(0, 1, 0, 0\)..char\(0, 16, 255, 253\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_007 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type NMTOKEN allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_007 Neg_A_ttcn3_module_xsd_007.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type NMTOKEN allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_007 {

	import from XSD all;

	template NMTOKEN m_msg := "string with whitespace";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_007() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_007(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "string with whitespace" is not a valid value for type `universal charstring' which has subtype from\("!"..char\(0, 0, 215, 255\),char\(0, 0, 224, 0\)..char\(0, 0, 255, 253\),char\(0, 1, 0, 0\)..char\(0, 16, 255, 253\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_008 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type NCName allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_008 Neg_A_ttcn3_module_xsd_008.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type NCName allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_008 {

	import from XSD all;

	template NCName m_msg := "string with whitespace";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_008() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_008(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "string with whitespace" is not a valid value for type `universal charstring' which has subtype from\("!"..char\(0, 0, 215, 255\),char\(0, 0, 224, 0\)..char\(0, 0, 255, 253\),char\(0, 1, 0, 0\)..char\(0, 16, 255, 253\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_009 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type ID allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_009 Neg_A_ttcn3_module_xsd_009.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type ID allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_009 {

	import from XSD all;

	template ID m_msg := "12  34";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_009() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_009(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "12  34" is not a valid value for type `universal charstring' which has subtype from\("!"..char\(0, 0, 215, 255\),char\(0, 0, 224, 0\)..char\(0, 0, 255, 253\),char\(0, 1, 0, 0\)..char\(0, 16, 255, 253\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_010 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type IDREF allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_010 Neg_A_ttcn3_module_xsd_010.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type IDREF allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_010 {

	import from XSD all;

	template IDREF m_msg := "ID  Reference";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_010() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_010(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "ID  Reference" is not a valid value for type `universal charstring' which has subtype from\("!"..char\(0, 0, 215, 255\),char\(0, 0, 224, 0\)..char\(0, 0, 255, 253\),char\(0, 1, 0, 0\)..char\(0, 16, 255, 253\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_011 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type ENTITY allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_011 Neg_A_ttcn3_module_xsd_011.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type ENTITY allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_011 {

	import from XSD all;

	template ENTITY m_msg := "My Entity";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_011() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_011(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "My Entity" is not a valid value for type `universal charstring' which has subtype from\("!"..char\(0, 0, 215, 255\),char\(0, 0, 224, 0\)..char\(0, 0, 255, 253\),char\(0, 1, 0, 0\)..char\(0, 16, 255, 253\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_012 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type HexBinary allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_012 Neg_A_ttcn3_module_xsd_012.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type HexBinary allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_012 {

	import from XSD all;

	template HexBinary m_msg := 11;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_012() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_012(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: octetstring value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_013 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Base64Binary allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_013 Neg_A_ttcn3_module_xsd_013.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Base64Binary allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_013 {

	import from XSD all;

	template Base64Binary m_msg := 123;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_013() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_013(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: octetstring value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_014 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type AnyURI allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_014 Neg_A_ttcn3_module_xsd_014.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type AnyURI allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_014 {

	import from XSD all;

	template AnyURI m_msg := 123;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_014() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_014(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: character string value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_015 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Language allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_015 Neg_A_ttcn3_module_xsd_015.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Language allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_015 {

	import from XSD all;

	template Language m_msg := "TTCN 3";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_015() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_015(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "TTCN 3" is not a valid value for type `charstring' which has subtype pattern \(\[a-zA-Z\]#\(1,8\)\(-\\w#\(1,8\)\)#\(0,\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_016 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Integer allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_016 Neg_A_ttcn3_module_xsd_016.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Integer allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_016 {

	import from XSD all;

	template Integer m_msg := 1.0;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_016() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_016(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: integer value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_017 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type PositiveInteger allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_017 Neg_A_ttcn3_module_xsd_017.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type PositiveInteger allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_017 {

	import from XSD all;

	template PositiveInteger m_msg := -12;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_017() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_017(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: -12 is not a valid value for type `integer' which has subtype \(1..infinity\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_018 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type NonPositiveInteger allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_018 Neg_A_ttcn3_module_xsd_018.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type NonPositiveInteger allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_018 {

	import from XSD all;

	template NonPositiveInteger m_msg := 3;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_018() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_018(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: 3 is not a valid value for type `integer' which has subtype \(-infinity..0\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_019 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type NegativeInteger allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_019 Neg_A_ttcn3_module_xsd_019.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type NegativeInteger allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_019 {

	import from XSD all;

	template NegativeInteger m_msg := 3;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_019() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_019(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: 3 is not a valid value for type `integer' which has subtype \(-infinity..-1\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_020 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type NonNegativeInteger allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_020 Neg_A_ttcn3_module_xsd_020.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type NonNegativeInteger allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_020 {

	import from XSD all;

	template NonNegativeInteger m_msg := -1;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_020() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_020(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: -1 is not a valid value for type `integer' which has subtype \(0..infinity\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_021 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Long allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_021 Neg_A_ttcn3_module_xsd_021.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Long allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_021 {

	import from XSD all;

	template Long m_msg := "1";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_021() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_021(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: integer value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_022 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type UnsignedLong allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_022 Neg_A_ttcn3_module_xsd_022.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type UnsignedLong allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_022 {

	import from XSD all;

	template UnsignedLong m_msg := -3;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_022() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_022(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: -3 is not a valid value for type `integer' which has subtype \(0..18446744073709551615\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_023 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Int allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_023 Neg_A_ttcn3_module_xsd_023.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Int allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_023 {

	import from XSD all;

	template Int m_msg := 3.3;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_023() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_023(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: integer value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_024 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type UnsignedInt allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_024 Neg_A_ttcn3_module_xsd_024.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type UnsignedInt allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_024 {

	import from XSD all;

	template UnsignedInt m_msg := -3;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_024() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_024(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: -3 is not a valid value for type `integer' which has subtype \(0..4294967295\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_025 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Short allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_025 Neg_A_ttcn3_module_xsd_025.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Short allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_025 {

	import from XSD all;

	template Short m_msg := 32770;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_025() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_025(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: 32770 is not a valid value for type `integer' which has subtype \(-32768..32767\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_026 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type UnsignedShort allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_026 Neg_A_ttcn3_module_xsd_026.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type UnsignedShort allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_026 {

	import from XSD all;

	template UnsignedShort m_msg := -2;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_026() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_026(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: -2 is not a valid value for type `integer' which has subtype \(0..65535\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_027 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Byte allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_027 Neg_A_ttcn3_module_xsd_027.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Byte allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_027 {

	import from XSD all;

	template Byte m_msg := 130;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_027() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_027(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: 130 is not a valid value for type `integer' which has subtype \(-128..127\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_028 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type UnsignedByte allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_028 Neg_A_ttcn3_module_xsd_028.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type UnsignedByte allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_028 {

	import from XSD all;

	template UnsignedByte m_msg := -1;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_028() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_028(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: -1 is not a valid value for type `integer' which has subtype \(0..255\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_029 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Decimal allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_029 Neg_A_ttcn3_module_xsd_029.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Decimal allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_029 {

	import from XSD all;

	template Decimal m_msg := 1;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_029() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_029(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: float value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_030 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Float allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_030 Neg_A_ttcn3_module_xsd_030.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Float allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_030 {

	import from XSD all;

	template Float m_msg := 1;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_030() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_030(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: float value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_031 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Double allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_031 Neg_A_ttcn3_module_xsd_031.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Double allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_031 {

	import from XSD all;

	template Double m_msg := 1;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_031() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_031(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: float value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_032 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Duration allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_032 Neg_A_ttcn3_module_xsd_032.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Duration allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_032 {

	import from XSD all;

	template Duration m_msg := "30 min";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_032() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_032(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "30 min" is not a valid value for type `charstring' which has subtype pattern \(-#\(,1\)P\([0-9]#\(1,\)\(Y\([0-9]#\(1,\)\(M\([0-9]#\(1,\)D\(T[0-9]#\(1,\)\(H\([0-9]#\(1,\)\(M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)\)#\(,1\)|.[0-9]#\(1,\)S|S\)\)#\(,1\)|M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)|.[0-9]#\(1,\)M\)#\(,1\)|S|.[0-9]#\(1,\)S\)\)#\(,1\)|\(T[0-9]#\(1,\)\(H\([0-9]#\(1,\)\(M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)\)#\(,1\)|.[0-9]#\(1,\)S|S\)\)#\(,1\)|M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)|.[0-9]#\(1,\)M\)#\(,1\)|S|.[0-9]#\(1,\)S\)\)#\(,1\)\)|D\(T[0-9]#\(1,\)\(H\([0-9]#\(1,\)\(M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)\)#\(,1\)|.[0-9]#\(1,\)S|S\)\)#\(,1\)|M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)|.[0-9]#\(1,\)M\)#\(,1\)|S|.[0-9]#\(1,\)S\)\)#\(,1\)\)|\(T[0-9]#\(1,\)\(H\([0-9]#\(1,\)\(M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)\)#\(,1\)|.[0-9]#\(1,\)S|S\)\)#\(,1\)|M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)|.[0-9]#\(1,\)M\)#\(,1\)|S|.[0-9]#\(1,\)S\)\)#\(,1\)\)|M\([0-9]#\(1,\)D\(T[0-9]#\(1,\)\(H\([0-9]#\(1,\)\(M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)\)#\(,1\)|.[0-9]#\(1,\)S|S\)\)#\(,1\)|M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)|.[0-9]#\(1,\)M\)#\(,1\)|S|.[0-9]#\(1,\)S\)\)#\(,1\)|\(T[0-9]#\(1,\)\(H\([0-9]#\(1,\)\(M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)\)#\(,1\)|.[0-9]#\(1,\)S|S\)\)#\(,1\)|M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)|.[0-9]#\(1,\)M\)#\(,1\)|S|.[0-9]#\(1,\)S\)\)#\(,1\)\)|D\(T[0-9]#\(1,\)\(H\([0-9]#\(1,\)\(M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)\)#\(,1\)|.[0-9]#\(1,\)S|S\)\)#\(,1\)|M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)|.[0-9]#\(1,\)M\)#\(,1\)|S|.[0-9]#\(1,\)S\)\)#\(,1\)\)|\(T[0-9]#\(1,\)\(H\([0-9]#\(1,\)\(M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)\)#\(,1\)|.[0-9]#\(1,\)S|S\)\)#\(,1\)|M\([0-9]#\(1,\)\(S|.[0-9]#\(1,\)S\)|.[0-9]#\(1,\)M\)#\(,1\)|S|.[0-9]#\(1,\)S\)\)\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_033 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type DateTime allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_033 Neg_A_ttcn3_module_xsd_033.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type DateTime allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_033 {

	import from XSD all;

	template DateTime m_msg := "14-12-12-12:00:00";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_033() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_033(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "14-12-12-12:00:00" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)-\(0[1-9]|[12][0-9]|3[01]\)T\(\([01][0-9]|2[0-3]\):\([0-5][0-9]\):\([0-5][0-9]\)\(.[0-9]#\(1,\)\)#\(,1\)|24:00:00\(.0#\(1,\)\)#\(,1\)\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_034 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Time allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_034 Neg_A_ttcn3_module_xsd_034.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Time allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_034 {

	import from XSD all;

	template Time m_msg := "66:66";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_034() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_034(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "66:66" is not a valid value for type `charstring' which has subtype pattern \(\(\([01][0-9]|2[0-3]\):\([0-5][0-9]\):\([0-5][0-9]\)\(.[0-9]#\(1,\)\)#\(,1\)|24:00:00\(.0#\(1,\)\)#\(,1\)\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_035 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Date allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_035 Neg_A_ttcn3_module_xsd_035.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Date allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_035 {

	import from XSD all;

	template Date m_msg := "14.13.13";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_035() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_035(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "14.13.13" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)-\(0[1-9]|[12][0-9]|3[01]\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_036 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type GYearMonth allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_036 Neg_A_ttcn3_module_xsd_036.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type GYearMonth allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_036 {

	import from XSD all;

	template GYearMonth m_msg := "14-13";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_036() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_036(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "14-13" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4-\(0[1-9]|1[0-2]\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_037 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type GYear allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_037 Neg_A_ttcn3_module_xsd_037.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type GYear allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_037 {

	import from XSD all;

	template GYear m_msg := "14";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_037() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_037(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "14" is not a valid value for type `charstring' which has subtype pattern \(\(-\([1-9][0-9]#\(0,\)\)#\(,1\)\)#\(,1\)[0-9]#4\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_038 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type GMonthDay allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_038 Neg_A_ttcn3_module_xsd_038.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type GMonthDay allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_038 {

	import from XSD all;

	template GMonthDay m_msg := "12-18";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_038() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_038(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "12-18" is not a valid value for type `charstring' which has subtype pattern \(--\(0[1-9]|1[0-2]\)-\(0[1-9]|[12][0-9]|3[01]\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_039 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type GDay allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_039 Neg_A_ttcn3_module_xsd_039.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type GDay allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_039 {

	import from XSD all;

	template GDay m_msg := "18";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_039() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_039(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "18" is not a valid value for type `charstring' which has subtype pattern \(---\(0[1-9]|[12][0-9]|3[01]\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_040 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type GMonth allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_040 Neg_A_ttcn3_module_xsd_040.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type GMonth allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_040 {

	import from XSD all;

	template GMonth m_msg := "12";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_040() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_040(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "12" is not a valid value for type `charstring' which has subtype pattern \(--\(0[1-9]|1[0-2]\)\(Z|[+-]\(\(0[0-9]|1[0-3]\):[0-5][0-9]|14:00\)\)#\(,1\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_041 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type NMTOKENS allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_041 Neg_A_ttcn3_module_xsd_041.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type NMTOKENS allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_041 {

	import from XSD all;

	template NMTOKENS m_msg := {1, 2}

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_041() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_041(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: character string value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_042 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type IDREFS allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_042 Neg_A_ttcn3_module_xsd_042.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type IDREFS allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_042 {

	import from XSD all;

	template IDREFS m_msg := {"1 2 3"}

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_042() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_042(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "1 2 3" is not a valid value for type `universal charstring' which has subtype from\("!"..char\(0, 0, 215, 255\),char\(0, 0, 224, 0\)..char\(0, 0, 255, 253\),char\(0, 1, 0, 0\)..char\(0, 16, 255, 253\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_043 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type ENTITIES allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_043 Neg_A_ttcn3_module_xsd_043.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type ENTITIES allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_043 {

	import from XSD all;

	template ENTITIES m_msg :=  {"entity_1 , entity_2"}

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_043() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_043(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "entity_1 , entity_2" is not a valid value for type `universal charstring' which has subtype from\("!"..char\(0, 0, 215, 255\),char\(0, 0, 224, 0\)..char\(0, 0, 255, 253\),char\(0, 1, 0, 0\)..char\(0, 16, 255, 253\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_044 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type QName allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_044 Neg_A_ttcn3_module_xsd_044.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type QName allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_044 {

	import from XSD all;

	template QName m_msg := {"", "name with whitespace"}

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_044() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_044(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: "name with whitespace" is not a valid value for type `universal charstring' which has subtype from\("!"..char\(0, 0, 215, 255\),char\(0, 0, 224, 0\)..char\(0, 0, 255, 253\),char\(0, 1, 0, 0\)..char\(0, 16, 255, 253\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_045 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type Boolean allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_045 Neg_A_ttcn3_module_xsd_045.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type Boolean allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_045 {

	import from XSD all;

	template Boolean m_msg := fail;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_045() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_045(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: boolean value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_046 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type XMLCompatibleString allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_046 Neg_A_ttcn3_module_xsd_046.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type XMLCompatibleString allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_046 {

	import from XSD all;

	template XMLCompatibleString m_msg := 123;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_046() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_046(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: character string value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_047 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type XMLStringWithNoWhitespace allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_047 Neg_A_ttcn3_module_xsd_047.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type XMLStringWithNoWhitespace allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_047 {

	import from XSD all;

	template XMLStringWithNoWhitespace m_msg := "a b c";

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_047() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_047(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
"a b c" is not a valid value for type `universal charstring' which has subtype from\("!"..char\(0, 0, 215, 255\),char\(0, 0, 224, 0\)..char\(0, 0, 255, 253\),char\(0, 1, 0, 0\)..char\(0, 16, 255, 253\)\)
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h2. Neg_A_ttcn3_module_xsd_048 negative test
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ensure the builtin XSD type XMLStringWithNoCRLFHT allows only valid values >

<COMPILE>

<MODULE TTCN Neg_A_ttcn3_module_xsd_048 Neg_A_ttcn3_module_xsd_048.ttcn >
/******************************************************************************
 ** @version  0.0.1
 ** @purpose  9:A, Ensure the builtin XSD type XMLStringWithNoCRLFHT allows only valid values
 ** @verdict  pass reject
 ***************************************************/
module Neg_A_ttcn3_module_xsd_048 {

	import from XSD all;

	template XMLStringWithNoCRLFHT m_msg := 123;

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type component C {
    }

    testcase TC_Neg_A_ttcn3_module_xsd_048() runs on C system C {
        // set a verdict before since valueof should throw error
        setverdict(fail, "Should not be able to create an invalid value of the given built-in XSD type", m_msg);
        log(valueof(m_msg)); // if testcase is compiling, valueof is expected to throw an testcase error since the value is invalid
    }

    control {
        execute(TC_Neg_A_ttcn3_module_xsd_048(), PX_TC_EXECUTION_TIMEOUT);
    }

}
<END_MODULE>

<MODULE TTCN XSD XSD.ttcn >
xsd_tmp_keyword
<END_MODULE>

<MODULE TTCN UsefulTtcn3Types UsefulTtcn3Types.ttcn >
usefultypes_tmp_keyword
<END_MODULE>

<RESULT COUNT>
error: character string value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h1.References
.*---------------------------------------------------------------------*
:list.
:li D='[1]'.1/1/174 02-CRL 113 200/5 Uen
:nl.Statement of Compliance for TITAN project
:li D='[2]'.ETSI ES 201 873-9, v4.6.1 Mockup v1 (2015-06):
:nl.Testing and Test Control Notation version 3.,
:nl.Part 9: Using XML schema with TTCN-3
:elist.
