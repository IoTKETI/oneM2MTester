/******************************************************************************
 * Copyright (C) 2017 ETSI  All Rights Reserved.
 *
 * Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  9:5.2.2, Verify that suffix is attached in case of name clash between types and local module
 ** @verdict  pass accept, ttcn3verdict:pass
***************************************************/
// The following requirements are tested:
// Rule j (adaptation considering rules of 5.2.2 of the core language specification):
// If the name being generated is the name of a TTCN-3 type and the character string 
// generated by items a) to i) above is identical to the name of another TTCN-3 type 
// previously generated in the same TTCN-3 module, or is one of the reserved words 
// specified in clause 11.27 of Recommendation ITU T X.680 [3], then a postfix shall 
// be appended to the character string generated according to the above rules. The 
// postfix shall consist of a "_" (LOW LINE) followed by the canonical lexical 
// representation (see W3C XML Schema Part 2 [9], clause 2.3.1) of an integer. This 
// integer shall be the least positive integer such that the new name is different 
// from the type reference name of any other TTCN-3 type assignment previously 
// generated in any of those TTCN-3 modules.
module Pos_050202_name_conversion_rules_015 {

   import from MyType language "XSD" all;

   template MyType_1 m_msg := 15;

	external function enc_MyType(in MyType_1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return MyType_1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout MyType_1, Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Pos_050202_name_conversion_rules_015() runs on C system C {
        var Raw v_rcv;

        var Raw  v_Raw:="<ns026:MyType xmlns:ns026='MyType'>15</ns026:MyType>\n";

        connect(self:p, self:p1);

        // encode the message
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));

        alt {
            // compare the encoded message with the reference XML file
            [] p1.check(receive(Raw:?) -> value v_rcv) {
                log("XML message ", v_rcv);
                if (match(v_rcv, v_Raw) ) {
					alt {
                     	[] p1.receive(Raw:?) {
							if(match(dec_MyType(unichar2oct(v_rcv)),m_msg))	{
								setverdict(pass, "Decoded value matches encoded template and reference XML");
							}
							else 
								{setverdict(fail, "XML decoding failure, reason:", dec_MyType(unichar2oct(v_rcv)));}	
						}
					}
                } else {
                    setverdict(fail, "Unexpected message: ", v_rcv, " expected: ", v_Raw);
                }
            }
            [] p1.receive {
                setverdict(fail, "Raw decoding failure");
            }
        }
    }

    control {
        execute(TC_Pos_050202_name_conversion_rules_015(), PX_TC_EXECUTION_TIMEOUT);
    }


}
