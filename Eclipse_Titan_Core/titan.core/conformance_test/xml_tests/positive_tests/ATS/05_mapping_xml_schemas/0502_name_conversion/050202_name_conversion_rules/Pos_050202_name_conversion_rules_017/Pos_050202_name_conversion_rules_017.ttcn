/******************************************************************************
 * Copyright (C) 2017 ETSI  All Rights Reserved.
 *
 * Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  9:5.2.2, Verify that suffix is attached in case of name clash between field names
 ** @verdict  pass accept, ttcn3verdict:pass
***************************************************/
// The following requirements are tested:
// Rule k:
// If the name being generated is the identifier of a field of a record or 
// a union type, and the character string generated by the rules in items 
// a) to i) above is identical to the identifier of a previously generated 
// field identifier of the same type, then a postfix shall be appended to 
// the character string generated by the above rules. The postfix shall 
// consist of a "_" (LOW LINE) followed by the canonical lexical 
// representation (see W3C XML Schema Part 2 [9], clause 2.3.1) of 
// an integer. This integer shall be the least positive integer such that 
// the new identifier is different from the identifier of any previously 
// generated component of that sequence, set, or choice type.
module Pos_050202_name_conversion_rules_017 {

   import from schema_Pos_050202_name_conversion_rules_017 language "XSD" all;

   template MyType m_msg := 
	{
		item := 0,
		item_1 := 1,
		item_2 := 2
	};

	external function enc_MyType(in MyType pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return MyType
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout MyType, Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Pos_050202_name_conversion_rules_017() runs on C system C {
        var Raw v_rcv;

        var Raw  v_Raw:="<ns028:MyType xmlns:ns028='schema:Pos_050202_name_conversion_rules_017'>\n\t<item>0</item>\n\t<item中国>1</item中国>\n\t<item日本>2</item日本>\n</ns028:MyType>\n\n";

        connect(self:p, self:p1);

        // encode the message
        p.send(oct2unichar(enc_MyType(valueof(m_msg))));

        alt {
            // compare the encoded message with the reference XML file
           [] p1.check(receive(Raw:?) -> value v_rcv) {
                log("XML message ", v_rcv);
                if (match(v_rcv, v_Raw) ) {
					alt {
                     	[] p1.receive(Raw:?) {
							if(match(dec_MyType(unichar2oct(v_rcv)),m_msg))	{
								setverdict(pass, "Decoded value matches encoded template and reference XML");
							}
							else 
								{setverdict(fail, "XML decoding failure, reason:", dec_MyType(unichar2oct(v_rcv)));}	
						}
					}
                } else {
                    setverdict(fail, "Unexpected message: ", v_rcv, " expected: ", v_Raw);
                }
            }
            [] p1.receive {
                setverdict(fail, "Raw decoding failure");
            }
        }
    }

    control {
        execute(TC_Pos_050202_name_conversion_rules_017(), PX_TC_EXECUTION_TIMEOUT);
    }


}
