/******************************************************************************
 * Copyright (C) 2017 ETSI  All Rights Reserved.
 *
 * Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  9:7.5.3, Verify transformation of union with memberTypes attribute
 ** @verdict  pass accept, ttcn3verdict:pass
***************************************************/
// The following requirements are tested:
// An XSD union is considered as a set of mutually exclusive alternative types for 
// a simpleType. As this is compatible with the union type of TTCN-3, a simpleType 
// derived by union in XSD shall be mapped to a union type definition in TTCN-3. The 
// generated TTCN-3 union type shall contain one alternative for each member type of 
// the XSD union, preserving the textual order of the member types in the initial XSD 
// union type. The field names of the TTCN-3 union type shall be the result of applying 
// clause 5.2.2 to either to the unqualified name of the member type (in case of built 
// in XSD data types and user defined named types) ... .
module Pos_070503_derivation_by_union_001 {

   import from schema_Pos_070503_derivation_by_union_001 language "XSD" all;

   template MyType m_msg := { integer_ := 5 };

	external function enc_MyType(in MyType pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return MyType
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Pos_070503_derivation_by_union_001() runs on C system C {
        var Raw v_rcv;

        var Raw  v_Raw:="<ns151:MyType xmlns:ns151='schema:Pos_070503_derivation_by_union_001' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xsi:type='xsd:integer'>5</ns151:MyType>\n\n";

        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));

        alt {
            // compare the encoded message with the reference XML file
            [] p1.check(receive(Raw:?) -> value v_rcv) {
                log("XML message ", v_rcv);
                if (match(v_rcv, v_Raw) ) {
					alt {
                     	[] p1.receive(Raw:?) {
							if(match(dec_MyType(unichar2oct(v_rcv)),m_msg))	{
								setverdict(pass, "Decoded value matches encoded template and reference XML");
							}
							else 
								{setverdict(fail, "XML decoding failure, reason:", dec_MyType(unichar2oct(v_rcv)));}	
						}
					}
                } else {
                    setverdict(fail, "Unexpected message: ", v_rcv, " expected: ", v_Raw);
                }
            }
            [] p1.receive {
                setverdict(fail, "Raw decoding failure");
            }
        }
    }

    control {
        execute(TC_Pos_070503_derivation_by_union_001(), PX_TC_EXECUTION_TIMEOUT);
    }


}
