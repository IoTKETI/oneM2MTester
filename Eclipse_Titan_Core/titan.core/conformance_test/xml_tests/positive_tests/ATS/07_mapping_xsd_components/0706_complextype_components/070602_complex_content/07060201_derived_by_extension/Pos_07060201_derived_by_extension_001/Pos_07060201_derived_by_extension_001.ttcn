/******************************************************************************
 * Copyright (C) 2017 ETSI  All Rights Reserved.
 *
 * Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  9:7.6.2.1, Verify mapping of complex type where both the base and the 
 **           extending types have the compositor sequence.
 ** @verdict  pass accept, ttcn3verdict:pass
 ***************************************************/
module Pos_07060201_derived_by_extension_001 {

    import from schema_Pos_07060201_derived_by_extension_001 language "XSD" all;
    //template for EXAMPLE1 and following type system shall be generated from xsd file:
    /*type record E1
    {
        // fields corresponding to attributes of the base and the extending type
        // (in alphabetical order)
        XSD.String birthDateAttrGroup optional,
        XSD.String birthPlaceAttrGroup optional,
        XSD.Integer genderAttrBase optional,
        XSD.String jobPositionAttrGroup optional,
        XSD.String unitOfAge optional,
        // followed by fields corresponding to elements of the base type
        XSD.String titleElemBase,
        XSD.String forenameElemBase,
        XSD.String surnameElemBase,
        // finally fields corresponding to the extending element and group reference
        XSD.Integer ageElemExt,
        G25seq g25seq
    }
    with {
    variant "name as uncapitalized ";
    variant (birthDateAttrGroup, birthPlaceAttrGroup, genderAttrBase, jobPositionAttrGroup,unitOfAge) "attribute";
    };

    type record G25seq {
        XSD.String familyStatusElemInGroup,
        XSD.String spouseElemInGroup optional
    }
    with {
    variant "untagged"
    }*/
    
    template E1 m_msg := {
      birthDateAttrGroup := omit,
      birthPlaceAttrGroup  := omit,
      genderAttrBase := omit,
      jobPositionAttrGroup  := omit,
      unitOfAge := omit,
      titleElemBase := "titleElemBase1",
      forenameElemBase := "forenameElemBase2",
      surnameElemBase := "surnameElemBase3",
      ageElemExt := 1,
      familyStatusElemInGroup :="familyStatusElemInGroup4",
      spouseElemInGroup := omit
      
    }

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Pos_07060201_derived_by_extension_001() runs on C system C {
        var Raw v_rcv;

        var Raw  v_Raw:="<ns159:e1 xmlns:ns159='schema:Pos_07060201_derived_by_extension_001'>\n\t<titleElemBase>titleElemBase1</titleElemBase>\n\t<forenameElemBase>forenameElemBase2</forenameElemBase>\n\t<surnameElemBase>surnameElemBase3</surnameElemBase>\n\t<ageElemExt>1</ageElemExt>\n\t<familyStatusElemInGroup>familyStatusElemInGroup4</familyStatusElemInGroup>\n</ns159:e1>\n\n";

        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));

        alt {
            // compare the encoded message with the reference XML file
            [] p1.check(receive(Raw:?) -> value v_rcv) {
                log("XML message ", v_rcv);
                if (match(v_rcv, v_Raw) ) {
					alt {
                     	[] p1.receive(Raw:?) {
							if(match(dec_MyType(unichar2oct(v_rcv)),m_msg))	{
								setverdict(pass, "Decoded value matches encoded template and reference XML");
							}
							else 
								{setverdict(fail, "XML decoding failure, reason:", dec_MyType(unichar2oct(v_rcv)));}	
						}
					}
                } else {
                    setverdict(fail, "Unexpected message: ", v_rcv, " expected: ", v_Raw);
                }
            }
            [] p1.receive {
                setverdict(fail, "Raw decoding failure");
            }
        }
    }

    control {
        execute(TC_Pos_07060201_derived_by_extension_001(), PX_TC_EXECUTION_TIMEOUT);
    }

}
