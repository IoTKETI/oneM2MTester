/******************************************************************************
 * Copyright (C) 2017 ETSI  All Rights Reserved.
 *
 * Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  9:7.6.2.1, Verify mapping of complex type where extension of a sequence 
 **                      base type by a choice model group
 ** @verdict  pass accept, ttcn3verdict:pass
 ***************************************************/
module Pos_07060201_derived_by_extension_007 {

    import from schema_Pos_07060201_derived_by_extension_007 language "XSD" all;
    // template for EXAMPLE 4: type element e27cho
    // and following type system shall be generated from xsd file:
    /*
    type record E1
        {
        XSD.Integer genderAttrBase optional,
        XSD.String jobPositionAttrGroup optional,
        XSD.String unitAttrExt optional,
        XSD.String titleElemBase,
        XSD.String forenameElemBase,
        XSD.String surnameElemBase,
        union {
            XSD.Integer ageElemExt,
            XSD.Date birthdayElemExt
        } choice
    }
    with {
        variant "name as uncapitalized";
        variant(genderAttrBase, jobPositionAttrGroup, unitAttrExt) "attribute";
        variant(choice) "untagged"
    }
    */

    template E1 m_msg := {
        genderAttrBase := omit,
        jobPositionAttrGroup := omit,
        unitAttrExt := omit,
        titleElemBase :="titleElemBase",
        forenameElemBase :="forenameElemBase",
        surnameElemBase :="surnameElemBase",
        choice := {
            ageElemExt := 10
        }
    };

	external function enc_MyType(in E1 pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return E1
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Pos_07060201_derived_by_extension_007() runs on C system C {
        var Raw v_rcv;

        var Raw  v_Raw:="<ns165:e1 xmlns:ns165='schema:Pos_07060201_derived_by_extension_007'>\n\t<titleElemBase>titleElemBase</titleElemBase>\n\t<forenameElemBase>forenameElemBase</forenameElemBase>\n\t<surnameElemBase>surnameElemBase</surnameElemBase>\n\t<ageElemExt>10</ageElemExt>\n</ns165:e1>\n\n";

        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));

        alt {
            // compare the encoded message with the reference XML file
            [] p1.check(receive(Raw:?) -> value v_rcv) {
                log("XML message ", v_rcv);
                if (match(v_rcv, v_Raw) ) {
					alt {
                     	[] p1.receive(Raw:?) {
							if(match(dec_MyType(unichar2oct(v_rcv)),m_msg))	{
								setverdict(pass, "Decoded value matches encoded template and reference XML");
							}
							else 
								{setverdict(fail, "XML decoding failure, reason:", dec_MyType(unichar2oct(v_rcv)));}	
						}
					}
                } else {
                    setverdict(fail, "Unexpected message: ", v_rcv, " expected: ", v_Raw);
                }
            }
            [] p1.receive {
                setverdict(fail, "Raw decoding failure");
            }
        }
    }

    control {
        execute(TC_Pos_07060201_derived_by_extension_007(), PX_TC_EXECUTION_TIMEOUT);
    }

}
