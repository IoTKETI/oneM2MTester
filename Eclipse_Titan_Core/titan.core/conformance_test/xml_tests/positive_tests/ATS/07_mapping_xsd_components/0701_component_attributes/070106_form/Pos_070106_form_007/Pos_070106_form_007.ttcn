/******************************************************************************
 * Copyright (C) 2017 ETSI  All Rights Reserved.
 *
 * Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  9:7.1.6, Verify that qualified element form is correctly converted (unqualified elementFormDefault)
 ** @verdict  pass accept, ttcn3verdict:pass
***************************************************/
// The following requirements are tested:
// If ... the value of a form attribute of an element declaration is qualified
// and no elementFormQualified encoding instruction is attached to the target
// TTCN-3 module, a "form as qualified" encoding instruction shall be attached
// to the TTCN-3 field resulted from mapping the given XSD attribute or element
// declaration.

module Pos_070106_form_007 {

   import from schema_Pos_070106_form_007 language "XSD" all;

   template MyType m_msg := {
       foo:="foo"
   };

	external function enc_MyType(in MyType pdu) return octetstring
  	 with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
  	external function dec_MyType(in octetstring stream) return MyType
  	 with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    /**
     * @desc The timeout given in seconds after which the test case will be stopped.
     */
    modulepar float PX_TC_EXECUTION_TIMEOUT := 5.0;

    type universal charstring Raw;

    type port P message {
        inout Raw;
    } with {extension "internal"}

    type component C {
        port P p;
		port P p1;
    }

    testcase TC_Pos_070106_form_007() runs on C system C {
        var Raw v_rcv;

        var Raw  v_Raw:="<ns130:MyType xmlns:ns130='schema:Pos_070106_form_007'>\n\t<ns130:foo>foo</ns130:foo>\n</ns130:MyType>\n\n";

        connect(self:p, self:p1);

		p.send(oct2unichar(enc_MyType(valueof(m_msg))));

        alt {
            // compare the encoded message with the reference XML file
            [] p1.check(receive(Raw:?) -> value v_rcv) {
                log("XML message ", v_rcv);
                if (match(v_rcv, v_Raw) ) {
					alt {
                     	[] p1.receive(Raw:?) {
							if(match(dec_MyType(unichar2oct(v_rcv)),m_msg))	{
								setverdict(pass, "Decoded value matches encoded template and reference XML");
							}
							else 
								{setverdict(fail, "XML decoding failure, reason:", dec_MyType(unichar2oct(v_rcv)));}	
						}
					}
                } else {
                    setverdict(fail, "Unexpected message: ", v_rcv, " expected: ", v_Raw);
                }
            }
            [] p1.receive {
                setverdict(fail, "Raw decoding failure");
            }
        }
    }

    control {
        execute(TC_Pos_070106_form_007(), PX_TC_EXECUTION_TIMEOUT);
    }


}
