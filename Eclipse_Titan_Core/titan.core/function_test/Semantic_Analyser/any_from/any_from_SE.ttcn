/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Baranyi, Botond
 *
 ******************************************************************************/

/* this module contains negative tests for the semantic analysis of
   the 'any from' clause and index redirects */
module any_from_SE { //^In TTCN-3 module//

/* type definitions */
type port PT message {
  inout integer
}
with {
  extension "internal";
}

signature Sig() exception(integer);

type port PT2 procedure {
  inout Sig
}
with {
  extension "internal";
}

type component CT {
  port PT pt;
  port PT2 pt2;
  port PT pta[1..4];
  port PT pta2[2][3][-2..-1];
}

type integer IntRange (-2..3);

type integer IntValues (0, 2, 5);

type integer PosInt (0..infinity);

type record of PosInt PosIntList;

type record of integer IntList;

type record of charstring StringList;

type record length (1..2) of integer IntList2;

/* using 'any from' on non-arrays */
testcase tc_any_from() runs on CT { //^In testcase definition//
  /* ports */
  alt { //^In alt construct//
    [] any from pt.receive { } //^In guard operation// //^In receive statement// //Reference to a port array was expected instead of a port//
  }
  
  alt { //^In alt construct//
    [] any from pt.check(receive) { } //^In guard operation// //^In check-receive statement// //Reference to a port array was expected instead of a port//
  }
  
  alt { //^In alt construct//
    [] any from pt.trigger { } //^In guard operation// //^In trigger statement// //Reference to a port array was expected instead of a port//
  }
  
  alt { //^In alt construct//
    [] any from pt.check { } //^In guard operation// //^In check statement// //Reference to a port array was expected instead of a port//
  }
  
  alt { //^In alt construct//
    [] any from pt2.getcall { } //^In guard operation// //^In getcall statement// //Reference to a port array was expected instead of a port//
  }
  
  alt { //^In alt construct//
    [] any from pt2.check(getcall) { } //^In guard operation// //^In check-getcall statement// //Reference to a port array was expected instead of a port//
  }
  
  alt { //^In alt construct//
    [] any from pt2.getreply { } //^In guard operation// //^In getreply statement// //Reference to a port array was expected instead of a port//
  }
  
  alt { //^In alt construct//
    [] any from pt2.check(getreply) { } //^In guard operation// //^In check-getreply statement// //Reference to a port array was expected instead of a port//
  }
  
  alt { //^In alt construct//
    [] any from pt2.catch { } //^In guard operation// //^In catch statement// //Reference to a port array was expected instead of a port//
  }
  
  alt { //^In alt construct//
    [] any from pt2.check(catch) { } //^In guard operation// //^In check-catch statement// //Reference to a port array was expected instead of a port//
  }
  
  /* timers */
  timer t;
  alt { //^In alt construct//
    [] any from t.timeout { } //^In guard operation// //^In timeout statement// //Reference to a timer array was expected instead of a timer//
  }
  
  if (any from t.running) { } //^In if statement// //Reference to a timer array was expected instead of a timer//
  
  /* components */
  var CT ct;
  alt { //^In alt construct//
    [] any from ct.done { } //^In guard operation// //^In done statement// //The type of the operand should be a component array type instead of//
  }
  
  alt { //^In alt construct//
    [] any from ct.killed { } //^In guard operation// //^In killed statement// //The type of the operand should be a component array type instead of//
  }
  
  if (any from ct.running) { } //^In if statement// //component array reference was expected instead of//
  
  if (any from ct.alive) { } //^In if statement// //component array reference was expected instead of//
}

/* invalid use of index redirects */
testcase tc_index_redirect() runs on CT { //^In testcase definition//
  /* no 'any from' */ 
  var integer v_int;
  alt { //^In alt construct//
    [] pt.receive(integer: ?) -> @index value v_int { }   //^In guard operation// //^In receive statement// //^In index redirect// //Index redirect cannot be used without the 'any from' clause//
  }
  
  /* wrong type */
  alt { //^In alt construct//
    [] any from pta2.receive(integer: ?) -> @index value v_int { } //^In guard operation// //^In receive statement// //^In index redirect// //Indices of multi-dimensional port arrays can only be redirected to an integer array or a record of integers//
  }
  
  var integer v_int_arr[1];
  alt { //^In alt construct//
    [] any from pta.receive(integer: ?) -> @index value v_int_arr { } //^In guard operation// //^In receive statement// //^In index redirect// //Indices of one-dimensional port arrays can only be redirected to an integer//
  }
  
  var IntList v_int_list;
  alt { //^In alt construct//
    [] any from pta.receive(integer: ?) -> @index value v_int_list { } //^In guard operation// //^In receive statement// //^In index redirect// //Indices of one-dimensional port arrays can only be redirected to an integer//
  }
  
  var boolean v_bool;
  alt { //^In alt construct//
    [] any from pta.receive(integer: ?) -> @index value v_bool { } //^In guard operation// //^In receive statement// //^In index redirect// //Indices of port arrays can only be redirected to an integer, an integer array or a record of integers//
  }
  
  var charstring v_str_arr[3];
  alt { //^In alt construct//
    [] any from pta2.receive(integer: ?) -> @index value v_str_arr { } //^In guard operation// //^In receive statement// //^In index redirect// //The element type of an array in an index redirect must be integer//
  }
  
  var StringList v_str_list;
  alt { //^In alt construct//
    [] any from pta2.receive(integer: ?) -> @index value v_str_list { } //^In guard operation// //^In receive statement// //^In index redirect// //The element type of a 'record of' in an index redirect must be integer//
  }
  
  /* invalid array size */
  var integer v_int_arr2[2];
  alt { //^In alt construct//
    [] any from pta2.receive(integer: ?) -> @index value v_int_arr2 { } //^In guard operation// //^In receive statement// //^In index redirect// //Size of integer array is invalid: the port array has 3 dimensions, but the integer array has 2 elements//
  }
  
  var integer v_int_arr4[4];
  alt { //^In alt construct//
    [] any from pta2.receive(integer: ?) -> @index value v_int_arr4 { } //^In guard operation// //^In receive statement// //^In index redirect// //Size of integer array is invalid: the port array has 3 dimensions, but the integer array has 4 elements//
  }
  
  var IntList2 v_int_list2;
  alt { //^In alt construct//
    [] any from pta2.receive(integer: ?) -> @index value v_int_list2 { } //^In guard operation// //^In receive statement// //^In index redirect// //This index redirect would result in a record of integer of length 3, which is not allowed by the length restrictions of type//
  }
  
  /* conflicts with integer type restrictions */
  var IntRange v_int_range;
  alt { //^In alt construct//
    [] any from pta.receive(integer: ?) -> @index value v_int_range { } //^In guard operation// //^In receive statement// //^In index redirect// //is not a valid value for type `integer' which has subtype//
  }
  
  var IntValues v_int_values;
  alt { //^In alt construct//
    [] any from pta.receive(integer: ?) -> @index value v_int_values { } //^In guard operation// //^In receive statement// //^In index redirect// //is not a valid value for type `integer' which has subtype//3
  }
  
  var PosInt v_pos_int_arr[3];
  alt { //^In alt construct//
    [] any from pta2.receive(integer: ?) -> @index value v_pos_int_arr { } //^In guard operation// //^In receive statement// //^In index redirect// //In dimension// //is not a valid value for type `integer' which has subtype//2
  }
  
  var PosIntList v_pos_int_list;
  alt { //^In alt construct//
    [] any from pta2.receive(integer: ?) -> @index value v_pos_int_list { } //^In guard operation// //^In receive statement// //^In index redirect// //In dimension// //is not a valid value for type `integer' which has subtype//2
  }
}

}
