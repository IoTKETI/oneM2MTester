/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Baranyi, Botond
 *
 ******************************************************************************/
module encode_asn_SE { //^In TTCN-3 module//

import from Types_A all;


/* invalid PER coding functions */
external function f_enc_list1(in Int x, out bitstring y) //^In external function definition// //Only `prototype\(convert\)' is allowed for PER encoding functions//
  with { extension "prototype(fast) encode(PER)" }
  
external function f_enc_list2(in Int x) return octetstring //^In external function definition// //The output type of PER encoding should be `bitstring' instead of `octetstring'//
  with { extension "prototype(convert) encode(PER)" }
  
external function f_dec_list1(in bitstring x) return Int //^In external function definition// //Only `prototype\(sliding\)' is allowed for PER decoding functions//
  with { extension "prototype(convert) decode(PER)" }
  
external function f_dec_list2(in bitstring x, out Int y) //^In external function definition// //Only `prototype\(sliding\)' is allowed for PER decoding functions//
  with { extension "prototype(fast) decode(PER)" }

external function f_dec_list3(in bitstring x, out Int y) return integer //^In external function definition// //Only `prototype\(sliding\)' is allowed for PER decoding functions//
  with { extension "prototype(backtrack) decode(PER)" }
  
external function f_dec_list4(inout charstring x, out Int y) return integer //^In external function definition// //The input type of PER decoding should be `bitstring' instead of `charstring'//
  with { extension "prototype(sliding) decode(PER)" }


/* type with multiple different built-in coding funcions */
external function f_enc_seq1(in Seq x) return bitstring
  with { extension "prototype(convert) encode(JSON)" }
  
external function f_enc_seq2(in Seq x) return bitstring
  with { extension "prototype(convert) encode(BER)" }
  
external function f_dec_seq1(inout bitstring x, out Seq y) return integer
  with { extension "prototype(sliding) decode(BER)" }

function f1() { //^In function definition//
  var Seq x := { num := 2, str := "x" };
  var bitstring y := encvalue(x); //^In variable definition// //^In the parameter of encvalue//
  var integer res := decvalue(y, x);
}

external function f_dec_seq2(in bitstring x, out Seq y)
  with { extension "prototype(fast) decode(JSON)" }


/* type with multiple built-in encoding functions with the same coding rules, used by encvalue;
   and multiple built-in decoding functions with different coding rules, but with no decvalue */
external function f_enc_set1(in Set x) return bitstring
  with { extension "prototype(convert) encode(BER)" }
  
external function f_enc_set2(in Set x) return bitstring
  with { extension "prototype(convert) encode(BER)" }
  
external function f_dec_set1(inout bitstring x, out Set y) return integer
  with { extension "prototype(sliding) decode(BER)" }

function f2() {
  var Set x := { num := 2, str := "x" };
  var bitstring y := encvalue(x);
}

external function f_dec_set2(in bitstring x, out Set y)
  with { extension "prototype(fast) decode(JSON)" }


/* type with multiple PER coding functions */
external function f_enc_seqof1(in SeqOf x) return bitstring
  with { extension "prototype(convert) encode(PER)" }
  
external function f_enc_seqof2(in SeqOf x) return bitstring
  with { extension "prototype(convert) encode(PER)" }
  
external function f_dec_seqof1(inout bitstring x, out SeqOf y) return integer
  with { extension "prototype(sliding) decode(PER)" }

function f3() { //^In function definition//
  var SeqOf x := { 1, 2 };
  var bitstring y := encvalue(x); //^In variable definition// //^In the parameter of encvalue//
  var integer res := decvalue(y, x);
}

external function f_dec_seqof2(inout bitstring x, out SeqOf y) return integer
  with { extension "prototype(sliding) decode(PER)" }


/* type with multiple PER encoding functions, but no decvalue;
   and both a built-in decoding function and a PER decoding function, but no decvalue */
external function f_enc_setof1(in SetOf x) return bitstring
  with { extension "prototype(convert) encode(PER)" }
  
external function f_enc_setof2(in SetOf x) return bitstring
  with { extension "prototype(convert) encode(PER)" }

external function f_dec_setof1(inout bitstring x, out SetOf y) return integer
  with { extension "prototype(sliding) decode(PER)" }

external function f_dec_setof2(inout bitstring x, out SetOf y) return integer
  with { extension "prototype(sliding) decode(BER)" }


/* type with both a built-in encoding function and a PER encoding function;
   and with no decoding functions */
function f4() {
  var Choice x := { str := "p" };
  var bitstring y := encvalue(x);
  var integer res := decvalue(y, x);
}

external function f_enc_choice1(in Choice x) return bitstring
  with { extension "prototype(convert) encode(JSON)" }
  
external function f_enc_choice2(in Choice x) return bitstring
  with { extension "prototype(convert) encode(PER)" }
  
/* external function declarations for nonexistent types */
external function f_enc_non1(in NonExistent x) return bitstring //^In external function definition// //^In formal parameter list// //^In parameter// //There is no local or imported definition with name//
  with { extension "prototype(convert) encode(JSON)" }
  
external function f_enc_non2(in NonExistent x) return bitstring //^In external function definition// //^In formal parameter list//  //^In parameter// //There is no local or imported definition with name//
  with { extension "prototype(convert) encode(PER)" }
  
external function f_dec_non1(inout bitstring x, out NonExistent y) return integer //^In external function definition// //^In formal parameter list//  //^In parameter// //There is no local or imported definition with name//
  with { extension "prototype(sliding) decode(BER)" }

external function f_dec_non2(inout bitstring x, out NonExistent y) return integer //^In external function definition// //^In formal parameter list//  //^In parameter// //There is no local or imported definition with name//
  with { extension "prototype(sliding) decode(PER)" }

}
