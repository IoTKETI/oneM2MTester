/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Raduly, Csaba
 *
 ******************************************************************************/
module encdec_OK {

type record R {
  integer i,
  float f
}

external function enc_conv(in R input) return octetstring
with { extension "prototype(convert) encode(XER:XER_EXTENDED)" }

external function dec_conv(in octetstring input) return R
with { extension "prototype(convert) decode(XER:XER_EXTENDED)" }

external function dec_fast(in octetstring input, out R ret)
with { extension "prototype(fast) decode(XER:XER_EXTENDED)" }

external function dec_bk(in octetstring input, out R ret) return integer
with { extension "prototype(backtrack) decode(XER:XER_EXTENDED)" }

external function dec_sl(inout octetstring input, out R ret) return integer
with { extension "prototype(sliding) decode(XER:XER_EXTENDED)" }

const R c_r := {
  i := 3, f := 0.141592
}

type component pi {}

testcase t_pi() runs on pi
{
  var octetstring encoded := enc_conv(c_r);
  const octetstring comment := char2oct("<!-- nothing to see here -->");
  encoded := comment & encoded & comment;

  var R decoded_conv := dec_conv(encoded);
  if (decoded_conv == c_r) { setverdict(pass); }
  else { /*log(decoded_conv, "<>", c_r);*/ setverdict(fail, decoded_conv, "<>", c_r); }

  var R decoded_fast, decoded_sliding, decoded_backtrack;

  dec_fast(encoded, decoded_fast);
  if (decoded_fast == c_r) { setverdict(pass); }
  else { setverdict(fail); }

  var integer i := dec_bk(encoded, decoded_backtrack);
  if (i == 0){ setverdict(pass); }
  else { setverdict(fail, "decoding failed"); }
  if (decoded_backtrack == c_r) { setverdict(pass); }
  else { setverdict(fail, decoded_backtrack, "<>", c_r); }

  i := dec_sl(encoded, decoded_sliding);
  if (i == 0){ setverdict(pass); }
  else { setverdict(fail, "decoding failed"); }
  if (decoded_sliding == c_r) { setverdict(pass); }
  else { setverdict(fail, decoded_sliding, "<>", c_r); }

  log(i);
}

control {
  execute(t_pi());
}

}
with {
  encode "XML";
}

