/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Baranyi, Botond
 *
 ******************************************************************************/

module DeprecatedCompat_SE { //^In TTCN-3 module//

type record Rec1 {
  integer a,
  integer b
}

type record Rec2 {
  integer x,
  integer y
}

type record of integer RecOf;
type integer Array[2];

type set Set1 {
  integer a,
  integer b
}

type set Set2 {
  integer x,
  integer y
}

type set of integer SetOf;

type record Nested1 {
  Rec1 a,
  Array b
}

type record Nested2 {
  RecOf x,
  Rec2 y
}

type port PT message {
  inout Rec1, Nested2
}
with {
  extension "internal";
}

type component CT {
  port PT pt;
}

testcase tc() runs on CT { //^In testcase definition//
  // variables
  var Rec1 v_rec1 := { 1, 2 };
  var Rec2 v_rec2 := v_rec1;
  var RecOf v_recof := v_rec1; //^In variable definition// //Compatibility between record types and record of types is deprecated//
  var Array v_array := v_recof;
  var Set1 v_set1 := { a := 1, b := 2 };
  var Set2 v_set2 := v_set1;
  var SetOf v_setof := v_set2; //^In variable definition// //Compatibility between set types and set of types is deprecated//
  var Nested1 v_nested1 := { v_rec2, v_rec2 }; //^In variable definition// //^In value for record field// //Compatibility between record types and array types is deprecated//
  var Nested2 v_nested2 := v_nested1; //^In variable definition// //Compatibility between record types and record of types is deprecated// //Compatibility between record types and array types is deprecated//
  v_array := v_rec2; //^In variable assignment// //Compatibility between record types and array types is deprecated//
  v_rec1 := v_array; //^In variable assignment// //Compatibility between record types and array types is deprecated//
  v_rec2 := v_recof; //^In variable assignment// //Compatibility between record types and record of types is deprecated//
  v_set1 := v_setof; //^In variable assignment// //Compatibility between set types and set of types is deprecated//
  
  // template variables
  var template Rec1 vt_rec1 := { 1, 2 };
  var template Rec2 vt_rec2 := vt_rec1;
  var template RecOf vt_recof := vt_rec1; //^In template variable definition// //Compatibility between record types and record of types is deprecated//
  var template Array vt_array := vt_recof;
  var template Set1 vt_set1 := { a := 1, b := 2 };
  var template Set2 vt_set2 := vt_set1;
  var template SetOf vt_setof := vt_set2; //^In template variable definition// //Compatibility between set types and set of types is deprecated//
  var template Nested1 vt_nested1 := { vt_rec2, vt_rec2 }; //^In template variable definition// //^In template for record field// //Compatibility between record types and array types is deprecated//
  var template Nested2 vt_nested2 := vt_nested1; //^In template variable definition// //Compatibility between record types and record of types is deprecated// //Compatibility between record types and array types is deprecated//
  vt_array := vt_rec2; //^In variable assignment// //Compatibility between record types and array types is deprecated//
  vt_rec1 := vt_array; //^In variable assignment// //Compatibility between record types and array types is deprecated//
  vt_rec2 := vt_recof; //^In variable assignment// //Compatibility between record types and record of types is deprecated//
  vt_set1 := vt_setof; //^In variable assignment// //Compatibility between set types and set of types is deprecated//
  
  // in-line templates
  log(match(v_recof, RecOf: vt_rec1)); //^In log statement// //^In the second argument of// //Compatibility between record types and record of types is deprecated//
  log(match(v_array, Rec2: vt_recof)); //^In log statement// //^In the first argument of// //Compatibility between record types and array types is deprecated// //^In the second argument of// //Compatibility between record types and record of types is deprecated//
  log(match(v_set2, Set1: vt_setof)); //^In log statement// //^In the second argument of// //Compatibility between set types and set of types is deprecated//
  log(match(v_rec1, modifies vt_array := { [0] := 4 })); //^In log statement// //^In the first argument of// //Compatibility between record types and array types is deprecated//
  log(match(v_setof, modifies vt_set2 := { x := 4 })); //^In log statement// //^In the first argument of// //Compatibility between set types and set of types is deprecated//

  // receive statements and value redirects
  alt { //^In alt construct//
    [] pt.receive(Rec1: vt_recof) //^In guard operation// //^In receive statement// //Compatibility between record types and record of types is deprecated//
       -> value v_array { } //^In value redirect// //^In redirect #1// //Compatibility between record types and array types is deprecated//
    [] pt.receive(Nested2: vt_nested1) //^In guard operation// //^In receive statement// //Compatibility between record types and record of types is deprecated// //Compatibility between record types and array types is deprecated//
       -> value (v_nested1, v_array := x, v_recof := y) { } //^In value redirect// //^In redirect #1// //^In redirect #3// //Compatibility between record types and record of types is deprecated//2 //Compatibility between record types and array types is deprecated// 
  }
}

}
