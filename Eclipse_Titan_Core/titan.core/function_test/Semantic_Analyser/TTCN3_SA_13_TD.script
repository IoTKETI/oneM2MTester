.******************************************************************************
.* Copyright (c) 2000-2017 Ericsson Telecom AB
.* All rights reserved. This program and the accompanying materials
.* are made available under the terms of the Eclipse Public License v1.0
.* which accompanies this distribution, and is available at
.* http://www.eclipse.org/legal/epl-v10.html
.*
.* Contributors:
.*   Balasko, Jeno
.*   Baranyi, Botond
.*   Delic, Adam
.*
.******************************************************************************/
text.
:lang eng.
.*
:docname.Test Description
:docno.xz/152 91-CRL 113 200 Uen
:rev.PA3
:date.2015-04-27
.*
:prep.ETH/XZR ETHBAAT
:subresp.ETHBAAT
:appr.ETH/RZ (Gyula Koos)
:checked.ETHGRY
.*
:title.Test description of the TTCN-3 Semantic Analyzer: IsBound, Ispresent, AllFrom, Embedded functions
:contents level=3.
.*---------------------------------------------------------------------*
:h1.PREREQUISITES AND PREPARATIONS
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h2.Scope of the Test Object
.*---------------------------------------------------------------------*
:xmp tab=1 nokeep.
This TD contains unified test cases related to TTCN3 Executor's "isbound", "ispresent" and "all from" function.
DON'T YOU DARE TO WRITE AN INSPECTION RECORD ABOUT THIS FILE

:exmp.

:p.:us.Revision Information:eus.

:xmp nokeep.
:us.History:eus.

REV   DATE         PREPARED   CHANGE
===   ==========   ========   ======
PA2   2012-12-11   ETHBAAT    embedded functions
PA3   2013-01-11   ETHBAAT    structured macro
PA4   2013-01-16   ETHBAAT    structured macro moved into Config_Parser/PreprocessingCfgFiles_TD.script
:exmp.

.*---------------------------------------------------------------------*
:h2.Test Tools
.*---------------------------------------------------------------------*
:p.:us.Software Tools:eus.
:xmp tab=2 nokeep.

	SAtester

:exmp.
:np.
.*---------------------------------------------------------------------*
:h1.REQUIREMENT-BASED TESTS
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h2.Testing Isbound feature
.*---------------------------------------------------------------------*

.*---------------------------------------------------------------------*
:h3. Aggregated isbound testcases - Positive tests
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Aggregated isbound testcases - Positive tests >

<EXECUTE_PARALLEL>

<MODULE TTCN IsBound_Test  IsBound_Test.ttcn>
module IsBound_Test {

type port MyChrMessage_PT message {
  inout charstring
} with { extension "internal"}

type component MTC_CT {
  port MyChrMessage_PT my_PCO;
  var integer v_counter1 :=0;

}
//===== SIMPLE, NOT TOO DEEP =====
type record of charstring ROC;
type record of integer  ROI;
type record MyRecord {
  integer       i optional,
  float         x optional,
  charstring    c
}

type record of ROI ROROI;

type union MyUnion1 {
  ROC roc,
  integer i,
  ROI roi,
  MyRecord r
}

const MyUnion1 c_myunion1:= { roc:= { "1aa", "2bb", "3cc"}}
const MyUnion1 c_myunion2:= { i:= 5}


//====== DEEP 3===============
type record MyRec2{
  ROC roc optional,
  ROI roi optional,
  MyUnion1 u optional, 
  MyRecord r optional
}

type record of MyRec2 MyRecOf

  type record MyRec3{
    ROROI roroi optional,
    MyRec2 r optional
  }

  const MyRec2 c_myrec2_1:={ 
    roc:=omit,
    roi:={},
    u:={r:={ i:=1, x:=1.0, c:="one"}},
    r:={ i:=1, x:=1.0, c:="one"}
  }
  const MyRec2 c_myrec2_2:={ 
    roc:={},
    roi:={10,9,8},
    u:={r:={ i:=1, x:=1.0, c:="one"}},
    r:={ i:=1, x:=1.0, c:="one"}
  }  


  //partially initialized record:
  const MyRec2 c_myrec2_part:={ 
    roc:={},
    roi:={10,9,8},
    u:={ r:={ /*i:=1,*/ x:=1.0, c:="one"}},
    r:={ i:=1, x:=1.0, c:="one"}
  }  
  const MyRec3 c_myrec3_1 := {
    roroi:= { {1,2,3,4,5,6,7,8,9},{10} },
    r:= omit
  }

  const MyRec3 c_myrec3_2 := {
    roroi:= { {1,2,3,4,5,6,7,8,9},{10} },
    r:= {
      roc:={},
      roi:={},
      u:={i:=5},
      r:=omit
    }
  } 

  const MyRec3 c_myrec3_innerOmits := {
    roroi:= { {1,2,3,4,5,6,7,8,9},{10} },
    r:= {
      roc:=omit,
      roi:=omit,
      u:=omit,
      r:=omit
    }
  } 


  //==== Templates =====


  //===== SIMPLE TYPES =====
  testcase tc_simple_charstring() runs on MTC_CT {
    var charstring vl_ch;
    if(isbound(vl_ch)){setverdict(fail)} else {setverdict(pass)}
    vl_ch:="honey"
    if(isbound(vl_ch)) {setverdict(pass)} else {setverdict(fail)}
  }

  testcase tc_simple_charstring_template() runs on MTC_CT {
    var template charstring vlt_ch;
    if(isbound(vlt_ch)){setverdict(fail)} else {setverdict(pass)}
    vlt_ch:="AB?D*"
    if(isbound(vlt_ch)) {setverdict(pass)} else {setverdict(fail)}
  }

  testcase tc_simple_charstring_template_pattern() runs on MTC_CT {
    var template charstring vlt_ch;
    if(isbound(vlt_ch)){setverdict(fail)} else {setverdict(pass)}
    vlt_ch:= pattern "AB?D"
    if(isbound(vlt_ch)) {setverdict(pass)} else {setverdict(fail)}
  }

  testcase tc_simple_integer() runs on MTC_CT {
    var integer vl_i;
    if(isbound(vl_i)){setverdict(fail)} else {setverdict(pass)}
    vl_i:=5;
    if(isbound(vl_i)) {setverdict(pass)} else {setverdict(fail)}

    var template integer vtl_i :=*;
    if(isbound( vtl_i )) {setverdict(pass)}else {setverdict(fail)};
    vtl_i:=5;
    if(isbound( vtl_i )) {setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_simple_octetstring() runs on MTC_CT {
    var octetstring vl_o;
    if(isbound(vl_o)){setverdict(fail)} else {setverdict(pass)}
    vl_o:='ABBA'O;
    if(isbound(vl_o)) {setverdict(pass)} else {setverdict(fail)}
  }

  //======= SPECIAL TYPES ======

  altstep as_empty() runs on MTC_CT {
    [] my_PCO.receive {}
  };

  function f_empty() runs on MTC_CT {
    log("f_empty called");
  }

  testcase tc_special_default_value() runs on MTC_CT {
    var default vl_default;
    if(isbound(vl_default)){setverdict(fail)}else {setverdict(pass)};

    vl_default := null;
    if(isbound(vl_default)) {setverdict(pass)} else {setverdict(fail)}

    vl_default := activate(as_empty());
    //log("default altstep after activate:", vl_default);
    if(isbound(vl_default)){setverdict(pass)}else {setverdict(fail)};

    deactivate(vl_default);
    //log("default altstep after deactivate:", vl_default);
    if(isbound(vl_default)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_special_compref() runs on MTC_CT {
    var MTC_CT vc_myComp;
    log("vc_myComp before create:", vc_myComp);
    if(isbound(vc_myComp)){setverdict(fail)}else {setverdict(pass)};

    vc_myComp:= MTC_CT.create("hali");
    log("vc_myComp after create:", vc_myComp);
    if(isbound(vc_myComp)){setverdict(pass)}else {setverdict(fail)};

    vc_myComp.start(f_empty());
    if(isbound(vc_myComp)){setverdict(pass)}else {setverdict(fail)};

    vc_myComp.done;
    if(isbound(vc_myComp)){setverdict(pass)}else {setverdict(fail)};
  }

  //========= Compound =====
  testcase tc_unionOfRecordOfs1() runs on MTC_CT {
    var MyUnion1 vl_u:= c_myunion1;
    if(isbound(vl_u)) {setverdict(pass)} else {setverdict(fail)}
    if(isbound(vl_u.roc)){setverdict(pass)} else {setverdict(fail)}
    if(isbound(vl_u.roc[0])){setverdict(pass)}else {setverdict(fail)}
    if(isbound(vl_u.roc[1])){setverdict(pass)}else {setverdict(fail)}
    if(isbound(vl_u.roc[2])){setverdict(pass)}else {setverdict(fail)}
    if(isbound(vl_u.roc[3])){setverdict(fail)}else {setverdict(pass)}
    if(isbound(vl_u.roc[99])){setverdict(fail)}else {setverdict(pass)}
    if(isbound(vl_u.i)){setverdict(fail)}else {setverdict(pass)}
    if(isbound(vl_u.roi)){setverdict(fail)}else {setverdict(pass)}
    if(isbound(vl_u.roi[0])){setverdict(fail)}else {setverdict(pass)}
    if(isbound(vl_u.roi[1])){setverdict(fail)} else {setverdict(pass)}
    log(vl_u.roc);
  }

  testcase tc_unionOfRecordOfs2() runs on MTC_CT {
    var MyUnion1 vl_u:= c_myunion2;
    if(isbound(vl_u)) {setverdict(pass)} else {setverdict(fail)}
    if(isbound(vl_u.roc)){setverdict(fail)} else {setverdict(pass)}
    if(isbound(vl_u.roc[0])){setverdict(fail)} else {setverdict(pass)}
    if(isbound(vl_u.roc[1])){setverdict(fail)} else {setverdict(pass)}
    if(isbound(vl_u.roc[2])){setverdict(fail)} else {setverdict(pass)}
    if(isbound(vl_u.roc[3])){setverdict(fail)} else {setverdict(pass)}
    if(isbound(vl_u.roc[99])){setverdict(fail)} else {setverdict(pass)}
    if(isbound(vl_u.r)){setverdict(fail)} else {setverdict(pass)};
    if(isbound(vl_u.r.i)){setverdict(fail)} else {setverdict(pass)};
    if(isbound(vl_u.r.x)){setverdict(fail)} else {setverdict(pass)};
    if(isbound(vl_u.r.c)){setverdict(fail)} else {setverdict(pass)};
    //checks if the selected item remained the same
    if(isbound(vl_u.i)){setverdict(pass)}else {setverdict(fail)}
    if(isbound(vl_u.roi)){setverdict(fail)} else {setverdict(pass)}
    if(isbound(vl_u.roi[0])){setverdict(fail)}else {setverdict(pass)}
    if(isbound(vl_u.roi[1])){setverdict(fail)} else {setverdict(pass)}
  }


testcase tc_compilationerror1() runs on MTC_CT {
  var MyUnion1 vl_u:= c_myunion2;
  if(isbound(vl_u)) {setverdict(pass)} else {setverdict(fail)}
  if(isbound(vl_u.roc)){setverdict(fail)} else {setverdict(pass)}
  if(isbound(vl_u.roc[0])){setverdict(fail)}else {setverdict(pass)} 
  if(isbound(vl_u.r.x)){setverdict(fail)}else {setverdict(pass)} 
  if(isbound(vl_u.roc[99])){setverdict(fail)} else {setverdict(pass)} 
}



  testcase tc_union_modify() runs on MTC_CT {
    var MyUnion1 vl_u:= c_myunion2;
    if(isbound(vl_u)) {setverdict(pass)} else {setverdict(fail)}
    if(isbound(vl_u.roc)){setverdict(fail)} else {setverdict(pass)}
    if(isbound(vl_u.roi)){setverdict(fail)} else {setverdict(pass)}  

    vl_u:=c_myunion1;
    if(isbound(vl_u)) {setverdict(pass)} else {setverdict(fail)}
    if(isbound(vl_u.roc)){setverdict(pass)} else {setverdict(fail)}
    if(isbound(vl_u.roc[0])){setverdict(pass)}else {setverdict(fail)}
    if(isbound(vl_u.roc[1])){setverdict(pass)}else {setverdict(fail)}
    if(isbound(vl_u.roc[2])){setverdict(pass)}else {setverdict(fail)}
    if(isbound(vl_u.roc[3])){setverdict(fail)}
    if(isbound(vl_u.roc[99])){setverdict(fail)}
    if(isbound(vl_u.i)){setverdict(fail)}
    if(isbound(vl_u.roi)){setverdict(fail)}
    if(isbound(vl_u.roi[0])){setverdict(fail)}
    if(isbound(vl_u.roi[1])){setverdict(fail)} else {setverdict(pass)}
    log(vl_u.roc);
  }
  //expected:error
  testcase tc_sideeffect1() runs on MTC_CT {
    var MyUnion1 vl_u:= c_myunion1;    // { roc:= { "1aa", "2bb", "3cc"}}
    if(isbound(vl_u.roc[3])){setverdict(fail)}else {setverdict(pass)}
    if(ispresent(vl_u.roc[3])){setverdict(fail)}else {setverdict(pass)}
  }

  //expected:error
  testcase tc_sideeffect2() runs on MTC_CT {
    var MyUnion1 vl_u:= c_myunion1;  // { roc:= { "1aa", "2bb", "3cc"}}
    var integer vl_oldsize:=0, vl_newsize:=0;
    vl_oldsize:=sizeof(vl_u.roc);

    if(isbound(vl_u.i)){setverdict(fail)}else {setverdict(pass)}  

    if(isbound(vl_u.roc)) {setverdict(pass)}else {setverdict(fail)}

    //checks if  size is unchenged  
    if(isbound(vl_u.roc[4])) {setverdict(fail)}else {setverdict(pass)}
    vl_newsize:=sizeof(vl_u.roc);
    if(vl_newsize == vl_oldsize) {setverdict(pass)}else {setverdict(fail)}
    //log(vl_u.i);
  }

  //====== DEEP 2-3 ===============
  testcase tc_recordOf_omit1() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_1;
    if(isbound(vl_r.roc)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_recordOf_omit2() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_1;
    if(isbound(vl_r.roc[0])){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_recordOf_emptyRoi1() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_1;
    if(isbound(vl_r.roi)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_recordOf_emptyRoi2() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_1;
    if(isbound(vl_r.roi[0])){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_recordOf_emptyRoi3() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_1;
    if(isbound(vl_r.roi[90])){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_completlyInit() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_1;
    if(isbound(vl_r)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit1() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(isbound(vl_r)){setverdict(pass)}else {setverdict(fail)};
  }


  testcase tc_record_partiallyInit3() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(isbound(vl_r.roc)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit4() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(isbound(vl_r.roi)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit5() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(isbound(vl_r.u)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit6() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(isbound(vl_r.u.r)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit7() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(isbound(vl_r.u.r.i)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_partiallyInit8() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(isbound(vl_r.u.r.x)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit9() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(isbound(vl_r.u.r.c)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit10() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(isbound(vl_r.u.i)){setverdict(fail)}else {setverdict(pass)};
  }


  testcase tc_record_partiallyInit11() runs on MTC_CT {
    var MyRec2 vl_r:={ r:={}}
    if(isbound(vl_r.r)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_partiallyInit12() runs on MTC_CT {
    var MyRec2 vl_r:={ r:={i:=5}}
    if(isbound(vl_r.r)){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.r.i)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit13() runs on MTC_CT {
    var MyRec2 vl_r:={ r:={i:=5,x:=-,c:= -}} 
    if(isbound(vl_r)){setverdict(pass)}else {setverdict(fail)}; 
    if(isbound(vl_r.r)){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.r.i)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_recordOf_union() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_1;
    if(isbound(vl_r.u)){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.u.r)){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.u.r.i)){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.u.r.x)){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.u.r.c)){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.u.roi)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vl_r.u.roi[3])){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vl_r.u.i)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vl_r.u.roc)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vl_r.u.roc[0])){setverdict(fail)}else {setverdict(pass)}; 
  }

  testcase tc_recordOf_recordOfRecordOfInt() runs on MTC_CT {
    var MyRec3 vl_r:=c_myrec3_1;
    if(isbound(vl_r.roroi)){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.roroi[0])){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.roroi[1])){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.roroi[2])){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vl_r.roroi[200])){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vl_r.roroi[0][0])){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.roroi[0][8])){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.roroi[0][9])){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vl_r.roroi[1][0])){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.roroi[1][1])){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vl_r.roroi[2][0])){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_recordOf_recordInRecord() runs on MTC_CT {
    var MyRec3 vl_r:=c_myrec3_2;
    if(isbound(vl_r.r)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.r.roc)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.r.roi)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.r.u)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.r.u)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.r.u.i)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.r.r)) {setverdict(pass)}else {setverdict(fail)};  //fails!
  }

  testcase tc_recordOf_recordInRecord_innerOmits() runs on MTC_CT {
    var MyRec3 vl_r:=c_myrec3_innerOmits;
    if(isbound(vl_r.roroi)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.r)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.r.roc)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.r.roi)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.r.u)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vl_r.r.r)){setverdict(pass)}else {setverdict(fail)};
  }


  template MyRecOf t_recOf1 := (
    { [0]:= { roc:=omit }, [1]:= {roc:=omit} },
    { [0]:= { roc:=omit }, [1]:= {roc:={"one", "two"}} },
    { [0]:= { roc:=omit }, [2]:= {u:={i:=5}} }
  )

  testcase tc_recordOf_template1() runs on MTC_CT {
    var template MyRecOf vtl_recOf:= t_recOf1;
    if(isbound( vtl_recOf )) {setverdict(pass)}else {setverdict(fail)};
    if(isbound( t_recOf1 )) {setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_recordOf_template2() runs on MTC_CT {
    var template MyRecOf vtl_recOf:= t_recOf1;
    if(isbound( vtl_recOf[0] )) {setverdict(fail)}else {setverdict(pass)};
    if(isbound( vtl_recOf[1] )) {setverdict(fail)}else {setverdict(pass)};
    if(isbound( vtl_recOf[2] )) {setverdict(fail)}else {setverdict(pass)}; 
  } 

  //========== JOKER in templates====================

  testcase tc_record_withJoker1() runs on MTC_CT {
    var template MyRec2 vtl_rec2_j;
    if(isbound(vtl_rec2_j)) {setverdict(fail)}else {setverdict(pass)};
    vtl_rec2_j:={
      roc:=*
    }
    if(isbound(vtl_rec2_j)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.roc)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.roc[0])) {setverdict(fail)}else {setverdict(pass)};
  }
  testcase tc_record_withJoker2() runs on MTC_CT {
    var template MyRec2 vtl_rec2_j; 
    vtl_rec2_j:={
      roc:={ ?,? }
    }
    if(isbound(vtl_rec2_j)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.roc)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.roc[0])){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.roc[1])){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.roc[10])){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.roi)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.u)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.r)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_withJoker3() runs on MTC_CT {
    var template MyRec2 vtl_rec2_j; 
    vtl_rec2_j:={
      u := *
    }
    if(isbound(vtl_rec2_j)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.roc)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.roi)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.u)){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.u.i)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_withJoker4() runs on MTC_CT {
    var template MyRec2 vtl_rec2_j; 
    vtl_rec2_j:={
      roc:=omit,
      u:={i:=?}
    }
    if(isbound(vtl_rec2_j)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.roc)){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.roi)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.u)){setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.u.i)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_withJoker5() runs on MTC_CT {
    var template MyRec2 vtl_rec2_j; 
    vtl_rec2_j:={
      r:= ?
    }
    if(isbound(vtl_rec2_j)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.roc)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.roi)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.u)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.u.i)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.r)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.r.i)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.r.x)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.r.c)) {setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_withJoker6() runs on MTC_CT {
    var template MyRec2 vtl_rec2_j; 
    vtl_rec2_j:={
      r:= *
    }
    if(isbound(vtl_rec2_j)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.roc)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.roi)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.u)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.u.i)){setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.r)) {setverdict(pass)}else {setverdict(fail)};
    if(isbound(vtl_rec2_j.r.i)) {setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.r.x)) {setverdict(fail)}else {setverdict(pass)};
    if(isbound(vtl_rec2_j.r.c)) {setverdict(fail)}else {setverdict(pass)};
  }

  group g_TR_HO72812 {
    type record MyRecord_HO72812
    {
      record {
        boolean innerField1 optional,
        integer innerField2 optional
      } field1 optional,
      integer field2
    }
    testcase tc_record_TR_HO72813() runs on MTC_CT {
      var MyRecord_HO72812 vl_MyRecord := { field1 := {}, field2 := 5 };  
      if(isbound(vl_MyRecord)) {setverdict(pass)} else {setverdict(fail)}
      if(isbound(vl_MyRecord.field1)) {setverdict(fail)} else {setverdict(pass)}
      if(isbound(vl_MyRecord.field2)) {setverdict(pass)} else {setverdict(fail)}
      vl_MyRecord.field1 := omit
      if(isbound(vl_MyRecord.field1)) {setverdict(pass)} else {setverdict(fail)} 
      if(isbound(vl_MyRecord.field1.innerField1)) {setverdict(fail)} else {setverdict(pass)}
      if(isbound(vl_MyRecord.field1.innerField1)) {setverdict(fail)} else {setverdict(pass)} 
      if(ispresent(vl_MyRecord.field1)) {setverdict(fail)} else {setverdict(pass)} 

      vl_MyRecord := { field1 := {innerField1:=true, innerField2:=1 } }
      if(isbound(vl_MyRecord.field1)) {setverdict(pass)} else {setverdict(fail)}
      if(isbound(vl_MyRecord.field1.innerField1)) {setverdict(pass)} else {setverdict(fail)}
      if(isbound(vl_MyRecord.field1.innerField2)) {setverdict(pass)} else {setverdict(fail)}
    }
  }


  template integer t_i(integer i, integer j) :=i+j;

  testcase tc_runtimeExprEval() runs on MTC_CT {
    var template integer vt_i:= t_i(1,2);
    var integer vl_i:=1, vl_j:=0;
    if(isbound(vt_i)) {setverdict(pass)} else {setverdict(fail)};
    if(isbound(t_i(1,2))) {setverdict(pass)} else {setverdict(fail)};
    if(isbound(t_i(1,2*vl_i))) {setverdict(pass)} else {setverdict(fail)};
    //if(isbound(t_i(1,2/vl_j))) {setverdict(pass)} else {setverdict(fail)}; //DTE
  }


  control {

    execute(tc_simple_charstring());
    execute(tc_simple_charstring_template());
    execute(tc_simple_charstring_template_pattern());

    execute(tc_simple_integer());
    execute(tc_simple_octetstring());
    execute(tc_special_default_value());
    execute(tc_special_compref());

    execute(tc_unionOfRecordOfs1());  
    execute(tc_unionOfRecordOfs2());
    execute(tc_compilationerror1());
    execute(tc_union_modify());
    execute(tc_sideeffect1());
    execute(tc_sideeffect2());
    execute(tc_recordOf_omit1());//failed, corrected
    execute(tc_recordOf_omit2());
    execute(tc_recordOf_emptyRoi1());
    execute(tc_recordOf_emptyRoi2());
    execute(tc_recordOf_emptyRoi3());
    execute(tc_record_completlyInit());
    execute(tc_record_partiallyInit1());
    execute(tc_record_partiallyInit3());
    execute(tc_record_partiallyInit4());
    execute(tc_record_partiallyInit5());
    execute(tc_record_partiallyInit6());
    execute(tc_record_partiallyInit7());
    execute(tc_record_partiallyInit8());
    execute(tc_record_partiallyInit9());
    execute(tc_record_partiallyInit10());
    execute(tc_record_partiallyInit11()); //<=======IT CAUSED COMPILATION ERROR
    execute(tc_record_partiallyInit12());
    execute(tc_record_partiallyInit13());  
    execute(tc_recordOf_union());
    execute(tc_recordOf_recordOfRecordOfInt());
    execute(tc_recordOf_recordInRecord()); 
    execute(tc_recordOf_recordInRecord_innerOmits());
    execute(tc_recordOf_template1());
    execute(tc_recordOf_template2());
    execute(tc_record_withJoker1());
    execute(tc_record_withJoker2());
    execute(tc_record_withJoker3());
    execute(tc_record_withJoker4());
    execute(tc_record_withJoker5());
    execute(tc_record_withJoker6());
    execute(tc_record_TR_HO72813());
    //execute(tc_runtimeDivisionByZero()); //DTE !!!
    execute(tc_runtimeExprEval());
  }

}//module


<END_MODULE>

<RESULT IF_PASS POSITIVE 45>
Verdict: pass
<END_RESULT>

<END_TC>

:exmp.

.*---------------------------------------------------------------------*
:h3. Aggregated isbound testcases - Negative tests
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Aggregated isbound testcases - Negative tests >


<EXECUTE_PARALLEL>
<VERDICT_LEAF ERROR>

<MODULE TTCN IsBound_Test  IsBound_Test.ttcn>

module IsBound_Test {    
type port MyChrMessage_PT message {
  inout charstring
} with { extension "internal"}

type component MTC_CT {
  port MyChrMessage_PT my_PCO;
  var integer v_counter1 :=0;

}
//===== SIMPLE, NOT TOO DEEP =====
type record of charstring ROC;
type record of integer  ROI;
type record MyRecord {
  integer       i optional,
  float         x optional,
  charstring    c
}

type record of ROI ROROI;
  type union MyUnion1 {
  ROC roc,
  integer i,
  ROI roi,
  MyRecord r
}

const MyUnion1 c_myunion1:= { roc:= { "1aa", "2bb", "3cc"}}
const MyUnion1 c_myunion2:= { i:= 5}
  
  testcase tc_runtimeDivisionByZero() runs on MTC_CT {
    var MyUnion1 vl_u:= c_myunion2;
    if(isbound(vl_u)) {setverdict(pass)} else {setverdict(fail)} 
    if(isbound(vl_u.i)){setverdict(pass)}else {setverdict(fail)}
    if(isbound(vl_u.i/2)){setverdict(pass)}else {setverdict(fail)}
    if(isbound(vl_u.i*0)){setverdict(pass)}else {setverdict(fail)}
    log("Expected DTE comes!!!");
    if(isbound(vl_u.i/(vl_u.i-5))){setverdict(fail)}else {setverdict(pass)} //DTE - OK
  }

  control {    
    execute(tc_runtimeDivisionByZero()); //DTE !!!
  }

}//module
<END_MODULE>

<RESULT IF_PASS POSITIVE>
error: Integer division by zero.
<END_RESULT>

<END_TC>
:exmp.

.*---------------------------------------------------------------------*
:h3. Isbound testcases - Compilation error
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Isbound testcases - Compilation error >


<COMPILE>
<VERDICT_LEAF ERROR>

<MODULE TTCN IsBound_Test  IsBound_Test.ttcn>

module IsBound_Test {    
type port MyChrMessage_PT message {
  inout charstring
} with { extension "internal"}

type component MTC_CT {
  port MyChrMessage_PT my_PCO;
  var integer v_counter1 :=0;

}
//===== SIMPLE, NOT TOO DEEP =====
type record of charstring ROC;
type record of integer  ROI;
type record MyRecord {
  integer       i optional,
  float         x optional,
  charstring    c
}

type record of ROI ROROI;
  type union MyUnion1 {
  ROC roc,
  integer i,
  ROI roi,
  MyRecord r
}

const MyUnion1 c_myunion1:= { roc:= { "1aa", "2bb", "3cc"}}
const MyUnion1 c_myunion2:= { i:= 5}

testcase tc_compilationerror2() runs on MTC_CT {
  var MyUnion1 vl_u:= c_myunion2;
  if(isbound(vl_u.i/0)){setverdict(fail)}else {setverdict(pass)}
}
 
control {    
  execute(tc_compilationerror2()); //DTE !!!
}

}//module
<END_MODULE>

<RESULT IF_PASS POSITIVE>
error: Second operand of operation `/' should not be zero
<END_RESULT>

<END_TC>
:exmp.

.*---------------------------------------------------------------------*
:h2.Testing feature "all from" - Negative tests
.*---------------------------------------------------------------------*


.*---------------------------------------------------------------------*
:h3. Value list: 'all from' can not refer to permutation or AnyElementsOrNone
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Value list: 'all from' can not refer to permutation or AnyElementsOrNone >

<COMPILE>

<MODULE TTCN all_from all_from.ttcn >

module all_from {
type record of integer RoI;
template RoI t_RoI2 := {1, *, 3};
template integer t_i10 := ((all from t_RoI2),100);
template integer t_i11 := (100,all from t_RoI2);
template integer t_i12 := (100,all from t_RoI2,-1);

}//module
<END_MODULE>

<RESULT COUNT 3>
error: 'all from' can not refer to permutation or AnyElementsOrNone
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Value list: (integer) is not compatible with the list template type (RoI)
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Value list: (integer) is not compatible with the list template type (RoI)  >

<COMPILE>

<MODULE TTCN all_from all_from.ttcn >
module all_from {
type record of integer RoI;
template RoI t_RoI1 := {3, 4, 5};
template RoI t_i1 := (all from t_RoI1); 

}//module
<END_MODULE>

<RESULT COUNT 3>
error: record of value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3.  Value list: Matching mechanism can not be used as target of 'all from'
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Value list: Matching mechanism can not be used as target of 'all from'  >

<COMPILE>

<MODULE TTCN all_from all_from.ttcn >
module all_from {
type record of integer RoI; 
template RoI t_RoI2 := ?;
template RoI t_i1 := (all from t_RoI2);
template integer t_i2 := (all from t_RoI2);
}//module
<END_MODULE>

<RESULT COUNT 2>
error: Matching mechanism can not be used as target of 'all from' 
<END_RESULT>

<END_TC>
:exmp
*---------------------------------------------------------------------*
:h3. Value list: (integer) is not compatible with the list template type (SoI)
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Value list: (integer) is not compatible with the list template type (SoI)  >

<COMPILE>

<MODULE TTCN all_from all_from.ttcn >
module all_from {
type record of integer RoI;
type set of integer SoI;
template RoI t_RoI1 := {3, 4, 5};
template SoI t_i := (all from t_RoI1); 

}//module
<END_MODULE>

<RESULT COUNT 3>
error: set of value was expected
<END_RESULT>

<END_TC>
:exmp
.*---------------------------------------------------------------------*
:h3. Value list: Length restriction cannot be used in a template of type `integer'
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Value list: Length restriction cannot be used in a template of type `integer' >

<COMPILE>

<MODULE TTCN all_from all_from.ttcn >

module all_from {
type record of integer RoI;
template RoI MyTemplate  := { permutation ( 1, 2, 3 ), * length (0..5) };

}//module
<END_MODULE>

<RESULT COUNT 1>
error: Length restriction cannot be used in a template of type `integer' 
<END_RESULT>

<END_TC>
:exmp.

*---------------------------------------------------------------------*
:h3. Complement: 'all from' can not refer to permutation or AnyElementsOrNone
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Complement: 'all from' can not refer to permutation or AnyElementsOrNone >

<COMPILE>

<MODULE TTCN all_from all_from.ttcn >

module all_from {
type record of integer RoI;
template RoI t_RoI2 := {1, *, 3};
template integer t_i10 := complement ((all from t_RoI2),100);
template integer t_i11 := complement (100,all from t_RoI2);
template integer t_i12 := complement (100,all from t_RoI2,-1);

}//module
<END_MODULE>

<RESULT COUNT 3>
error: 'all from' can not refer to permutation or AnyElementsOrNone
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Complement: (integer) is not compatible with the list template type (RoI)
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Complement: (integer) is not compatible with the list template type (RoI)  >

<COMPILE>

<MODULE TTCN all_from all_from.ttcn >
module all_from {
type record of integer RoI;
template RoI t_RoI1 := {3, 4, 5};
template RoI t_i1 := complement(all from t_RoI1); 

}//module
<END_MODULE>

<RESULT COUNT 3>
error: record of value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3.  Complement: Matching mechanism can not be used as target of 'all from'
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Complement: Matching mechanism can not be used as target of 'all from'  >

<COMPILE>

<MODULE TTCN all_from all_from.ttcn >
module all_from {
type record of integer RoI; 
template RoI t_RoI2 := ?;
template RoI t_i1 := (all from t_RoI2);
template integer t_i2 := complement(all from t_RoI2);
}//module
<END_MODULE>

<RESULT COUNT 2>
error: Matching mechanism can not be used as target of 'all from' 
<END_RESULT>

<END_TC>
:exmp
*---------------------------------------------------------------------*
:h3. Complement: (integer) is not compatible with the list template type (SoI)
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Complement: (integer) is not compatible with the list template type (SoI)  >

<COMPILE>

<MODULE TTCN all_from all_from.ttcn >
module all_from {
type record of integer RoI;
type set of integer SoI;
template RoI t_RoI1 := {3, 4, 5};
template SoI t_i := complement(all from t_RoI1); 

}//module
<END_MODULE>

<RESULT COUNT 3>
error: set of value was expected
<END_RESULT>

<END_TC>
:exmp

*---------------------------------------------------------------------*
:h3. Permutation: Matching mechanism can not be used as target of 'all from'
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Permutation: Matching mechanism can not be used as target of 'all from'  >

<COMPILE>

<MODULE TTCN all_from all_from.ttcn >

module all_from {
type record of integer RoI;
template RoI t_RoI2 := *;
template RoI t_i10 := { permutation((all from t_RoI2),100),99 }
template RoI t_i11 := {permutation(100,all from t_RoI2)};
template RoI t_i12 := {permutation(100,all from t_RoI2,-1)};

}//module
<END_MODULE>

<RESULT COUNT 3>
error: Matching mechanism can not be used as target of 'all from' 
<END_RESULT>

<END_TC>
:exmp
*---------------------------------------------------------------------*
:h3. Permutation:  syntax error, unexpected PermutationKeyword
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC -Permutation: syntax error, unexpected PermutationKeyword  >

<COMPILE>

<MODULE TTCN all_from all_from.ttcn >

module all_from {
type record of integer RoI;
template RoI t_RoI2 := {1, *, 3};
template RoI t_i10 :=  permutation((all from t_RoI2),100);

}//module
<END_MODULE>

<RESULT COUNT 1>
error: at or before token `permutation': syntax error, unexpected PermutationKeyword
<END_RESULT> 

<END_TC>
:exmp

.*---------------------------------------------------------------------*
:h1.Abbreviations
.*---------------------------------------------------------------------*
:list.
:li D='ASN.1'.Abstract Syntax Notation 1
:li D='EDML'.Ericsson Document Markup Language
:li D='SA'.Semantic Analyser
:li D='TTCN-3'.Test and Test Control Notation version 3
:elist.

.*---------------------------------------------------------------------*
:h1.References
.*---------------------------------------------------------------------*
:list.
:li D='[1]'.3/ETH/RUS-2003:0087 Uen
:nl.Requirement Specification for TITAN's TTCN-3 Semantic Analyser
:li D='[2]'.1/174 02-FCPCA 101 22 Uen
:nl.Statement of Compliance for TITAN project
:li D='[3]'.ETSI ES 201 873-1, v3.0.0 Mockup v1 (2004-03):
:nl.Testing and Test Control Notation version 3.,
:nl.Part 1: TTCN-3 Core Language
:elist.

.*---------------------------------------------------------------------*
:h1.Terminology
.*---------------------------------------------------------------------*
:list.
:li D='TITAN'.Ericsson's TTCN-3 Test Environment
:elist.

:etext.
