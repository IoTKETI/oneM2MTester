.******************************************************************************
.* Copyright (c) 2000-2017 Ericsson Telecom AB
.* All rights reserved. This program and the accompanying materials
.* are made available under the terms of the Eclipse Public License v1.0
.* which accompanies this distribution, and is available at
.* http://www.eclipse.org/legal/epl-v10.html
.*
.* Contributors:
.*   Balasko, Jeno
.*
.******************************************************************************/
:text.
:lang eng.

.* EDML webpage:       http://cpi.ericsson.se/dwaxe/
.* EDML2PDF converter: http://dwaxe.ericsson.se/x2pdf
.* EDML user guide:    http://www.lmc.ericsson.se/~lmcmarg/isit/edml_ug.html

.* Document header information
:docname.Test Description
:docno.xx/152 91-CRL 113 200/3 Uen
:rev.C
:date.2015-04-27

:prep.ETH/XZR Jeno Balasko
:appr.ETH/XZR (Elemer Lelik)
:checked.ESZABRE

:title.Test description of the TTCN-3 config files
:contents level=2.
.*---------------------------------------------------------------------*
:h1.Introduction
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h2.Revision history
.*---------------------------------------------------------------------*
:xmp tab=2.
REV   DATE         PREPARED   CHANGE
__________________________________________________
PA1   2013-03-01   ETHBAAT     New document for TITAN CRL 113 200/3 
 
:exmp.
.*---------------------------------------------------------------------*
:h2.Purpose
.*---------------------------------------------------------------------*
The purpose of this Test Description is to define and describe the function
test activity for the listed functionality of the TTCN-3 executor including
the relevant configuration options and the configuration file parser as follows:
:li D='1.'Ordered Include
 
:nl.SA-1/x: Unknown object.
:p.The specification of the test cases can be found in this document.
.*---------------------------------------------------------------------*
:h1.Test environment
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h2.Hardware
.*---------------------------------------------------------------------*
No specific hardware requirement.
.*---------------------------------------------------------------------*
:h2.Software
.*---------------------------------------------------------------------*
Tests shall be carried out on the following platforms:
:list.
:li D='1.'.Solaris 8 (Sun OS 5.8) (gcc 3.0.4)
:li D='2.'.SUSE Linux Enterprise server 8 (2.4.19-4GB) (gcc 3.2)
:li D='3.'.CYGWIN_NT-5.0 (Cygwin DLL: 1.5.12) on Windows 2000 (gcc 3.3.3)
:elist.
.*---------------------------------------------------------------------*
:h2.Configuration
.*---------------------------------------------------------------------*
The test environment had been setup in CVS. The tester program is stored in:
:nl.TTCNv3/function_test/Tools/SAtester.pl
:nl.Test cases are stored with extension .script in the directory:
:nl.TTCNv3/function_test/Semantic_Analyser/
.*---------------------------------------------------------------------*
:h2.Installation
.*---------------------------------------------------------------------*
Install proper TITAN binaries on the used platforms and make sure that
your environment settings are correct:
:list.
:li D='1.'.TTCN3_DIR is set
:li D='2.'.$TTCN3_DIR/bin is added to the PATH variable
:li D='3.'.$TTCN3_DIR/lib is added to the LD_LIBRARY_PATH variable
:li D='4.'.Perl 5.6.0 or higher is available on the platform
:li D='5.'.Create a symlink to your Perl binary into the directory where the
test cases are stored:
:nl.ln -s <your Perl> perl
:elist.
.*---------------------------------------------------------------------*
:h2.Test Tools
.*---------------------------------------------------------------------*
A tester program had been written in Perl especially for the Semantic Analyser
tests. For the list of command line parameters, type 'SAtester.pl -help', for the
complete documentation, type 'SAtester.pl -doc'.
:p.Test cases are specified in the Test Description documents in EDML format.
The tester program parses these files and generates the TTCN-3/ASN.1 modules, then
calls the compiler to compile them. The result printout is then matched against
different patterns to be able to set the verdict. Test cases contain not only
the source modules, but the patterns as well.
:p.The tester program allows one-by-one execution of test cases and batched
execution as well.
:p.NOTE: the tester program requires Perl 5.6.0 or higher.
.*---------------------------------------------------------------------*
:h2.Test scope
.*---------------------------------------------------------------------*
Ref [1]: SA-1/x: Unknown object
:nl.Explanation: all unknown objects shall be detected by SA.
.*---------------------------------------------------------------------*
:h2.Test strategy
.*---------------------------------------------------------------------*
Test cases are based on TTCN-3 BNF according to the followings:
:list.
:li D='1.'.For each 'basic' definition a complete coverage is done (e.g. for
expressions, assignments, etc.). 'Basic' means that the definition is
used in several places.
:li D='2.'.For each definition a complete coverage is done, except for basic
definitions, in which case only 1-2 examples are covered, not the
whole basic definition. This is to avoid testing all possible subcases
for all possible places it may appear.
:nl.NOTE: a complete coverage means that all occurances are tested where
the specific definition may occur. This is however not complete. Only
one occurance is tested for each construct.
:li D='3.'.Test case names are contsructed following the path in the BNF in TTCN-3
and following the possible notations/subtyping in ASN.1.
:elist.
.*---------------------------------------------------------------------*
:h2.Status
.*---------------------------------------------------------------------*
The following structures are not covered:
:list.
:li D='-'.sub-structures that causes parse error due to limited support of that
part of the language (e.g. interleave construct)
:elist.
.*---------------------------------------------------------------------*
:h1.Test cases
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h2.Ordered include - Positive tests
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h3. Positive Testcase - single mode
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Positive Testcase - single mode>

<EXECUTE>

<MODULE TTCN Temp Temp.ttcn>
module Temp{

modulepar {
  charstring tsp_c :="tsp_c_default";
  charstring tsp_c0:="tsp_c_default0";
  charstring tsp_c1:="tsp_c_default1";
  charstring tsp_c2:="tsp_c_default2";  
}

type component MyComp {}

function f_setverdict_C(in charstring pl_value,in charstring pl_expected){
   if(pl_value == pl_expected) { setverdict(pass) } else{ setverdict(fail,match(pl_value,pl_expected)) };
}
with { extension "transparent" }

testcase tc_1() runs on MyComp{
  f_setverdict_C(tsp_c,"0");   
  f_setverdict_C(tsp_c0,"0");  
  f_setverdict_C(tsp_c1,"1"); 
  f_setverdict_C(tsp_c2,"2");
}

control{ execute(tc_1()); }

}

<END_MODULE>


<RESULT>
Overall verdict: pass
<END_RESULT>

<MODULE CFG oi1_before1 oi1_before1.cfg>
[DEFINE]
MACRO1=1

[ORDERED_INCLUDE]
"oi2.cfg"
[MODULE_PARAMETERS]
tsp_c=$MACRO1
tsp_c1=$MACRO1
<END_MODULE>

<MODULE CFG oi2 oi2.cfg>
[DEFINE]
MACRO2:=2
[MODULE_PARAMETERS]
tsp_c=$MACRO2
tsp_c2=$MACRO2
<END_MODULE>


<MODULE CFG oi oi.cfg>
[LOGGING]
LogSourceInfo := Stack
ConsoleMask:= LOG_ALL
[DEFINE]
MACRO:=0
[ORDERED_INCLUDE]
"oi1_before1.cfg"
[MODULE_PARAMETERS]
tsp_c:=$MACRO
tsp_c0:=$MACRO
[EXECUTE]
Temp.tc_1

<END_MODULE>

<END_TC>
               
:exmp.

.*---------------------------------------------------------------------*
:h3. Positive Testcase - parallel mode
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Positive Testcase - parallel mode>

<EXECUTE_PARALLEL>

<MODULE TTCN Temp Temp.ttcn>
module Temp{

modulepar {
  charstring tsp_c :="tsp_c_default";
  charstring tsp_c0:="tsp_c_default0";
  charstring tsp_c1:="tsp_c_default1";
  charstring tsp_c2:="tsp_c_default2";  
}

type component MyComp {}

function f_setverdict_C(in charstring pl_value,in charstring pl_expected){
   if(pl_value == pl_expected) { setverdict(pass) } else{ setverdict(fail,match(pl_value,pl_expected)) };
}
with { extension "transparent" }

testcase tc_1() runs on MyComp{
  f_setverdict_C(tsp_c,"0");
  f_setverdict_C(tsp_c0,"0");
  f_setverdict_C(tsp_c1,"1");
  f_setverdict_C(tsp_c2,"2");
}

control{ execute(tc_1()); }

}

<END_MODULE>


<MODULE CFG oi1_before1 oi1_before1.cfg>
[DEFINE]
MACRO1=1

[ORDERED_INCLUDE]
"oi2.cfg"
[MODULE_PARAMETERS]
tsp_c=$MACRO1
tsp_c1=$MACRO1
<END_MODULE>

<MODULE CFG oi2 oi2.cfg>
[DEFINE]
MACRO2:=2
[MODULE_PARAMETERS]
tsp_c=$MACRO2
tsp_c2=$MACRO2
<END_MODULE>

<MODULE CFG oi oi.cfg>
[LOGGING]
LogSourceInfo := Stack
ConsoleMask:= LOG_ALL
[DEFINE]
MACRO:=0
[ORDERED_INCLUDE]
"oi1_before1.cfg"
[MODULE_PARAMETERS]
tsp_c:=$MACRO
tsp_c0:=$MACRO
[EXECUTE]
Temp.tc_1

<END_MODULE>


<RESULT>
Overall verdict: pass
<END_RESULT>

<END_TC>
               
:exmp.



.*---------------------------------------------------------------------*
:h3. Ordered include - double import - single mode
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ordered include - double import - single mode>

<EXECUTE>

<MODULE TTCN Temp Temp.ttcn>
module Temp{

modulepar {
  charstring tsp_c :="tsp_c_default";
  charstring tsp_c0:="tsp_c_default0";
  charstring tsp_c1:="tsp_c_default1";
  charstring tsp_c2:="tsp_c_default2";  
}

type component MyComp {}

function f_setverdict_C(in charstring pl_value,in charstring pl_expected){
   if(pl_value == pl_expected) { setverdict(pass) } else{ setverdict(fail,match(pl_value,pl_expected)) };
}
with { extension "transparent" }

testcase tc_1() runs on MyComp{
  f_setverdict_C(tsp_c,"0");   
  f_setverdict_C(tsp_c0,"0");  
  f_setverdict_C(tsp_c1,"1"); 
  f_setverdict_C(tsp_c2,"2");
}

control{ execute(tc_1()); }

}

<END_MODULE>


<RESULT>
Overall verdict: pass
<END_RESULT>

<MODULE CFG oi1_before1 oi1_before1.cfg>

[ORDERED_INCLUDE]
"oi2.cfg"
[MODULE_PARAMETERS]
tsp_c="1"
tsp_c1="1"
<END_MODULE>

<MODULE CFG oi2 oi2.cfg>
[DEFINE]
[MODULE_PARAMETERS]
tsp_c="2"
tsp_c2="2"
<END_MODULE>


<MODULE CFG oi oi.cfg>
[LOGGING]
LogSourceInfo := Stack
ConsoleMask:= LOG_ALL
[DEFINE]
MACRO:=0
[ORDERED_INCLUDE]
"oi1_before1.cfg"
"oi1_before1.cfg"
[MODULE_PARAMETERS]
tsp_c:=$MACRO
tsp_c0:=$MACRO
[EXECUTE]
Temp.tc_1

<END_MODULE>

<END_TC>
               
:exmp.

.*---------------------------------------------------------------------*
:h3. Ordered include - double import - parallel mode
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ordered include - double import - parallel mode>

<EXECUTE_PARALLEL>

<MODULE TTCN Temp Temp.ttcn>
module Temp{

modulepar {
  charstring tsp_c :="tsp_c_default";
  charstring tsp_c0:="tsp_c_default0";
  charstring tsp_c1:="tsp_c_default1";
  charstring tsp_c2:="tsp_c_default2";  
}

type component MyComp {}

function f_setverdict_C(in charstring pl_value,in charstring pl_expected){
   if(pl_value == pl_expected) { setverdict(pass) } else{ setverdict(fail,match(pl_value,pl_expected)) };
}
with { extension "transparent" }

testcase tc_1() runs on MyComp{
  f_setverdict_C(tsp_c,"0");
  f_setverdict_C(tsp_c0,"0");
  f_setverdict_C(tsp_c1,"1");
  f_setverdict_C(tsp_c2,"2");
}

control{ execute(tc_1()); }

}

<END_MODULE>


<MODULE CFG oi1_before1 oi1_before1.cfg>
[ORDERED_INCLUDE]
"oi2.cfg"
[MODULE_PARAMETERS]
tsp_c="1"
tsp_c1="1"
<END_MODULE>

<MODULE CFG oi2 oi2.cfg>
[MODULE_PARAMETERS]
tsp_c="2"
tsp_c2="2"
<END_MODULE>

<MODULE CFG oi oi.cfg>
[LOGGING]
LogSourceInfo := Stack
ConsoleMask:= LOG_ALL
[DEFINE]
MACRO:=0
[ORDERED_INCLUDE]
"oi1_before1.cfg"
"oi1_before1.cfg"
[MODULE_PARAMETERS]
tsp_c:=$MACRO
tsp_c0:=$MACRO
[EXECUTE]
Temp.tc_1

<END_MODULE>


<RESULT IF_FAIL COUNT 1>
Overall verdict: pass
<END_RESULT>

<END_TC>
               
:exmp.


.*---------------------------------------------------------------------*
:h2.Ordered include - Negative tests
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h3.  Cyclic ordered import - single mode
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Cyclic ordered import - single mode>

<EXECUTE>

<MODULE TTCN Temp Temp.ttcn>
module Temp{

modulepar {
  charstring tsp_c :="tsp_c_default";
}

type component MyComp {}

function f_setverdict_C(in charstring pl_value,in charstring pl_expected){
   if(pl_value == pl_expected) { setverdict(pass) } else{ setverdict(fail,match(pl_value,pl_expected)) };
}
with { extension "transparent" }

testcase tc_1() runs on MyComp{
  f_setverdict_C(tsp_c,"0");   
}

control{ execute(tc_1()); }

}

<END_MODULE>

<MODULE CFG oi1 oi1.cfg>
[DEFINE]
MACRO1=1

[ORDERED_INCLUDE]
"oi2.cfg"
[MODULE_PARAMETERS]
tsp_c=$MACRO1
<END_MODULE>

<MODULE CFG oi2 oi2.cfg>
[DEFINE]
MACRO2:=2
[MODULE_PARAMETERS]
tsp_c=$MACRO2
[ORDERED_INCLUDE]
"oi.cfg"
<END_MODULE>


<MODULE CFG oi oi.cfg>
[LOGGING]
LogSourceInfo := Stack
ConsoleMask:= LOG_ALL
[DEFINE]
MACRO:=0
[ORDERED_INCLUDE]
"oi1.cfg"
[MODULE_PARAMETERS]
tsp_c:=$MACRO
[EXECUTE]
Temp.tc_1

<END_MODULE>

<RESULT>
Parse error while pre-processing configuration file.*Circular import chain detected:
<END_RESULT>

<END_TC>
               
:exmp.

.*---------------------------------------------------------------------*
:h3. Cyclic ordered import  - parallel mode
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Cyclic ordered import  - parallel mode>

<EXECUTE_PARALLEL>

<MODULE TTCN Temp Temp.ttcn>
module Temp{

modulepar {
  charstring tsp_c :="tsp_c_default";
}

type component MyComp {}

function f_setverdict_C(in charstring pl_value,in charstring pl_expected){
   if(pl_value == pl_expected) { setverdict(pass) } else{ setverdict(fail,match(pl_value,pl_expected)) };
}
with { extension "transparent" }

testcase tc_1() runs on MyComp{
  f_setverdict_C(tsp_c,"0");  
}

control{ execute(tc_1()); }

}

<END_MODULE>

<MODULE CFG oi1_before1 oi1_before1.cfg>
[DEFINE]
MACRO1=1

[ORDERED_INCLUDE]
"oi2.cfg"
[MODULE_PARAMETERS]
tsp_c=$MACRO1
<END_MODULE>

<MODULE CFG oi2 oi2.cfg>
[ORDERED_INCLUDE]
"oi.cfg"
        
[DEFINE]
MACRO2:=2
[MODULE_PARAMETERS]
tsp_c=$MACRO2
<END_MODULE>

<MODULE CFG oi oi.cfg>
[LOGGING]
LogSourceInfo := Stack
ConsoleMask:= LOG_ALL
[DEFINE]
MACRO:=0
[ORDERED_INCLUDE]
"oi1_before1.cfg"
[MODULE_PARAMETERS]
tsp_c:=$MACRO
[EXECUTE]
Temp.tc_1

<END_MODULE>

<RESULT>
Parse error while pre-processing configuration file.*Circular import chain detected:
<END_RESULT>

<END_TC>
               
:exmp.

.*---------------------------------------------------------------------*
:h3. Ordered import of empty filename - single mode
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ordered import of empty filename - single mode>

<EXECUTE>

<MODULE TTCN Temp Temp.ttcn>
module Temp{

modulepar {
  charstring tsp_c :="tsp_c_default";
}

type component MyComp {}

function f_setverdict_C(in charstring pl_value,in charstring pl_expected){
   if(pl_value == pl_expected) { setverdict(pass) } else{ setverdict(fail,match(pl_value,pl_expected)) };
}
with { extension "transparent" }

testcase tc_1() runs on MyComp{
  f_setverdict_C(tsp_c,"0");   
}

control{ execute(tc_1()); }

}

<END_MODULE>

<MODULE CFG oi1 oi1.cfg>
[DEFINE]
MACRO1=1

[ORDERED_INCLUDE]
"oi2.cfg"
[MODULE_PARAMETERS]
tsp_c=$MACRO1
<END_MODULE>

<MODULE CFG oi2 oi2.cfg>
[DEFINE]
MACRO2:=2
[MODULE_PARAMETERS]
tsp_c=$MACRO2
[ORDERED_INCLUDE]
""
<END_MODULE>


<MODULE CFG oi oi.cfg>
[LOGGING]
LogSourceInfo := Stack
ConsoleMask:= LOG_ALL
[DEFINE]
MACRO:=0
[ORDERED_INCLUDE]
"oi1.cfg"
[MODULE_PARAMETERS]
tsp_c:=$MACRO
[EXECUTE]
Temp.tc_1

<END_MODULE>

<RESULT>
Parse error while pre-processing configuration file.*Empty file name
<END_RESULT>

<END_TC>
               
:exmp.

.*---------------------------------------------------------------------*
:h3. Ordered import of empty filename - parallel mode
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ordered import of empty filename  - parallel mode>

<EXECUTE_PARALLEL>

<MODULE TTCN Temp Temp.ttcn>
module Temp{

modulepar {
  charstring tsp_c :="tsp_c_default";
}

type component MyComp {}

function f_setverdict_C(in charstring pl_value,in charstring pl_expected){
   if(pl_value == pl_expected) { setverdict(pass) } else{ setverdict(fail,match(pl_value,pl_expected)) };
}
with { extension "transparent" }

testcase tc_1() runs on MyComp{
  f_setverdict_C(tsp_c,"0");  //pass 
}

control{ execute(tc_1()); }

}

<END_MODULE>

<MODULE CFG oi1_before1 oi1_before1.cfg>
[DEFINE]
MACRO1=1

[ORDERED_INCLUDE]
"oi2.cfg"
[MODULE_PARAMETERS]
tsp_c=$MACRO1
<END_MODULE>

<MODULE CFG oi2 oi2.cfg>
[ORDERED_INCLUDE]
""
        
[DEFINE]
MACRO2:=2
[MODULE_PARAMETERS]
tsp_c=$MACRO2
<END_MODULE>

<MODULE CFG oi oi.cfg>
[LOGGING]
LogSourceInfo := Stack
ConsoleMask:= LOG_ALL
[DEFINE]
MACRO:=0
[ORDERED_INCLUDE]
"oi1_before1.cfg"
[MODULE_PARAMETERS]
tsp_c:=$MACRO
[EXECUTE]
Temp.tc_1

<END_MODULE>

<RESULT>
Parse error while pre-processing configuration file.*Empty file name
<END_RESULT>

<END_TC>
               
:exmp.

.*---------------------------------------------------------------------*
:h3. Ordered import of not existing filename - single mode
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ordered import of not existing filename - single mode>

<EXECUTE>

<MODULE TTCN Temp Temp.ttcn>
module Temp{

modulepar {
  charstring tsp_c :="tsp_c_default";
}

type component MyComp {}

function f_setverdict_C(in charstring pl_value,in charstring pl_expected){
   if(pl_value == pl_expected) { setverdict(pass) } else{ setverdict(fail,match(pl_value,pl_expected)) };
}
with { extension "transparent" }

testcase tc_1() runs on MyComp{
  f_setverdict_C(tsp_c,"0");   
}

control{ execute(tc_1()); }

}

<END_MODULE>

<MODULE CFG oi1 oi1.cfg>
[DEFINE]
MACRO1=1

[ORDERED_INCLUDE]
"oi2.cfg"
[MODULE_PARAMETERS]
tsp_c=$MACRO1
<END_MODULE>

<MODULE CFG oi2 oi2.cfg>
[DEFINE]
MACRO2:=2
[MODULE_PARAMETERS]
tsp_c=$MACRO2
[ORDERED_INCLUDE]
"Subidubi.cfg"
<END_MODULE>


<MODULE CFG oi oi.cfg>
[LOGGING]
LogSourceInfo := Stack
ConsoleMask:= LOG_ALL
[DEFINE]
MACRO:=0
[ORDERED_INCLUDE]
"oi1.cfg"
[MODULE_PARAMETERS]
tsp_c:=$MACRO
[EXECUTE]
Temp.tc_1

<END_MODULE>

<RESULT>
Parse error while pre-processing configuration file.*File not found:.*Config_Parser\/Subidubi.cfg
<END_RESULT>
<RESULT>
Parse error in configuration file .*Config_Parser\/oi2.cfg.*File not found:.*Config_Parser\/Subidubi.cfg
<END_RESULT>


<END_TC>
               
:exmp.

.*---------------------------------------------------------------------*
:h3. Ordered import of not existing filename - parallel mode
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - Ordered import of not existing filename  - parallel mode>

<EXECUTE_PARALLEL>

<MODULE TTCN Temp Temp.ttcn>
module Temp{

modulepar {
  charstring tsp_c :="tsp_c_default";
}

type component MyComp {}

function f_setverdict_C(in charstring pl_value,in charstring pl_expected){
   if(pl_value == pl_expected) { setverdict(pass) } else{ setverdict(fail,match(pl_value,pl_expected)) };
}
with { extension "transparent" }

testcase tc_1() runs on MyComp{
  f_setverdict_C(tsp_c,"0");  //pass 
}

control{ execute(tc_1()); }

}

<END_MODULE>

<MODULE CFG oi1_before1 oi1_before1.cfg>
[DEFINE]
MACRO1=1

[ORDERED_INCLUDE]
"oi2.cfg"
[MODULE_PARAMETERS]
tsp_c=$MACRO1
<END_MODULE>

<MODULE CFG oi2 oi2.cfg>
[ORDERED_INCLUDE]
"Subidubi.cfg"
        
[DEFINE]
MACRO2:=2
[MODULE_PARAMETERS]
tsp_c=$MACRO2
<END_MODULE>

<MODULE CFG oi oi.cfg>
[LOGGING]
LogSourceInfo := Stack
ConsoleMask:= LOG_ALL
[DEFINE]
MACRO:=0
[ORDERED_INCLUDE]
"oi1_before1.cfg"
[MODULE_PARAMETERS]
tsp_c:=$MACRO
[EXECUTE]
Temp.tc_1

<END_MODULE>

<RESULT>
Parse error while pre-processing configuration file.*File not found:.*Config_Parser\/Subidubi.cfg
<END_RESULT>
<RESULT>
Parse error in configuration file .*Config_Parser\/oi2.cfg.*File not found:.*Config_Parser\/Subidubi.cfg
<END_RESULT>

<END_TC>
               
:exmp.
*---------------------------------------------------------------------*
:h1.Abbreviations
.*---------------------------------------------------------------------*
:list.
:li D='ASN.1'.Abstract Syntax Notation 1
:li D='EDML'.Ericsson Document Markup Language
:li D='SA'.Semantic Analyser
:li D='TTCN-3'.Test and Test Control Notation version 3
:elist.

.*---------------------------------------------------------------------*
:h1.References
.*---------------------------------------------------------------------*
:list.
:li D='[1]'.ETH/RZ-2005:0120 Uen
:nl.Requirement Specification for the TITAN TTCN-3 Executor
:li D='[2]'.1/174 02-FCPCA 101 42 Uen
:nl.Statement of Compliance for TITAN project
:li D='[3]'.ETSI ES 201 873-1, v3.0.0 Mockup v1 (2004-03):
:nl.Testing and Test Control Notation version 3.,
:nl.Part 1: TTCN-3 Core Language
:elist.

.*---------------------------------------------------------------------*
:h1.Terminology
.*---------------------------------------------------------------------*
:list.
:li D='TITAN'.Ericsson's TTCN-3 Test Environment
:elist.

:etext.
