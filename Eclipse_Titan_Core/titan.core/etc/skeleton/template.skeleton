//Message templates
template <TypeId1> t_<templateName1> := "baba";

template <TypeId2> tr_<templateName2> := ("baba", "abba");

template <TypeId3> tr_<templateName3>(
  charstring pl_<charValue>) := ("baba", "abba", pl_<charValue>);

template <TypeId4> tr_<templateName4> :=
{
  <fieldId1> := (1,2,3),
  <fieldId2> := ?,
  <fieldId3> := {1,2,?},
  <fieldId4> := t_<templateName> ifpresent
};

template <TypeId5> t_<templateName5> (
  integer pl_<parameterName1>,
  template charstring pl_<parameterName2>) :=
{
  <fieldId1> := pl_<parameterName1>,
  <fieldId2> := '10001000'B,
  <fieldId3> := {1,2,3},
  <fieldId4> := pl_<parameterName2>
};

template <TypeId5> tr_<templateName6> (
  integer pl_<parameterName>,
  template charstring pl_<parameterName>)
modifies t_<templateName5> :=
{
  <fieldId3> := *
};

template <TypeId7> t_<templateName7> :=
{
  <fieldId1> := <valid_value>,
  <fieldId2> := t_<templateName4>(1,"abba"),
  <fieldId3> := omit
};

template <TypeId8> tr_<templateName8>(
  template <TypeId4> pl_<parameterName1>,
  integer pl_<parameterName2>) :=
{
  <fieldId1> := ?,
  <fieldId2> := pl_<parameterName1>,
  <fieldId3> := pl_<parameterName2>
};

//Procedure templates
template S_<ProcedureSignatureId> t_<ProcedureTemplateName> :=
{
  pl_<inPar> := 1,
  pl_<outPar> := ?,
  pl_<inoutPar> := 'BABA'O
};

template S_<ProcedureSignatureId2> tr_<ProcedureTemplateName2> :=
{
  pl_<inPar> := ?,
  pl_<outPar> := ?,
  pl_<inoutPar> := ?
}

template S_<ProcedureSignatureId3> t_<ProcedureTemplateName3> :=
{
  pl_<inPar> := 1,
  pl_<outPar> := 2,
  pl_<inoutPar> := 'ABBA'O
}
