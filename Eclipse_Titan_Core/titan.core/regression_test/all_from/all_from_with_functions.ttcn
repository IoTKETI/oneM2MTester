/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *
 ******************************************************************************/
module all_from_with_functions {

//for TR: HR91302 - compiler core dump if function called in "all from"

external function f_ext(in template RoI r) return template RoI;

type record of integer RoI with { encode "JSON" };
type set of integer SoI;

type record Rec {
  integer i,
  charstring s
}
type record of Rec RoRec;

function f_dummy(in template RoI r) return template RoI
{
  return r;
}

function f_dummy2(in template RoI r, in template RoI p) return template RoI
{
  return p;
}

function f_set(in template SoI s) return template SoI
{
  return s;
}

function f_rec(in template RoRec tr) return template RoRec
{
  return tr;
}

type port PT_Empty message 
{
  inout integer;
} with {extension "internal"}

type component CT_Empty {
  port PT_Empty pt;
}

function square(in integer i) return integer {
  return i * i;
}

template RoI t_roi(integer i) := { 1, 2, 3, i };
template RoI t_roi2(integer i) := { 1, 2, 3, square(i) }

testcase tc_all_from_with_functions() runs on CT_Empty {
  var template RoI t1 := { permutation ( all from f_dummy2( {1, 2}, {3, 4} ) ) };
  var template RoI t2 := f_dummy2( { 1, 2}, {3, 4} );
  var template RoI t3 := { permutation (all from t2) };
  var template RoI t4 := { permutation ( all from f_ext( {1, 2} ) ) };
  var template integer t5 := (1, 2, all from f_dummy( {1, 2, (6..9)} ), 10);
  var template integer t6 := complement (1, 2, all from f_dummy( {1, 2, (6..9)} ), 10);
  var template SoI t7 := subset (1, 2, all from f_dummy( {3, 4} ), 5) length (2..3);
  var template SoI t8 := superset (1, 2, all from f_dummy( {3, 4} ), 5) length (6..8);
  var template integer t9 := (1, 2, all from f_set( {3, 4} ), 6);
  var template SoI t10 := { t9, ( all from f_set( { (20..30) } ) ) };
  var template Rec t11 := ( {10, "ten"}, all from f_rec( { {1, "one"}, {2, "two"}, {3, "three"} } ) );
  var template integer t12 := ( all from t_roi(6) );
  var template integer t13 := ( all from t_roi2(4) );

  //log("t1=", t1);
  //log("t2=", t2);
  //log("t3=", t3);
  //log("t4=", t4);
  //log("t5=", t5);
  //log("t6=", t6);
  //log("t7=", t7);
  //log("t8=", t8);
  //log("t9=", t9);
  //log("t10=", t10);
  //log("t11=", t11);
  //log("t12=", t12);
  //log("t13=", t13);

  if (log2str(t1) == "{ permutation(3, 4) }" and log2str(t2) == "{ 3, 4 }" and
    log2str(t3) == "{ permutation(3, 4) }" and log2str(t4) == "{ permutation(1, 2) }" and
    log2str(t5) == "(1, 2, 1, 2, (6 .. 9), 10)" and 
    log2str(t6) == "complement (1, 2, 1, 2, (6 .. 9), 10)" and
    log2str(t7) == "subset(1, 2, 3, 4, 5) length (2 .. 3)" and
    log2str(t8) == "superset(1, 2, 3, 4, 5) length (6 .. 8)" and
    log2str(t9) == "(1, 2, 3, 4, 6)" and log2str(t10) == "{ (1, 2, 3, 4, 6), ((20 .. 30)) }" and
    log2str(t11) == "({ i := 10, s := \"ten\" }, { i := 1, s := \"one\" }, " &
      "{ i := 2, s := \"two\" }, { i := 3, s := \"three\" })" and
    log2str(t12) == "(1, 2, 3, 6)" and log2str(t13) == "(1, 2, 3, 16)")
  { setverdict(pass) }
  else { setverdict(fail) }
}

// all from with function (formal) parameters
function f_all_from_params(in RoI p_in, inout RoI p_inout,
                           in template RoI pt_in, inout template RoI pt_inout)
                           runs on CT_Empty
                           return template integer {
  return (1, 2, all from p_in, all from p_inout, all from pt_in, all from pt_inout);
}

testcase tc_all_from_func_params() runs on CT_Empty {
  const RoI c_twenties := { 20, 21, 22 };
  var RoI v_thirties := { 30, 31, 32, 33 };
  template RoI t_fifties := { 50, 56, 59 };
  var template RoI vt_sixties := { 63, 64, 66, 67 };

  var template integer vt_res := f_all_from_params(c_twenties, v_thirties, t_fifties, vt_sixties);
  const charstring c_res_log := "(1, 2, 20, 21, 22, 30, 31, 32, 33, 50, 56, 59, 63, 64, 66, 67)";
  if (log2str(vt_res) == c_res_log) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", c_res_log, ", got: ", vt_res); }
}

function f_non_templ(in RoI x) return RoI
{
  return x;
}

external function f_dec_roi(in octetstring os) return RoI
  with { extension "prototype(convert) decode(JSON)" }

// all from used on regular (non-template) functions
testcase tc_all_from_with_functions2() runs on CT_Empty
{
  var template RoI vt_func_roi := { permutation ( all from f_non_templ( { 1, 4, 7, 10 } ) ) };
  var template integer vt_func_int := ( 0, 1, all from f_non_templ( { 3, 6, 9 } ) );

  var octetstring v_enc := char2oct("[ 4, 2, 10, 100 ]");
  var template RoI vt_ext_func_roi := { permutation ( all from f_dec_roi(v_enc) ) };
  var template integer vt_ext_func_int := ( 0, 1, all from f_dec_roi(v_enc) );

  var charstring v_res_log := "{ permutation(1, 4, 7, 10) }";
  if (log2str(vt_func_roi) != v_res_log) {
    setverdict(fail, "Expected: ", v_res_log, ", got: ", vt_func_roi);
  }

  v_res_log := "(0, 1, 3, 6, 9)";
  if (log2str(vt_func_int) != v_res_log) {
    setverdict(fail, "Expected: ", v_res_log, ", got: ", vt_func_int);
  }

  v_res_log := "{ permutation(4, 2, 10, 100) }";
  if (log2str(vt_ext_func_roi) != v_res_log) {
    setverdict(fail, "Expected: ", v_res_log, ", got: ", vt_ext_func_roi);
  }

  v_res_log := "(0, 1, 4, 2, 10, 100)";
  if (log2str(vt_ext_func_int) != v_res_log) {
    setverdict(fail, "Expected: ", v_res_log, ", got: ", vt_ext_func_int);
  }

  setverdict(pass);
}

// all from used in function actual parameters
template RoI t := { 6, 8 };
template RoI t_func_par := f_dummy( { 1, 2, all from t });
template RoI t_func_par_exp := { 1, 2, 6, 8 };

testcase tc_all_from_func_params2() runs on CT_Empty
{
  if (log2str(t_func_par) != log2str(t_func_par_exp)) {
    setverdict(fail, "Template test failed. Expected: ", t_func_par_exp, ", got: ", t_func_par);
  }
  
  var template RoI vt_func_par := f_dummy( { 1, 2, all from t });
  if (log2str(vt_func_par) != log2str(t_func_par_exp)) {
    setverdict(fail, "Var template test failed. Expected: ", t_func_par_exp, ", got: ", vt_func_par);
  }
  
  setverdict(pass);
}


control {
  execute(tc_all_from_with_functions());
  execute(tc_all_from_func_params());
  execute(tc_all_from_with_functions2());
  execute(tc_all_from_func_params2());
}

}
