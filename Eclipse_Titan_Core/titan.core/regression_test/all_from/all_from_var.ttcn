/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *
 ******************************************************************************/
module all_from_var {  // HR17266
  
  import from types all;
  import from functions all;

  // Testing 'all from' on variables, constants and template variables
  testcase tc_checkVar() runs on A {
    var RoI v_roi1 := { 1, 2, 6, 7, 9 };
    var template integer v_af := ( 8, all from v_roi1 );

    var RoI vl_goodValues := { 1, 2, 6, 7, 8, 9 };
    var RoI vl_badValues := { -99, -10, -1, 0, 3, 4, 5, 10, 11, 20, 99, 100, 101, 102, 200, 1000, 100000000000000 };
    f_checkIntegerTemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkConst() runs on A {
    const RoI c_roi1 := { 1, 2, 6, 7, 9 };
    var template integer v_af := ( 8, all from c_roi1 );

    var RoI vl_goodValues := { 1, 2, 6, 7, 8, 9 };
    var RoI vl_badValues := { -99, -10, -1, 0, 3, 4, 5, 10, 11, 20, 99, 100, 101, 102, 200, 1000, 100000000000000 };
    f_checkIntegerTemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkTempVar() runs on A {
    var template RoI vt_roi1 := { 1, 2, (6 .. 9) };
    var template integer v_af := ( 11, all from vt_roi1 );

    var RoI vl_goodValues := { 1, 2, 6, 7, 8, 9 };
    var RoI vl_badValues := { -99, -10, -1, 0, 3, 4, 5, 10, 20, 99, 100, 101, 102, 200, 1000, 100000000000000 };
    f_checkIntegerTemplate(v_af, vl_goodValues, vl_badValues);
  }

  // Testing the complement of an 'all from' (used on variables, constants and template variables)
  testcase tc_checkVarComplement() runs on A {
    var RoI v_roi1 := { 1, 2, 6, 7, 9 };
    var template integer v_af := complement ( 8, all from v_roi1 );

    var RoI vl_badValues := { 1, 2, 6, 7, 8, 9 };
    var RoI vl_goodValues := { -99, -10, -1, 0, 3, 4, 5, 10, 11, 20, 99, 100, 101, 102, 200, 1000, 100000000000000 };
    f_checkIntegerTemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkConstComplement() runs on A {
    const RoI c_roi1 := { 1, 2, 6, 7, 9 };
    var template integer v_af := complement ( 8, all from c_roi1 );

    var RoI vl_badValues := { 1, 2, 6, 7, 8, 9 };
    var RoI vl_goodValues := { -99, -10, -1, 0, 3, 4, 5, 10, 11, 20, 99, 100, 101, 102, 200, 1000, 100000000000000 };
    f_checkIntegerTemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkTempVarComplement() runs on A {
    var template RoI vt_roi1 := { 1, 2, (6 .. 9) };
    var template integer v_af := complement ( 11, all from vt_roi1 );

    var RoI vl_badValues := { 1, 2, 6, 7, 8, 9 };
    var RoI vl_goodValues := { -99, -10, -1, 0, 3, 4, 5, 10, 20, 99, 100, 101, 102, 200, 1000, 100000000000000 };
    f_checkIntegerTemplate(v_af, vl_goodValues, vl_badValues);
  }

  // Testing the permutation of an 'all from' (used on variables, constants and template variables)
  testcase tc_checkVarPermutation() runs on A {
    var RoI v_roi1 := { 1, 2 };
    var template RoI v_af := { permutation ( 6, all from v_roi1 ), 7 };

    var RoRoI vl_goodValues := { {1, 2, 6, 7}, {1, 6, 2, 7}, {2, 1, 6, 7}, {2, 6, 1, 7}, {6, 1, 2, 7}, {6, 2, 1, 7}};
    var RoRoI vl_badValues := { {}, {1}, {1, 2, 6}, {1, 2, 7}, {7, 2, 1, 6}, {-5, 1, 2, 6, 7}, {1, 2, 3, 4}, {7, 6}, {19000000000000, 107, 66, 18} }
    f_checkRoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkConstPermutation() runs on A {
    const RoI c_roi1 := { 1, 2 };
    var template RoI v_af := { permutation ( 6, all from c_roi1 ), 7 };

    var RoRoI vl_goodValues := { {1, 2, 6, 7}, {1, 6, 2, 7}, {2, 1, 6, 7}, {2, 6, 1, 7}, {6, 1, 2, 7}, {6, 2, 1, 7}};
    var RoRoI vl_badValues := { {}, {1}, {1, 2, 6}, {1, 2, 7}, {7, 2, 1, 6}, {-5, 1, 2, 6, 7}, {1, 2, 3, 4}, {7, 6}, {19000000000000, 107, 66, 18} };
    f_checkRoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkTempVarPermutation() runs on A {
    var template RoI vt_roi1 := { (1..3), (2..4) };
    var template RoI v_af := { permutation ( all from vt_roi1 ), 7 };

    var RoRoI vl_goodValues := { {1, 2, 7}, {2, 2, 7}, {3, 2, 7}, {1, 3, 7}, {2, 3, 7}, {3, 3, 7}, {1, 4, 7}, {2, 4, 7}, {3, 4, 7} };
    var RoRoI vl_badValues := { {}, {1}, {1, 2, 6}, {1, 2, 3, 7}, {7, 2, 1, 6}, {-5, 1, 2, 7}, {1, 2, 3, 4}, {7, 6}, {19000000000000, 107, 66} };
    f_checkRoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  // Testing the subset of an 'all from' (used on variables, constants and template variables)
  testcase tc_checkVarSubset() runs on A {
    var RoI v_roi1 := { 1, 2, 3 };
    var template SoI v_af := subset (all from v_roi1);

    var RoSoI vl_goodValues := { {}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2 ,3} };
    var RoSoI vl_badValues := { {4}, {-8}, {6300000000000000000}, {1, 2, 6}, {1, 2, 3, 6}, {1, 1, 2, 3}, {0, 2, 3}, {100, 77777777777, 45454213414} };
    f_checkSoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkConstSubset() runs on A {
    const RoI c_roi1 := { 1, 2, 3 };
    var template SoI v_af := subset (all from c_roi1);

    var RoSoI vl_goodValues := { {}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2 ,3} };
    var RoSoI vl_badValues := { {4}, {-8}, {6300000000000000000}, {1, 2, 6}, {1, 2, 3, 6}, {1, 1, 2, 3}, {0, 2, 3}, {100, 77777777777, 45454213414} };
    f_checkSoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkTempVarSubset() runs on A {
    var template RoI vt_roi1 := { 1, (2..4) };
    var template SoI v_af := subset (all from vt_roi1);

    var RoSoI vl_goodValues := { {}, {1}, {2}, {3}, {4}, {1, 2}, {1, 3}, {1, 4} };
    var RoSoI vl_badValues := { {-8}, {6300000000000000000}, {2, 3}, {1, 2 ,3}, {1, 2, 6}, {1, 2, 3, 6}, {1, 1, 4}, {0, 2, 3}, {77777777777, 45454213414} };
    f_checkSoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  // Testing the superset of an 'all from' (used on variables, constants and template variables)
  testcase tc_checkVarSuperset() runs on A {
    var RoI v_roi1 := { 1, 2, 3 };
    var template SoI v_af := superset (all from v_roi1);

    var RoSoI vl_goodValues := { {1, 2, 3}, {1, 2, 3, 0}, {1, 2, 3, 10}, {8, 2, 1, 3}, {3, 2, 1, 0}, {1, 1, 2, 3}, {1, 100, 77777777777, 2, 3, 45454213414} };
    var RoSoI vl_badValues := { {}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {4}, {-8}, {6300000000000000000}, {1, 2, 6}, {0, 2, 3}, {100, 77777777777, 45454213414} };
    f_checkSoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkConstSuperset() runs on A {
    const RoI c_roi1 := { 1, 2, 3 };
    var template SoI v_af := superset (all from c_roi1);

    var RoSoI vl_goodValues := { {1, 2, 3}, {1, 2, 3, 0}, {1, 2, 3, 10}, {8, 2, 1, 3}, {3, 2, 1, 0}, {1, 1, 2, 3}, {1, 100, 77777777777, 2, 3, 45454213414} };
    var RoSoI vl_badValues := { {}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {4}, {-8}, {6300000000000000000}, {1, 2, 6}, {0, 2, 3}, {100, 77777777777, 45454213414} };
    f_checkSoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkTempVarSuperset() runs on A {
    var template RoI vt_roi1 := { 1, (2..4) };
    var template SoI v_af := superset (all from vt_roi1);

    var RoSoI vl_goodValues := { {1, 2}, {1, 3}, {1, 2, 3}, {1, 3, 0}, {1, 2, 3, 10}, {8, 2, 1}, {3, 2, 1, 0}, {1, 1, 3}, {1, 100, 77777777777, 3, 45454213414} };
    var RoSoI vl_badValues := { {}, {1}, {2}, {3},  {2, 3}, {4}, {-8}, {6300000000000000000}, {0, 2, 3}, {100, 77777777777, 45454213414}, {7, 6}, {3, 4} };
    f_checkSoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  // Testing 'all from' on template variables that reference themselves
  // (same with permutation, subset and superset)
  testcase tc_checkTempVarSelf() runs on A {
    var template RoI v_af := { 1, (2..4) };
    v_af := { 7, (all from v_af) };

    var RoRoI vl_goodValues := { {7, 1}, {7, 2}, {7, 3}, {7, 4} };
    var RoRoI vl_badValues := { {}, {7}, {1}, {2}, {3}, {4}, {7, 0}, {7, 5}, {7, 10}, {7, 98765432123456789}, {1, 2, 3} };
    f_checkRoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkTempVarSelfPermutation() runs on A {
    var template RoI v_af := { (1..3), (2..4) };
    v_af := { permutation ( all from v_af ), 7 };

    var RoRoI vl_goodValues := { {1, 2, 7}, {2, 2, 7}, {3, 2, 7}, {1, 3, 7}, {2, 3, 7}, {3, 3, 7}, {1, 4, 7}, {2, 4, 7}, {3, 4, 7} };
    var RoRoI vl_badValues := { {}, {1}, {1, 2, 6}, {1, 2, 3, 7}, {7, 2, 1, 6}, {-5, 1, 2, 7}, {1, 2, 3, 4}, {7, 6}, {19000000000000, 107, 66} };
    f_checkRoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkTempVarSelfSubset() runs on A {
    var template SoI v_af := { 1, (2..4) };
    v_af := subset (all from v_af);

    var RoSoI vl_goodValues := { {}, {1}, {2}, {3}, {4}, {1, 2}, {1, 3}, {1, 4} };
    var RoSoI vl_badValues := { {-8}, {6300000000000000000}, {2, 3}, {1, 2 ,3}, {1, 2, 6}, {1, 2, 3, 6}, {1, 1, 4}, {0, 2, 3}, {77777777777, 45454213414} };
    f_checkSoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkTempVarSelfSuperset() runs on A {
    var template SoI v_af := { 1, (2..4) };
    v_af := superset (all from v_af);

    var RoSoI vl_goodValues := { {1, 2}, {1, 3}, {1, 2, 3}, {1, 3, 0}, {1, 2, 3, 10}, {8, 2, 1}, {3, 2, 1, 0}, {1, 1, 3}, {1, 100, 77777777777, 3, 45454213414} };
    var RoSoI vl_badValues := { {}, {1}, {2}, {3},  {2, 3}, {4}, {-8}, {6300000000000000000}, {0, 2, 3}, {100, 77777777777, 45454213414}, {7, 6}, {3, 4} };
    f_checkSoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  // Testing 'all from' and self referencing on function parameters
  function f_all_from_par(inout template RoI p_af) runs on A {
    p_af := { 7, (all from p_af) };
  }

  testcase tc_checkTempParSelf() runs on A {
    var template RoI v_af := { 1, (2..4) };
    f_all_from_par(v_af);
    
    var RoRoI vl_goodValues := { {7, 1}, {7, 2}, {7, 3}, {7, 4} };
    var RoRoI vl_badValues := { {}, {7}, {1}, {2}, {3}, {4}, {7, 0}, {7, 5}, {7, 10}, {7, 98765432123456789}, {1, 2, 3} };
    f_checkRoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  // Testing 'all from' and self referencing on template variables in the parameter lists of
  // function calls and parametrised templates
  function f_do_nothing(in template RoI p_temp) runs on A return template RoI {
    return p_temp;
  }

  function f_do_nothing2(in template integer p_ti, in template RoI p_temp) runs on A return template RoI {
    return p_temp;
  }

  function f_do_nothing_io(inout template RoI p_temp) runs on A return template RoI {
    return p_temp;
  }

  testcase tc_checkTempVarFuncSelf() runs on A {
    var template RoI v_af := { 1, (2..4) };
    v_af := { 7, ( all from f_do_nothing(v_af) ) };

    var RoRoI vl_goodValues := { {7, 1}, {7, 2}, {7, 3}, {7, 4} };
    var RoRoI vl_badValues := { {}, {7}, {1}, {2}, {3}, {4}, {7, 0}, {7, 5}, {7, 10}, {7, 98765432123456789}, {1, 2, 3} };
    f_checkRoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkTempVarFuncSelf2() runs on A {
    var template RoI v_af := { 1, (2..4) };
    v_af := { 7, ( all from f_do_nothing_io(v_af) ) };

    var RoRoI vl_goodValues := { {7, 1}, {7, 2}, {7, 3}, {7, 4} };
    var RoRoI vl_badValues := { {}, {7}, {1}, {2}, {3}, {4}, {7, 0}, {7, 5}, {7, 10}, {7, 98765432123456789}, {1, 2, 3} };
    f_checkRoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkTempVarFuncSelf3() runs on A {
    var template RoI v_af := { 1, (2..4) };
    v_af := { 7, ( all from f_do_nothing2(0, v_af) ) };

    var RoRoI vl_goodValues := { {7, 1}, {7, 2}, {7, 3}, {7, 4} };
    var RoRoI vl_badValues := { {}, {7}, {1}, {2}, {3}, {4}, {7, 0}, {7, 5}, {7, 10}, {7, 98765432123456789}, {1, 2, 3} };
    f_checkRoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkTempVarFuncSelf4() runs on A {
    var template RoI v_af := { 1, (2..4) };
    v_af := { 7, ( all from f_do_nothing(f_do_nothing2(0, f_do_nothing(f_do_nothing2(7, v_af)))) ) };

    var RoRoI vl_goodValues := { {7, 1}, {7, 2}, {7, 3}, {7, 4} };
    var RoRoI vl_badValues := { {}, {7}, {1}, {2}, {3}, {4}, {7, 0}, {7, 5}, {7, 10}, {7, 98765432123456789}, {1, 2, 3} };
    f_checkRoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  template RoI t_pard(in template RoI t_r) := t_r;

  testcase tc_checkTempVarTempPardSelf() runs on A {
    var template RoI v_af := { 1, (2..4) };
    v_af := { 7, ( all from t_pard(v_af) ) };

    var RoRoI vl_goodValues := { {7, 1}, {7, 2}, {7, 3}, {7, 4} };
    var RoRoI vl_badValues := { {}, {7}, {1}, {2}, {3}, {4}, {7, 0}, {7, 5}, {7, 10}, {7, 98765432123456789}, {1, 2, 3} };
    f_checkRoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  testcase tc_checkTempVarComboSelf() runs on A {
    var template RoI v_af := { 1, (2..4) };
    v_af := { 7, ( all from f_do_nothing2(5, t_pard(f_do_nothing(v_af))) ) };

    var RoRoI vl_goodValues := { {7, 1}, {7, 2}, {7, 3}, {7, 4} };
    var RoRoI vl_badValues := { {}, {7}, {1}, {2}, {3}, {4}, {7, 0}, {7, 5}, {7, 10}, {7, 98765432123456789}, {1, 2, 3} };
    f_checkRoITemplate(v_af, vl_goodValues, vl_badValues);
  }

  control {
    execute(tc_checkVar());
    execute(tc_checkConst());
    execute(tc_checkTempVar());
    execute(tc_checkVarComplement());
    execute(tc_checkConstComplement());
    execute(tc_checkTempVarComplement());
    execute(tc_checkVarPermutation());
    execute(tc_checkConstPermutation());
    execute(tc_checkTempVarPermutation());
    execute(tc_checkVarSubset());
    execute(tc_checkConstSubset());
    execute(tc_checkTempVarSubset());
    execute(tc_checkVarSuperset());
    execute(tc_checkConstSuperset());
    execute(tc_checkTempVarSuperset());
    execute(tc_checkTempVarSelf());
    execute(tc_checkTempVarSelfPermutation());
    execute(tc_checkTempVarSelfSubset());
    execute(tc_checkTempVarSuperset());
    execute(tc_checkTempParSelf());
    execute(tc_checkTempVarFuncSelf());
    execute(tc_checkTempVarFuncSelf2());
    execute(tc_checkTempVarFuncSelf3());
    execute(tc_checkTempVarFuncSelf4());
    execute(tc_checkTempVarTempPardSelf());
    execute(tc_checkTempVarComboSelf());
  }
}
