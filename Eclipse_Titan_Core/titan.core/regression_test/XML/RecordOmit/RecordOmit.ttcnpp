/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Bence Janos Szabo â€“ initial implementation
 *
 ******************************************************************************/
module RecordOmit {
modulepar boolean RecordOmit_verbose := false;
#define verbose RecordOmit_verbose
#include "../macros.ttcnin"

type component CT {};

type record FirstRecordOpt
{
  record {
    charstring foo optional,
    charstring bar
  } sequence optional,
  boolean b
}
with {
  variant "element";
  variant (sequence) "untagged";
};

DECLARE_EXER_ENCODERS(FirstRecordOpt, firstrec);

const FirstRecordOpt c_omit := { sequence := omit, b := true };

const universal charstring c_result_omit_e := "<FirstRecordOpt>\n\t<b>true</b>\n</FirstRecordOpt>\n\n"

const FirstRecordOpt c_not_omit := { sequence := { foo := "foo", bar := "bar"}, b := true};

const universal charstring c_result_not_omit_e := "<FirstRecordOpt>\n\t<foo>foo</foo>\n\t<bar>bar</bar>\n\t<b>true</b>\n</FirstRecordOpt>\n\n";

testcase tc_enc_first_record() runs on CT {
	CHECK_METHOD(exer_enc_firstrec, c_omit, c_result_omit_e);
	CHECK_METHOD(exer_enc_firstrec, c_not_omit, c_result_not_omit_e);
}

testcase tc_dec_first_record() runs on CT {
	CHECK_DECODE(exer_dec_firstrec, c_result_omit_e, FirstRecordOpt, c_omit);
	CHECK_DECODE(exer_dec_firstrec, c_result_not_omit_e, FirstRecordOpt, c_not_omit);
}

//-----------------------------------------------------------------------------

type record MiddleRecordOpt
{
  boolean first optional,
  record {
    charstring foo optional,
    charstring bar
  } sequence optional,
  boolean b
}
with {
  variant "element";
  variant (sequence) "untagged";
};

DECLARE_EXER_ENCODERS(MiddleRecordOpt, middlerec);

const MiddleRecordOpt c_omit_middle := { first := omit, sequence := omit, b := true };

const universal charstring c_result_omit_middle_e := "<MiddleRecordOpt>\n\t<b>true</b>\n</MiddleRecordOpt>\n\n"

const MiddleRecordOpt c_not_omit_middle := { first := omit, sequence := { foo := "foo", bar := "bar"}, b := true};

const universal charstring c_result_not_omit_middle_e := "<MiddleRecordOpt>\n\t<foo>foo</foo>\n\t<bar>bar</bar>\n\t<b>true</b>\n</MiddleRecordOpt>\n\n";

const MiddleRecordOpt c_omit_middle2 := { first := true, sequence := omit, b := true };

const universal charstring c_result_omit_middle2_e := "<MiddleRecordOpt>\n\t<first>true</first>\n\t<b>true</b>\n</MiddleRecordOpt>\n\n"

testcase tc_enc_middle_record() runs on CT {
	CHECK_METHOD(exer_enc_middlerec, c_omit_middle, c_result_omit_middle_e);
	CHECK_METHOD(exer_enc_middlerec, c_not_omit_middle, c_result_not_omit_middle_e);
	CHECK_METHOD(exer_enc_middlerec, c_omit_middle2, c_result_omit_middle2_e);
}

testcase tc_dec_middle_record() runs on CT {
	CHECK_DECODE(exer_dec_middlerec, c_result_omit_middle_e, MiddleRecordOpt, c_omit_middle);
	CHECK_DECODE(exer_dec_middlerec, c_result_not_omit_middle_e, MiddleRecordOpt, c_not_omit_middle);
	CHECK_DECODE(exer_dec_middlerec, c_result_omit_middle2_e, MiddleRecordOpt, c_omit_middle2);
}

//-----------------------------------------------------------------------------

type record AllTypesInRecord
{
  record {
  	boolean bool optional,
    bitstring bs optional,
    octetstring os optional,
    hexstring hs optional,
    integer i optional,
    float f optional,
    charstring cs optional,
    universal charstring us optional,
    boolean end
  } sequence optional,
  boolean b
}
with {
  variant "element";
  variant (sequence) "untagged";
};

DECLARE_EXER_ENCODERS(AllTypesInRecord, allrec);

const AllTypesInRecord c_omit_allrec := { sequence := omit, b := true };

const universal charstring c_result_omit_allrec_e := "<AllTypesInRecord>\n\t<b>true</b>\n</AllTypesInRecord>\n\n"

testcase tc_enc_alltype_record() runs on CT {
	CHECK_METHOD(exer_enc_allrec, c_omit_allrec, c_result_omit_allrec_e);
}

testcase tc_dec_alltype_record() runs on CT {
	CHECK_DECODE(exer_dec_allrec, c_result_omit_allrec_e, AllTypesInRecord, c_omit_allrec);
}

//-----------------------------------------------------------------------------

type record UnionUntagged
{
  union {
  	boolean bool,
    bitstring bs,
    octetstring os,
    hexstring hs,
    integer i,
    float f,
    charstring cs,
    universal charstring us,
    boolean end
  } choice optional,
  boolean b
}
with {
  variant "element";
  variant (choice) "untagged";
};

DECLARE_EXER_ENCODERS(UnionUntagged, union);

const UnionUntagged c_omit_union := { choice := omit, b := true };

const universal charstring c_result_omit_union_e := "<UnionUntagged>\n\t<b>true</b>\n</UnionUntagged>\n\n"

testcase tc_enc_union() runs on CT {
	CHECK_METHOD(exer_enc_union, c_omit_union, c_result_omit_union_e);
}

testcase tc_dec_union() runs on CT {
	CHECK_DECODE(exer_dec_union, c_result_omit_union_e, UnionUntagged, c_omit_union);
}



type record Inner {
	charstring a
}
with {
  variant "untagged";
}

type record RecordOfRecordUntagged
{
  record of Inner sequence optional,
  boolean b
}
with {
  variant "element";
};

DECLARE_EXER_ENCODERS(RecordOfRecordUntagged, recordof);

const RecordOfRecordUntagged c_omit_recordof := { sequence := omit, b := true };

const universal charstring c_result_omit_recordof_e := "<RecordOfRecordUntagged>\n\t<b>true</b>\n</RecordOfRecordUntagged>\n\n"

testcase tc_enc_recordof() runs on CT {
	CHECK_METHOD(exer_enc_recordof, c_omit_recordof, c_result_omit_recordof_e);
}

testcase tc_dec_recordof() runs on CT {
	CHECK_DECODE(exer_dec_recordof, c_result_omit_recordof_e, RecordOfRecordUntagged, c_omit_recordof);
}



control {
	execute(tc_enc_first_record());
	execute(tc_dec_first_record());

	execute(tc_enc_middle_record());
	execute(tc_dec_middle_record());

	execute(tc_enc_alltype_record());
	execute(tc_dec_alltype_record());

	execute(tc_enc_union());
	execute(tc_dec_union());

	execute(tc_enc_recordof());
	execute(tc_dec_recordof());
}

} with {
encode "XML";
}
