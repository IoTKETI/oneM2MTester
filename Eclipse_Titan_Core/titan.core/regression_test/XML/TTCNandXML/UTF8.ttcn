/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Raduly, Csaba
 *
 ******************************************************************************/
module UTF8 {

/*
Unicode code points and UTF-8 encodings for accented Latin letters.

The code points below 0xFF match the encoding in codepage 1252
(a.k.a. Windows Latin1) which is almost, but not quite, the same as ISO-8859-1.
There are no differences for these characters.

The names correspond to the HTML entitiy names (case sensitive).
The first (simple) is the Unicode code point (which, even at 1 byte,
doesn't fit into a charstring because the value is more than 127).

The entries with octetstring type and suffix of 8 are the UTF8 encoding.
*/

const universal charstring Aacute  := char(0,0,0,193); // 0xC1
const octetstring Aacute8 := 'C381'O;

// Although the Unicode name is LATIN CAPITAL LETTER A WITH DIAERESIS,
// the HTML entity name is Auml. Same for the other umlaut characters.
const universal charstring Auml  := char(0,0,0,196); // 0xC4
const octetstring Auml8 := 'C384'O

const universal charstring Eacute  := char(0,0,0,201); // 0xC9
const octetstring Eacute8 := 'C389'O

const universal charstring Euml  := char(0,0,0,203); // 0xCB
const octetstring Euml8 := 'C38B'O

const universal charstring Iacute  := char(0,0,0,205); // 0xCD
const octetstring Iacute8 := 'C38D'O

const universal charstring Iuml  := char(0,0,0,207); // 0xCF
const octetstring Iuml8 := 'C38F'O

const universal charstring Oacute  := char(0,0,0,211); // 0xD3
const octetstring Oacute8 := 'C393'O

const universal charstring Ouml  := char(0,0,0,214); // 0xD6
const octetstring Ouml8 := 'C396'O

const universal charstring Uacute  := char(0,0,0,218); // 0xDA
const octetstring Uacute8 := 'C39A'O

const universal charstring Uuml  := char(0,0,0,220); // 0xDC
const octetstring Uuml8 := 'C39C'O

const universal charstring aacute  := char(0,0,0,225); // 0xE1
const octetstring aacute8 := 'C3A1'O

const universal charstring auml  := char(0,0,0,228); // 0xE4
const octetstring auml8 := 'C3A4'O

const universal charstring eacute  := char(0,0,0,233); // 0xE9
const octetstring eacute8 := 'C3A9'O

const universal charstring euml  := char(0,0,0,235); // 0xEB
const octetstring euml8 := 'C3AB'O

const universal charstring iacute  := char(0,0,0,237); // 0xED
const octetstring iacute8 := 'C3AD'O

const universal charstring iuml  := char(0,0,0,239); // 0xEF
const octetstring iuml8 := 'C3AF'O

const universal charstring oacute  := char(0,0,0,243); // 0xF3
const octetstring oacute8 := 'C3B3'O

const universal charstring ouml  := char(0,0,0,246); // 0xF6
const octetstring ouml8 := 'C3B6'O

const universal charstring uacute  := char(0,0,0,250); // 0xFA
const octetstring uacute8 := 'C3BA'O

const universal charstring uuml  := char(0,0,0,252); // 0xFC
const octetstring uuml8 := 'C3BC'O

// Latin Extended-A, not in Latin-1
const universal charstring Odouble  := char(0,0,1,80); // 0x150
const octetstring Odouble8 := 'C590'O

const universal charstring odouble  := char(0,0,1,81); // 0x151
const octetstring odouble8 := 'C591'O

const universal charstring Udouble  := char(0,0,1,112); // 0x170
const octetstring Udouble8 := 'C5B0'O

const universal charstring udouble  := char(0,0,1,113); // 0x171
const octetstring udouble8 := 'C5B1'O

}
