/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Delic, Adam
 *   Raduly, Csaba
 *
 ******************************************************************************/
module AttributesTest {

modulepar boolean AttributesTest_verbose := false;
#define verbose AttributesTest_verbose
#include "../macros.ttcnin"

import from XSDAttributes all;
import from UTF8 all;

type component fumes {}

const Everything ev := {
    bitstr := '00110011'B,
    booool := true,
    cartoon := betty,
    
    hexen := '235'H,
    
    wholenum := 42,
    //emptyrec := {},
    //objection := objid { 1 2 3 4 },
    octets := 'DEADBEEF'O,
    printer := "All your base are belong to us",
    intl := "Aren_zael the master és társai",
    upstream := 3.141592,
    verdict := pass,
    
    ///
    content := omit
}

const universal charstring xer_everything :=
  "<Everything>\n" &
  "\t<bitstr>00110011</bitstr>\n" &
  "\t<booool><true/></booool>\n" &
  
  "\t<cartoon><betty/></cartoon>\n" &
  
  "\t<hexen>235</hexen>\n" &
  
  "\t<wholenum>42</wholenum>\n" &
  "\t<octets>DEADBEEF</octets>\n" &
  "\t<printer>All your base are belong to us</printer>\n" &
  "\t<intl>Aren_zael the master " & eacute & "s t" & aacute & "rsai</intl>\n" &
  "\t<upstream>3.141592</upstream>\n" &
  "\t<verdict>pass</verdict>\n" &
  
  "</Everything>\n\n"; 

const universal charstring exer_everything :=
"<Everything" &
" bitstr='00110011' booool='true' cartoon='betty' hexen='235' wholenum='42'" &
// " emptyrec=''" &
" octets='DEADBEEF' printer='All your base are belong to us'" &
" intl='Aren_zael the master " & eacute & "s t" & aacute & "rsai'" &
" upstream='3.141592' verdict='pass'/>" &
"\n\n"; 

const universal charstring xer_everything2 :=
  "<Everything>\n" &
  "\t<bitstr>00110011</bitstr>\n" &
  "\t<booool><true/></booool>\n" &
  
  "\t<cartoon><betty/></cartoon>\n" &
  
  "\t<hexen>235</hexen>\n" &
  "\t<wholenum>42</wholenum>\n" &
  "\t<octets>DEADBEEF</octets>\n" &
  "\t<printer>All your base are belong to us</printer>\n" &
  "\t<intl>Aren_zael the master " & eacute & "s t" & aacute & "rsai</intl>\n" &
  "\t<upstream>3.141592</upstream>\n" &
  "\t<verdict>pass</verdict>\n" &

  "\t<content>And now a word from our sponsors</content>\n" &
  
  "</Everything>\n\n"; 

const universal charstring exer_everything2 :=
"<Everything" &
" bitstr='00110011' booool='true' cartoon='betty' hexen='235' wholenum='42'" &
// " emptyrec=''" &
" octets='DEADBEEF' printer='All your base are belong to us'" &
" intl='Aren_zael the master " & eacute & "s t" & aacute & "rsai'" &
" upstream='3.141592' verdict='pass'>\n" &
"\t<content>And now a word from our sponsors</content>\n" &
"</Everything>\n\n"; 

DECLARE_EXER_ENCODERS(Everything, ev);
DECLARE_XER_ENCODERS(Everything, ev);

testcase encode_everything() runs on fumes
{
    var Everything input := ev;

    CHECK_METHOD(exer_enc_ev, input, exer_everything);
    CHECK_METHOD(bxer_enc_ev, input, xer_everything);

    input.content := "And now a word from our sponsors";
    CHECK_METHOD(exer_enc_ev, input, exer_everything2);
    CHECK_METHOD(bxer_enc_ev, input, xer_everything2);
}

testcase decode_everything() runs on fumes
{
    var Everything output := ev;

    CHECK_DECODE(exer_dec_ev, exer_everything, Everything, output);
    CHECK_DECODE(bxer_dec_ev,  xer_everything, Everything, output);

    output.content := "And now a word from our sponsors";
    CHECK_DECODE(bxer_dec_ev, xer_everything2 , Everything, output);
    CHECK_DECODE(exer_dec_ev, exer_everything2, Everything, output);
}

/**********************************************************************/

DECLARE_XER_ENCODERS(l_source, lsource)
DECLARE_EXER_ENCODERS(l_source, lsource)

// an embed of one with two attributes
const l_source nothing := {
  embed := { "none" },
  lang := omit,
  wasei := omit
}

const universal charstring bxer_nothing := 
"<l_source>\n" &
"\t<embed>\n" &
"\t\t<UNIVERSAL_CHARSTRING>none</UNIVERSAL_CHARSTRING>\n" &
"\t</embed>\n" &
"</l_source>\n\n";

const universal charstring exer_nothing :=
"<l_source>" &
"none" &
"</l_source>\n";


const l_source lang := {
  embed := { "lang" },
  lang := "fra",
  wasei := omit
}

const universal charstring bxer_lang :=
"<l_source>\n" &
"\t<embed>\n" &
"\t\t<UNIVERSAL_CHARSTRING>lang</UNIVERSAL_CHARSTRING>\n" &
"\t</embed>\n" &
"\t<lang>fra</lang>\n" &
"</l_source>\n\n";

const universal charstring exer_lang :=
"<l_source lang=\'fra\'>" &
"lang" &
"</l_source>\n";

const l_source wasei := {
  embed := { "wasei" },
  lang := omit,
  wasei := "hai"
}

const universal charstring bxer_wasei :=
"<l_source>\n" &
"\t<embed>\n" &
"\t\t<UNIVERSAL_CHARSTRING>wasei</UNIVERSAL_CHARSTRING>\n" &
"\t</embed>\n" &
"\t<wasei>hai</wasei>\n" &
"</l_source>\n\n";

const universal charstring exer_wasei :=
"<l_source wasei=\'hai\'>" &
"wasei" &
"</l_source>\n";


const l_source both := {
  embed := { "both" },
  lang := "kor",
  wasei := "blimey"
}

const universal charstring bxer_both :=
"<l_source>\n" &
"\t<embed>\n" &
"\t\t<UNIVERSAL_CHARSTRING>both</UNIVERSAL_CHARSTRING>\n" &
"\t</embed>\n" &
"\t<lang>kor</lang>\n" &
"\t<wasei>blimey</wasei>\n" &
"</l_source>\n\n";

const universal charstring exer_both :=
"<l_source lang=\'kor\' wasei=\'blimey\'>" &
"both" &
"</l_source>\n";



testcase encode_lsource() runs on fumes
{
  CHECK_METHOD(bxer_enc_lsource, nothing, bxer_nothing);
  CHECK_METHOD(exer_enc_lsource, nothing, exer_nothing);

  CHECK_METHOD(bxer_enc_lsource, lang, bxer_lang);
  CHECK_METHOD(exer_enc_lsource, lang, exer_lang);

  CHECK_METHOD(bxer_enc_lsource, wasei, bxer_wasei);
  CHECK_METHOD(exer_enc_lsource, wasei, exer_wasei);

  CHECK_METHOD(bxer_enc_lsource, both, bxer_both);
  CHECK_METHOD(exer_enc_lsource, both, exer_both);

}

testcase decode_lsource() runs on fumes
{
  CHECK_DECODE(bxer_dec_lsource, bxer_nothing, l_source, nothing);
  CHECK_DECODE(exer_dec_lsource, exer_nothing, l_source, nothing);

  CHECK_DECODE(bxer_dec_lsource, bxer_lang, l_source, lang);
  CHECK_DECODE(exer_dec_lsource, exer_lang, l_source, lang);

  CHECK_DECODE(bxer_dec_lsource, bxer_wasei, l_source, wasei);
  CHECK_DECODE(exer_dec_lsource, exer_wasei, l_source, wasei);

  CHECK_DECODE(bxer_dec_lsource, bxer_both, l_source, both);
  CHECK_DECODE(exer_dec_lsource, exer_both, l_source, both);
}

/**********************************************************************/

control {
    execute(encode_everything());
    execute(decode_everything());

    execute(encode_lsource());
    execute(decode_lsource());
}

}
