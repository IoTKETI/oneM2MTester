/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Ormandi, Matyas
 *   Raduly, Csaba
 *
 ******************************************************************************/
module NamespaceTest {

import from NamespaceDef all;

modulepar boolean NamespaceTest_verbose := false;
#define verbose NamespaceTest_verbose
#include "../macros.ttcnin"

type component water {}

DECLARE_XER_ENCODERS(MyRecordType, rec);
DECLARE_EXER_ENCODERS(MyRecordType, rec);

const universal charstring etalon := // for E-XER
"<ns0:MyRecordType xmlns:ns0=\'http://www.example.org/\' xmlns:ns1=\'http://www.example.org/example1\'>\n" &
"\t<ns1:field1>3</ns1:field1>\n" &
"\t<ns0:field2>four</ns0:field2>\n" &
"</ns0:MyRecordType>\n\n";

/* and not like this, with the namespace declaration for nsl in the field1 tag:

//<?xml version="1.0" encoding="UTF-8"?>
"<ns0:MyRecordType xmlns:ns0=http://www.example.org/>\n" &
"\t<ns1:field1 xmlns:ns1=http://www.example.org/example1>3</ns1:field1>\n" &
"\t<ns0:field2>four</ ns0:field2>\n" &
"</ns0:MyRecordType>\n\n";
*/

// MyRecordType requires a namespace, decoding this should fail
const universal charstring etalon_nons := // for E-XER
"<MyRecordType xmlns:ns0=\'http://www.example.org/\' xmlns:ns1=\'http://www.example.org/example1\'>\n" &
"\t<ns1:field1>3</ns1:field1>\n" &
"\t<ns0:field2>four</ns0:field2>\n" &
"</MyRecordType>\n\n";


const universal charstring etalon_b := // for B-XER
"<MyRecordType>\n" &
"\t<field1>3</field1>\n" &
"\t<field2>four</field2>\n" &
"</MyRecordType>\n\n";

const universal charstring etalon_c := // for C-XER (no indenting)
"<MyRecordType>" &
"<field1>3</field1>" &
"<field2>four</field2>" &
"</MyRecordType>\n";

testcase enc_ns() runs on water
{
    CHECK_METHOD(bxer_enc_rec, valueof(NamespaceDef.MyTemplate), etalon_b);
    CHECK_METHOD(cxer_enc_rec, valueof(NamespaceDef.MyTemplate), etalon_c);
    CHECK_METHOD(exer_enc_rec, valueof(NamespaceDef.MyTemplate), etalon);
}

/*
template charstring etalon_b := pattern
"<MyRecordType>\n#(,1)" &
"\t#(,1)<field1>3</field1>\n#(,1)" &
"\t#(,1)<field2>four</field2>\n#(,1)" &
"</MyRecordType>\n#(,1)\n";

testcase enc_ns() runs on water
{
    CHECK_METHOD(bxer_enc_rec, valueof(NamespaceDef.MyTemplate), etalon_b);
    CHECK_METHOD(cxer_enc_rec, valueof(NamespaceDef.MyTemplate), etalon_b);
    CHECK_METHOD(exer_enc_rec, valueof(NamespaceDef.MyTemplate), etalon);
}

*/

// Alternative representation: different prefix for the same namespace.
// The prefix is just a shorthand and can be anything. This should be decoded
// exactly the same as "etalon". Regression test for HK86210.
const universal charstring etalon_2 :=
"<myns:MyRecordType xmlns:myns=\'http://www.example.org/\' xmlns:ns1=\'http://www.example.org/example1\'>\n" &
"\t<ns1:field1>3</ns1:field1>\n" &
"\t<myns:field2>four</myns:field2>\n" &
"</myns:MyRecordType>\n\n";



testcase dec_ns() runs on water
{
  var MyRecordType expected := valueof(NamespaceDef.MyTemplate);

  CHECK_DECODE(bxer_dec_rec, etalon_b, MyRecordType, expected);
  CHECK_DECODE(cxer_dec_rec, etalon_c, MyRecordType, expected);
  CHECK_DECODE(exer_dec_rec, etalon  , MyRecordType, expected);
  
  CHECK_DECODE(exer_dec_rec, etalon_2, MyRecordType, expected);
  //this is expected to fail: CHECK_DECODE(exer_dec_rec, etalon_nons, MyRecordType, expected);
}

// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

type record of MyRecordType ManyRecords;

DECLARE_XER_ENCODERS(ManyRecords, recs);
DECLARE_EXER_ENCODERS(ManyRecords, recs);

/*
const ManyRecords recs := {
  valueof(MyTemplate),
  // semantic error above: Reference to a constant value was expected instead of template `@NamespaceDef.MyTemplate'
  // probably because of const
  { 2, "second" }
}
*/

const ManyRecords myrecs := {
  { 3, "four"   },
  { 2, "second" }
}


const universal charstring str_recs_b :=
"<ManyRecords>\n" &
"\t<MyRecordType>\n" &
"\t\t<field1>3</field1>\n" &
"\t\t<field2>four</field2>\n" &
"\t</MyRecordType>\n" &
"\t<MyRecordType>\n" &
"\t\t<field1>2</field1>\n" &
"\t\t<field2>second</field2>\n" &
"\t</MyRecordType>\n" &
"</ManyRecords>\n\n";

const universal charstring str_recs_e :=
"<ManyRecords xmlns:ns0=\'http://www.example.org/\' xmlns:ns1=\'http://www.example.org/example1\'>\n" &
"\t<ns0:MyRecordType>\n" &
"\t\t<ns1:field1>3</ns1:field1>\n" &
"\t\t<ns0:field2>four</ns0:field2>\n" &
"\t</ns0:MyRecordType>\n" &
"\t<ns0:MyRecordType>\n" &
"\t\t<ns1:field1>2</ns1:field1>\n" &
"\t\t<ns0:field2>second</ns0:field2>\n" &
"\t</ns0:MyRecordType>\n" &
"</ManyRecords>\n\n";

const ManyRecords norecs := {}

const universal charstring str_norecs_b :=
"<ManyRecords/>\n\n";

const universal charstring str_norecs_e :=
"<ManyRecords/>\n\n";
//"<ManyRecords xmlns:ns0=\'http://www.example.org/\' xmlns:ns1=\'http://www.example.org/example1\'/>\n\n";

// NsRecords is an imported "record of MyRecordType"
DECLARE_XER_ENCODERS(NsRecords, nsrecs);
DECLARE_EXER_ENCODERS(NsRecords, nsrecs);

const NsRecords /* the imported record-of */ nsrecs := {
  { 3, "four"   },
  { 2, "second" }
}

const universal charstring str_nsrecs_b :=
"<NsRecords>\n" &
"\t<MyRecordType>\n" &
"\t\t<field1>3</field1>\n" &
"\t\t<field2>four</field2>\n" &
"\t</MyRecordType>\n" &
"\t<MyRecordType>\n" &
"\t\t<field1>2</field1>\n" &
"\t\t<field2>second</field2>\n" &
"\t</MyRecordType>\n" &
"</NsRecords>\n\n";


const universal charstring str_nsrecs_e :=
"<ns0:NsRecords xmlns:ns0=\'http://www.example.org/\' xmlns:ns1=\'http://www.example.org/example1\'>\n" &
"\t<ns0:MyRecordType>\n" &
"\t\t<ns1:field1>3</ns1:field1>\n" &
"\t\t<ns0:field2>four</ns0:field2>\n" &
"\t</ns0:MyRecordType>\n" &
"\t<ns0:MyRecordType>\n" &
"\t\t<ns1:field1>2</ns1:field1>\n" &
"\t\t<ns0:field2>second</ns0:field2>\n" &
"\t</ns0:MyRecordType>\n" &
"</ns0:NsRecords>\n\n";


const NsRecords nsnorecs := {}

const universal charstring str_nsnorecs_b :=
"<NsRecords/>\n\n";

const universal charstring str_nsnorecs_e :=
"<ns0:NsRecords xmlns:ns0=\'http://www.example.org/\'/>\n\n";

testcase enc_recs() runs on water
{
  CHECK_METHOD(bxer_enc_recs, myrecs, str_recs_b);
  CHECK_METHOD(exer_enc_recs, myrecs, str_recs_e);

  CHECK_METHOD(bxer_enc_recs, norecs, str_norecs_b);
  CHECK_METHOD(exer_enc_recs, norecs, str_norecs_e);
  
  CHECK_METHOD(bxer_enc_nsrecs, nsrecs, str_nsrecs_b);
  CHECK_METHOD(exer_enc_nsrecs, nsrecs, str_nsrecs_e);
  
  CHECK_METHOD(bxer_enc_nsrecs, nsnorecs, str_nsnorecs_b);
  CHECK_METHOD(exer_enc_nsrecs, nsnorecs, str_nsnorecs_e);
}

testcase dec_recs() runs on water
{

  CHECK_DECODE(bxer_dec_recs, str_recs_b, ManyRecords, myrecs);
  CHECK_DECODE(exer_dec_recs, str_recs_e, ManyRecords, myrecs);

  CHECK_DECODE(bxer_dec_recs, str_norecs_b, ManyRecords, norecs);
  CHECK_DECODE(exer_dec_recs, str_norecs_e, ManyRecords, norecs);

  CHECK_DECODE(bxer_dec_nsrecs, str_nsrecs_b, NsRecords, nsrecs);
  CHECK_DECODE(exer_dec_nsrecs, str_nsrecs_e, NsRecords, nsrecs);

  CHECK_DECODE(bxer_dec_nsrecs, str_nsnorecs_b, NsRecords, nsnorecs);
  CHECK_DECODE(exer_dec_nsrecs, str_nsnorecs_e, NsRecords, nsnorecs);
}

// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
// Check that alternatives are correctly identified based on name+namespace,
// not just name alone (i.e. if names match but the namespace is empty => mismatch)

type charstring MyOtherType
with { variant "name as 'MyRecordType'" }

type union MyUnionType {
  MyRecordType myrecord,
  MyOtherType  spy
};

DECLARE_XER_ENCODERS(MyUnionType, u);
DECLARE_EXER_ENCODERS(MyUnionType, u);

const MyUnionType uni_rec := {
  myrecord := { 3, "four" }
}

const universal charstring bstr_unirec :=
"<MyUnionType>\n" &
"\t<myrecord>\n" &
"\t\t<field1>3</field1>\n" &
"\t\t<field2>four</field2>\n" &
"\t</myrecord>\n" &
"</MyUnionType>\n\n";

const universal charstring estr_unirec :=
"<MyUnionType xmlns:ns0='http://www.example.org/' xmlns:ns1='http://www.example.org/example1'>\n" &
"\t<ns0:myrecord>\n" &
"\t\t<ns1:field1>3</ns1:field1>\n" &
"\t\t<ns0:field2>four</ns0:field2>\n" &
"\t</ns0:myrecord>\n" &
"</MyUnionType>\n\n";

// Same thing with different namespace prefix (and order) (decoding only)
const universal charstring estr_unirec_2 :=
"<MyUnionType xmlns:ns-zero='http://www.example.org/' xmlns:ns-one='http://www.example.org/example1'>\n" &
"\t<ns-zero:myrecord>\n" &
"\t\t<ns-one:field1>3</ns-one:field1>\n" &
"\t\t<ns-zero:field2>four</ns-zero:field2>\n" &
"\t</ns-zero:myrecord>\n" &
"</MyUnionType>\n\n";

const MyUnionType uni_str := {
  spy := "I spy with my little eye"
}

const universal charstring bstr_unistr :=
"<MyUnionType>\n" &
"\t<spy>I spy with my little eye</spy>\n" &
"</MyUnionType>\n\n";

const universal charstring estr_unistr :=
"<MyUnionType>\n" &
"\t<spy>I spy with my little eye</spy>\n" &
"</MyUnionType>\n\n";

testcase enc_union() runs on water
{
  CHECK_METHOD(bxer_enc_u, uni_rec, bstr_unirec);
  CHECK_METHOD(exer_enc_u, uni_rec, estr_unirec);

  CHECK_METHOD(bxer_enc_u, uni_str, bstr_unistr);
  CHECK_METHOD(exer_enc_u, uni_str, estr_unistr);
}

testcase dec_union() runs on water
{
  CHECK_DECODE(bxer_dec_u, bstr_unirec, MyUnionType, uni_rec);
  CHECK_DECODE(exer_dec_u, estr_unirec, MyUnionType, uni_rec);
  CHECK_DECODE(exer_dec_u, estr_unirec_2, MyUnionType, uni_rec);

  CHECK_DECODE(bxer_dec_u, bstr_unistr, MyUnionType, uni_str);
  CHECK_DECODE(exer_dec_u, estr_unistr, MyUnionType, uni_str);
  // No alternative for the spy
}

control {
    execute(enc_ns());
    execute(dec_ns());
    
    execute(enc_recs());
    execute(dec_recs());
    
    execute(enc_union());
    execute(dec_union());
}

}
with { encode "XML" }
