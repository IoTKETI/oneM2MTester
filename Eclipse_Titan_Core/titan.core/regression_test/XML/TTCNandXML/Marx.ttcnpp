/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Delic, Adam
 *   Raduly, Csaba
 *
 ******************************************************************************/
module Marx {
modulepar boolean Marx_verbose := false;
#define verbose Marx_verbose
#include "../macros.ttcnin"


type record Silent {}


//type enumerated Marxes { chico, groucho, harpo };

type record Brothers {
  record of enumerated { chico,groucho,harpo } order,
  integer    chico,
  charstring groucho,
  Silent     harpo
}
with {
  variant "useOrder";
}

DECLARE_XER_ENCODERS(Brothers, marx);
DECLARE_EXER_ENCODERS(Brothers, marx);

type component MGM {}
type component Paramount {}

const universal charstring str_grimm_b :=
"<Brothers>\n" &
"\t<order>\n" &
"\t\t<chico/><groucho/><harpo/>\n" &
"\t</order>\n" &
"\t<chico>17</chico>\n" &
"\t<groucho>Je suis Marxiste, tendance Groucho</groucho>\n" &
"\t<harpo/>\n" &
"</Brothers>\n" &
"\n";

const universal charstring str_grimm_e :=
"<Brothers>\n" &
"\t<chico>17</chico>\n" &
"\t<groucho>Je suis Marxiste, tendance Groucho</groucho>\n" &
"\t<harpo/>\n" &
"</Brothers>\n" &
"\n";

const universal charstring str_grimm_b2 :=
"<Brothers>\n" &
"\t<order>\n" &
"\t\t<groucho/><harpo/><chico/>\n" &
"\t</order>\n" &
"\t<chico>17</chico>\n" &
"\t<groucho>Je suis Marxiste, tendance Groucho</groucho>\n" &
"\t<harpo/>\n" &
"</Brothers>\n" &
"\n";

const universal charstring str_grimm_e2 :=
"<Brothers>\n" &
"\t<groucho>Je suis Marxiste, tendance Groucho</groucho>\n" &
"\t<harpo/>\n" &
"\t<chico>17</chico>\n" &
"</Brothers>\n" &
"\n";

testcase duck_soup () runs on Paramount
{
  var Brothers grimm := {
    { chico, groucho, harpo },
    17, "Je suis Marxiste, tendance Groucho", {}
  }
  CHECK_METHOD(bxer_enc_marx, grimm, str_grimm_b);
  CHECK_METHOD(exer_enc_marx, grimm, str_grimm_e);
  
  grimm.order := { groucho, harpo, chico };

  CHECK_METHOD(bxer_enc_marx, grimm, str_grimm_b2);
  CHECK_METHOD(exer_enc_marx, grimm, str_grimm_e2);
}

testcase a_night_at_the_opera () runs on MGM
{
  var Brothers grimm := {
    { chico, groucho, harpo },
    17, "Je suis Marxiste, tendance Groucho", {}
  }
  CHECK_DECODE(bxer_dec_marx, str_grimm_b, Brothers, grimm);
  CHECK_DECODE(exer_dec_marx, str_grimm_e, Brothers, grimm);
}

/* * * * * * * * * * * * * * */

type record Stooges {
  record of universal charstring emb,
  record of enumerated { curly, larry, moe } ord,
  integer curly,
  float   larry,
  boolean moe
}
with {
  variant "useOrder";
  variant "embedValues";
}

DECLARE_XER_ENCODERS (Stooges, st3);
DECLARE_EXER_ENCODERS(Stooges, st3);

const universal charstring str_stg_b :=
"<Stooges>\n" &

"\t<emb>\n" &
"\t\t<UNIVERSAL_CHARSTRING/>\n" &
"\t\t<UNIVERSAL_CHARSTRING>.  is curly</UNIVERSAL_CHARSTRING>\n" &
"\t\t<UNIVERSAL_CHARSTRING>.. is bald</UNIVERSAL_CHARSTRING>\n" &
"\t\t<UNIVERSAL_CHARSTRING>...is tall</UNIVERSAL_CHARSTRING>\n" &
"\t</emb>\n" &

"\t<ord>\n" &
"\t\t<larry/><curly/><moe/>\n" &
"\t</ord>\n" &
"\t<curly>13</curly>\n" &
"\t<larry>1.414213</larry>\n" &
"\t<moe><true/></moe>\n" &
"</Stooges>\n" &
"\n";

const universal charstring str_stg_e :=
"<Stooges>" &
"" & // the first embedded string (empty in this case)
"<larry>1.414213</larry>" &
".  is curly" & // the embedded strings are not affected by USE-ORDER
"<curly>13</curly>" &
".. is bald" &
"<moe>true</moe>" &
"...is tall" &
"</Stooges>" &
"\n";


const Stooges s3 := {
  emb := {"",".  is curly",".. is bald","...is tall"},
  ord := { larry, curly, moe },
  curly := 13,
  larry := 1.414213,
  moe   := true
}

testcase beer_and_pretzels() runs on MGM
{
  CHECK_METHOD(bxer_enc_st3, s3, str_stg_b);
  CHECK_METHOD(exer_enc_st3, s3, str_stg_e);
}

testcase plane_nuts() runs on MGM
{
  var Stooges expected := s3;
  CHECK_DECODE(bxer_dec_st3, str_stg_b, Stooges, expected);
  CHECK_DECODE(exer_dec_st3, str_stg_e, Stooges, expected);
}

control {
  execute(duck_soup());            // encoding use-order
  execute(a_night_at_the_opera()); // decode   ===//===
  execute(beer_and_pretzels());    // encoding use-order + embed-values
  execute(plane_nuts());           // decode   ===//===      ===//===
}

}
with {
encode "XML"
}
