/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Raduly, Csaba
 *
 ******************************************************************************/
module Base64Test {

modulepar boolean Base64Test_verbose := false;
#define verbose Base64Test_verbose
#include "../macros.ttcnin"

import from EmbedValues { const LF };

type charstring B64
with { variant "XSD:base64Binary" }

type octetstring O64
with { variant "XSD:base64Binary" }

type component sixty_four {}

DECLARE_XER_ENCODERS(B64, b64)
DECLARE_EXER_ENCODERS(B64, b64)

DECLARE_XER_ENCODERS(O64, o64)
DECLARE_EXER_ENCODERS(O64, o64)

const B64 aybabtu_str :=
     "All your base are belong to us";
const universal charstring aybabtu_b :=
"<B64>All your base are belong to us</B64>\n" & LF;
const universal charstring aybabtu_e :=
"<B64>QWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVz</B64>\n" & LF;
const universal charstring aybabtu_ep :=
"<B64>QWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVzIQ==</B64>\n" & LF;
const universal charstring aybabtu_epp :=
"<B64>QWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVzISE=</B64>\n" & LF;
const universal charstring aybabtu_eppp :=
"<B64>QWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVzISEh</B64>\n" & LF;

const O64 r_aybabtu1 :=
     '025972A2EADB6AC79AADE6DE9689E0B68BAC'O
const universal charstring r_aybabtu1_b :=
"<O64>025972A2EADB6AC79AADE6DE9689E0B68BAC</O64>\n"// & LF;
const universal charstring r_aybabtu1_e :=
"<O64>Allyourbasearebelongtous</O64>\n" // & LF;

const O64 r_aybabtu2 :=
     '02597ECA8BABF9B6AC7BE6AB7BE6DE9689E0FADA3EBACFBE'O
const universal charstring r_aybabtu2_b :=
"<O64>02597ECA8BABF9B6AC7BE6AB7BE6DE9689E0FADA3EBACFBE</O64>\n" // & LF;
const universal charstring r_aybabtu2_e :=
"<O64>All+your+base+are+belong+to+us++</O64>\n" // & LF;
const universal charstring r_aybabtu2_ep :=
"<O64>All+your+base+are+belong+to+us++YQ==</O64>\n" // & LF;
const universal charstring r_aybabtu2_epp :=
"<O64>All+your+base+are+belong+to+us++YeY=</O64>\n" // & LF;
const universal charstring r_aybabtu2_eppp :=
"<O64>All+your+base+are+belong+to+us++Yeah</O64>\n" // & LF;


testcase enc_b64() runs on sixty_four
{
  CHECK_METHOD(bxer_enc_b64, aybabtu_str, aybabtu_b);
  CHECK_METHOD(exer_enc_b64, aybabtu_str, aybabtu_e);
  
  var B64 aybabtu_pad := aybabtu_str & "!";
  CHECK_METHOD(exer_enc_b64, aybabtu_pad, aybabtu_ep);
  
  aybabtu_pad := aybabtu_pad & "!";
  CHECK_METHOD(exer_enc_b64, aybabtu_pad, aybabtu_epp);

  aybabtu_pad := aybabtu_pad & "!";
  CHECK_METHOD(exer_enc_b64, aybabtu_pad, aybabtu_eppp);

  // and now for octetstring
  CHECK_METHOD(bxer_enc_o64, r_aybabtu1, r_aybabtu1_b);
  CHECK_METHOD(exer_enc_o64, r_aybabtu1, r_aybabtu1_e);

  CHECK_METHOD(bxer_enc_o64, r_aybabtu2, r_aybabtu2_b);
  CHECK_METHOD(exer_enc_o64, r_aybabtu2, r_aybabtu2_e);
  
  var O64 aybabtu2p := r_aybabtu2 & '61'O;
  CHECK_METHOD(exer_enc_o64, aybabtu2p, r_aybabtu2_ep);
  
  aybabtu2p := aybabtu2p & 'E6'O; 
  CHECK_METHOD(exer_enc_o64, aybabtu2p, r_aybabtu2_epp);

  aybabtu2p := aybabtu2p & 'A1'O; 
  CHECK_METHOD(exer_enc_o64, aybabtu2p, r_aybabtu2_eppp);
}

testcase dec_b64() runs on sixty_four
{
  CHECK_DECODE(bxer_dec_b64, aybabtu_b, B64, aybabtu_str);
  CHECK_DECODE(exer_dec_b64, aybabtu_e, B64, aybabtu_str);
  CHECK_DECODE(exer_dec_b64, aybabtu_ep, B64, aybabtu_str & "!");
  CHECK_DECODE(exer_dec_b64, aybabtu_epp, B64, aybabtu_str & "!!");
  CHECK_DECODE(exer_dec_b64, aybabtu_eppp, B64, aybabtu_str & "!!!");

  CHECK_DECODE(bxer_dec_o64, r_aybabtu2_b, O64, r_aybabtu2);
  CHECK_DECODE(exer_dec_o64, r_aybabtu2_e, O64, r_aybabtu2);
  CHECK_DECODE(exer_dec_o64, r_aybabtu2_ep, O64, r_aybabtu2 & '61'O);
  CHECK_DECODE(exer_dec_o64, r_aybabtu2_epp, O64, r_aybabtu2 & '61E6'O);
  CHECK_DECODE(exer_dec_o64, r_aybabtu2_eppp, O64, r_aybabtu2 & '61E6A1'O);

}

control {
  execute(enc_b64())
  execute(dec_b64())
}

}
with {
encode "XML"
}

