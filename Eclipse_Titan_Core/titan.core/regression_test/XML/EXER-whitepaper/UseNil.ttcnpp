/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *   Raduly, Csaba
 *   Szabo, Bence Janos
 *
 ******************************************************************************/
module UseNil {
modulepar boolean UseNil_verbose := false;
#define verbose UseNil_verbose
#include "../macros.ttcnin"

type component Nil {}

type enumerated ProductColor0 { red(0), green('01'B), blue(2), yellow('12'O), black('AB'H) }

// useNil on the type (record)
type record Size {
  integer sizeval optional
}
with { variant "useNil" }

type record NilProduct {
  charstring name,
  ProductColor0 color,
  Size size
}

DECLARE_XER_ENCODERS(NilProduct, nilp);
DECLARE_EXER_ENCODERS(NilProduct, nilp);

DECLARE_XER_ENCODERS(Size, sz);
DECLARE_EXER_ENCODERS(Size, sz);

const NilProduct absent := {
  name  := "no shirt",
  color := red,
  size  := { omit }
}

const NilProduct present_ := {
  name  := "shirt",
  color := red,
  size  := { 10 }
}

const NilProduct present_green := {
  name  := "shirt",
  color := green,
  size  := { 10 }
}

const NilProduct present_yellow := {
  name  := "shirt",
  color := yellow,
  size  := { 10 }
}

const NilProduct present_black := {
  name  := "shirt",
  color := black,
  size  := { 10 }
}


const universal charstring str_absent_e_correct :=
"<NilProduct xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\'>\n" &
"\t<name>no shirt</name>\n" &
"\t<color>red</color>\n" &
"\t<size xsi:nil=\'true\'/>\n" &
"</NilProduct>\n" &
"\n";

const universal charstring str_absent_e :=
"<NilProduct xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\'>\n" &
"\t<name>no shirt</name>\n" &
"\t<color>red</color>\n" &
"\t<size xsi:nil=\'true\'/>\n" &
"</NilProduct>\n" &
"\n";

const universal charstring str_absent_b :=
"<NilProduct>\n" &
"\t<name>no shirt</name>\n" &
"\t<color><red/></color>\n" &
"\t<size/>\n" &
"</NilProduct>\n" &
"\n";

const universal charstring str_present_e_correct :=
"<NilProduct xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\'>\n" &
"\t<name>shirt</name>\n" &
"\t<color>red</color>\n" &
"\t<size xsi:nil='false'>10</size>\n" &
"</NilProduct>\n" &
"\n";

const universal charstring str_present_e :=
"<NilProduct>\n" &
"\t<name>shirt</name>\n" &
"\t<color>red</color>\n" &
"\t<size>10</size>\n" & // HO37920: no \t after 10
"</NilProduct>\n" &
"\n";

const universal charstring str_present_b :=
"<NilProduct>\n" &
"\t<name>shirt</name>\n" &
"\t<color><red/></color>\n" &
"\t<size>\n" &
"\t\t<sizeval>10</sizeval>\n" &
"\t</size>\n" &
"</NilProduct>\n" &
"\n";

const universal charstring str_present_green_e :=
"<NilProduct>\n" &
"\t<name>shirt</name>\n" &
"\t<color>green</color>\n" &
"\t<size>10</size>\n" &
"</NilProduct>\n" &
"\n";

const universal charstring str_present_green_b :=
"<NilProduct>\n" &
"\t<name>shirt</name>\n" &
"\t<color><green/></color>\n" &
"\t<size>\n" &
"\t\t<sizeval>10</sizeval>\n" &
"\t</size>\n" &
"</NilProduct>\n" &
"\n";

const universal charstring str_present_yellow_e :=
"<NilProduct>\n" &
"\t<name>shirt</name>\n" &
"\t<color>yellow</color>\n" &
"\t<size>10</size>\n" & // HO37920: no \t after 10
"</NilProduct>\n" &
"\n";

const universal charstring str_present_yellow_b :=
"<NilProduct>\n" &
"\t<name>shirt</name>\n" &
"\t<color><yellow/></color>\n" &
"\t<size>\n" &
"\t\t<sizeval>10</sizeval>\n" &
"\t</size>\n" &
"</NilProduct>\n" &
"\n";

const universal charstring str_present_black_e :=
"<NilProduct>\n" &
"\t<name>shirt</name>\n" &
"\t<color>black</color>\n" &
"\t<size>10</size>\n" & // HO37920: no \t after 10
"</NilProduct>\n" &
"\n";

const universal charstring str_present_black_b :=
"<NilProduct>\n" &
"\t<name>shirt</name>\n" &
"\t<color><black/></color>\n" &
"\t<size>\n" &
"\t\t<sizeval>10</sizeval>\n" &
"\t</size>\n" &
"</NilProduct>\n" &
"\n";

testcase encode_nil_absent() runs on Nil
{
  CHECK_METHOD(bxer_enc_nilp, absent, str_absent_b);
  CHECK_METHOD(exer_enc_nilp, absent, str_absent_e);
}

testcase encode_nil_present() runs on Nil
{
  CHECK_METHOD(bxer_enc_nilp, present_, str_present_b);
  CHECK_METHOD(exer_enc_nilp, present_, str_present_e);
}

testcase decode_nil_absent() runs on Nil
{
  CHECK_DECODE(bxer_dec_nilp, str_absent_b, NilProduct, absent);
  CHECK_DECODE(exer_dec_nilp, str_absent_e, NilProduct, absent);
}

testcase decode_nil_present() runs on Nil
{
  CHECK_DECODE(bxer_dec_nilp, str_present_b, NilProduct, present_);
  CHECK_DECODE(exer_dec_nilp, str_present_e, NilProduct, present_);
}

testcase encode_enum_nil() runs on Nil
{
  CHECK_METHOD(bxer_enc_nilp, present_green, str_present_green_b);
  CHECK_METHOD(exer_enc_nilp, present_green, str_present_green_e);

  CHECK_METHOD(bxer_enc_nilp, present_yellow, str_present_yellow_b);
  CHECK_METHOD(exer_enc_nilp, present_yellow, str_present_yellow_e);

  CHECK_METHOD(bxer_enc_nilp, present_black, str_present_black_b);
  CHECK_METHOD(exer_enc_nilp, present_black, str_present_black_e);
}

testcase decode_enum_nil() runs on Nil
{
  CHECK_DECODE(bxer_dec_nilp, str_present_green_b, NilProduct, present_green);
  CHECK_DECODE(exer_dec_nilp, str_present_green_e, NilProduct, present_green);

  CHECK_DECODE(bxer_dec_nilp, str_present_yellow_b, NilProduct, present_yellow);
  CHECK_DECODE(exer_dec_nilp, str_present_yellow_e, NilProduct, present_yellow);

  CHECK_DECODE(bxer_dec_nilp, str_present_black_b, NilProduct, present_black);
  CHECK_DECODE(exer_dec_nilp, str_present_black_e, NilProduct, present_black);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

const universal charstring str_sz_absent_e :=
"<Size xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\' xsi:nil=\'true\'/>\n\n";

const universal charstring str_sz_absent_b :=
"<Size/>\n\n";

const universal charstring str_sz_present_e :=
"<Size>10</Size>\n\n";

const universal charstring str_sz_present_b :=
"<Size>\n" &
"\t<sizeval>10</sizeval>\n" &
"</Size>\n\n";

testcase encode_size_absent() runs on Nil
{
  CHECK_METHOD(bxer_enc_sz, absent.size, str_sz_absent_b);
  CHECK_METHOD(exer_enc_sz, absent.size, str_sz_absent_e);
}

testcase encode_size_present() runs on Nil
{
  CHECK_METHOD(bxer_enc_sz, present_.size, str_sz_present_b);
  CHECK_METHOD(exer_enc_sz, present_.size, str_sz_present_e);
}

testcase decode_size_absent() runs on Nil
{
  CHECK_DECODE(bxer_dec_sz, str_sz_absent_b, Size, absent.size);
  CHECK_DECODE(exer_dec_sz, str_sz_absent_e, Size, absent.size);
}

testcase decode_size_present() runs on Nil
{
  CHECK_DECODE(bxer_dec_sz, str_sz_present_b, Size, present_.size);
  CHECK_DECODE(exer_dec_sz, str_sz_present_e, Size, present_.size);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

type record Size2 {
  integer sizeval optional
}

type record NilProduct2 {
  charstring name,
  ProductColor0 color,
  Size2 size // useNil on the field (record)
}
with { variant (size) "useNil" }

DECLARE_XER_ENCODERS(NilProduct2, np2);
DECLARE_EXER_ENCODERS(NilProduct2, np2);

const NilProduct2 absent2 := {
  name  := "no shirt",
  color := red,
  size  := { omit }
}

const NilProduct2 present2 := {
  name  := "shirt",
  color := red,
  size  := { 10 }
}

const universal charstring str_absent2_b :=
"<NilProduct2>\n" &
"\t<name>no shirt</name>\n" &
"\t<color><red/></color>\n" &
"\t<size/>\n" &
"</NilProduct2>\n" &
"\n";

const universal charstring str_absent2_e :=
"<NilProduct2 xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\'>\n" &
"\t<name>no shirt</name>\n" &
"\t<color>red</color>\n" &
"\t<size xsi:nil=\'true\'/>\n" &
"</NilProduct2>\n" &
"\n";


const universal charstring str_present2_b :=
"<NilProduct2>\n" &
"\t<name>shirt</name>\n" &
"\t<color><red/></color>\n" &
"\t<size>\n" &
"\t\t<sizeval>10</sizeval>\n" &
"\t</size>\n" &
"</NilProduct2>\n" &
"\n";

const universal charstring str_present2_e :=
"<NilProduct2>\n" &
"\t<name>shirt</name>\n" &
"\t<color>red</color>\n" &
"\t<size>10</size>\n" & // HO37920: no \t after 10
"</NilProduct2>\n" &
"\n";


testcase encode_np2_absent() runs on Nil
{
  CHECK_METHOD(bxer_enc_np2, absent2, str_absent2_b);
  CHECK_METHOD(exer_enc_np2, absent2, str_absent2_e);
}

testcase encode_np2_present() runs on Nil
{
  CHECK_METHOD(bxer_enc_np2, present2, str_present2_b);
  CHECK_METHOD(exer_enc_np2, present2, str_present2_e);
}

testcase decode_np2_absent() runs on Nil
{
  CHECK_DECODE(bxer_dec_np2, str_absent2_b, NilProduct2, absent2);
  CHECK_DECODE(exer_dec_np2, str_absent2_e, NilProduct2, absent2);
}

testcase decode_np2_present() runs on Nil
{
  CHECK_DECODE(bxer_dec_np2, str_present2_b, NilProduct2, present2);
  CHECK_DECODE(exer_dec_np2, str_present2_e, NilProduct2, present2);
}

/* * * * * * * Complex type as the optional member * * * * * * */

type record NilProduct3 {
  record {
    charstring name,
    record {
      integer sizeval,
      charstring unit
    } size optional
  } container
}
with {
  variant (container) "useNil";
  variant (container.name) "attribute";
}


DECLARE_XER_ENCODERS(NilProduct3, np3);
DECLARE_EXER_ENCODERS(NilProduct3, np3);

const NilProduct3 absent3 := {{
  name  := "no shirt",
  size  := omit
}}

const NilProduct3 present3 := {{
  name  := "shirt",
  size  := { 10, "inches" }
}}

const universal charstring str_absent3_b :=
"<NilProduct3>\n" &
"\t<container>\n" &
"\t\t<name>no shirt</name>\n" &
"\t</container>\n" &
"</NilProduct3>\n" &
"\n";

const universal charstring str_absent3_e :=
"<NilProduct3 xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\'>\n" &
"\t<container name='no shirt' xsi:nil='true'/>\n" &
"</NilProduct3>\n\n";


const universal charstring str_present3_b :=
"<NilProduct3>\n" &
"\t<container>\n" &
"\t\t<name>shirt</name>\n" &
"\t\t<size>\n" &
"\t\t\t<sizeval>10</sizeval>\n" &
"\t\t\t<unit>inches</unit>\n" &
"\t\t</size>\n" &
"\t</container>\n" &
"</NilProduct3>\n" &
"\n";

const universal charstring str_present3_e :=
"<NilProduct3>\n" &
"\t<container name='shirt'>\n" &
// no <size>
"\t\t<sizeval>10</sizeval>\n" &
"\t\t<unit>inches</unit>\n" &
// no </size>
"\t</container>\n" & // HO37920: a single tab is needed
"</NilProduct3>\n" &
"\n";


testcase encode_np3_absent() runs on Nil
{
  CHECK_METHOD(bxer_enc_np3, absent3, str_absent3_b);
  CHECK_METHOD(exer_enc_np3, absent3, str_absent3_e);
}

testcase encode_np3_present() runs on Nil
{
  CHECK_METHOD(bxer_enc_np3, present3, str_present3_b);
  CHECK_METHOD(exer_enc_np3, present3, str_present3_e);
}

testcase decode_np3_absent() runs on Nil
{
  CHECK_DECODE(bxer_dec_np3, str_absent3_b, NilProduct3, absent3);
  CHECK_DECODE(exer_dec_np3, str_absent3_e, NilProduct3, absent3);
}

testcase decode_np3_present() runs on Nil
{
  CHECK_DECODE(bxer_dec_np3, str_present3_b, NilProduct3, present3);
  CHECK_DECODE(exer_dec_np3, str_present3_e, NilProduct3, present3);
}

/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
Regression test for HO85831.
*/

type enumerated szunet {
  O,
  IO,
  CIO,
  ACIO,
  KACIO,
  AKACIO,
  VAKACIO
}

type record of integer intlist;

type union ximsa_ssp_isp_content {
  record of record {
    boolean b optional
  } bool_list,
  record of record {
    integer i optional
  } integer_list,
  record of record {
    charstring s optional
  } charstring_list,
  record of record {
    universal charstring s optional
  } ustring_list,
  record of record {
    szunet v optional
  } enum_list
  // float is always written with six decimal places, hence min. 8 characters
  // bitstring and hexstring can not be character-encodable
  // octetstring can be character-encodable (with base64), but it must have
  // an even number of hex digits
}
with {
    variant (integer_list[-]) "useNil";
    variant (charstring_list[-]) "useNil";
    variant (ustring_list[-]) "useNil";
    variant (bool_list[-])   "useNil";
    variant (bool_list[-].b) "text"; // needed for boolean to produce one-character encoding: "1" or "0"
    variant (enum_list[-])   "useNil";
};

const ximsa_ssp_isp_content imsar := {
  integer_list := {
  { 2 },
  { 42 }
  }
}

const universal charstring str_imsar_e :=
"<ximsa_ssp_isp_content>\n" &
"\t<integer_list>\n" &

"\t\t<SEQUENCE>2</SEQUENCE>\n" &
//bad: "\t\t<SEQUENCE/>\n" &

"\t\t<SEQUENCE>42</SEQUENCE>\n" &
"\t</integer_list>\n" &
"</ximsa_ssp_isp_content>\n\n" ;

const ximsa_ssp_isp_content imsastr := {
  charstring_list := {
  { "two" },
  { "!" }
  }
}

const universal charstring str_imsastr_e :=
"<ximsa_ssp_isp_content>\n" &
"\t<charstring_list>\n" &
"\t\t<SEQUENCE>two</SEQUENCE>\n" &

"\t\t<SEQUENCE>!</SEQUENCE>\n" &
//bad: "\t\t<SEQUENCE/>\n" &

"\t</charstring_list>\n" &
"</ximsa_ssp_isp_content>\n\n" ;

const ximsa_ssp_isp_content imsaustr := {
  ustring_list := {
  { "|_|" },
  { "u" }
  }
}

const universal charstring str_imsaustr_e :=
"<ximsa_ssp_isp_content>\n" &
"\t<ustring_list>\n" &
"\t\t<SEQUENCE>|_|</SEQUENCE>\n" &

"\t\t<SEQUENCE>u</SEQUENCE>\n" &
//bad: "\t\t<SEQUENCE/>\n" &

"\t</ustring_list>\n" &
"</ximsa_ssp_isp_content>\n\n" ;


const boolean file_not_found := false;
const ximsa_ssp_isp_content bimsar := {
  bool_list := {
  { true },
  { false },
  { file_not_found }
  }
}

const universal charstring str_bimsar_e :=
"<ximsa_ssp_isp_content>\n" &
"\t<bool_list>\n" &
"\t\t<SEQUENCE>1</SEQUENCE>\n" &
"\t\t<SEQUENCE>0</SEQUENCE>\n" &
"\t\t<SEQUENCE>0</SEQUENCE>\n" &
"\t</bool_list>\n" &
"</ximsa_ssp_isp_content>\n\n" ;

const ximsa_ssp_isp_content eimsar := {
  enum_list := {
  { O },
  { ACIO }
  }
}

const universal charstring str_eimsar_e :=
"<ximsa_ssp_isp_content>\n" &
"\t<enum_list>\n" &
"\t\t<SEQUENCE>O</SEQUENCE>\n" &
"\t\t<SEQUENCE>ACIO</SEQUENCE>\n" &
"\t</enum_list>\n" &
"</ximsa_ssp_isp_content>\n\n" ;


DECLARE_EXER_ENCODERS(ximsa_ssp_isp_content, x);

testcase encode_usenil_recof() runs on Nil
{
  CHECK_METHOD(exer_enc_x, imsar,   str_imsar_e);
  CHECK_METHOD(exer_enc_x, imsastr, str_imsastr_e);
  CHECK_METHOD(exer_enc_x, imsaustr,str_imsaustr_e);
  CHECK_METHOD(exer_enc_x, bimsar,  str_bimsar_e);
  CHECK_METHOD(exer_enc_x, eimsar,  str_eimsar_e);
}


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** */

// Encoding nillable multi-level structures (if present, these will contain child elements)

type record MultiNil {
  boolean available,
  record {
    record {
      boolean activated
    } inner optional,
    charstring str optional
  } val optional
} with {
  variant "useNil";
  variant(available) "attribute";
  variant(val.inner.activated) "attribute";
}

const MultiNil c_absent := { false, omit };

const universal charstring str_absent :=
"<MultiNil xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' available='false' xsi:nil='true'/>\n\n";

const MultiNil c_present := { true, { { true }, omit } };

const universal charstring str_present :=
"<MultiNil available='true'>\n" &
"\t<inner activated='true'/>\n" &
"</MultiNil>\n\n";

const universal charstring str_present2 :=
"<MultiNil xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' available='true' xsi:nil='false'>\n" &
"\t<inner activated='true'/>\n" &
"</MultiNil>\n\n";

DECLARE_EXER_ENCODERS(MultiNil, multi);

testcase encode_multi_nil() runs on Nil {
  CHECK_METHOD(exer_enc_multi, c_absent, str_absent);
  CHECK_METHOD(exer_enc_multi, c_present, str_present);
}

testcase decode_multi_nil() runs on Nil {
  CHECK_DECODE(exer_dec_multi, str_absent, MultiNil, c_absent);
  CHECK_DECODE(exer_dec_multi, str_present, MultiNil, c_present);
  CHECK_DECODE(exer_dec_multi, str_present2, MultiNil, c_present);
}

/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** */

// Encoding nillable field, which is a record type without attributes

type record NilTypeRec {
  record {
    TypeWithoutAttr nil optional
  } field
} with {
  variant(field) "useNil";
}

type record TypeWithoutAttr {
  charstring inner_field
}

const NilTypeRec c_nil_rec_absent := {
	field := {
		nil := omit
	}
};

const universal charstring str_nil_rec_absent :=
"<NilTypeRec xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>\n" &
"\t<field xsi:nil='true'/>\n" &
"</NilTypeRec>\n\n";

const NilTypeRec c_nil_rec_present_no_attr := {
	field := {
		nil := {
			inner_field := "field"
		}
	}
};

const universal charstring str_nil_rec_present_no_attr :=
"<NilTypeRec>\n" &
"\t<field>\n" &
"\t\t<inner_field>field</inner_field>\n" &
"\t</field>\n" &
"</NilTypeRec>\n\n";

DECLARE_EXER_ENCODERS(NilTypeRec, typerec);

testcase encode_NilTypeRec() runs on Nil {
  CHECK_METHOD(exer_enc_typerec, c_nil_rec_absent, str_nil_rec_absent);
  CHECK_METHOD(exer_enc_typerec, c_nil_rec_present_no_attr, str_nil_rec_present_no_attr);
}

testcase decode_NilTypeRec() runs on Nil {
  CHECK_DECODE(exer_dec_typerec, str_nil_rec_absent, NilTypeRec, c_nil_rec_absent);
  CHECK_DECODE(exer_dec_typerec, str_nil_rec_present_no_attr, NilTypeRec, c_nil_rec_present_no_attr);
}

/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** */

// Encoding nillable field, which is a record type with attributes

type record NilTypeRecInAttr {
  record {
    TypeWithAttr nil optional
  } field
} with {
  variant(field) "useNil";
}

type record TypeWithAttr {
  charstring attr1 optional,
  charstring inner_field
} with {
  variant (attr1) "attribute";
}

const NilTypeRecInAttr c_nil_rec_absent2 := {
	field := {
		nil := omit
	}
};

const universal charstring str_nil_rec_absent2 :=
"<NilTypeRecInAttr xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>\n" &
"\t<field xsi:nil='true'/>\n" &
"</NilTypeRecInAttr>\n\n";

const NilTypeRecInAttr c_nil_rec_present_attr_omit := {
	field := {
		nil := {
			attr1 := omit,
			inner_field := "field"
		}
	}
};

const universal charstring str_nil_rec_present_attr_omit :=
"<NilTypeRecInAttr>\n" &
"\t<field>\n" &
"\t\t<inner_field>field</inner_field>\n" &
"\t</field>\n" &
"</NilTypeRecInAttr>\n\n";

const NilTypeRecInAttr c_nil_rec_present_attr_present := {
	field := {
		nil := {
			attr1 := "attr",
			inner_field := "field"
		}
	}
};

const universal charstring str_nil_rec_present_attr_present :=
"<NilTypeRecInAttr>\n" &
"\t<field attr1='attr'>\n" &
"\t\t<inner_field>field</inner_field>\n" &
"\t</field>\n" &
"</NilTypeRecInAttr>\n\n";

DECLARE_EXER_ENCODERS(NilTypeRecInAttr, typerecinattr);

testcase encode_NilTypeRecInAttr() runs on Nil {
  CHECK_METHOD(exer_enc_typerecinattr, c_nil_rec_absent2, str_nil_rec_absent2);
  CHECK_METHOD(exer_enc_typerecinattr, c_nil_rec_present_attr_omit, str_nil_rec_present_attr_omit);
  CHECK_METHOD(exer_enc_typerecinattr, c_nil_rec_present_attr_present, str_nil_rec_present_attr_present);
}

testcase decode_NilTypeRecInAttr() runs on Nil {
  CHECK_DECODE(exer_dec_typerecinattr, str_nil_rec_absent2, NilTypeRecInAttr, c_nil_rec_absent2);
  CHECK_DECODE(exer_dec_typerecinattr, str_nil_rec_present_attr_omit, NilTypeRecInAttr, c_nil_rec_present_attr_omit);
  //CHECK_DECODE(exer_dec_typerecinattr, str_nil_rec_present_attr_present, NilTypeRecInAttr, c_nil_rec_present_attr_present);
}

/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** */

// Encoding nillable field with attribute, which is a record type that has attributes

type record NilTypeRecAttr {
  record {
    charstring outer_attr optional,
    TypeWithAttr nil optional
  } field
} with {
  variant(field.outer_attr) "attribute";
  variant(field) "useNil";
}

const NilTypeRecAttr c_nil_absent := {
	field := {
		outer_attr := "outer",
		nil := omit
	}
};

const universal charstring str_nil_absent :=
"<NilTypeRecAttr xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>\n" &
"\t<field outer_attr='outer' xsi:nil='true'/>\n" &
"</NilTypeRecAttr>\n\n";

const NilTypeRecAttr c_nil_present := {
	field := {
		outer_attr := "outer",
		nil := {
			attr1 := "a",
			inner_field := "field"
		}
	}
};

const universal charstring str_nil_present :=
"<NilTypeRecAttr>\n" &
"\t<field outer_attr='outer' attr1='a'>\n" &
"\t\t<inner_field>field</inner_field>\n" &
"\t</field>\n" &
"</NilTypeRecAttr>\n\n";

const NilTypeRecAttr c_nil_present2 := {
	field := {
		outer_attr := omit,
		nil := {
			attr1 := "a",
			inner_field := "field"
		}
	}
};

const universal charstring str_nil_present2 :=
"<NilTypeRecAttr>\n" &
"\t<field attr1='a'>\n" &
"\t\t<inner_field>field</inner_field>\n" &
"\t</field>\n" &
"</NilTypeRecAttr>\n\n";

const NilTypeRecAttr c_nil_present_attr_absent := {
	field := {
		outer_attr := "outer",
		nil := {
			attr1 := omit,
			inner_field := "field"
		}
	}
};

const universal charstring str_nil_present_attr_absent :=
"<NilTypeRecAttr>\n" &
"\t<field outer_attr='outer'>\n" &
"\t\t<inner_field>field</inner_field>\n" &
"\t</field>\n" &
"</NilTypeRecAttr>\n\n";

DECLARE_EXER_ENCODERS(NilTypeRecAttr, typeattr);

testcase encode_NilTypeRecAttr() runs on Nil {
  CHECK_METHOD(exer_enc_typeattr, c_nil_absent, str_nil_absent);
  CHECK_METHOD(exer_enc_typeattr, c_nil_present, str_nil_present);
  CHECK_METHOD(exer_enc_typeattr, c_nil_present2, str_nil_present2);
  CHECK_METHOD(exer_enc_typeattr, c_nil_present_attr_absent, str_nil_present_attr_absent);
}

testcase decode_NilTypeRecAttr() runs on Nil {
  CHECK_DECODE(exer_dec_typeattr, str_nil_absent, NilTypeRecAttr, c_nil_absent);
  CHECK_DECODE(exer_dec_typeattr, str_nil_present, NilTypeRecAttr, c_nil_present);
  CHECK_DECODE(exer_dec_typeattr, str_nil_present2, NilTypeRecAttr, c_nil_present2);
  CHECK_DECODE(exer_dec_typeattr, str_nil_present_attr_absent, NilTypeRecAttr, c_nil_present_attr_absent);
}

/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** */

control {
  execute(encode_nil_absent());
  execute(encode_nil_present());
  execute(decode_nil_absent());
  execute(decode_nil_present());

  execute(encode_size_absent());
  execute(encode_size_present());
  execute(decode_size_absent());
  execute(decode_size_present());

  execute(encode_np2_absent());
  execute(encode_np2_present());
  execute(decode_np2_absent());
  execute(decode_np2_present());

  execute(encode_np3_absent());
  execute(encode_np3_present());
  execute(decode_np3_absent());
  execute(decode_np3_present());
  
  execute(encode_usenil_recof());

  execute(encode_multi_nil());
  execute(decode_multi_nil());

  execute(encode_NilTypeRec());
  execute(decode_NilTypeRec());

  execute(encode_NilTypeRecInAttr());
  execute(decode_NilTypeRecInAttr());

  execute(encode_NilTypeRecAttr());
  execute(decode_NilTypeRecAttr());

  execute(encode_enum_nil());

  execute(decode_enum_nil());
}

}
with {
  encode "XML";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'"
  variant "elementFormQualified";
  variant "attributeFormQualified";
}
