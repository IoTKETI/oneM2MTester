/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Szabo, Bence Janos
 *
 ******************************************************************************/
module EmbedValuesOptional
{
modulepar boolean EmbedValues_verbose := false;
#define verbose EmbedValues_verbose
#include "../macros.ttcnin"

type component EMBO {}

/*************************** OPTIONAL EMBED-VALUES ***************************/

type record EmbedAllTypes_opt {
  record of universal charstring embed_values optional,
  integer i,
  float f,
  boolean b,
  bitstring bs,
  hexstring hs,
  octetstring os,
  charstring cs,
  universal charstring ucs,
  enumerated { Big, Small } size,
  record {
    universal charstring name,
    integer phonePrefix
  } country,
  record of bitstring bytes,
  union {
    universal charstring townName,
    integer zipCode
  } location
} with {
  variant "embedValues"
}

DECLARE_EXER_ENCODERS(EmbedAllTypes_opt, emb_all_opt);

const EmbedAllTypes_opt c_emb_all_opt := { 
  { "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen" },
  2,
  7.1,
  true,
  '110101'B,
  'ABC12'H,
  'C119B6'O,
  "nothing",
  "something",
  Small,
  { "Hungary", 36 },
  { '10011011'B, '11111111'B },
  { townName := "London" }
};

const EmbedAllTypes_opt c_emb_all_opt_omit := { 
  omit,
  2,
  7.1,
  true,
  '110101'B,
  'ABC12'H,
  'C119B6'O,
  "nothing",
  "something",
  Small,
  { "Hungary", 36 },
  { '10011011'B, '11111111'B },
  { townName := "London" }
};

const universal charstring str_emb_all_opt := 
"<EmbedAllTypes_opt>one<i>2</i>two<f>7.100000</f>three<b>true</b>four<bs>110101</bs>five<hs>ABC12</hs>six<os>C119B6</os>seven<cs>nothing</cs>eight<ucs>something</ucs>nine<size>Small</size>ten<country><name>Hungary</name><phonePrefix>36</phonePrefix></country>eleven<bytes><BIT_STRING>10011011</BIT_STRING><BIT_STRING>11111111</BIT_STRING></bytes>twelve<location><townName>London</townName></location>thirteen</EmbedAllTypes_opt>\n";

const universal charstring str_emb_all_opt_omit := 
"<EmbedAllTypes_opt><i>2</i><f>7.100000</f><b>true</b><bs>110101</bs><hs>ABC12</hs><os>C119B6</os><cs>nothing</cs><ucs>something</ucs><size>Small</size><country><name>Hungary</name><phonePrefix>36</phonePrefix></country><bytes><BIT_STRING>10011011</BIT_STRING><BIT_STRING>11111111</BIT_STRING></bytes><location><townName>London</townName></location></EmbedAllTypes_opt>\n";

testcase encode_emb_all_opt() runs on EMBO
{
  CHECK_METHOD(exer_enc_emb_all_opt, c_emb_all_opt, str_emb_all_opt);
}

testcase decode_emb_all_opt() runs on EMBO
{
  CHECK_DECODE(exer_dec_emb_all_opt, str_emb_all_opt, EmbedAllTypes_opt, c_emb_all_opt);
}

testcase encode_emb_all_opt_omit() runs on EMBO
{
  CHECK_METHOD(exer_enc_emb_all_opt, c_emb_all_opt_omit, str_emb_all_opt_omit);
}

testcase decode_emb_all_opt_omit() runs on EMBO
{
  CHECK_DECODE(exer_dec_emb_all_opt, str_emb_all_opt_omit, EmbedAllTypes_opt, c_emb_all_opt_omit);
}

/*---------------------------------------------------------------------------*/


/******************** OPTIONAL EMBED-VALUES with USE-ORDER *******************/

type record UOProductEmb_opt {
  record length(5) of universal charstring embed optional,
  record of enumerated { id, name, price, color } order,
  integer id,
  charstring name,
  float price,
  charstring color
}
with {
  variant "element";
  variant "useOrder";
  variant "embedValues";
  variant "namespace as 'http://www.example.com' prefix 'exm'";
}

DECLARE_XER_ENCODERS(UOProductEmb_opt, prod5_opt);
DECLARE_EXER_ENCODERS(UOProductEmb_opt, prod5_opt);

const UOProductEmb_opt prod5_opt := {
  embed := {"Order Id ", "", "", "US Dollars", "" },
  order := { id, color, price, name },
  id    := 100,
  name  := "shirt",
  price := 12.23,
  color := "red"
}

const universal charstring str_prod5_opt_e :=
"<exm:UOProductEmb_opt xmlns:exm=\'http://www.example.com\'>Order Id " &
"<id>100</id><color>red</color><price>12.230000</price>US Dollars<name>shirt</name></exm:UOProductEmb_opt>" &
"\n";

const universal charstring str_prod5_opt_b :=
"<UOProductEmb_opt>\n" &
"\t<embed>\n" &
"\t\t<UNIVERSAL_CHARSTRING>Order Id </UNIVERSAL_CHARSTRING>\n" &
"\t\t<UNIVERSAL_CHARSTRING/>\n" &
"\t\t<UNIVERSAL_CHARSTRING/>\n" &
"\t\t<UNIVERSAL_CHARSTRING>US Dollars</UNIVERSAL_CHARSTRING>\n" &
"\t\t<UNIVERSAL_CHARSTRING/>\n" &
"\t</embed>\n" &
"\t<order>\n" &
"\t\t<id/><color/><price/><name/>\n" &
"\t</order>\n" &
"\t<id>100</id>\n" &
"\t<name>shirt</name>\n" &
"\t<price>12.230000</price>\n" &
"\t<color>red</color>\n" &
"</UOProductEmb_opt>\n" &
"\n";


const UOProductEmb_opt prod5_opt_omit := {
  embed := omit,
  order := { id, color, price, name },
  id    := 100,
  name  := "shirt",
  price := 12.23,
  color := "red"
}

const universal charstring str_prod5_opt_omit_e :=
"<exm:UOProductEmb_opt xmlns:exm=\'http://www.example.com\'>" &
"<id>100</id><color>red</color><price>12.230000</price><name>shirt</name></exm:UOProductEmb_opt>" &
"\n";

const universal charstring str_prod5_opt_omit_b :=
"<UOProductEmb_opt>\n" &
"\t<order>\n" &
"\t\t<id/><color/><price/><name/>\n" &
"\t</order>\n" &
"\t<id>100</id>\n" &
"\t<name>shirt</name>\n" &
"\t<price>12.230000</price>\n" &
"\t<color>red</color>\n" &
"</UOProductEmb_opt>\n" &
"\n";

testcase enc_uo_emb_opt() runs on EMBO
{
  CHECK_METHOD(bxer_enc_prod5_opt, prod5_opt, str_prod5_opt_b);
  CHECK_METHOD(exer_enc_prod5_opt, prod5_opt, str_prod5_opt_e);
}

testcase dec_uo_emb_opt() runs on EMBO
{
  var UOProductEmb_opt expected := prod5_opt;
  CHECK_DECODE(bxer_dec_prod5_opt, str_prod5_opt_b, UOProductEmb_opt, expected);
  CHECK_DECODE(exer_dec_prod5_opt, str_prod5_opt_e, UOProductEmb_opt, expected);
}

testcase enc_uo_emb_opt_omit() runs on EMBO
{
  CHECK_METHOD(bxer_enc_prod5_opt, prod5_opt_omit, str_prod5_opt_omit_b);
  CHECK_METHOD(exer_enc_prod5_opt, prod5_opt_omit, str_prod5_opt_omit_e);
}

testcase dec_uo_emb_opt_omit() runs on EMBO
{
  var UOProductEmb_opt expected := prod5_opt_omit;
  CHECK_DECODE(bxer_dec_prod5_opt, str_prod5_opt_omit_b, UOProductEmb_opt, expected);
  CHECK_DECODE(exer_dec_prod5_opt, str_prod5_opt_omit_e, UOProductEmb_opt, expected);
}


/*---------------------------------------------------------------------------*/


/******************** OPTIONAL EMBED-VALUES with USE-UNION *******************/

// Simplified from vxml
type union Pitch {
  float hertz_number,
  universal charstring percent,
  integer semitone
  // in the original, they are all XSD.String
}
with {
  variant "useUnion";
}

type universal charstring thingy;

type record Prosody_opt {
  record of universal charstring embed_values optional,
  Pitch pitch optional,
  record of thingy stuff
}
with {
  variant "embedValues";
  variant (pitch) "attribute";
}

DECLARE_XER_ENCODERS(Prosody_opt, pro_opt);
DECLARE_EXER_ENCODERS(Prosody_opt, pro_opt);

const Prosody_opt p0_opt := {
  embed_values := { "hello", "world" },
  pitch := omit,
  stuff := {}
}

const universal charstring str_p0_opt :=
"<Prosody_opt>hello<stuff/>world</Prosody_opt>\n";

const Prosody_opt p1_opt := {
  embed_values := { "hello", "world" },
  pitch := omit,
  stuff := { "some stuff" }
}

const universal charstring str_p1_opt :=
"<Prosody_opt>hello<stuff><thingy>some stuff</thingy></stuff>world</Prosody_opt>\n";

// Now the interesting stuff

const Prosody_opt p0a_opt := {
  embed_values := { "hello", "world" },
  pitch := { percent := "42 per cent" },
  stuff := {}
}

const universal charstring str_p0a_opt :=
"<Prosody_opt pitch='42 per cent'>hello<stuff/>world</Prosody_opt>\n";

const Prosody_opt p0a_opt_omit := {
  embed_values := omit,
  pitch := { percent := "42 per cent" },
  stuff := {}
}

const universal charstring str_p0a_opt_omit :=
"<Prosody_opt pitch='42 per cent'><stuff/></Prosody_opt>\n";

testcase encode_pro_opt() runs on EMBO
{
  CHECK_METHOD(exer_enc_pro_opt, p0_opt , str_p0_opt );
  CHECK_METHOD(exer_enc_pro_opt, p1_opt , str_p1_opt );
  CHECK_METHOD(exer_enc_pro_opt, p0a_opt, str_p0a_opt);
  CHECK_METHOD(exer_enc_pro_opt, p0a_opt_omit, str_p0a_opt_omit);
}

testcase decode_pro_opt() runs on EMBO
{
  var Prosody_opt expected := p0_opt;
  CHECK_DECODE(exer_dec_pro_opt, str_p0_opt , Prosody_opt, expected);
  
  expected := p1_opt;
  CHECK_DECODE(exer_dec_pro_opt, str_p1_opt , Prosody_opt, expected);

  expected := p0a_opt;
//TROUBLE:  CHECK_DECODE(exer_dec_pro_opt, str_p0a_opt, Prosody_opt, expected);

  expected := p0a_opt_omit;
//TROUBLE:  CHECK_DECODE(exer_dec_pro_opt, str_p0a_opt, Prosody_opt, expected);
}


/*---------------------------------------------------------------------------*/


/******************* OPTIONAL EMBED-VALUES with ANY-ELEMENT ******************/

type record EmbedAnyElem_opt {
  record of universal charstring embed_values optional,
  integer id,
  universal charstring anyElem,
  octetstring bytes
} with {
  variant "embedValues";
  variant (anyElem) "anyElement";
}

DECLARE_EXER_ENCODERS(EmbedAnyElem_opt, emb_any_opt);

const EmbedAnyElem_opt c_emb_any_opt := { 
  { "one", "two", "three", "four" },
  2,
  "<something/>",
  'A1'O
};

const universal charstring str_emb_any_opt := 
"<EmbedAnyElem_opt>one<id>2</id>two<something/>three<bytes>A1</bytes>four</EmbedAnyElem_opt>\n";

const EmbedAnyElem_opt c_emb_any_opt_omit := { 
  omit,
  2,
  "<something/>",
  'A1'O
};

const universal charstring str_emb_any_opt_omit := 
"<EmbedAnyElem_opt><id>2</id><something/><bytes>A1</bytes></EmbedAnyElem_opt>\n";

testcase encode_emb_any_opt() runs on EMBO
{
  CHECK_METHOD(exer_enc_emb_any_opt, c_emb_any_opt, str_emb_any_opt);
  CHECK_METHOD(exer_enc_emb_any_opt, c_emb_any_opt_omit, str_emb_any_opt_omit);
}

testcase decode_emb_any_opt() runs on EMBO
{
  CHECK_DECODE(exer_dec_emb_any_opt, str_emb_any_opt, EmbedAnyElem_opt, c_emb_any_opt);
  CHECK_DECODE(exer_dec_emb_any_opt, str_emb_any_opt_omit, EmbedAnyElem_opt, c_emb_any_opt_omit);
}


/*---------------------------------------------------------------------------*/


/********************* OPTIONAL EMBED-VALUES and USE-NIL *********************/

type union j
{
  integer just,
  boolean unjust
};

type record ENil_opt {
  record of universal charstring embeddings optional,
  //must not be character-encodable, hence sequence, set, choice, se*-of...
  //integer nile optional
  j nile optional
}
with {
  variant "embedValues";
  variant "useNil";
}

const ENil_opt there_opt := {
  embeddings := { "She was ", "!" },
  nile := { just := 17 }
}

const universal charstring bstr_there_opt :=
"<ENil_opt>\n" &
"\t<embeddings>\n" &
"\t\t<UNIVERSAL_CHARSTRING>She was </UNIVERSAL_CHARSTRING>\n" &
"\t\t<UNIVERSAL_CHARSTRING>!</UNIVERSAL_CHARSTRING>\n" &
"\t</embeddings>\n" &
"\t<nile>\n" &
"\t\t<just>17</just>\n" &
"\t</nile>\n" &
"</ENil_opt>\n\n" ;

const universal charstring estr_there_opt :=
"<ENil_opt>She was <just>17</just>!</ENil_opt>\n";

const ENil_opt gone_opt := {
  embeddings := { },
  nile := omit
}

const universal charstring bstr_gone_opt :=
"<ENil_opt>\n" &
"\t<embeddings/>\n" &
"</ENil_opt>\n\n" ;

const universal charstring estr_gone_opt :=
"<ENil_opt xmlns:pixx='foox' pixx:nil='true'/>\n";

//With omit
const ENil_opt there_opt_omit := {
  embeddings := omit,
  nile := { just := 17 }
}

const universal charstring bstr_there_opt_omit :=
"<ENil_opt>\n" &
"\t<nile>\n" &
"\t\t<just>17</just>\n" &
"\t</nile>\n" &
"</ENil_opt>\n\n" ;

const universal charstring estr_there_opt_omit :=
"<ENil_opt><just>17</just></ENil_opt>\n";

const ENil_opt gone_opt_omit := {
  embeddings := omit,
  nile := omit
}

const universal charstring bstr_gone_opt_omit :=
"<ENil_opt/>\n\n" ;

const universal charstring estr_gone_opt_omit :=
"<ENil_opt xmlns:pixx='foox' pixx:nil='true'/>\n";

DECLARE_XER_ENCODERS(ENil_opt, en_opt);
DECLARE_EXER_ENCODERS(ENil_opt, en_opt);

testcase enc_enil_opt() runs on EMBO
{
  CHECK_METHOD(bxer_enc_en_opt, there_opt, bstr_there_opt);
  CHECK_METHOD(exer_enc_en_opt, there_opt, estr_there_opt);

  CHECK_METHOD(bxer_enc_en_opt, gone_opt, bstr_gone_opt);
  CHECK_METHOD(exer_enc_en_opt, gone_opt, estr_gone_opt);

  CHECK_METHOD(bxer_enc_en_opt, there_opt_omit, bstr_there_opt_omit);
  CHECK_METHOD(exer_enc_en_opt, there_opt_omit, estr_there_opt_omit);

  CHECK_METHOD(bxer_enc_en_opt, gone_opt_omit, bstr_gone_opt_omit);
  CHECK_METHOD(exer_enc_en_opt, gone_opt_omit, estr_gone_opt_omit);
}

testcase dec_enil_opt() runs on EMBO
{
  CHECK_DECODE(bxer_dec_en_opt, bstr_there_opt, ENil_opt, there_opt);
  CHECK_DECODE(exer_dec_en_opt, estr_there_opt, ENil_opt, there_opt);

  CHECK_DECODE(bxer_dec_en_opt, bstr_gone_opt, ENil_opt, gone_opt);
  //{} is converted to omit
  //CHECK_DECODE(exer_dec_en_opt, estr_gone_opt, ENil_opt, gone_opt);

  CHECK_DECODE(bxer_dec_en_opt, bstr_there_opt_omit, ENil_opt, there_opt_omit);
  CHECK_DECODE(exer_dec_en_opt, estr_there_opt_omit, ENil_opt, there_opt_omit);

  CHECK_DECODE(bxer_dec_en_opt, bstr_gone_opt_omit, ENil_opt, gone_opt_omit);
  CHECK_DECODE(exer_dec_en_opt, estr_gone_opt_omit, ENil_opt, gone_opt_omit);
}


/********************* EMBED-VALUES and Optional fields *********************/


type record EmbedValuesOptFields {
  record of universal charstring embed,
  integer first optional,
  integer second optional,
  integer third optional
}
with {
  variant "embedValues";
}

const EmbedValuesOptFields c_opt_fields := {
  embed := { "She was ", "or", "!" },
  first := omit,
  second := 17,
  third := 18
}

const universal charstring bstr_opt_fields_first :=
"<EmbedValuesOptFields>"&
"\n\t<embed>"&
"\n\t\t<UNIVERSAL_CHARSTRING>She was </UNIVERSAL_CHARSTRING>"&
"\n\t\t<UNIVERSAL_CHARSTRING>or</UNIVERSAL_CHARSTRING>"&
"\n\t\t<UNIVERSAL_CHARSTRING>!</UNIVERSAL_CHARSTRING>"&
"\n\t</embed>"&
"\n\t<second>17</second>"&
"\n\t<third>18</third>"&
"\n</EmbedValuesOptFields>"&
"\n"&
"\n";

const universal charstring estr_opt_fields_first :=
"<EmbedValuesOptFields>She was "&
"<second>17</second>or"&
"<third>18</third>!"&
"</EmbedValuesOptFields>\n";

const universal charstring bstr_opt_fields_second :=
"<EmbedValuesOptFields>"&
"\n\t<embed>"&
"\n\t\t<UNIVERSAL_CHARSTRING>She was </UNIVERSAL_CHARSTRING>"&
"\n\t\t<UNIVERSAL_CHARSTRING>or</UNIVERSAL_CHARSTRING>"&
"\n\t\t<UNIVERSAL_CHARSTRING>!</UNIVERSAL_CHARSTRING>"&
"\n\t</embed>"&
"\n\t<first>16</first>"&
"\n\t<third>18</third>"&
"\n</EmbedValuesOptFields>"&
"\n"&
"\n";

const universal charstring estr_opt_fields_second :=
"<EmbedValuesOptFields>She was "&
"<first>16</first>or"&
"<third>18</third>!"&
"</EmbedValuesOptFields>\n";

const universal charstring bstr_opt_fields_third :=
"<EmbedValuesOptFields>"&
"\n\t<embed>"&
"\n\t\t<UNIVERSAL_CHARSTRING>She was </UNIVERSAL_CHARSTRING>"&
"\n\t\t<UNIVERSAL_CHARSTRING>or</UNIVERSAL_CHARSTRING>"&
"\n\t\t<UNIVERSAL_CHARSTRING>!</UNIVERSAL_CHARSTRING>"&
"\n\t</embed>"&
"\n\t<first>16</first>"&
"\n\t<second>17</second>"&
"\n</EmbedValuesOptFields>"&
"\n"&
"\n";

const universal charstring estr_opt_fields_third :=
"<EmbedValuesOptFields>She was "&
"<first>16</first>or"&
"<second>17</second>!"&
"</EmbedValuesOptFields>\n";

const universal charstring bstr_opt_fields_all :=
"<EmbedValuesOptFields>"&
"\n\t<embed>"&
"\n\t\t<UNIVERSAL_CHARSTRING>She was </UNIVERSAL_CHARSTRING>"&
"\n\t</embed>"&
"\n</EmbedValuesOptFields>"&
"\n"&
"\n";

const universal charstring estr_opt_fields_all :=
"<EmbedValuesOptFields>She was "&
"</EmbedValuesOptFields>\n";

DECLARE_XER_ENCODERS(EmbedValuesOptFields, opt_fields);
DECLARE_EXER_ENCODERS(EmbedValuesOptFields, opt_fields);

testcase enc_opt_fields() runs on EMBO
{
  CHECK_METHOD(bxer_enc_opt_fields, c_opt_fields, bstr_opt_fields_first);
  CHECK_METHOD(exer_enc_opt_fields, c_opt_fields, estr_opt_fields_first);

  var EmbedValuesOptFields local_opt_fields := c_opt_fields;
  local_opt_fields.first := 16;
  local_opt_fields.second := omit;
  CHECK_METHOD(bxer_enc_opt_fields, local_opt_fields, bstr_opt_fields_second);
  CHECK_METHOD(exer_enc_opt_fields, local_opt_fields, estr_opt_fields_second);

  local_opt_fields.second := 17;
  local_opt_fields.third := omit;
  CHECK_METHOD(bxer_enc_opt_fields, local_opt_fields, bstr_opt_fields_third);
  CHECK_METHOD(exer_enc_opt_fields, local_opt_fields, estr_opt_fields_third);

  local_opt_fields.embed := { "She was " };
  local_opt_fields.first := omit;
  local_opt_fields.second := omit;
  local_opt_fields.third := omit;
  CHECK_METHOD(bxer_enc_opt_fields, local_opt_fields, bstr_opt_fields_all);
  CHECK_METHOD(exer_enc_opt_fields, local_opt_fields, estr_opt_fields_all);
}

testcase dec_opt_fields() runs on EMBO
{
  CHECK_DECODE(bxer_dec_opt_fields, bstr_opt_fields_first, EmbedValuesOptFields, c_opt_fields);
  CHECK_DECODE(exer_dec_opt_fields, estr_opt_fields_first, EmbedValuesOptFields, c_opt_fields);

  var EmbedValuesOptFields local_opt_fields := c_opt_fields;
  local_opt_fields.first := 16;
  local_opt_fields.second := omit;
  CHECK_DECODE(bxer_dec_opt_fields, bstr_opt_fields_second, EmbedValuesOptFields, local_opt_fields);
  CHECK_DECODE(exer_dec_opt_fields, estr_opt_fields_second, EmbedValuesOptFields, local_opt_fields);

  local_opt_fields.second := 17;
  local_opt_fields.third := omit;
  CHECK_DECODE(bxer_dec_opt_fields, bstr_opt_fields_third, EmbedValuesOptFields, local_opt_fields);
  CHECK_DECODE(exer_dec_opt_fields, estr_opt_fields_third, EmbedValuesOptFields, local_opt_fields);

  local_opt_fields.embed := { "She was " };
  local_opt_fields.first := omit;
  local_opt_fields.second := omit;
  local_opt_fields.third := omit;
  CHECK_DECODE(bxer_dec_opt_fields, bstr_opt_fields_all, EmbedValuesOptFields, local_opt_fields);
  CHECK_DECODE(exer_dec_opt_fields, estr_opt_fields_all, EmbedValuesOptFields, local_opt_fields);
}

control
{
    execute(encode_emb_all_opt());
    execute(decode_emb_all_opt());

    execute(encode_emb_all_opt_omit());
    execute(decode_emb_all_opt_omit());

    execute(enc_uo_emb_opt());
    execute(dec_uo_emb_opt());

    execute(enc_uo_emb_opt_omit());
    execute(dec_uo_emb_opt_omit());

    execute(encode_pro_opt());
    execute(decode_pro_opt());

    execute(encode_emb_any_opt());
    execute(decode_emb_any_opt());

    execute(enc_enil_opt());
    execute(dec_enil_opt());

    execute(enc_opt_fields());
    execute(dec_opt_fields());
}

}
with {
encode "XML"
  variant "controlNamespace 'foox' prefix 'pixx'"
}
