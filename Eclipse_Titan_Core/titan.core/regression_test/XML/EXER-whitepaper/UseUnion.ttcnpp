/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *   Delic, Adam
 *   Raduly, Csaba
 *
 ******************************************************************************/
module UseUnion {
modulepar boolean UseUnion_verbose := false;
#define verbose UseUnion_verbose
#include "../macros.ttcnin"

type component UU {}

type union ProductId {
  integer c1,
  integer c2,
  integer c3
}
with {
  variant "useUnion"
  variant (c1) "XSD:integer";
  variant (c2) "XSD:integer";
  variant (c3) "XSD:integer";
}

type record ProductUU {
  ProductId  id,
  float      price,
  charstring color
}
with {
  variant "element";
  variant "namespace as 'http://www.example.com' prefix 'exm'";
}

const ProductUU uuval := {
  id := { c2 := 100 },
  price := 25.34,
  color := "green"
}

const ProductUU uuval_decoded := {
  id := { c1 := 100 },
  price := 25.34,
  color := "green"
}

DECLARE_XER_ENCODERS(ProductUU, uu);
DECLARE_EXER_ENCODERS(ProductUU, uu);

const universal charstring str_uu_e :=
"<exm:ProductUU xmlns:exm=\'http://www.example.com\' xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\'>\n" &
"\t<id xmlns:xsd='http://www.w3.org/2001/XMLSchema' xsi:type='xsd:integer'>100</id>\n" &
"\t<price>25.340000</price>\n" &
"\t<color>green</color>\n" &
"</exm:ProductUU>\n" &
"\n";

const universal charstring str_uu_b :=
"<ProductUU>\n" &
"\t<id>\n" &
"\t\t<c2>100</c2>\n" &
"\t</id>\n" &
"\t<price>25.340000</price>\n" &
"\t<color>green</color>\n" &
"</ProductUU>\n" &
"\n";

testcase encode_uu() runs on UU
{
  CHECK_METHOD(bxer_enc_uu, uuval, str_uu_b);
  CHECK_METHOD(exer_enc_uu, uuval, str_uu_e);
}

testcase decode_uu() runs on UU
{
  CHECK_DECODE(bxer_dec_uu, str_uu_b, ProductUU, uuval);
  CHECK_DECODE(exer_dec_uu, str_uu_e, ProductUU, uuval_decoded); // 100 is decoded into c1
}

/* * * * * * * * HM81496 * * * * * * * * */

/* From the following XSD:

<xsd:simpleType name="E21named">
  <xsd:union memberTypes="xsd:integer xsd:boolean"/>
</xsd:simpleType>
*/
type union E21named
{
  integer integer_,
  boolean boolean_
}
with {
  variant "useUnion";
  variant (integer_) "name as 'integer'";
  variant (boolean_) "name as 'boolean'";
  variant (integer_) "XSD:integer";
  variant (boolean_) "text 'true' as '1'";
  variant (boolean_) "text 'false' as '0'";
  variant (boolean_) "XSD:boolean";
};

DECLARE_XER_ENCODERS(E21named, e21n);
DECLARE_EXER_ENCODERS(E21named, e21n);

const E21named e21_i := { integer_ := 1 }
const E21named e21_b := { boolean_ := true }


const universal charstring estr_e21_i :=
"<E21named xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xsi:type='xsd:integer'>1</E21named>\n\n";

const universal charstring estr_e21_b :=
"<E21named xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xsi:type='xsd:boolean'>1</E21named>\n\n";


testcase encode_e21n() runs on UU
{
  CHECK_METHOD(exer_enc_e21n, e21_i, estr_e21_i);

  CHECK_METHOD(exer_enc_e21n, e21_b, estr_e21_b);
}

testcase decode_e21n() runs on UU
{
  CHECK_DECODE(exer_dec_e21n, estr_e21_i, E21named, e21_i);

  CHECK_DECODE(exer_dec_e21n, estr_e21_b, E21named, e21_b);
}

/* From the following XSD:

<xsd:simpleType name="e21unnamed">
  <xsd:union>
    <xsd:simpleType>
      <xsd:restriction base="string"/>
    </xsd:simpleType>
    <xsd:simpleType>
      <xsd:restriction base="float"/>
    </xsd:simpleType>
  </xsd:union>
</xsd:simpleType>
*/

type union E21unnamed
{
  charstring alt_,
  float alt_1
}
with {
  variant "useUnion";
  variant (alt_) "name as ''";
  variant (alt_1) "name as ''";
};

DECLARE_XER_ENCODERS(E21unnamed, e21u);
DECLARE_EXER_ENCODERS(E21unnamed, e21u);

const E21unnamed e21u_0 := { alt_  := "Howdy!" }
const E21unnamed e21u_1 := { alt_1 := 2.5 }
const E21unnamed e21u_misidentified := { alt_  := "2.500000" }

const universal charstring estr_e21u_0 :=
"<E21unnamed>Howdy!</E21unnamed>\n\n"; // no type attribute due to empty "name as ''"

const universal charstring estr_e21u_1 :=
"<E21unnamed>2.500000</E21unnamed>\n\n"; // no type attribute due to empty "name as ''"

testcase encode_e21u() runs on UU
{
  CHECK_METHOD(exer_enc_e21u, e21u_0, estr_e21u_0);

  CHECK_METHOD(exer_enc_e21u, e21u_1, estr_e21u_1);
}

testcase decode_e21u() runs on UU
{
  CHECK_DECODE(exer_dec_e21u, estr_e21u_0, E21unnamed, e21u_0);

  // this would be the correct decode
  //CHECK_DECODE(exer_dec_e21u, estr_e21u_1, E21unnamed, e21u_1);

  // unfortunately, without a type identification attribute,
  // the decoder can't tell whether "2.500000" is a float or just some random string
  CHECK_DECODE(exer_dec_e21u, estr_e21u_1, E21unnamed, e21u_misidentified);
}


/* * * * * * * * * USE-UNION and ATTRIBUTE * * * * * * * * */

// Simplified from vxml
type union Pitch {
  float hertz_number,
  universal charstring percent,
  integer semitone
  // in the original, they are all XSD.String
}
with {
  variant "useUnion";
}

type universal charstring thingy;

type record Prosody {
  record of universal charstring embed_values,
  Pitch pitch optional,
  record of thingy stuff
}
with {
  variant "embedValues";
  variant (pitch) "attribute";
}

DECLARE_XER_ENCODERS(Prosody, pro);
DECLARE_EXER_ENCODERS(Prosody, pro);

const Prosody p0 := {
  embed_values := { "hello", "world" },
  pitch := omit,
  stuff := {}
}

const universal charstring str_p0 :=
"<Prosody>hello<stuff/>world</Prosody>\n";

const Prosody p1 := {
  embed_values := { "hello", "world" },
  pitch := omit,
  stuff := { "some stuff" }
}

const universal charstring str_p1 :=
"<Prosody>hello<stuff><thingy>some stuff</thingy></stuff>world</Prosody>\n";

// Now the interesting stuff

const Prosody p0a := {
  embed_values := { "hello", "world" },
  pitch := { percent := "42 per cent" },
  stuff := {}
}

const universal charstring str_p0a :=
"<Prosody pitch='42 per cent'>hello<stuff/>world</Prosody>\n";

testcase encode_pro() runs on UU
{
  CHECK_METHOD(exer_enc_pro, p0 , str_p0 );
  CHECK_METHOD(exer_enc_pro, p1 , str_p1 );
  CHECK_METHOD(exer_enc_pro, p0a, str_p0a);
  //CHECK_METHOD(exer_enc_pro, p1, str_p1);
}

testcase decode_pro() runs on UU
{
  var Prosody expected := p0;
  CHECK_DECODE(exer_dec_pro, str_p0 , Prosody, expected);
  
  expected := p1;
  CHECK_DECODE(exer_dec_pro, str_p1 , Prosody, expected);

  expected := p0a;
//TROUBLE:  CHECK_DECODE(exer_dec_pro, str_p0a, Prosody, expected);
}

/* * * * * * * * * * HO58864 * * * * * * * * * * */

group gmcl {

type union GmlcaddType {
  enumerated { aLL } alt_1,
  charstring alt_ length(3 .. 15)
}
with {
  variant "useUnion";
  variant (alt_) "name as '' ";
  variant (alt_1) "name as '' ";
  variant (alt_1) "text 'aLL' as capitalized";
  variant (alt_, alt_1) "namespace as 'urn:gmlc' prefix 'gm' ";  
};

type record GMLCAddressData {
  // the original has another field
  GmlcaddType gmlcadd
};

}
with {
  variant "elementFormQualified";
}

DECLARE_EXER_ENCODERS(GMLCAddressData, gmlc);

const GMLCAddressData c_gmcl_alt := {
  gmlcadd := { alt_ := "3141592653" }
}

const universal charstring str_gmcl_alt :=
"<GMLCAddressData xmlns:gm='urn:gmlc'>\n" &
"\t<gmlcadd>3141592653</gmlcadd>\n" &
"</GMLCAddressData>\n\n";

const GMLCAddressData c_gmcl_alt1 := {
  gmlcadd := { alt_1 := aLL }
}

const universal charstring str_gmcl_alt1 :=
"<GMLCAddressData xmlns:gm='urn:gmlc'>\n" &
"\t<gmlcadd>ALL</gmlcadd>\n" &
"</GMLCAddressData>\n\n";


testcase encode_gmcl() runs on UU
{
  CHECK_METHOD(exer_enc_gmlc, c_gmcl_alt , str_gmcl_alt );
  CHECK_METHOD(exer_enc_gmlc, c_gmcl_alt1, str_gmcl_alt1);
}

testcase decode_gmcl() runs on UU
{
  CHECK_DECODE(exer_dec_gmlc, str_gmcl_alt , GMLCAddressData, c_gmcl_alt );
  CHECK_DECODE(exer_dec_gmlc, str_gmcl_alt1, GMLCAddressData, c_gmcl_alt1);
}

// == == == == == == == == == == == == == ==

// USE-UNION in a record-of (traditional or with the LIST coding instruction)

type record of integer RoI with { variant "list" }

type union UUVal {
  bitstring bs,
  integer i,
  RoI roi,
  boolean b,
  octetstring os,
  hexstring hs,
  float f,
  enumerated { Tiny, Small, Medium, Big, Huge } size,
  verdicttype vt,
  charstring cs,
  universal charstring ucs
} with {
  variant "name as 'UU'";
  variant "useUnion";
  variant (i) "XSD:integer";
  variant (b) "XSD:boolean";
  variant (os) "XSD:hexBinary";
  variant (hs) "XSD:token";
  variant (f) "XSD:float";
  variant (size) "XSD:string";
  variant (vt) "XSD:NCName"
  variant (cs) "XSD:normalizedString";
  variant (ucs) "XSD:Name";
}

type record of UUVal UURec;

type record of UUVal UUList with { variant "list" };

DECLARE_EXER_ENCODERS(UURec, uu_rec);
DECLARE_EXER_ENCODERS(UUList, uu_list);

const UURec c_uu_rec := {
  { i := 19 },
  { cs := "xyz" },
  { size := Small },
  { bs := '1101'B },
  { b := true },
  { vt := inconc },
  { f := 1.6 },
  { hs := '164FA'H },
  { os := '1BC6'O },
  { ucs := "ab" & char(0, 0, 1, 113) },
  { roi := { 1, 4, 5, 7, 6, 6, 4 } } 
}

const UUList c_uu_list := {
  { i := 19 },
  { cs := "xyz" },
  { size := Small },
  { bs := '1101'B },
  { b := true },
  { vt := inconc },
  { f := 1.6 },
  { hs := '164FA'H },
  { os := '1BC6'O }
  //{ ucs := "ab" & char(0, 0, 1, 113) }, --- would be decoded into charstring
  //{ roi := { 1, 4, 5, 7, 6, 6, 4 } }    --- would be decoded into 7 integers instead of 1 RoI
}

const universal charstring str_uu_rec :=
"<UURec xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>\n" &
"\t<UU xmlns:xsd='http://www.w3.org/2001/XMLSchema' xsi:type='xsd:integer'>19</UU>\n" &
"\t<UU xmlns:xsd='http://www.w3.org/2001/XMLSchema' xsi:type='xsd:normalizedString'>xyz</UU>\n" &
"\t<UU xmlns:xsd='http://www.w3.org/2001/XMLSchema' xsi:type='xsd:string'>Small</UU>\n" &
"\t<UU>1101</UU>\n" &
"\t<UU xmlns:xsd='http://www.w3.org/2001/XMLSchema' xsi:type='xsd:boolean'>true</UU>\n" &
"\t<UU xmlns:xsd='http://www.w3.org/2001/XMLSchema' xsi:type='xsd:NCName'>inconc</UU>\n" &
"\t<UU xmlns:xsd='http://www.w3.org/2001/XMLSchema' xsi:type='xsd:float'>1.600000</UU>\n" &
"\t<UU xmlns:xsd='http://www.w3.org/2001/XMLSchema' xsi:type='xsd:token'>164FA</UU>\n" &
"\t<UU xmlns:xsd='http://www.w3.org/2001/XMLSchema' xsi:type='xsd:hexBinary'>1BC6</UU>\n" &
"\t<UU xmlns:xsd='http://www.w3.org/2001/XMLSchema' xsi:type='xsd:Name'>ab" & char(0, 0, 1, 113) & "</UU>\n" &
"\t<UU>1 4 5 7 6 6 4</UU>\n" &
"</UURec>\n\n";

const universal charstring str_uu_list :=
"<UUList xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>19 xyz Small 1101 " &
"true inconc 1.600000 164FA 1BC6</UUList>\n\n";

testcase encode_uu_rec() runs on UU 
{
  CHECK_METHOD(exer_enc_uu_rec, c_uu_rec, str_uu_rec);
}

testcase decode_uu_rec() runs on UU
{
  CHECK_DECODE(exer_dec_uu_rec, str_uu_rec, UURec, c_uu_rec);
}

testcase encode_uu_list() runs on UU {
  CHECK_METHOD(exer_enc_uu_list, c_uu_list, str_uu_list);
}

testcase decode_uu_list() runs on UU
{
  CHECK_DECODE(exer_dec_uu_list, str_uu_list, UUList, c_uu_list);
}

// == == == == == == == == == == == == == ==

// Encoding and decoding USE-UNION without the type attribute (with ATTRIBUTE and UNTAGGED)

type record UUNoAttr {
  UUVal uuatr,
  UUVal uuelem
} with {
  variant(uuatr) "attribute";
  variant(uuelem) "untagged";
}

DECLARE_EXER_ENCODERS(UUNoAttr, uu_no_attr);

const UUNoAttr c_uu_na1 := { { hs := '117BA'H }, { size := Huge } };

const universal charstring str_uu_na1 :=
"<UUNoAttr xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' uuatr='117BA' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xsi:type='xsd:string'>Huge</UUNoAttr>\n\n";

const UUNoAttr c_uu_na2 := { { roi := { 1, 2, 3, 4 } }, { roi := { 5, 6, 7, 8 } } };

const universal charstring str_uu_na2 :=
"<UUNoAttr xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' uuatr='1 2 3 4'>5 6 7 8</UUNoAttr>\n\n";

testcase encode_uu_no_attr() runs on UU 
{
  CHECK_METHOD(exer_enc_uu_no_attr, c_uu_na1, str_uu_na1);
  CHECK_METHOD(exer_enc_uu_no_attr, c_uu_na2, str_uu_na2);
}

testcase decode_uu_no_attr() runs on UU
{
  CHECK_DECODE(exer_dec_uu_no_attr, str_uu_na1, UUNoAttr, c_uu_na1);
  CHECK_DECODE(exer_dec_uu_no_attr, str_uu_na2, UUNoAttr, c_uu_na2);
}

// == == == == == == == == == == == == == ==

control {
  execute(encode_uu());
  execute(decode_uu());

  execute(encode_e21n());
  execute(decode_e21n());

  execute(encode_e21u());
  execute(decode_e21u());

  execute(encode_pro());
  execute(decode_pro());

  execute(encode_gmcl());
  execute(decode_gmcl());

  execute(encode_uu_rec());
  execute(decode_uu_rec());
  execute(encode_uu_list());
  execute(decode_uu_list());

  execute(encode_uu_no_attr());
  execute(decode_uu_no_attr());
}

}
with {
encode "XML"
variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'"
}
