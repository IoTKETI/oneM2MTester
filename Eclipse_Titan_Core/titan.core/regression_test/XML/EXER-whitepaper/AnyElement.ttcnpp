/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *   Raduly, Csaba
 *
 ******************************************************************************/
module AnyElement
{
modulepar boolean AnyElement_verbose := false;
#define verbose AnyElement_verbose
#include "../macros.ttcnin"

type component AE {}

type record AEProduct {
  charstring name,
  integer    price,
  universal charstring info
}
with {
  variant (info) "anyElement from 'http://www.example.com/A', "
  "'http://www.example.com/B', unqualified"
}

DECLARE_XER_ENCODERS(AEProduct, ae);
DECLARE_EXER_ENCODERS(AEProduct, ae);

const AEProduct aep := {
  name  := "Trousers",
  price := 20,
  info  := "<xyz:color xmlns:xyz=""http://www.example.com/A"" available=""true"">red</xyz:color>"
}

const universal charstring str_ae_e :=
"<AEProduct>\n" &
"\t<name>Trousers</name>\n" &
"\t<price>20</price>\n" &
"\t<xyz:color xmlns:xyz=\"http://www.example.com/A\" available=\"true\">red</xyz:color>\n" &
"</AEProduct>\n\n";

const universal charstring str_ae_b :=
"<AEProduct>\n" &
"\t<name>Trousers</name>\n" &
"\t<price>20</price>\n" &
"\t<info>&lt;xyz:color xmlns:xyz=&quot;http://www.example.com/A&quot; available=&quot;true&quot;&gt;red&lt;/xyz:color&gt;</info>\n" &
"</AEProduct>\n\n";

testcase encode_ae() runs on AE
{
  CHECK_METHOD(bxer_enc_ae, aep, str_ae_b);
  CHECK_METHOD(exer_enc_ae, aep, str_ae_e);
}

testcase decode_ae() runs on AE
{
  CHECK_DECODE(bxer_dec_ae, str_ae_b, AEProduct, aep);
  CHECK_DECODE(exer_dec_ae, str_ae_e, AEProduct, aep);
}

// .- -. -.. /  -. --- .-- /  ..-. --- .-. /  ... --- -- . - .... .. -. --. 
//  -.-. --- -- .--. .-.. . - . .-.. -.-- /  -.. .. ..-. ..-. . .-. . -. -

type record AFProduct {
  charstring name,
  integer    price,
  universal charstring info
}
with {
  variant (info) "anyElement except 'http://www.example.com/A', 'http://www.example.com/B', unqualified"
}

DECLARE_XER_ENCODERS(AFProduct, af);
DECLARE_EXER_ENCODERS(AFProduct, af);

const AFProduct afp := {
  name  := "Trousers",
  price := 20,
  info  := "<xyz:color xmlns:xyz=""http://www.example.com/C"" available=""true"">red</xyz:color>"
}

const universal charstring str_af_e :=
"<AFProduct>\n" &
"\t<name>Trousers</name>\n" &
"\t<price>20</price>\n" &
"\t<xyz:color xmlns:xyz=\"http://www.example.com/C\" available=\"true\">red</xyz:color>\n" &
"</AFProduct>\n\n";

const universal charstring str_af_b :=
"<AFProduct>\n" &
"\t<name>Trousers</name>\n" &
"\t<price>20</price>\n" &
"\t<info>&lt;xyz:color xmlns:xyz=&quot;http://www.example.com/C&quot; available=&quot;true&quot;&gt;red&lt;/xyz:color&gt;</info>\n" &
"</AFProduct>\n\n";

testcase encode_af() runs on AE
{
  CHECK_METHOD(bxer_enc_af, afp, str_af_b);
  CHECK_METHOD(exer_enc_af, afp, str_af_e);
}

testcase decode_af() runs on AE
{
  CHECK_DECODE(bxer_dec_af, str_af_b, AFProduct, afp);
  CHECK_DECODE(exer_dec_af, str_af_e, AFProduct, afp);
}

// .- -. -.. /  -. --- .-- /  ..-. --- .-. /  ... --- -- . - .... .. -. --. 
//  -.-. --- -- .--. .-.. . - . .-.. -.-- /  -.. .. ..-. ..-. . .-. . -. -

type record of universal charstring anys
with {
  variant ([-]) "anyElement from unqualified";
}

DECLARE_XER_ENCODERS(anys, anys);
DECLARE_EXER_ENCODERS(anys, anys);

const anys a3 := {
  "<captain>You know what you doing</captain>",
  "<move>all ZIG</move>",
  "<for>Great justice!</for>"
}

const anys a0 := {}

const universal charstring estr_a3 :=
  "<anys>\n" &
  "\t<captain>You know what you doing</captain>\n" &
  "\t<move>all ZIG</move>\n" &
  "\t<for>Great justice!</for>\n" &
  "</anys>\n\n";

const universal charstring bstr_a3 :=
  "<anys>\n" &
  "\t<UNIVERSAL_CHARSTRING>&lt;captain&gt;You know what you doing&lt;/captain&gt;</UNIVERSAL_CHARSTRING>\n" &
  "\t<UNIVERSAL_CHARSTRING>&lt;move&gt;all ZIG&lt;/move&gt;</UNIVERSAL_CHARSTRING>\n" &
  "\t<UNIVERSAL_CHARSTRING>&lt;for&gt;Great justice!&lt;/for&gt;</UNIVERSAL_CHARSTRING>\n" &
  "</anys>\n\n";

const universal charstring estr_a0empty :=
  "<anys/>\n\n";

const universal charstring bstr_a0empty :=
  "<anys/>\n\n";

// not empty-element, for decoding only
const universal charstring estr_a0 :=
  "<anys>\n" &
  "</anys>\n\n";

const universal charstring bstr_a0 :=
  "<anys>\n" &
  "</anys>\n\n";


testcase encode_anys() runs on AE
{
  CHECK_METHOD(bxer_enc_anys, a3, bstr_a3);
  CHECK_METHOD(exer_enc_anys, a3, estr_a3);

  CHECK_METHOD(bxer_enc_anys, a0, bstr_a0empty);
  CHECK_METHOD(exer_enc_anys, a0, estr_a0empty);
}

testcase decode_anys() runs on AE
{
  CHECK_DECODE(bxer_dec_anys, bstr_a3, anys, a3);
  CHECK_DECODE(exer_dec_anys, estr_a3, anys, a3);

  CHECK_DECODE(bxer_dec_anys, bstr_a0empty, anys, a0);
  CHECK_DECODE(exer_dec_anys, estr_a0empty, anys, a0);
  CHECK_DECODE(bxer_dec_anys, bstr_a0, anys, a0);
  CHECK_DECODE(exer_dec_anys, estr_a0, anys, a0);
}

// .- -. -.. /  -. --- .-- /  ..-. --- .-. /  ... --- -- . - .... .. -. --. 
//  -.-. --- -- .--. .-.. . - . .-.. -.-- /  -.. .. ..-. ..-. . .-. . -. -

type record utanys {
  record of universal charstring any_list,
  charstring enemy optional,
  integer zigs optional
}
with {
  variant (any_list) "untagged";
  variant (any_list[-]) "anyElement from unqualified";
}

DECLARE_XER_ENCODERS(utanys, utanys);
DECLARE_EXER_ENCODERS(utanys, utanys);

const utanys ua3 := { any_list := {
  "<captain>You know what you doing</captain>",
  "<move>all ZIG</move>",
  "<for>Great justice!</for>"
  },
  enemy := "CATS",
  zigs := omit
}

const utanys ua7 := { any_list := {
  "<all/>", "<your/>", "<base/>", "<are/>", "<belong/>", "<to/>", "<us/>"
  },
  enemy := "CATS",
  zigs := omit
}

const utanys ua0 := {{}, omit, omit}

const universal charstring estr_ua3 :=
  "<utanys>\n" &
  "\t<captain>You know what you doing</captain>\n" &
  "\t<move>all ZIG</move>\n" &
  "\t<for>Great justice!</for>\n" &
  "\t<enemy>CATS</enemy>\n" &
  "</utanys>\n\n";

const universal charstring estr_ua7 :=
  "<utanys>\n" &
  "\t<all/>\n" &
  "\t<your/>\n" &
  "\t<base/>\n" &
  "\t<are/>\n" &
  "\t<belong/>\n" &
  "\t<to/>\n" &
  "\t<us/>\n" &  
  "\t<enemy>CATS</enemy>\n" &
  "</utanys>\n\n";

const universal charstring bstr_ua3 :=
  "<utanys>\n" &
  "\t<any_list>\n" &
  "\t\t<UNIVERSAL_CHARSTRING>&lt;captain&gt;You know what you doing&lt;/captain&gt;</UNIVERSAL_CHARSTRING>\n" &
  "\t\t<UNIVERSAL_CHARSTRING>&lt;move&gt;all ZIG&lt;/move&gt;</UNIVERSAL_CHARSTRING>\n" &
  "\t\t<UNIVERSAL_CHARSTRING>&lt;for&gt;Great justice!&lt;/for&gt;</UNIVERSAL_CHARSTRING>\n" &
  "\t</any_list>\n" &
  "\t<enemy>CATS</enemy>\n" &
  "</utanys>\n\n";

const universal charstring estr_ua0empty :=
  "<utanys/>\n\n";

const universal charstring bstr_ua0empty :=
  "<utanys>\n" &
  "\t<any_list/>\n" &
//  "\t<enemy/>\n" &
  "</utanys>\n\n";

// not empty-element, for decoding only
const universal charstring estr_ua0 :=
  "<utanys>\n" &
  "</utanys>\n\n";

const universal charstring bstr_ua0 :=
  "<utanys>\n" &
  "\t<any_list>\n" &
  "\t</any_list>\n" &
  "</utanys>\n\n";


testcase encode_utanys() runs on AE
{
  CHECK_METHOD(bxer_enc_utanys, ua3, bstr_ua3);
  CHECK_METHOD(exer_enc_utanys, ua3, estr_ua3);
  CHECK_METHOD(exer_enc_utanys, ua7, estr_ua7);

  CHECK_METHOD(bxer_enc_utanys, ua0, bstr_ua0empty);
  CHECK_METHOD(exer_enc_utanys, ua0, estr_ua0empty);
}

testcase decode_utanys() runs on AE
{
  CHECK_DECODE(bxer_dec_utanys, bstr_ua3, utanys, ua3);
  CHECK_DECODE(exer_dec_utanys, estr_ua3, utanys, ua3);
  CHECK_DECODE(exer_dec_utanys, estr_ua7, utanys, ua7);

  CHECK_DECODE(bxer_dec_utanys, bstr_ua0empty, utanys, ua0);
  CHECK_DECODE(exer_dec_utanys, estr_ua0empty, utanys, ua0);
  CHECK_DECODE(bxer_dec_utanys, bstr_ua0, utanys, ua0);
  CHECK_DECODE(exer_dec_utanys, estr_ua0, utanys, ua0);

}

/* * * * * * * * * * * * */

// ANY-ELEMENT as the only member of a record is a corner case
type record anys_and_only_anys {
  record of universal charstring elements
}
with {
  variant (elements) "anyElement"
}

DECLARE_XER_ENCODERS(anys_and_only_anys, aaoa);
DECLARE_EXER_ENCODERS(anys_and_only_anys, aaoa);

const anys_and_only_anys noanys := { elements := {} }
const universal charstring bstr_noanys :=
"<anys_and_only_anys>\n" &
"\t<elements/>\n" &
"</anys_and_only_anys>\n\n";
const universal charstring estr_noanys :=
"<anys_and_only_anys/>\n\n";

const anys_and_only_anys marx := {
  elements := {"<chico/>", "<groucho/>", "<karl></karl>"}
}
const universal charstring estr_marx :=
"<anys_and_only_anys>\n" &
"\t<chico/>\n" &
"\t<groucho/>\n" &
"\t<karl></karl>\n" &
"</anys_and_only_anys>\n\n";

const universal charstring bstr_marx :=
"<anys_and_only_anys>\n" &
"\t<elements>\n" &
"\t\t<UNIVERSAL_CHARSTRING>&lt;chico/&gt;</UNIVERSAL_CHARSTRING>\n" &
"\t\t<UNIVERSAL_CHARSTRING>&lt;groucho/&gt;</UNIVERSAL_CHARSTRING>\n" &
"\t\t<UNIVERSAL_CHARSTRING>&lt;karl&gt;&lt;/karl&gt;</UNIVERSAL_CHARSTRING>\n" &
"\t</elements>\n" &
"</anys_and_only_anys>\n\n";

// When decoding EXER, karl becomes an empty element too (?)
const anys_and_only_anys marx_dec := {
  elements := {"<chico/>", "<groucho/>", "<karl/>"}
}

testcase encode_only() runs on AE
{
  CHECK_METHOD(bxer_enc_aaoa, noanys, bstr_noanys);
  CHECK_METHOD(exer_enc_aaoa, noanys, estr_noanys);

  CHECK_METHOD(bxer_enc_aaoa, marx, bstr_marx);
  CHECK_METHOD(exer_enc_aaoa, marx, estr_marx);
}

testcase decode_only() runs on AE
{
  CHECK_DECODE(bxer_dec_aaoa, bstr_noanys, anys_and_only_anys, noanys);
  CHECK_DECODE(exer_dec_aaoa, estr_noanys, anys_and_only_anys, noanys);

  CHECK_DECODE(bxer_dec_aaoa, bstr_marx, anys_and_only_anys, marx);
  CHECK_DECODE(exer_dec_aaoa, estr_marx, anys_and_only_anys, marx_dec);
}

/* * * * * * * * * * * * */
// ANY-ELEMENT with only one allowed namespace.

type record AEProductSingle {
  charstring name,
  integer    price,
  universal charstring info
}
with {
  variant (info) "anyElement from 'http://www.example.com/A'"
}

DECLARE_XER_ENCODERS(AEProductSingle, aes);
DECLARE_EXER_ENCODERS(AEProductSingle, aes);

const AEProductSingle aesp := {
  name  := "Trousers",
  price := 20,
  info  := "<color available=""true"">red</color>"
}

const AEProductSingle aesp_e := {
  name  := "Trousers",
  price := 20,
  info  := "<color xmlns=\"http://www.example.com/A\" available=\"true\">red</color>"
}

const universal charstring str_aes_e :=
"<AEProductSingle>\n" &
"\t<name>Trousers</name>\n" &
"\t<price>20</price>\n" &
"\t<color available=\"true\" xmlns='http://www.example.com/A'>red</color>\n" &
"</AEProductSingle>\n\n";

const universal charstring str_aes_b :=
"<AEProductSingle>\n" &
"\t<name>Trousers</name>\n" &
"\t<price>20</price>\n" &
"\t<info>&lt;color available=&quot;true&quot;&gt;red&lt;/color&gt;</info>\n" &
"</AEProductSingle>\n\n";

testcase encode_aes() runs on AE
{
  CHECK_METHOD(bxer_enc_aes, aesp, str_aes_b);
  CHECK_METHOD(exer_enc_aes, aesp, str_aes_e);
}

testcase decode_aes() runs on AE
{
  CHECK_DECODE(bxer_dec_aes, str_aes_b, AEProductSingle, aesp);
  CHECK_DECODE(exer_dec_aes, str_aes_e, AEProductSingle, aesp_e);
}

control
{
  execute(encode_ae())
  execute(decode_ae())

  execute(encode_af())
  execute(decode_af())

  execute(encode_anys())
  execute(decode_anys())

  execute(encode_utanys())
  execute(decode_utanys())
  
  execute(encode_only())
  execute(decode_only())

  execute(encode_aes())
  execute(decode_aes())
}

}
with {
encode "XML"
}
