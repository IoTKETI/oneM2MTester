/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Szabo, Bence Janos
 *
 ******************************************************************************/
module XSDBaseTypeTest {

    import from schema all;

    external function enc_UnnamedType(in UnnamedType pdu) return octetstring
     with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
    external function dec_UnnamedType(in octetstring stream) return UnnamedType
     with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    external function enc_NamedType(in NamedType pdu) return octetstring
     with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
    external function dec_NamedType(in octetstring stream) return NamedType
     with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    external function enc_UseTypeWithUseUnion(in UseTypeWithUseUnion pdu) return octetstring
     with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
    external function dec_UseTypeWithUseUnion(in octetstring stream) return UseTypeWithUseUnion
     with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }

    external function enc_UseUnionWithoutXSDType(in UseUnionWithoutXSDType pdu) return octetstring
     with { extension "prototype (convert) encode(XER:XER_EXTENDED)" }
  
    external function dec_UseUnionWithoutXSDType(in octetstring stream) return UseUnionWithoutXSDType
     with { extension "prototype (convert) decode(XER:XER_EXTENDED)" }
 
    type component C {}

///////////////////////////////////////////////////////////////////////////////

// All expected encoding result of the UnnamedType's fields.

    const charstring string_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:string'>string</xsd:UnnamedType>\n\n";
    const charstring normalizedstring_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:normalizedString'>normalizedstring</xsd:UnnamedType>\n\n";
    const charstring token_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:token'>token</xsd:UnnamedType>\n\n";
    const charstring name_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:Name'>name</xsd:UnnamedType>\n\n";
    const charstring nmtoken_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:NMTOKEN'>nmtoken</xsd:UnnamedType>\n\n";
    const charstring ncname_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:NCName'>ncname</xsd:UnnamedType>\n\n";
    const charstring id_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:ID'>id</xsd:UnnamedType>\n\n";
    const charstring idref_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:IDREF'>idref</xsd:UnnamedType>\n\n";
    const charstring entity_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:ENTITY'>entity</xsd:UnnamedType>\n\n";
    const charstring hexbinary_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:hexBinary'>AABBCCDD</xsd:UnnamedType>\n\n";
    const charstring base64binary_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:base64Binary'>qrvM3Q==</xsd:UnnamedType>\n\n";
    const charstring anyuri_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:anyURI'>www.any.uri</xsd:UnnamedType>\n\n";
    const charstring language_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:language'>hun</xsd:UnnamedType>\n\n";
    const charstring integer_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:integer'>13</xsd:UnnamedType>\n\n";
    const charstring positiveinteger_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:positiveInteger'>14</xsd:UnnamedType>\n\n";
    const charstring nonpositiveinteger_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:nonPositiveInteger'>-15</xsd:UnnamedType>\n\n";
    const charstring negativeinteger_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:negativeInteger'>-16</xsd:UnnamedType>\n\n";
    const charstring nonnegativeinteger_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:nonNegativeInteger'>17</xsd:UnnamedType>\n\n";
    const charstring long_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:long'>18</xsd:UnnamedType>\n\n";
    const charstring unsignedlong_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:unsignedLong'>19</xsd:UnnamedType>\n\n";
    const charstring int_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:int'>20</xsd:UnnamedType>\n\n";
    const charstring unsignedint_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:unsignedInt'>21</xsd:UnnamedType>\n\n";
    const charstring short_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:short'>22</xsd:UnnamedType>\n\n";
    const charstring unsignedshort_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:unsignedShort'>23</xsd:UnnamedType>\n\n";
    const charstring byte_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:byte'>24</xsd:UnnamedType>\n\n";
    const charstring unsignedbyte_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:unsignedByte'>25</xsd:UnnamedType>\n\n";
    const charstring decimal_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:decimal'>26.000000</xsd:UnnamedType>\n\n";
    const charstring float_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:float'>27.000000</xsd:UnnamedType>\n\n";
    const charstring double_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:double'>28.000000</xsd:UnnamedType>\n\n";
    const charstring duration_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:duration'>P5Y2M10D</xsd:UnnamedType>\n\n";
    const charstring datetime_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:dateTime'>2002-05-30T09:30:10</xsd:UnnamedType>\n\n";
    const charstring time_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:time'>09:30:10</xsd:UnnamedType>\n\n";
    const charstring date_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:date'>2002-05-30</xsd:UnnamedType>\n\n";
    const charstring gyearmonth_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:gYearMonth'>2002-05</xsd:UnnamedType>\n\n";
    const charstring gyear_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:gYear'>2002</xsd:UnnamedType>\n\n";
    const charstring gmonthday_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:gMonthDay'>--11-11</xsd:UnnamedType>\n\n";
    const charstring gday_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:gDay'>---11</xsd:UnnamedType>\n\n";
    const charstring gmonth_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:gMonth'>--11</xsd:UnnamedType>\n\n";
    const charstring boolean_result := "<xsd:UnnamedType xmlns:xsd='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:boolean'>true</xsd:UnnamedType>\n\n";

    testcase tc_unnamed() runs on C system C {

      // string
      var UnnamedType my_type := { alt_ := "string" }
      var UnnamedType my_type_result;

      var octetstring result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), string_result) == false) {
        setverdict(fail, match(oct2unichar(result), string_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // normalizedString
      my_type := { alt_1 := "normalizedstring" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), normalizedstring_result) == false) {
        setverdict(fail, match(oct2unichar(result), normalizedstring_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // token
      my_type := { alt_2 := "token" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), token_result) == false) {
        setverdict(fail, match(oct2unichar(result), token_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // Name
      my_type := { alt_3 := "name" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), name_result) == false) {
        setverdict(fail, match(oct2unichar(result), name_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // NMTOKEN
      my_type := { alt_4 := "nmtoken" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), nmtoken_result) == false) {
        setverdict(fail, match(oct2unichar(result), nmtoken_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // NCName
      my_type := { alt_5 := "ncname" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), ncname_result) == false) {
        setverdict(fail, match(oct2unichar(result), ncname_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // ID
      my_type := { alt_6 := "id" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), id_result) == false) {
        setverdict(fail, match(oct2unichar(result), id_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // IDREF
      my_type := { alt_7 := "idref" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), idref_result) == false) {
        setverdict(fail, match(oct2unichar(result), idref_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // ENTITY
      my_type := { alt_8 := "entity" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), entity_result) == false) {
        setverdict(fail, match(oct2unichar(result), entity_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // hexBinary
      my_type := { alt_9 := 'AABBCCDD'O }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), hexbinary_result) == false) {
        setverdict(fail, match(oct2unichar(result), hexbinary_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // base64Binary
      my_type := { alt_10 := 'AABBCCDD'O }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), base64binary_result) == false) {
        setverdict(fail, match(oct2unichar(result), base64binary_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // anyURI
      my_type := { alt_11 := "www.any.uri" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), anyuri_result) == false) {
        setverdict(fail, match(oct2unichar(result), anyuri_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // language
      my_type := { alt_12 := "hun" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), language_result) == false) {
        setverdict(fail, match(oct2unichar(result), language_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // integer
      my_type := { alt_13 := 13 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), integer_result) == false) {
        setverdict(fail, match(oct2unichar(result), integer_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // positiveInteger
      my_type := { alt_14 := 14 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), positiveinteger_result) == false) {
        setverdict(fail, match(oct2unichar(result), positiveinteger_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // nonPositiveInteger
      my_type := { alt_15 := -15 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), nonpositiveinteger_result) == false) {
        setverdict(fail, match(oct2unichar(result), nonpositiveinteger_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // negativeInteger
      my_type := { alt_16 := -16 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), negativeinteger_result) == false) {
        setverdict(fail, match(oct2unichar(result), negativeinteger_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // nonNegativeInteger
      my_type := { alt_17 := 17 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), nonnegativeinteger_result) == false) {
        setverdict(fail, match(oct2unichar(result), nonnegativeinteger_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // long
      my_type := { alt_18 := 18 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), long_result) == false) {
        setverdict(fail, match(oct2unichar(result), long_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // unsignedLong
      my_type := { alt_19 := 19 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), unsignedlong_result) == false) {
        setverdict(fail, match(oct2unichar(result), unsignedlong_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // int
      my_type := { alt_20 := 20 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), int_result) == false) {
        setverdict(fail, match(oct2unichar(result), int_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // unsignedInt
      my_type := { alt_21 := 21 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), unsignedint_result) == false) {
        setverdict(fail, match(oct2unichar(result), unsignedint_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // short
      my_type := { alt_22 := 22 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), short_result) == false) {
        setverdict(fail, match(oct2unichar(result), short_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // unsignedShort
      my_type := { alt_23 := 23 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), unsignedshort_result) == false) {
        setverdict(fail, match(oct2unichar(result), unsignedshort_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // byte
      my_type := { alt_24 := 24 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), byte_result) == false) {
        setverdict(fail, match(oct2unichar(result), byte_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // unsignedByte
      my_type := { alt_25 := 25 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), unsignedbyte_result) == false) {
        setverdict(fail, match(oct2unichar(result), unsignedbyte_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // decimal
      my_type := { alt_26 := 26.0 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), decimal_result) == false) {
        setverdict(fail, match(oct2unichar(result), decimal_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // float
      my_type := { alt_27 := 27.0 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), float_result) == false) {
        setverdict(fail, match(oct2unichar(result), float_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // double
      my_type := { alt_28 := 28.0 }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), double_result) == false) {
        setverdict(fail, match(oct2unichar(result), double_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // duration
      my_type := { alt_29 := "P5Y2M10D" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), duration_result) == false) {
        setverdict(fail, match(oct2unichar(result), duration_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // dateTime
      my_type := { alt_30 := "2002-05-30T09:30:10" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), datetime_result) == false) {
        setverdict(fail, match(oct2unichar(result), datetime_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // time
      my_type := { alt_31 := "09:30:10" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), time_result) == false) {
        setverdict(fail, match(oct2unichar(result), time_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // date
      my_type := { alt_32 := "2002-05-30" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), date_result) == false) {
        setverdict(fail, match(oct2unichar(result), date_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // gYearMonth
      my_type := { alt_33 := "2002-05" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), gyearmonth_result) == false) {
        setverdict(fail, match(oct2unichar(result), gyearmonth_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // gYear
      my_type := { alt_34 := "2002" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), gyear_result) == false) {
        setverdict(fail, match(oct2unichar(result), gyear_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // gMonthDay
      my_type := { alt_35 := "--11-11" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), gmonthday_result) == false) {
        setverdict(fail, match(oct2unichar(result), gmonthday_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // gDay
      my_type := { alt_36 := "---11" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), gday_result) == false) {
        setverdict(fail, match(oct2unichar(result), gday_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // gMonth
      my_type := { alt_37 := "--11" }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), gmonth_result) == false) {
        setverdict(fail, match(oct2unichar(result), gmonth_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // boolean
      my_type := { alt_38 := true }

      result := enc_UnnamedType(my_type);
      if (match(oct2unichar(result), boolean_result) == false) {
        setverdict(fail, match(oct2unichar(result), boolean_result));
      }
      my_type_result := dec_UnnamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }
      
      setverdict(pass);
    }

///////////////////////////////////////////////////////////////////////////////

// All expected encoding result of the NamedType's fields.

    const charstring named_string_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:string'>string</xsd0:NamedType>\n\n";
    const charstring named_normalizedstring_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:normalizedString'>normalizedstring</xsd0:NamedType>\n\n";
    const charstring named_token_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:token'>token</xsd0:NamedType>\n\n";
    const charstring named_name_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:Name'>name</xsd0:NamedType>\n\n";
    const charstring named_nmtoken_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:NMTOKEN'>nmtoken</xsd0:NamedType>\n\n";
    const charstring named_ncname_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:NCName'>ncname</xsd0:NamedType>\n\n";
    const charstring named_id_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:ID'>id</xsd0:NamedType>\n\n";
    const charstring named_idref_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:IDREF'>idref</xsd0:NamedType>\n\n";
    const charstring named_entity_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:ENTITY'>entity</xsd0:NamedType>\n\n";
    const charstring named_hexbinary_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:hexBinary'>AABBCCDD</xsd0:NamedType>\n\n";
    const charstring named_base64binary_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:base64Binary'>qrvM3Q==</xsd0:NamedType>\n\n";
    const charstring named_anyuri_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:anyURI'>www.any.uri</xsd0:NamedType>\n\n";
    const charstring named_language_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:language'>hun</xsd0:NamedType>\n\n";
    const charstring named_integer_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:integer'>13</xsd0:NamedType>\n\n";
    const charstring named_positiveinteger_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:positiveInteger'>14</xsd0:NamedType>\n\n";
    const charstring named_nonpositiveinteger_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:nonPositiveInteger'>-15</xsd0:NamedType>\n\n";
    const charstring named_negativeinteger_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:negativeInteger'>-16</xsd0:NamedType>\n\n";
    const charstring named_nonnegativeinteger_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:nonNegativeInteger'>17</xsd0:NamedType>\n\n";
    const charstring named_long_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:long'>18</xsd0:NamedType>\n\n";
    const charstring named_unsignedlong_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:unsignedLong'>19</xsd0:NamedType>\n\n";
    const charstring named_int_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:int'>20</xsd0:NamedType>\n\n";
    const charstring named_unsignedint_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:unsignedInt'>21</xsd0:NamedType>\n\n";
    const charstring named_short_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:short'>22</xsd0:NamedType>\n\n";
    const charstring named_unsignedshort_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:unsignedShort'>23</xsd0:NamedType>\n\n";
    const charstring named_byte_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:byte'>24</xsd0:NamedType>\n\n";
    const charstring named_unsignedbyte_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:unsignedByte'>25</xsd0:NamedType>\n\n";
    const charstring named_decimal_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:decimal'>26.000000</xsd0:NamedType>\n\n";
    const charstring named_float_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:float'>27.000000</xsd0:NamedType>\n\n";
    const charstring named_double_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:double'>28.000000</xsd0:NamedType>\n\n";
    const charstring named_duration_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:duration'>P5Y2M10D</xsd0:NamedType>\n\n";
    const charstring named_datetime_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:dateTime'>2002-05-30T09:30:10</xsd0:NamedType>\n\n";
    const charstring named_time_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:time'>09:30:10</xsd0:NamedType>\n\n";
    const charstring named_date_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:date'>2002-05-30</xsd0:NamedType>\n\n";
    const charstring named_gyearmonth_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:gYearMonth'>2002-05</xsd0:NamedType>\n\n";
    const charstring named_gyear_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:gYear'>2002</xsd0:NamedType>\n\n";
    const charstring named_gmonthday_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:gMonthDay'>--11-11</xsd0:NamedType>\n\n";
    const charstring named_gday_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:gDay'>---11</xsd0:NamedType>\n\n";
    const charstring named_gmonth_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:gMonth'>--11</xsd0:NamedType>\n\n";
    const charstring named_boolean_result := "<xsd0:NamedType xmlns:xsd0='schema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd1='http://www.w3.org/2001/XMLSchema' xsi:type='xsd1:boolean'>true</xsd0:NamedType>\n\n";


    testcase tc_named() runs on C system C {

      // string
      var NamedType my_type := { string := "string" }
      var NamedType my_type_result;

      var octetstring result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_string_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_string_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // normalizedString
      my_type := { normalizedString := "normalizedstring" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_normalizedstring_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_normalizedstring_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // token
      my_type := { token := "token" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_token_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_token_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // Name
      my_type := { name := "name" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_name_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_name_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // NMTOKEN
      my_type := { nMTOKEN := "nmtoken" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_nmtoken_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_nmtoken_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // NCName
      my_type := { nCName := "ncname" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_ncname_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_ncname_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // ID
      my_type := { iD := "id" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_id_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_id_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // IDREF
      my_type := { iDREF := "idref" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_idref_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_idref_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // ENTITY
      my_type := { eNTITY := "entity" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_entity_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_entity_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // hexBinary
      my_type := { hexBinary := 'AABBCCDD'O }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_hexbinary_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_hexbinary_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // base64Binary
      my_type := { base64Binary := 'AABBCCDD'O }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_base64binary_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_base64binary_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // anyURI
      my_type := { anyURI := "www.any.uri" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_anyuri_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_anyuri_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // language
      my_type := { language_ := "hun" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_language_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_language_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // integer
      my_type := { integer_ := 13 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_integer_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_integer_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // positiveInteger
      my_type := { positiveInteger := 14 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_positiveinteger_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_positiveinteger_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // nonPositiveInteger
      my_type := { nonPositiveInteger := -15 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_nonpositiveinteger_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_nonpositiveinteger_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // negativeInteger
      my_type := { negativeInteger := -16 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_negativeinteger_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_negativeinteger_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // nonNegativeInteger
      my_type := { nonNegativeInteger := 17 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_nonnegativeinteger_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_nonnegativeinteger_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // long
      my_type := { long := 18 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_long_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_long_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // unsignedLong
      my_type := { unsignedLong := 19 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_unsignedlong_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_unsignedlong_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // int
      my_type := { int := 20 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_int_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_int_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // unsignedInt
      my_type := { unsignedInt := 21 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_unsignedint_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_unsignedint_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // short
      my_type := { short := 22 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_short_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_short_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // unsignedShort
      my_type := { unsignedShort := 23 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_unsignedshort_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_unsignedshort_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // byte
      my_type := { byte := 24 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_byte_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_byte_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // unsignedByte
      my_type := { unsignedByte := 25 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_unsignedbyte_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_unsignedbyte_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // decimal
      my_type := { decimal := 26.0 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_decimal_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_decimal_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // float
      my_type := { float_ := 27.0 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_float_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_float_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // double
      my_type := { double := 28.0 }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_double_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_double_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // duration
      my_type := { duration := "P5Y2M10D" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_duration_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_duration_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // dateTime
      my_type := { dateTime := "2002-05-30T09:30:10" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_datetime_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_datetime_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // time
      my_type := { time := "09:30:10" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_time_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_time_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // date
      my_type := { date := "2002-05-30" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_date_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_date_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // gYearMonth
      my_type := { gYearMonth := "2002-05" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_gyearmonth_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_gyearmonth_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // gYear
      my_type := { gYear := "2002" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_gyear_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_gyear_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // gMonthDay
      my_type := { gMonthDay := "--11-11" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_gmonthday_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_gmonthday_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // gDay
      my_type := { gDay := "---11" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_gday_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_gday_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // gMonth
      my_type := { gMonth := "--11" }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_gmonth_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_gmonth_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // boolean
      my_type := { boolean_ := true }

      result := enc_NamedType(my_type);
      if (match(oct2unichar(result), named_boolean_result) == false) {
        setverdict(fail, match(oct2unichar(result), named_boolean_result));
      }
      my_type_result := dec_NamedType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }
      
      setverdict(pass);
    }

///////////////////////////////////////////////////////////////////////////////

    type union TypeWithUseUnion {
      charstring cs,
      octetstring os
    } with {
      encode "XML";
      variant "useUnion";
      variant (cs) "XSD:string";
      variant (os) "XSD:hexBinary";
    }

    type union UseTypeWithUseUnion {
      boolean b,
      charstring c,
      charstring d,
      TypeWithUseUnion t
    } with {
      encode "XML";
      variant "namespace as 'schema' prefix 'xsd'";
      variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
      variant "useType";
      variant (b) "XSD:boolean";
      variant (c) "XSD:token";
      variant (d) "name as ''";
      variant (d) "XSD:Name";
    }

    testcase tc_use_type_with_use_union() runs on C system C {

      var UseTypeWithUseUnion my_type := { b := true }
      var universal charstring expected := "<UseTypeWithUseUnion>true</UseTypeWithUseUnion>\n\n";

      var octetstring result := enc_UseTypeWithUseUnion(my_type);
      if (oct2unichar(result) != expected) {
        setverdict(fail, match(oct2unichar(result), expected));
      }
      var UseTypeWithUseUnion my_type_result := dec_UseTypeWithUseUnion(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }


      my_type := { c := "aaa" }
      expected := "<UseTypeWithUseUnion xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:type='c'>aaa</UseTypeWithUseUnion>\n\n";

      result := enc_UseTypeWithUseUnion(my_type);
      if (oct2unichar(result) != expected) {
        setverdict(fail, match(oct2unichar(result), expected));
      }
      my_type_result := dec_UseTypeWithUseUnion(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      my_type := { d := "name" }
      expected := "<UseTypeWithUseUnion xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd0='http://www.w3.org/2001/XMLSchema' xsi:type='xsd0:Name'>name</UseTypeWithUseUnion>\n\n";
      result := enc_UseTypeWithUseUnion(my_type);
      if (oct2unichar(result) != expected) {
        setverdict(fail, match(oct2unichar(result), expected));
      }
      my_type_result := dec_UseTypeWithUseUnion(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      // Bug 507270
      my_type := { t := { cs := "cs" } }
      expected := "<UseTypeWithUseUnion xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd0='http://www.w3.org/2001/XMLSchema' xsi:type='xsd0:string'>cs</UseTypeWithUseUnion>\n\n";
      
      result := enc_UseTypeWithUseUnion(my_type);
      if (oct2unichar(result) != expected) {
        setverdict(fail, match(oct2unichar(result), expected));
      }
      my_type_result := dec_UseTypeWithUseUnion(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      my_type := { t := { os := 'ABCD'O } }
      expected := "<UseTypeWithUseUnion xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd0='http://www.w3.org/2001/XMLSchema' xsi:type='xsd0:hexBinary'>ABCD</UseTypeWithUseUnion>\n\n";
      
      result := enc_UseTypeWithUseUnion(my_type);
      if (oct2unichar(result) != expected) {
        setverdict(fail, match(oct2unichar(result), expected));
      }
      my_type_result := dec_UseTypeWithUseUnion(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      setverdict(pass);
    }


///////////////////////////////////////////////////////////////////////////////

    type union UseUnionWithoutXSDType {
      boolean b,
      charstring c,
      charstring d
    } with {
      encode "XML";
      variant "namespace as 'schema' prefix 'xsd'";
      variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
      variant "useUnion";
    }

    testcase tc_without_xsd_type() runs on C system C {

      var UseUnionWithoutXSDType my_type := { b := true }
      var universal charstring expected := "<UseUnionWithoutXSDType xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>true</UseUnionWithoutXSDType>\n\n";

      var octetstring result := enc_UseUnionWithoutXSDType(my_type);
      if (oct2unichar(result) != expected) {
        setverdict(fail, match(oct2unichar(result), expected));
      }
      var UseUnionWithoutXSDType my_type_result := dec_UseUnionWithoutXSDType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      my_type := { c := "c" }
      expected := "<UseUnionWithoutXSDType xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>c</UseUnionWithoutXSDType>\n\n";

      result := enc_UseUnionWithoutXSDType(my_type);
      if (oct2unichar(result) != expected) {
        setverdict(fail, match(oct2unichar(result), expected));
      }
      my_type_result := dec_UseUnionWithoutXSDType(result);
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      my_type := { d := "d" }
      expected := "<UseUnionWithoutXSDType xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>d</UseUnionWithoutXSDType>\n\n";

      result := enc_UseUnionWithoutXSDType(my_type);
      if (oct2unichar(result) != expected) {
        setverdict(fail, match(oct2unichar(result), expected));
      }
      my_type_result := dec_UseUnionWithoutXSDType(result);
      my_type := { c := "d" } // No xsi:type
      if (my_type_result != my_type) {
        setverdict(fail, match(my_type_result, my_type));
      }

      setverdict(pass);
    }

    control {
        execute(tc_unnamed());
        execute(tc_named());
        execute(tc_use_type_with_use_union());
        execute(tc_without_xsd_type());
    }
}
