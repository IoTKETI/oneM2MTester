/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Lovassy, Arpad
 *   Ormandi, Matyas
 *
 ******************************************************************************/
//
//  File:          http_jabber_org_protocol_pubsub.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Sun Jan  6 13:51:49 2013
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//
//	Generated from file(s):
//
//	- pubsub.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "http://jabber.org/protocol/pubsub" */
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//
//
//XEP-0060: Publish-Subscribe
//
//
////////////////////////////////////////////////////////////////////////////////



module http_jabber_org_protocol_pubsub {


import from XSD all;


import from jabber_x_data all;


/* xmlns:xdata='jabber:x:data' is needed to trick the converter */


/* The protocol documented by this schema is defined in
      XEP-0060: http://xmpp.org/extensions/xep-0060.html */


/* http://xmpp.org/schemas/x-data.xsd */


type record Pubsub
{
	union {
		record {
			Create create_,
			Configure configure optional
		} sequence,
		record {
			Subscribe subscribe optional,
			Options options optional
		} sequence_1,
		record length(0 .. 1) of union {
			Affiliations affiliations,
			Default default_,
			Items items,
			Publish publish,
			Retract retract,
			Subscription subscription,
			Subscriptions subscriptions,
			Unsubscribe unsubscribe
		} choice_list
	} choice
}
with {
variant "name as uncapitalized";
variant "element";
variant (choice) "untagged";
variant (choice.sequence) "untagged";
variant (choice.sequence.create_) "name as 'create'";
variant (choice.sequence_1) "untagged";
variant (choice.choice_list) "untagged";
variant (choice.choice_list[-]) "untagged";
variant (choice.choice_list[-].default_) "name as 'default'";
};


type record Affiliations
{
	record of Affiliation affiliation_list
}
with {
variant "name as uncapitalized";
variant "element";
variant (affiliation_list) "untagged";
};


type record Affiliation
{
	enumerated {
		member,
		none_,
		outcast,
		owner,
		publisher,
		publish_only
	} affiliation,
	XSD.String node//,
	//Empty base
}
with {
variant "name as uncapitalized";
variant "element";
variant (affiliation) "text 'none_' as 'none'";
variant (affiliation) "text 'publish_only' as 'publish-only'";
variant (affiliation) "attribute";
variant (node) "attribute";
//variant (base) "untagged";
};


type record Configure
{
	union {
		X x
	} choice optional
}
with {
variant "name as uncapitalized";
variant "element";
variant (choice) "untagged";
variant (choice.x) "namespace as 'jabber:x:data' prefix 'xdata'";
};


type record Create
{
	XSD.String node optional//,
	//Empty base
}
with {
variant "name as uncapitalized";
variant "element";
variant (node) "attribute";
//variant (base) "untagged";
};


type record Default
{
	XSD.String node optional,
	enumerated {
		collection,
		leaf
	} type_ optional//,
	//Empty base
}
with {
variant "name as uncapitalized";
variant "element";
variant (node) "attribute";
variant (type_) "name as 'type'";
variant (type_) "defaultForEmpty as 'leaf'";
variant (type_) "attribute";
//variant (base) "untagged";
};


type record Items
{
	XSD.PositiveInteger max_items optional,
	XSD.String node,
	XSD.String subid optional,
	record of Item item_list
}
with {
variant "name as uncapitalized";
variant "element";
variant (max_items) "attribute";
variant (node) "attribute";
variant (subid) "attribute";
variant (item_list) "untagged";
};

type record Sequence
{
  XSD.String elem
}
with {
  variant (elem) "anyElement";
}

type record Item
{
	XSD.String id optional,
	Sequence sequence optional
	//record {
		//XSD.String elem
	//} sequence optional
}
with {
variant "name as uncapitalized";
variant "element";
variant (id) "attribute";
variant (sequence) "untagged";
//variant (sequence.elem) "anyElement";
//variant (sequence.elem) "anyElement except unqualified, 'http://jabber.org/protocol/pubsub'";
};


type record Options
{
	XSD.String jid,
	XSD.String node optional,
	XSD.String subid optional,
	record {
		XSD.String elem
	} sequence optional
}
with {
variant "name as uncapitalized";
variant "element";
variant (jid) "attribute";
variant (node) "attribute";
variant (subid) "attribute";
variant (sequence) "untagged";
variant (sequence.elem) "anyElement from 'jabber:x:data'";
};


type record Publish
{
	XSD.String node,
	record of Item item_list
}
with {
variant "name as uncapitalized";
variant "element";
variant (node) "attribute";
variant (item_list) "untagged";
};


type record Retract
{
	XSD.String node,
	XSD.Boolean notify optional,
	record length(1 .. infinity) of Item item_list
}
with {
variant "name as uncapitalized";
variant "element";
variant (node) "attribute";
variant (notify) "attribute";
variant (item_list) "untagged";
};


type record Subscribe_options
{
	Empty required optional
}
with {
variant "name as 'subscribe-options'";
variant "element";
};


type record Subscribe
{
	XSD.String jid,
	XSD.String node optional//,
	//Empty base
}
with {
variant "name as uncapitalized";
variant "element";
variant (jid) "attribute";
variant (node) "attribute";
//variant (base) "untagged";
};


type record Subscriptions
{
	XSD.String node optional,
	record of record {
		Subscription subscription
	} sequence_list
}
with {
variant "name as uncapitalized";
variant "element";
variant (node) "attribute";
variant (sequence_list) "untagged";
variant (sequence_list[-]) "untagged";
};


type record Subscription
{
	XSD.String jid,
	XSD.String node optional,
	XSD.String subid optional,
	enumerated {
		none_,
		pending,
		subscribed,
		unconfigured
	} subscription optional,
	Subscribe_options subscribe_options optional
}
with {
variant "name as uncapitalized";
variant "element";
variant (jid) "attribute";
variant (node) "attribute";
variant (subid) "attribute";
variant (subscription) "text 'none_' as 'none'";
variant (subscription) "attribute";
variant (subscribe_options) "name as 'subscribe-options'";
};


type record Unsubscribe
{
	XSD.String jid,
	XSD.String node optional,
	XSD.String subid optional//,
	//Empty base
}
with {
variant "name as uncapitalized";
variant "element";
variant (jid) "attribute";
variant (node) "attribute";
variant (subid) "attribute";
//variant (base) "untagged";
};


type enumerated Empty
{
	x
}
with {
variant "text 'x' as ''";
variant "name as uncapitalized";
};


}
with {
encode "XML";
variant "namespace as 'http://jabber.org/protocol/pubsub'";
variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
variant "elementFormQualified";
}
