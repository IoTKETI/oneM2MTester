/******************************************************************************
* Copyright (c) 2000-2017 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Balasko, Jeno
*   Szabo, Bence Janos
*
******************************************************************************/
//
//  File:          www_example_org_complex_nillable.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Aug  1 13:47:14 2014
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- complex_nillable.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "www.example.org/complex/nillable" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module www_example_org_complex_nillable {


import from XSD all;


/* media is a multiple value parameter */
type record Conditions_type
{
	record {
		record {
			/* no nilling at the level of identity - use nilling on fcd-caller-identity to remove */
			union {
				XSD.String anonymous,
				XSD.String identity
			} choice
		} content optional
	} caller_identity optional,
	record of record {
		XSD.String content optional
	} media_list,
	record of record {
		XSD.String content optional
	} status_list,
	record {
		XSD.String content optional
	} identity optional,
	record of record {
		XSD.String content optional
	} request_list
}
with {
  variant "name as 'conditions-type'";
  variant (caller_identity) "name as 'caller-identity'";
  variant (caller_identity) "useNil";
  variant (caller_identity.content.choice) "untagged";
  variant (media_list) "untagged";
  variant (media_list[-]) "name as 'media'";
  variant (media_list[-]) "useNil";
  variant (status_list) "untagged";
  variant (status_list[-]) "name as 'status'";
  variant (status_list[-]) "useNil";
  variant (identity) "useNil";
  variant (request_list) "untagged";
  variant (request_list[-]) "name as 'request'";
  variant (request_list[-]) "useNil";
};


type record Anything_nil
{
	record {
	} content optional
}
with {
  variant "name as 'anything-nil'";
  variant "useNil";
  variant "element";
};


type record Anything_nil2
{
	XSD.AnyType content optional
}
with {
  variant "name as 'anything-nil2'";
  variant "useNil";
  variant "element";
};


type record Common
{
	record length(0 .. 5) of record {
		XSD.Integer bar optional,
		XSD.String foo length(7) optional,
		XSD.Integer goo optional,
		record of XSD.String attr optional,
		record {
			record {
				XSD.String content optional
			} forename,
			record {
				XSD.String content optional
			} surname,
			XSD.String livingAddress
		} content optional
	} integration_list
}
with {
  variant "name as uncapitalized";
  variant "element";
  variant (integration_list) "untagged";
  variant (integration_list[-]) "name as 'integration'";
  variant (integration_list[-]) "useNil";
  variant (integration_list[-].bar) "attribute";
  variant (integration_list[-].foo) "attribute";
  variant (integration_list[-].goo) "attribute";
  variant (integration_list[-].attr) "anyAttributes from 'www.example.org/complex/nillable'";
  variant (integration_list[-].content.forename) "useNil";
  variant (integration_list[-].content.surname) "useNil";
};


}
with {
  encode "XML";
  variant "namespace as 'www.example.org/complex/nillable'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
