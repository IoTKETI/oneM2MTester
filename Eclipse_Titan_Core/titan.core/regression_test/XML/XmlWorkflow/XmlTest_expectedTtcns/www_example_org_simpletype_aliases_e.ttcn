/******************************************************************************
* Copyright (c) 2000-2017 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Szabo, Bence Janos
*
******************************************************************************/
//
//  File:          www_example_org_simpletype_aliases.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Wed Jun 17 13:42:09 2015
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- simpletype_aliases.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "www.example.org/simpletype/aliases" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module www_example_org_simpletype_aliases {


import from XSD all;


/* Theese types needed to force the nameconversion */


type XSD.AnyType Length
with {
  variant "name as 'Length_'";
  variant "element";
};


type XSD.AnyType ComplexSimpleNotAlias
with {
  variant "name as 'ComplexSimpleNotAlias_'";
  variant "element";
};


type XSD.AnyType ComplexSimpleAlias3
with {
  variant "name as 'ComplexSimpleAlias3_'";
  variant "element";
};


type XSD.AnyType ComplexSimpleAlias4
with {
  variant "name as 'ComplexSimpleAlias4_'";
  variant "element";
};


type enumerated Enumeration
{
	a,
	b
};


/* Not alias because the restriction element is not empty */


type enumerated EnumerationNotAlias
{
	a,
	b
};


type Enumeration EnumerationAlias2;


type EnumerationAlias2 EnumerationAlias3;


/* Not alias because it is restricted to 'a' */


type enumerated EnumerationNotAlias2
{
	a
};


type XSD.String Pattern (pattern "abcd");


/* Not alias because the restriction element is not empty */


type XSD.String PatternNotAlias (pattern "abcd");


type Pattern PatternAlias;


type PatternAlias PatternAlias2;


/* Not alias because it is restricted to 'abc' */


type XSD.String PatternNotAlias2 (pattern "abc");


type XSD.String Length_1 length(4 .. infinity)
with {
  variant "name as 'Length'";
};


/* Not alias because the restriction element is not empty */


type XSD.String LengthNotAlias length(4 .. infinity);


type Length_1 LengthAlias;


type LengthAlias LengthAlias2;


/* Not alias because the minLength is restricted to 5 */


type XSD.String LengthNotAlias2 length(5 .. infinity);


type XSD.Integer Value (5 .. infinity);


/* Not alias because the restriction element is not empty */


type XSD.Integer ValueNotAlias (5 .. infinity);


type Value ValueAlias;


type ValueAlias ValueAlias2;


/* Not alias because the minInclusiveness is restricted to 6 */


type XSD.Integer ValueNotAlias2 (6 .. infinity);


type XSD.String WhiteSpace
with {
  variant "whiteSpace preserve";
};


/* Not alias because the restriction element is not empty */


type XSD.String WhiteSpaceNotAlias
with {
  variant "whiteSpace preserve";
};


type WhiteSpace WhiteSpaceAlias;


type WhiteSpaceAlias WhiteSpaceAlias2;


/* Not alias because the whiteSpace is restricted to replace */


type XSD.String WhiteSpaceNotAlias2
with {
  variant "whiteSpace replace";
};


type Length_1 ComplexSimpleAlias;


/* Not alias because extended with attributes */


type record ComplexSimpleNotAlias_1
{
	XSD.String attrgroup1 optional,
	XSD.String attrgroup2 optional,
	XSD.String base length(4 .. infinity)
}
with {
  variant "name as 'ComplexSimpleNotAlias'";
  variant (attrgroup1) "attribute";
  variant (attrgroup2) "attribute";
  variant (base) "untagged";
};


type LengthAlias2 ComplexSimpleAlias2;


/* Not alias because extended with attribute */


type record ComplexSimpleNotAlias2
{
	XSD.String attr optional,
	XSD.String base length(4 .. infinity)
}
with {
  variant (attr) "attribute";
  variant (base) "untagged";
};


type ComplexSimpleNotAlias_1 ComplexSimpleAlias3_1
with {
  variant "name as 'ComplexSimpleAlias3'";
};


/* Not alias because extended with attribute */


type record ComplexSimpleNotAlias3
{
	XSD.String attr optional,
	XSD.String attrgroup1 optional,
	XSD.String attrgroup2 optional,
	XSD.String base length(4 .. infinity)
}
with {
  variant (attr) "attribute";
  variant (attrgroup1) "attribute";
  variant (attrgroup2) "attribute";
  variant (base) "untagged";
};


type ComplexSimpleNotAlias3 ComplexSimpleAlias4_1
with {
  variant "name as 'ComplexSimpleAlias4'";
};


/* Not alias because extended with attribute */


type record ComplexSimpleNotAlias4
{
	XSD.String attr optional,
	XSD.String attr2 optional,
	XSD.String attrgroup1 optional,
	XSD.String attrgroup2 optional,
	XSD.String base length(4 .. infinity)
}
with {
  variant (attr) "attribute";
  variant (attr2) "attribute";
  variant (attrgroup1) "attribute";
  variant (attrgroup2) "attribute";
  variant (base) "untagged";
};


type ComplexSimpleNotAlias4 ComplexSimpleRestrictionAlias;


type ComplexSimpleRestrictionAlias ComplexSimpleRestrictionAlias2;


/* Not alias because the minLength of the base is restricted to 5 */


type record ComplexSimpleRestrictionNotAlias
{
	XSD.String attr optional,
	XSD.String attr2 optional,
	XSD.String attrgroup1 optional,
	XSD.String attrgroup2 optional,
	XSD.String base length(5 .. infinity)
}
with {
  variant (attr) "attribute";
  variant (attr2) "attribute";
  variant (attrgroup1) "attribute";
  variant (attrgroup2) "attribute";
  variant (base) "untagged";
};


/* Not alias because the attr attribute is required */


type record ComplexSimpleRestrictionNotAlias2
{
	XSD.String attr,
	XSD.String attr2 optional,
	XSD.String attrgroup1 optional,
	XSD.String attrgroup2 optional,
	XSD.String base length(4 .. infinity)
}
with {
  variant (attr) "attribute";
  variant (attr2) "attribute";
  variant (attrgroup1) "attribute";
  variant (attrgroup2) "attribute";
  variant (base) "untagged";
};


}
with {
  encode "XML";
  variant "namespace as 'www.example.org/simpletype/aliases' prefix 'this'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
