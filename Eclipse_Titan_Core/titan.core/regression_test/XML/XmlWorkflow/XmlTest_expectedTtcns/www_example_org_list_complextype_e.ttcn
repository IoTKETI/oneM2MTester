/******************************************************************************
* Copyright (c) 2000-2017 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Szabo, Bence Janos
*
******************************************************************************/
//
//  File:          www_example_org_list_complextype.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Mar 24 11:50:07 2015
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- list_complextype.xsd
//			/* xml version = "1.0" */
//			/* targetnamespace = "www.example.org/list/complextype" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module www_example_org_list_complextype {


import from XSD all;


type record ComplexTypeWithList
{
	record length(3) of XSD.Float elementWithList
}
with {
  variant (elementWithList) "name as capitalized";
  variant (elementWithList) "list";
};


type record length(3) of XSD.Float ElementWithList
with {
  variant "list";
  variant "element";
};


type record length(3) of XSD.String ElementWithList2 length(4)
with {
  variant "list";
  variant "element";
};


type record ChoiceWithList
{
	union {
		record length(3) of XSD.Float element1,
		record of XSD.String element2
	} choice
}
with {
  variant (choice) "untagged";
  variant (choice.element1) "name as capitalized";
  variant (choice.element1) "list";
  variant (choice.element2) "name as capitalized";
  variant (choice.element2) "list";
};


type record ChoiceWithList2
{
	union {
		record length(3) of XSD.Float element1,
		record of XSD.String element2,
		record length(3) of XSD.String element3 length(4)
	} choice
}
with {
  variant (choice) "untagged";
  variant (choice.element1) "name as capitalized";
  variant (choice.element1) "list";
  variant (choice.element2) "name as capitalized";
  variant (choice.element2) "list";
  variant (choice.element3) "name as capitalized";
  variant (choice.element3) "list";
};


type XSD.Token Ipv4 (pattern "IPV4")
with {
  variant "name as uncapitalized";
};


type XSD.Token Ipv6 (pattern "IPV6")
with {
  variant "name as uncapitalized";
};


type record A
{
	XSD.String b,
	XSD.Integer c,
	record of record {
		XSD.Integer e optional,
		record {
			record length(1 .. infinity) of Ipv4 ipv4addresses optional,
			record length(1 .. infinity) of Ipv6 ipv6addresses optional
		} f optional,
		XSD.String g optional
	} d_list
}
with {
  variant "name as uncapitalized";
  variant (d_list) "untagged";
  variant (d_list[-]) "name as 'd'";
  variant (d_list[-].f.ipv4addresses) "list";
  variant (d_list[-].f.ipv6addresses) "list";
};


}
with {
  encode "XML";
  variant "namespace as 'www.example.org/list/complextype' prefix 'this'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
