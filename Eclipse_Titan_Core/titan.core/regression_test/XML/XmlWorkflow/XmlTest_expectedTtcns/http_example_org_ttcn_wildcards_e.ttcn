/******************************************************************************
* Copyright (c) 2000-2017 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Balasko, Jeno
*   Szabo, Bence Janos
*
******************************************************************************/
//
//  File:          http_www_example_org_ttcn_wildcards.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Tue Dec 15 11:00:26 2014
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- any_anyAttribute.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "http://www.example.org/ttcn/wildcards" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module http_www_example_org_ttcn_wildcards {


import from XSD all;


type record Mygroup
{
	XSD.String elem
}
with {
  variant "untagged";
  variant (elem) "anyElement from 'http://www.example.org/ttcn/wildcards'";
};


/* anyAttribute examples */


type record E45
{
	record of XSD.String attr optional
}
with {
  variant "name as uncapitalized";
  variant (attr) "anyAttributes";
};


type record E45a
{
	record of XSD.String attr optional
}
with {
  variant "name as uncapitalized";
  variant (attr) "anyAttributes except unqualified, 'http://www.example.org/ttcn/wildcards'";
};


type record E45b
{
	record of XSD.String attr optional
}
with {
  variant "name as uncapitalized";
  variant (attr) "anyAttributes from 'http://www.example.org/ttcn/wildcards'";
};


type record E45c
{
	record of XSD.String attr optional
}
with {
  variant "name as uncapitalized";
  variant (attr) "anyAttributes from unqualified, 'http://www.organization.org/ttcn/attribute'";
};


/* <xs:element name="attr" type="xs:integer"/> */
type record E45d
{
	record of XSD.String attr optional
}
with {
  variant "name as uncapitalized";
  variant (attr) "anyAttributes from 'http://www.example.org/ttcn/wildcards', unqualified, 'http://www.organization.org/ttcn/attribute'";
};


/* any examples */


type record E46
{
	XSD.String elem
}
with {
  variant "name as uncapitalized";
  variant (elem) "anyElement";
};


type record E46ab
{
	XSD.String elem optional
}
with {
  variant "name as uncapitalized";
  variant (elem) "anyElement except unqualified, 'http://www.example.org/ttcn/wildcards'";
};


type record E46bc
{
	record of XSD.String elem_list
}
with {
  variant "name as uncapitalized";
  variant (elem_list) "untagged";
  variant (elem_list[-]) "anyElement from unqualified";
};


/* minOccurs, maxOccurs */


type record E15
{
	record length(5 .. 10) of record {
		XSD.Integer foo,
		XSD.Float bar
	} sequence_list
}
with {
  variant "name as uncapitalized";
  variant (sequence_list) "untagged";
  variant (sequence_list[-]) "untagged";
};


type record E15a
{
	record {
		XSD.Integer foo,
		XSD.Float bar
	} sequence optional
}
with {
  variant "name as uncapitalized";
  variant (sequence) "untagged";
};


type record E15b
{
	record {
		XSD.Integer foo,
		XSD.Float bar
	} sequence optional
}
with {
  variant "name as uncapitalized";
  variant (sequence) "untagged";
};


type record E15c
{
	record length(5 .. infinity) of record {
		XSD.Integer foo,
		XSD.Float bar
	} sequence_list
}
with {
  variant "name as uncapitalized";
  variant (sequence_list) "untagged";
  variant (sequence_list[-]) "untagged";
};


type record MyType
{
	record of XSD.String attr optional,
	XSD.String base
}
with {
  variant "element";
  variant (attr) "anyAttributes from 'http://www.example.org/ttcn/wildcards'";
  variant (base) "untagged";
};


}
with {
  encode "XML";
  variant "namespace as 'http://www.example.org/ttcn/wildcards' prefix 'this'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
