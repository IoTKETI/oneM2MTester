/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Raduly, Csaba
 *   Szabados, Kristof
 *
 ******************************************************************************/
module xmlTest_Functions_list
{

import from www_XmlTest_org_list all;
//==============================================================================
//  External functions
//==============================================================================
external function f_enc_StringList(in StringList pdu, out octetstring stream)
with { extension "prototype(fast) encode(XER:XER_EXTENDED)" }

external function f_dec_StringList(in octetstring stream, out StringList pdu) return integer
with { extension "prototype(backtrack) decode(XER:XER_EXTENDED)" }

//==============================================================================
//   Encoding decoding test
//==============================================================================
//==========================================
// f_encDecTest_StringList
//==========================================
function f_encDecTest_StringList() {
  var StringList vl_pdu:= { "Sue", "Maggie","Lisa", "Peter" }
  ,vl_decodedPdu;
  var octetstring vl_expectedEncodedPdu:=char2oct("<StringList>Sue Maggie Lisa Peter</StringList>\n\n");
  var octetstring vl_stream:=''O;
  f_enc_StringList(vl_pdu,vl_stream);

  if( not match(vl_stream,vl_expectedEncodedPdu)) {
    log("Expected encoded value: ",vl_expectedEncodedPdu);
    log("Actual encoded value:   ", vl_stream);
    setverdict(fail);
  }

  //log("===Checking value decoded from the encoded value vs original value===");
  var integer vl_retval:=f_dec_StringList(vl_stream, vl_decodedPdu);
  //log("retval:",vl_retval);
  if(f_dec_StringList(vl_stream, vl_decodedPdu)==0) {
    //log("The decoded pdu: ", vl_decodedPdu);
    if(match(vl_pdu,vl_decodedPdu)) {
      setverdict(pass);
    } else {
      log("Pdu differs from the expected value");
      log(match(vl_pdu,vl_decodedPdu));
      setverdict(fail);
    }
  }else{
    log("Pdu could not decoded");
    setverdict(fail);
  }

  //log("===Checking value decoded from the expected value vs original value===");
  if( f_dec_StringList(vl_expectedEncodedPdu, vl_decodedPdu)==0) {
    //log("The decoded pdu: ", vl_decodedPdu);
    if(match(vl_pdu,vl_decodedPdu)) {
      setverdict(pass);
    } else {
      log("Pdu could not decoded from the expected value");
      log(match(vl_pdu,vl_decodedPdu));
      setverdict(fail);
    }
  }
}//f_

}//module
