/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Delic, Adam
 *   Raduly, Csaba
 *   Szabados, Kristof
 *   Szabo, Janos Zoltan â€“ initial implementation
 *
 ******************************************************************************/
module TtemplateUnion {
type component templateUnion_mycomp {};
type union templateUnion_myunion {
 integer f1,
 float f2 };
type record templateUnion_rec {
 templateUnion_myunion x1,
 templateUnion_myunion x2,
 templateUnion_myunion x3 optional };
template templateUnion_rec templateUnion_tSpec :={ //specific values
 x1:={f2:=1.2},
 x2:={f1:=2},
 x3:={f1:=3} };
template templateUnion_rec templateUnion_tList :={ //specific value and value list
 x1:={f2:=1.2},
 x2:=({f1:=2},{f1:=3},{f2:=1.2}),
 x3:={f1:=3} };
template templateUnion_rec templateUnion_tComp :={ //specific value and compl. list
 x1:={f2:=1.2},
 x2:=complement ({f1:=2},{f2:=1.2},{f1:=6}),
 x3:={f1:=3} };
template templateUnion_rec templateUnion_tOmit :={ //omitting values
 x1:={f2:=1.2},
 x2:={f1:=2},
 x3:=omit } ;
template templateUnion_rec templateUnion_tAny :={ //specific and any value
 x1:={f2:=1.2},
 x2:={f1:=2},
 x3:=? } ;
template templateUnion_rec templateUnion_tAnyorNone :={ //specific and AnyorNone value
 x1:={f2:=1.2},
 x2:={f1:=2},
 x3:=* };
//template templateUnion_rec templateUnion_tIfpresent :={ //specific value and ifpresent
// x1:={f2:=1.2},
// x2:={f1:=2},
// x3:={f1:=3} ifpresent };

testcase templateUnionSpec() runs on templateUnion_mycomp {
var templateUnion_myunion temp:={f1:=3};
var templateUnion_rec x1,x2;		//specific value
x1:={ x1:={f2:=1.2},  x2:={f1:=2},  x3:=temp };
x2:={ x1:={f2:=1.3},  x2:={f1:=2},  x3:=temp };
//match
if (match(x1,templateUnion_tSpec)) {setverdict(pass);}
 else {setverdict(fail);}
//no match
if (not(match(x2,templateUnion_tSpec))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateUnionList() runs on templateUnion_mycomp {
var templateUnion_myunion temp:={f1:=3};
var templateUnion_rec x1,x2,x3;		//value list
x1:={ x1:={f2:=1.2},  x2:={f1:=3},  x3:=temp };
x2:={ x1:={f2:=1.2},  x2:={f1:=7},  x3:=temp };
x3:={ x1:={f1:=8},  x2:={f1:=3},  x3:=temp };
//match
if (match(x1,templateUnion_tList)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: out of list
if (not(match(x2,templateUnion_tList))) {setverdict(pass);}
 else {setverdict(fail);}
//no match: other field
if (not(match(x3,templateUnion_tList))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateUnionComp() runs on templateUnion_mycomp {
var templateUnion_myunion temp:={f1:=3};
var templateUnion_rec x1,x2,x3;		//complemented list
x1:={ x1:={f2:=1.2},  x2:={f1:=7},  x3:=temp };
x2:={ x1:={f2:=1.2},  x2:={f1:=6},  x3:=temp };
x3:={ x1:={f2:=1.3},  x2:={f1:=7},  x3:=temp };
//match
if (match(x1,templateUnion_tComp)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: in the list
if (not(match(x2,templateUnion_tComp))) {setverdict(pass);}
 else {setverdict(fail);}
//no match: other field
if (not(match(x3,templateUnion_tComp))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateUnionOmit() runs on templateUnion_mycomp {
var templateUnion_myunion temp:={f1:=3};
var templateUnion_rec x1,x2,x3;		//omitting value
x1:={ x1:={f2:=1.2},  x2:={f1:=2},  x3:=omit };
x2:={ x1:={f2:=1.2},  x2:={f1:=2},  x3:=temp };
x3:={ x1:={f1:=2},  x2:={f1:=2},  x3:=omit };
//match
if (match(x1,templateUnion_tOmit)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: not omitted
if (not(match(x2,templateUnion_tOmit))) {setverdict(pass);}
 else {setverdict(fail);}
//no match: other field
if (not(match(x3,templateUnion_tOmit))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateUnionAny() runs on templateUnion_mycomp {
var templateUnion_myunion temp:={f1:=3};
var templateUnion_rec x1,x2,x3;		//any value
x1:={ x1:={f2:=1.2},  x2:={f1:=2},  x3:=temp };
x2:={ x1:={f2:=1.2},  x2:={f1:=2},  x3:=omit };
x3:={ x1:={f1:=2},  x2:={f1:=2},  x3:=temp };
//match
if (match(x1,templateUnion_tAny)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: field omitted
if (not(match(x2,templateUnion_tAny))) {setverdict(pass);}
 else {setverdict(fail);}
//no match: other field
if (not(match(x3,templateUnion_tAny))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateUnionAnyorNone() runs on templateUnion_mycomp {
var templateUnion_myunion temp:={f1:=3};
var templateUnion_rec x1,x2,x3;		//AnyorNone value
x1:={ x1:={f2:=1.2},  x2:={f1:=2},  x3:=omit };
x2:={ x1:={f2:=1.2},  x2:={f1:=2},  x3:=temp };
x3:={ x1:={f1:=2},  x2:={f1:=2},  x3:=omit };
//match: omitted
if (match(x1,templateUnion_tAnyorNone)) {setverdict(pass);}
 else {setverdict(fail);}
//match: value
if (match(x2,templateUnion_tAnyorNone)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: other field
if (not(match(x3,templateUnion_tAnyorNone))) {setverdict(pass);}
 else {setverdict(fail);}
}

//testcase templateUnionIfpresent() runs on templateInt_mycomp {
//var templateUnion_myunion temp1:={f1:=3};	//ifpresent
//var templateUnion_myunion temp2:={f1:=4};
//var templateUnion_rec x1,x2,x3,x4;
//x1:={ x1:={f2:=1.2},  x2:={f1:=2},  x3:=temp1 };
//x2:={ x1:={f2:=1.2},  x2:={f1:=2},  x3:=omit };
//x3:={ x1:={f2:=1.2},  x2:={f1:=2},  x3:=temp2 };
//x4:={ x1:={f2:=1.4},  x2:={f1:=2},  x3:=omit };
//match: present and match
//if (match(x1,templateUnion_tIfpresent)) {setverdict(pass);}
// else {setverdict(fail);}
//match: not present
//if (match(x2,templateUnion_tIfpresent)) {setverdict(pass);}
// else {setverdict(fail);}
//no match: present and not match
//if (not(match(x3,templateUnion_tIfpresent))) {setverdict(pass);}
// else {setverdict(fail);}
//no match: other field
//if (not(match(x4,templateUnion_tIfpresent))) {setverdict(pass);}
// else {setverdict(fail);}
//}

type record MyRec2{
  ROC roc optional,
  ROI roi optional,
  MyUnion1 u optional, 
  MyRecord1 r optional
}

type record of charstring ROC;
type record of integer  ROI;
type record MyRecord1 {
  integer       i optional,
  float         x optional,
  charstring    c
}

type union MyUnion1 {
  ROC roc,
  integer i,
  ROI roi,
  MyRecord1 r
}

testcase tc_record_withWildCard3E() runs on templateUnion_mycomp {
  var template MyRec2 vtl_rec2; 
  vtl_rec2:={ u := ? }
  //log("The value of the record:",vtl_rec2.u);
  if(ispresent(vtl_rec2.u.i)){setverdict(fail)}else {setverdict(pass)};
}

control {
 execute(templateUnionSpec());
 execute(templateUnionList());
 execute(templateUnionComp());
 execute(templateUnionOmit());
 execute(templateUnionAny());
 execute(templateUnionAnyorNone());
// execute(templateUnionIfpresent());
 execute(tc_record_withWildCard3E());
}
}
