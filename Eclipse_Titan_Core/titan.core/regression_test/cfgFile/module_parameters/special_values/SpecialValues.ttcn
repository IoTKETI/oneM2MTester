/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Szabo, Bence Janos
 *
 ******************************************************************************/
module SpecialValues {

type component EmptyCT {}

modulepar float inf1, inf2, inf3, inf4, inf5, inf6, inf7, inf8, inf9, inf10, inf11, inf12;

modulepar float neginf1, neginf2, neginf3, neginf4, neginf5, neginf6, neginf7, neginf8, neginf9, neginf10, neginf11, neginf12;

modulepar float zero1, zero2;

modulepar float nan1, nan2, nan3, nan4, nan5, nan6, nan7, nan8, nan9, nan10, nan11, nan12, nan13, nan14, nan15, nan16, nan17, nan18, nan19, nan20, nan21, nan22, nan23, nan24, nan25;


testcase tc_moduleparam_inf() runs on EmptyCT {
  if (inf1 != infinity) {
    setverdict(fail, match(inf1, infinity));
  }

  if (inf2 != infinity) {
    setverdict(fail, match(inf2, infinity));
  }

  if (inf3 != infinity) {
    setverdict(fail, match(inf3, infinity));
  }

  if (inf4 != infinity) {
    setverdict(fail, match(inf4, infinity));
  }

  if (inf5 != infinity) {
    setverdict(fail, match(inf5, infinity));
  }

  if (inf6 != infinity) {
    setverdict(fail, match(inf6, infinity));
  }

  if (inf7 != infinity) {
    setverdict(fail, match(inf7, infinity));
  }

  if (inf8 != infinity) {
    setverdict(fail, match(inf8, infinity));
  }

  if (inf9 != infinity) {
    setverdict(fail, match(inf9, infinity));
  }

  if (inf10 != infinity) {
    setverdict(fail, match(inf10, infinity));
  }

  if (inf11 != infinity) {
    setverdict(fail, match(inf11, infinity));
  }

  if (inf12 != infinity) {
    setverdict(fail, match(inf12, infinity));
  }

  setverdict(pass);
}

testcase tc_moduleparam_neginf() runs on EmptyCT {
  if (neginf1 != -infinity) {
    setverdict(fail, match(neginf1, -infinity));
  }

  if (neginf2 != -infinity) {
    setverdict(fail, match(neginf2, -infinity));
  }

  if (neginf3 != -infinity) {
    setverdict(fail, match(neginf3, -infinity));
  }

  if (neginf4 != -infinity) {
    setverdict(fail, match(neginf4, -infinity));
  }

  if (neginf5 != -infinity) {
    setverdict(fail, match(neginf5, -infinity));
  }

  if (neginf6 != -infinity) {
    setverdict(fail, match(neginf6, -infinity));
  }

  if (neginf7 != -infinity) {
    setverdict(fail, match(neginf7, -infinity));
  }

  if (neginf8 != -infinity) {
    setverdict(fail, match(neginf8, -infinity));
  }

  if (neginf9 != -infinity) {
    setverdict(fail, match(neginf9, -infinity));
  }

  if (neginf10 != -infinity) {
    setverdict(fail, match(neginf10, -infinity));
  }

  if (neginf11 != -infinity) {
    setverdict(fail, match(neginf11, -infinity));
  }

  if (neginf12 != -infinity) {
    setverdict(fail, match(neginf12, -infinity));
  }

  setverdict(pass);
}

testcase tc_moduleparam_zero() runs on EmptyCT {
  if (zero1 != 0.000000) {
    setverdict(fail, match(zero1, 0.000000));
  }

  if (zero2 != -0.000000) {
    setverdict(fail, match(zero2, -0.000000));
  }

  setverdict(pass);
}

testcase tc_moduleparam_nan() runs on EmptyCT {
  if (nan1 != not_a_number) {
    setverdict(fail, match(nan1, not_a_number));
  }

  if (nan2 != not_a_number) {
    setverdict(fail, match(nan2, not_a_number));
  }

  if (nan3 != not_a_number) {
    setverdict(fail, match(nan3, not_a_number));
  }

  if (nan4 != not_a_number) {
    setverdict(fail, match(nan4, not_a_number));
  }

  if (nan5 != not_a_number) {
    setverdict(fail, match(nan5, not_a_number));
  }

  if (nan6 != not_a_number) {
    setverdict(fail, match(nan6, not_a_number));
  }

  if (nan7 != not_a_number) {
    setverdict(fail, match(nan7, not_a_number));
  }

  if (nan8 != not_a_number) {
    setverdict(fail, match(nan8, not_a_number));
  }

  if (nan9 != not_a_number) {
    setverdict(fail, match(nan9, not_a_number));
  }

  if (nan10 != not_a_number) {
    setverdict(fail, match(nan10, not_a_number));
  }

  if (nan11 != not_a_number) {
    setverdict(fail, match(nan11, not_a_number));
  }

  if (nan12 != not_a_number) {
    setverdict(fail, match(nan12, not_a_number));
  }

  if (nan13 != not_a_number) {
    setverdict(fail, match(nan13, not_a_number));
  }

  if (nan14 != not_a_number) {
    setverdict(fail, match(nan14, not_a_number));
  }

  if (nan15 != not_a_number) {
    setverdict(fail, match(nan15, not_a_number));
  }

  if (nan16 != not_a_number) {
    setverdict(fail, match(nan16, not_a_number));
  }

  if (nan17 != not_a_number) {
    setverdict(fail, match(nan17, not_a_number));
  }

  if (nan18 != not_a_number) {
    setverdict(fail, match(nan18, not_a_number));
  }

  if (nan19 != not_a_number) {
    setverdict(fail, match(nan19, not_a_number));
  }

  if (nan20 != not_a_number) {
    setverdict(fail, match(nan20, not_a_number));
  }

  if (nan21 != not_a_number) {
    setverdict(fail, match(nan21, not_a_number));
  }

  if (nan22 != not_a_number) {
    setverdict(fail, match(nan22, not_a_number));
  }

  if (nan23 != not_a_number) {
    setverdict(fail, match(nan23, not_a_number));
  }

  if (nan24 != not_a_number) {
    setverdict(fail, match(nan24, not_a_number));
  }

  if (nan25 != not_a_number) {
    setverdict(fail, match(nan25, not_a_number));
  }
  setverdict(pass);

}


control {
  execute(tc_moduleparam_inf());
  execute(tc_moduleparam_neginf());
  execute(tc_moduleparam_zero());
  execute(tc_moduleparam_nan());
}

}
