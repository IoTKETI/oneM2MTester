/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *
 ******************************************************************************/

module references {
// This module contains tests for referencing other (or the same) module parameters
// in module parameter initialization (in the configuration file)

import from A all;
/******** Types ********/
type record Rec {
  integer num,
  charstring str optional
}

type record EmptyRec {};

type union Uni {
  integer ival,
  boolean bval,
  octetstring osval
}

type enumerated Size { Small, Medium, Large };

type component CT {};

type record of integer IntList;

type record of charstring TwoStrings;

/******** Module parameters ********/
modulepar integer mp1 := 0;
modulepar integer mp2 := 0;
modulepar integer mp3 := 0;

modulepar float mp4 := 0.0;
modulepar float mp5 := 1.0;

modulepar bitstring mpbs1 := '110'B;
modulepar bitstring mpbs2 := '1'B;

modulepar hexstring mphs1 := '3CC'H;
modulepar hexstring mphs2 := '12AA'H;

modulepar octetstring mpos1 := 'A0A0'O;
modulepar octetstring mpos2 := '7FFF'O;

modulepar charstring mpcs1 := "abc";
modulepar charstring mpcs2 := "def";
modulepar charstring mpcs3 := "ghi";

modulepar universal charstring mpucs1 := "noquads";
modulepar universal charstring mpucs2 := "x" & char(0, 0, 1, 113) & "x" & char(0, 0, 1, 97) & "x";

modulepar boolean mpb1 := true;
modulepar boolean mpb2 := false;

modulepar objid mpobjid1 := objid { 1 1 7 };
modulepar objid mpobjid2;

modulepar verdicttype mpvt1 := pass;
modulepar verdicttype mpvt2 := fail;

modulepar CT mpcomp1 := null;
modulepar CT mpcomp2;

modulepar default mpdef1 := null;
modulepar default mpdef2;

modulepar Size mpenum1 := Small;
modulepar Size mpenum2;

modulepar IntList mplist1 := { };
modulepar IntList mplist2 := { 1, 2 };

modulepar Rec mprec1 := { 10, "yyyy" };
modulepar Rec mprec2 := { num := 3, str := omit };
modulepar Rec mprec3;

modulepar EmptyRec mpemptyrec1 := {};
modulepar EmptyRec mpemptyrec2;

modulepar Uni mpuni1 := { ival := 2 };
modulepar Uni mpuni2 := { bval := true };
modulepar Uni mpuni3;

modulepar TwoStrings mparray1 := { "abc", "def" };
modulepar TwoStrings mparray2 := { "xy", "yx" };

modulepar template integer mptint1 := 7;
modulepar template integer mptint2 := (3..6) ifpresent;

modulepar template float mptf1 := 33.33;
modulepar template float mptf2 := (33.0..66.0);

modulepar template charstring mptcs1 := ("a".."z");
modulepar template charstring mptcs2 := "abc";
modulepar template charstring mptcs3 := pattern "ab???x";

modulepar template universal charstring mptucs1 := (char(0,0,1,97)..char(0,0,1,113)) length (2);
modulepar template universal charstring mptucs2 := "abc" & char(0,0,1,113) & "cba";
modulepar template universal charstring mptucs3;

modulepar template bitstring mptbs1 := '1010'B;
modulepar template bitstring mptbs2 := * length (3..6);
modulepar template bitstring mptbs3 := '11??00'B;

modulepar template hexstring mpths1 := 'AB21'H;
modulepar template hexstring mpths2 := ? length (8);
modulepar template hexstring mpths3 := 'DE*555'H;

modulepar template octetstring mptos1 := '00'O;
modulepar template octetstring mptos2 := omit;
modulepar template octetstring mptos3 := 'A0*'O length (1..5);

modulepar template boolean mptb1 := true;
modulepar template boolean mptb2 := false;

modulepar template CT mptcomp1 := (null, mtc, system);
modulepar template CT mptcomp2;

modulepar template default mptdef1 := null;
modulepar template default mptdef2;

modulepar template verdicttype mptvt1 := none;
modulepar template verdicttype mptvt2 := (pass, fail, error);
modulepar template verdicttype mptvt3;

modulepar template Size mptenum1 := *;
modulepar template Size mptenum2 := (Small, Large);
modulepar template Size mptenum3;

modulepar template objid mptobjid1 := ?;
modulepar template objid mptobjid2 := (objid { 1 2 3 }, objid { 0 0 0 1 });

modulepar template Rec mptrec1 := ?;
modulepar template Rec mptrec2 := { ?, * };
modulepar template Rec mptrec3 := { num := 6, str := omit };

modulepar template EmptyRec mptemptyrec1;
modulepar template EmptyRec mptemptyrec2 := {};

modulepar template IntList mptlist1 := omit;
modulepar template IntList mptlist2 := { 1, 2, * };
modulepar template IntList mptlist3 := { [0] := 0, [1] := 1, [2] := 0 };

modulepar template Uni mptuni1;
modulepar template Uni mptuni2 := complement ( { osval := '0000'O }, { ival := 31 } );
modulepar template Uni mptuni3 := { bval := false };

modulepar template TwoStrings mptarray1;
modulepar template TwoStrings mptarray2 := { "one", "two" };
modulepar template TwoStrings mptarray3 := { [1] := ?, [0] := "x" };

/*****ASN.1 types*******/
modulepar ASN1MyBooleanType tsp_TRUE := false;
modulepar ASN1MyBooleanType tsp_FALSE:= true;
modulepar ASN1MyBooleanType tsp_R1 := false;
modulepar ASN1MyBooleanType tsp_RESULT2 := false;
modulepar MyBitstringType tsp_asnbitstr1 := ''B;
modulepar MyBitstringType tsp_asnbitstr2 := ''B;
modulepar MyBitstringType tsp_asnbitstr3 := ''B;
modulepar MyOctetStringType tsp_asnos1 := '01'O;
modulepar MyOctetStringType tsp_asnos2 := '02'O;
modulepar MyOctetStringType tsp_asnos3 := '03'O;

modulepar MyPrintableString tsp_asnstr1 := "default1"
modulepar MyPrintableString tsp_asnstr2 := "d2"
modulepar MyPrintableString tsp_asnstr3 := "d3"

modulepar MyIntegerType1 tsp_asnint1 :=0;
modulepar MyIntegerType1 tsp_asnint2 :=0;
modulepar MyIntegerType1 tsp_asnint3 :=0;

modulepar MyRealType1 tsp_asnreal1 := 0.0
modulepar MyRealType1 tsp_asnreal2 := 0.0
modulepar MyRealType1 tsp_asnreal3 := 0.0

/******** Test cases (for values) ********/
testcase tc_ref_integer() runs on CT
{
  template integer t_mp1 := 2;
  template integer t_mp2 := 7;
  template integer t_mp3 := 21;
  if (not match(mp1, t_mp1)) {
    setverdict(fail, "Expected(mp1): ", t_mp1, ", got: ", mp1);
  }
  if (not match(mp2, t_mp2)) {
    setverdict(fail, "Expected(mp2): ", t_mp2, ", got: ", mp2);
  }
  if (not match(mp3, t_mp3)) {
    setverdict(fail, "Expected(mp3): ", t_mp3, ", got: ", mp3);
  }
  setverdict(pass);
}

testcase tc_ref_float() runs on CT
{
  template float t_mp4 := -3.0;
  template float t_mp5 := -9.0;
  if (not match(mp4, t_mp4)) {
    setverdict(fail, "Expected(mp4): ", t_mp4, ", got: ", mp4);
  }
  if (not match(mp5, t_mp5)) {
    setverdict(fail, "Expected(mp5): ", t_mp5, ", got: ", mp5);
  }
  setverdict(pass);
}

testcase tc_ref_bitstring() runs on CT
{
  template bitstring t_mpbs1 := '110110110111101101101'B;
  template bitstring t_mpbs2 := '11101101101'B;
  if (not match(mpbs1, t_mpbs1)) {
    setverdict(fail, "Expected(mpbs1): ", t_mpbs1, ", got: ", mpbs1);
  }
  if (not match(mpbs2, t_mpbs2)) {
    setverdict(fail, "Expected(mpbs2): ", t_mpbs2, ", got: ", mpbs2);
  }
  setverdict(pass);
}

testcase tc_ref_hexstring() runs on CT
{
  template hexstring t_mphs1 := '77FF3CC12AA'H;
  template hexstring t_mphs2 := '12AAEE'H;
  if (not match(mphs1, t_mphs1)) {
    setverdict(fail, "Expected(mphs1): ", t_mphs1, ", got: ", mphs1);
  }
  if (not match(mphs2, t_mphs2)) {
    setverdict(fail, "Expected(mphs2): ", t_mphs2, ", got: ", mphs2);
  }
  setverdict(pass);
}

testcase tc_ref_octetstring() runs on CT
{
  template octetstring t_mpos1 := 'DEAD'O;
  template octetstring t_mpos2 := 'A22CDEADC22A'O;
  if (not match(mpos1, t_mpos1)) {
    setverdict(fail, "Expected(mpos1): ", t_mpos1, ", got: ", mpos1);
  }
  if (not match(mpos2, t_mpos2)) {
    setverdict(fail, "Expected(mpos2): ", t_mpos2, ", got: ", mpos2);
  }
  setverdict(pass);
}

testcase tc_ref_charstring() runs on CT
{
  template charstring t_mpcs1 := "abcdefghi";
  template charstring t_mpcs2 := "xxabcdefghixxdef";
  template charstring t_mpcs3 := "noquadsxx";
  if (not match(mpcs1, t_mpcs1)) {
    setverdict(fail, "Expected(mpcs1): ", t_mpcs1, ", got: ", mpcs1);
  }
  if (not match(mpcs2, t_mpcs2)) {
    setverdict(fail, "Expected(mpcs2): ", t_mpcs2, ", got: ", mpcs2);
  }
  if (not match(mpcs3, t_mpcs3)) {
    setverdict(fail, "Expected(mpcs3): ", t_mpcs3, ", got: ", mpcs3);
  }
  setverdict(pass);
}

testcase tc_ref_universal_charstring() runs on CT
{
  template universal charstring t_mpucs1 := "ax" & char(0, 0, 1, 113) & "x" & char(0, 0, 1, 97) & "x";
  template universal charstring t_mpucs2 := char(0, 0, 1, 113) & "rhaj" & char(0, 0, 0, 243) & "abcdefghi" & char(3, 5, 10, 5) & "x";
  if (not match(mpucs1, t_mpucs1)) {
    setverdict(fail, "Expected(mpucs1): ", t_mpucs1, ", got: ", mpucs1);
  }
  if (not match(mpucs2, t_mpucs2)) {
    setverdict(fail, "Expected(mpucs2): ", t_mpucs2, ", got: ", mpucs2);
  }
  setverdict(pass);
}

testcase tc_ref_boolean() runs on CT
{
  template boolean t_mpb1 := false;
  template boolean t_mpb2 := true;
  if (not match(mpb1, t_mpb1)) {
    setverdict(fail, "Expected(mpb1): ", t_mpb1, ", got: ", mpb1);
  }
  if (not match(mpb2, t_mpb2)) {
    setverdict(fail, "Expected(mpb2): ", t_mpb2, ", got: ", mpb2);
  }
  setverdict(pass);
}

testcase tc_ref_objid() runs on CT
{
  template objid t_mpobjid2 := objid { 1 1 7 };
  if (not match(mpobjid2, t_mpobjid2)) {
    setverdict(fail, "Expected(mpobjid2): ", t_mpobjid2, ", got: ", mpobjid2);
  }
  setverdict(pass);
}

testcase tc_ref_verdicttype() runs on CT
{
  template verdicttype t_mpvt2 := pass;
  if (not match(mpvt2, t_mpvt2)) {
    setverdict(fail, "Expected(mpvt2): ", t_mpvt2, ", got: ", mpvt2);
  }
  setverdict(pass);
}

testcase tc_ref_component() runs on CT
{
  template CT t_mpcomp2 := null;
  if (not match(mpcomp2, t_mpcomp2)) {
    setverdict(fail, "Expected(mpcomp2): ", t_mpcomp2, ", got: ", mpcomp2);
  }
  setverdict(pass);
}

testcase tc_ref_default() runs on CT
{
  template default t_mpdef2 := null;
  if (not match(mpdef2, t_mpdef2)) {
    setverdict(fail, "Expected(mpdef2): ", t_mpdef2, ", got: ", mpdef2);
  }
  setverdict(pass);
}

testcase tc_ref_enumerated() runs on CT
{
  template Size t_mpenum1 := Large;
  template Size t_mpenum2 := Small;
  if (not match(mpenum1, t_mpenum1)) {
    setverdict(fail, "Expected(mpenum1): ", t_mpenum1, ", got: ", mpenum1);
  }
  if (not match(mpenum2, t_mpenum2)) {
    setverdict(fail, "Expected(mpenum2): ", t_mpenum2, ", got: ", mpenum2);
  }
  setverdict(pass);
}

testcase tc_ref_record_of() runs on CT
{
  template IntList t_mplist1 := { 1, 2 };
  template IntList t_mplist2 := { 10, 3, 1, 2 };
  if (not match(mplist1, t_mplist1)) {
    setverdict(fail, "Expected(mplist1): ", t_mplist1, ", got: ", mplist1);
  }
  if (not match(mplist2, t_mplist2)) {
    setverdict(fail, "Expected(mplist2): ", t_mplist2, ", got: ", mplist2);
  }
  setverdict(pass);
}

testcase tc_ref_record() runs on CT
{
  template Rec t_mprec1 := { num := 3, str := omit };
  template Rec t_mprec2 := { num := 10, str := "yyyy" };
  template Rec t_mprec3 := { num := 1, str := "abcdefghi" };
  if (not match(mprec1, t_mprec1)) {
    setverdict(fail, "Expected(mprec1): ", t_mprec1, ", got: ", mprec1);
  }
  if (not match(mprec2, t_mprec2)) {
    setverdict(fail, "Expected(mprec2): ", t_mprec2, ", got: ", mprec2);
  }
  if (not match(mprec3, t_mprec3)) {
    setverdict(fail, "Expected(mprec3): ", t_mprec3, ", got: ", mprec3);
  }
  setverdict(pass);
}

testcase tc_ref_empty_record() runs on CT
{
  template EmptyRec t_mpemptyrec2 := { };
  if (not match(mpemptyrec2, t_mpemptyrec2)) {
    setverdict(fail, "Expected(mpemptyrec2): ", t_mpemptyrec2, ", got: ", mpemptyrec2);
  }
  setverdict(pass);
}

testcase tc_ref_union() runs on CT
{
  template Uni t_mpuni1 := { bval := true };
  template Uni t_mpuni2 := { ival := 2 };
  template Uni t_mpuni3 := { osval := 'DEADA22CDEADC22A'O };
  if (not match(mpuni1, t_mpuni1)) {
    setverdict(fail, "Expected(mpuni1): ", t_mpuni1, ", got: ", mpuni1);
  }
  if (not match(mpuni2, t_mpuni2)) {
    setverdict(fail, "Expected(mpuni2): ", t_mpuni2, ", got: ", mpuni2);
  }
  if (not match(mpuni3, t_mpuni3)) {
    setverdict(fail, "Expected(mpuni3): ", t_mpuni3, ", got: ", mpuni3);
  }
  setverdict(pass);
}

testcase tc_ref_array() runs on CT
{
  template TwoStrings t_mparray1 := { "xy", "abcdefghixx" };
  template TwoStrings t_mparray2 := { "xy", "abcdefghixx" };
  if (not match(mparray1, t_mparray1)) {
    setverdict(fail, "Expected(mparray1): ", t_mparray1, ", got: ", mparray1);
  }
  if (not match(mparray2, t_mparray2)) {
    setverdict(fail, "Expected(mparray2): ", t_mparray2, ", got: ", mparray2);
  }
  setverdict(pass);
}

/******** Test cases (for templates) ********/

testcase tc_ref_integer_template() runs on CT
{
  template integer mptint1_exp := (3 .. 6) ifpresent;
  template integer mptint2_exp := (8, 7, -21, -1);
  if (log2str(mptint1) != log2str(mptint1_exp)) {
    setverdict(fail, "Expected(mptint1): ", mptint1_exp, ", got: ", mptint1);
  }
  if (log2str(mptint2) != log2str(mptint2_exp)) {
    setverdict(fail, "Expected(mptint2): ", mptint2_exp, ", got: ", mptint2);
  }
  setverdict(pass);
}

testcase tc_ref_float_template() runs on CT
{
  template float mptf1_exp := (33.000000 .. 66.000000) ifpresent;
  template float mptf2_exp := (-1.500000, -13.500000);
  if (log2str(mptf1) != log2str(mptf1_exp)) {
    setverdict(fail, "Expected(mptf1): ", mptf1_exp, ", got: ", mptf1);
  }
  if (log2str(mptf2) != log2str(mptf2_exp)) {
    setverdict(fail, "Expected(mptf2): ", mptf2_exp, ", got: ", mptf2);
  }
  setverdict(pass);
}

testcase tc_ref_bitstring_template() runs on CT
{
  template bitstring mptbs1_exp := '110110110110111101101101011'B;
  template bitstring mptbs2_exp := * length (3 .. 6) ifpresent;
  template bitstring mptbs3_exp := '11??00'B;
  if (log2str(mptbs1) != log2str(mptbs1_exp)) {
    setverdict(fail, "Expected(mptbs1): ", mptbs1_exp, ", got: ", mptbs1);
  }
  if (log2str(mptbs2) != log2str(mptbs2_exp)) {
    setverdict(fail, "Expected(mptbs2): ", mptbs2_exp, ", got: ", mptbs2);
  }
  if (log2str(mptbs3) != log2str(mptbs3_exp)) {
    setverdict(fail, "Expected(mptbs3): ", mptbs3_exp, ", got: ", mptbs3);
  }
  setverdict(pass);
}

testcase tc_ref_hexstring_template() runs on CT
{
  template hexstring mpths1_exp := 'AB77FF3CC12AABA'H;
  template hexstring mpths2_exp := ? length (8);
  template hexstring mpths3_exp := 'DE*555'H length (7 .. infinity);
  if (log2str(mpths1) != log2str(mpths1_exp)) {
    setverdict(fail, "Expected(mpths1): ", mpths1_exp, ", got: ", mpths1);
  }
  if (log2str(mpths2) != log2str(mpths2_exp)) {
    setverdict(fail, "Expected(mpths2): ", mpths2_exp, ", got: ", mpths2);
  }
  if (log2str(mpths3) != log2str(mpths3_exp)) {
    setverdict(fail, "Expected(mpths3): ", mpths3_exp, ", got: ", mpths3);
  }
  setverdict(pass);
}

testcase tc_ref_octetstring_template() runs on CT
{
  template octetstring mptos1_exp := '01DEAD10'O;
  template octetstring mptos2_exp := omit;
  template octetstring mptos3_exp := 'A0*'O length (1 .. 5);
  if (log2str(mptos1) != log2str(mptos1_exp)) {
    setverdict(fail, "Expected(mptos1): ", mptos1_exp, ", got: ", mptos1);
  }
  if (log2str(mptos2) != log2str(mptos2_exp)) {
    setverdict(fail, "Expected(mptos2): ", mptos2_exp, ", got: ", mptos2);
  }
  if (log2str(mptos3) != log2str(mptos3_exp)) {
    setverdict(fail, "Expected(mptos3): ", mptos3_exp, ", got: ", mptos3);
  }
  setverdict(pass);
}

testcase tc_ref_charstring_template() runs on CT
{
  template charstring mptcs1_exp := ("a" .. "z") length (2 .. 6);
  template charstring mptcs2_exp := "xxabcxx" ifpresent;
  template charstring mptcs3_exp := pattern "ab???xdtwo";
  if (log2str(mptcs1) != log2str(mptcs1_exp)) {
    setverdict(fail, "Expected(mptcs1): ", mptcs1_exp, ", got: ", mptcs1);
  }
  if (log2str(mptcs2) != log2str(mptcs2_exp)) {
    setverdict(fail, "Expected(mptcs2): ", mptcs2_exp, ", got: ", mptcs2);
  }
  if (log2str(mptcs3) != log2str(mptcs3_exp)) {
    setverdict(fail, "Expected(mptcs3): ", mptcs3_exp, ", got: ", mptcs3);
  }
  setverdict(pass);
}

testcase tc_ref_universal_charstring_template() runs on CT
{
  template universal charstring mptucs1_exp := pattern "a??bmacro\q{1,2,3,4}ax\q{0,0,1,113}x\q{0,0,1,97}x";
  template universal charstring mptucs2_exp := "zz" & char(0, 0, 1, 113) & "rhaj" & char(0, 0, 0, 243) & "abcdefghi" & char(3, 5, 10, 5) & "xzz";
  template universal charstring mptucs3_exp := ((char(0, 0, 1, 97) .. char(0, 0, 1, 113)) length (2), ("a" .. "z"));
  if (log2str(mptucs1) != log2str(mptucs1_exp)) {
    setverdict(fail, "Expected(mptucs1): ", mptucs1_exp, ", got: ", mptucs1);
  }
  if (log2str(mptucs2) != log2str(mptucs2_exp)) {
    setverdict(fail, "Expected(mptucs2): ", mptucs2_exp, ", got: ", mptucs2);
  }
  if (log2str(mptucs3) != log2str(mptucs3_exp)) {
    setverdict(fail, "Expected(mptucs3): ", mptucs3_exp, ", got: ", mptucs3);
  }
  setverdict(pass);
}

testcase tc_ref_boolean_template() runs on CT
{
  template boolean mptb1_exp := (true, false);
  template boolean mptb2_exp := false;
  if (log2str(mptb1) != log2str(mptb1_exp)) {
    setverdict(fail, "Expected(mptb1): ", mptb1_exp, ", got: ", mptb1);
  }
  if (log2str(mptb2) != log2str(mptb2_exp)) {
    setverdict(fail, "Expected(mptb2): ", mptb2_exp, ", got: ", mptb2);
  }
  setverdict(pass);
}

testcase tc_ref_objid_template() runs on CT
{
  template objid mptobjid1_exp := (objid { 1 2 3 }, objid { 0 0 0 1 });
  template objid mptobjid2_exp := objid { 1 1 7 };
  if (log2str(mptobjid1) != log2str(mptobjid1_exp)) {
    setverdict(fail, "Expected(mptobjid1): ", mptobjid1_exp, ", got: ", mptobjid1);
  }
  if (log2str(mptobjid2) != log2str(mptobjid2_exp)) {
    setverdict(fail, "Expected(mptobjid2): ", mptobjid2_exp, ", got: ", mptobjid2);
  }
  setverdict(pass);
}

testcase tc_ref_verdicttype_template() runs on CT
{
  template verdicttype mptvt1_exp := (pass, fail, error);
  template verdicttype mptvt2_exp := pass;
  template verdicttype mptvt3_exp := inconc;
  if (log2str(mptvt1) != log2str(mptvt1_exp)) {
    setverdict(fail, "Expected(mptvt1): ", mptvt1_exp, ", got: ", mptvt1);
  }
  if (log2str(mptvt2) != log2str(mptvt2_exp)) {
    setverdict(fail, "Expected(mptvt2): ", mptvt2_exp, ", got: ", mptvt2);
  }
  if (log2str(mptvt3) != log2str(mptvt3_exp)) {
    setverdict(fail, "Expected(mptvt3): ", mptvt3_exp, ", got: ", mptvt3);
  }
  setverdict(pass);
}

testcase tc_ref_component_template() runs on CT
{
  template CT mptcomp2_exp := (null, mtc, system);
  if (log2str(mptcomp2) != log2str(mptcomp2_exp)) {
    setverdict(fail, "Expected(mptcomp2): ", mptcomp2_exp, ", got: ", mptcomp2);
  }
  setverdict(pass);
}

testcase tc_ref_default_template() runs on CT
{
  template default mptdef2_exp := null;
  if (log2str(mptdef2) != log2str(mptdef2_exp)) {
    setverdict(fail, "Expected(mptdef2): ", mptdef2_exp, ", got: ", mptdef2);
  }
  setverdict(pass);
}

testcase tc_ref_enumerated_template() runs on CT
{
  template Size mptenum1_exp := (Small, Large);
  template Size mptenum2_exp := Small;
  template Size mptenum3_exp := Medium;
  if (log2str(mptenum1) != log2str(mptenum1_exp)) {
    setverdict(fail, "Expected(mptenum1): ", mptenum1_exp, ", got: ", mptenum1);
  }
  if (log2str(mptenum2) != log2str(mptenum2_exp)) {
    setverdict(fail, "Expected(mptenum2): ", mptenum2_exp, ", got: ", mptenum2);
  }
  if (log2str(mptenum3) != log2str(mptenum3_exp)) {
    setverdict(fail, "Expected(mptenum3): ", mptenum3_exp, ", got: ", mptenum3);
  }
  setverdict(pass);
}

testcase tc_ref_record_of_template() runs on CT
{
  template IntList mptlist1_exp := { *, 2, 1 } length (1 .. 4);
  template IntList mptlist2_exp := { 0, 1, 0 };
  template IntList mptlist3_exp := complement({ 0, 1, 0 }, { 1, 2 }, { 10, 3, 1, 2 });
  if (log2str(mptlist1) != log2str(mptlist1_exp)) {
    setverdict(fail, "Expected(mptlist1): ", mptlist1_exp, ", got: ", mptlist1);
  }
  if (log2str(mptlist2) != log2str(mptlist2_exp)) {
    setverdict(fail, "Expected(mptlist2): ", mptlist2_exp, ", got: ", mptlist2);
  }
  if (log2str(mptlist3) != log2str(mptlist3_exp)) {
    setverdict(fail, "Expected(mptlist3): ", mptlist3_exp, ", got: ", mptlist3);
  }
  setverdict(pass);
}

testcase tc_ref_record_template() runs on CT
{
  template Rec mptrec1_exp := { num := ?, str := * };
  template Rec mptrec2_exp := { num := ?, str := ("a" .. "z") length (2 .. 6) };
  template Rec mptrec3_exp := ({ num := 6, str := omit }, { num := 3, str := omit }, { num := 10, str := "yyyy" }, { num := 1, str := "abcdefghi" });
  if (log2str(mptrec1) != log2str(mptrec1_exp)) {
    setverdict(fail, "Expected(mptrec1): ", mptrec1_exp, ", got: ", mptrec1);
  }
  if (log2str(mptrec2) != log2str(mptrec2_exp)) {
    setverdict(fail, "Expected(mptrec2): ", mptrec2_exp, ", got: ", mptrec2);
  }
  if (log2str(mptrec3) != log2str(mptrec3_exp)) {
    setverdict(fail, "Expected(mptrec3): ", mptrec3_exp, ", got: ", mptrec3);
  }
  setverdict(pass);
}

testcase tc_ref_empty_record_template() runs on CT
{
  template EmptyRec mptemptyrec1_exp := { };
  template EmptyRec mptemptyrec2_exp := { };
  if (log2str(mptemptyrec1) != log2str(mptemptyrec1_exp)) {
    setverdict(fail, "Expected(mptemptyrec1): ", mptemptyrec1_exp, ", got: ", mptemptyrec1);
  }
  if (log2str(mptemptyrec2) != log2str(mptemptyrec2_exp)) {
    setverdict(fail, "Expected(mptemptyrec2): ", mptemptyrec2_exp, ", got: ", mptemptyrec2);
  }
  setverdict(pass);
}

testcase tc_ref_union_template() runs on CT
{
  template Uni mptuni1_exp := complement ({ osval := '0000'O }, { ival := 31 });
  template Uni mptuni2_exp := { ival := (8, 7, -21, -1) };
  template Uni mptuni3_exp := ({ bval := true }, { ival := 2 }, { osval := 'DEADA22CDEADC22A'O });
  if (log2str(mptuni1) != log2str(mptuni1_exp)) {
    setverdict(fail, "Expected(mptuni1): ", mptuni1_exp, ", got: ", mptuni1);
  }
  if (log2str(mptuni2) != log2str(mptuni2_exp)) {
    setverdict(fail, "Expected(mptuni2): ", mptuni2_exp, ", got: ", mptuni2);
  }
  if (log2str(mptuni3) != log2str(mptuni3_exp)) {
    setverdict(fail, "Expected(mptuni3): ", mptuni3_exp, ", got: ", mptuni3);
  }
  setverdict(pass);
}

testcase tc_ref_array_template() runs on CT
{
  template TwoStrings mptarray1_exp := { "one", "two" } ifpresent;
  template TwoStrings mptarray2_exp := { "x", ? };
  template TwoStrings mptarray3_exp := { "xy", "abcdefghixx" };
  if (log2str(mptarray1) != log2str(mptarray1_exp)) {
    setverdict(fail, "Expected(mptarray1): ", mptarray1_exp, ", got: ", mptarray1);
  }
  if (log2str(mptarray2) != log2str(mptarray2_exp)) {
    setverdict(fail, "Expected(mptarray2): ", mptarray2_exp, ", got: ", mptarray2);
  }
  if (log2str(mptarray3) != log2str(mptarray3_exp)) {
    setverdict(fail, "Expected(mptarray3): ", mptarray3_exp, ", got: ", mptarray3);
  }
  setverdict(pass);
}

//********** ASN.1 *******************

testcase tc_asn1_bool() runs on CT {
  if(tsp_TRUE == true ){
    setverdict(pass)
  } else {
    setverdict(fail, "true expected, false got")
  }
  if(tsp_FALSE == false ){
    setverdict(pass)
  } else {
    setverdict(fail, "false expected, true got")
  }
}
testcase tc_asn1_bitstr() runs on CT {
  if(tsp_asnbitstr3 == '0010101'B) {
    setverdict(pass);
  } else {
    setverdict(fail, "BIT STRING concat error")
  }
}

testcase tc_asn1_octetstr() runs on CT {
  if(tsp_asnos3 == '12EF0123456789'O){
    setverdict(pass);
  } else {
    setverdict(fail, "OCTET STRING concat error")
  }
}

testcase tc_asn1_charstr() runs on CT {
  if(tsp_asnstr3 == "Laci1()tail"){
    setverdict(pass);
  } else {
    setverdict(fail, "PrintableString concat error")
  }
}

testcase tc_asn1_integer() runs on CT {
  if(tsp_asnint3 == -4) {
    setverdict(pass)
  } else {
    setverdict(fail,"INTEGER calc error in cfg file")
  }
}

testcase tc_asn1_real() runs on CT {
  var float eps := 0.01;
  log("tsp_asnreal1:",tsp_asnreal1)
  log("tsp_asnreal2:",tsp_asnreal2)
  log("tsp_asnreal3:",tsp_asnreal3)
  if((-eps < tsp_asnreal3-(-4.0)) and (tsp_asnreal3-(-4.0) < eps) ) {
    setverdict(pass)
  } else {
    setverdict(fail,"REAL calc error in cfg file")
  }
}
control {
  execute(tc_ref_integer());
  execute(tc_ref_float());
  execute(tc_ref_bitstring());
  execute(tc_ref_hexstring());
  execute(tc_ref_octetstring());
  execute(tc_ref_charstring());
  execute(tc_ref_universal_charstring());
  execute(tc_ref_boolean());
  execute(tc_ref_objid());
  execute(tc_ref_verdicttype());
  execute(tc_ref_component());
  execute(tc_ref_default());
  execute(tc_ref_enumerated());
  execute(tc_ref_record_of());
  execute(tc_ref_record());
  execute(tc_ref_empty_record());
  execute(tc_ref_union());
  execute(tc_ref_array());
  execute(tc_ref_integer_template());
  execute(tc_ref_float_template());
  execute(tc_ref_bitstring_template());
  execute(tc_ref_hexstring_template());
  execute(tc_ref_octetstring_template());
  execute(tc_ref_charstring_template());
  execute(tc_ref_universal_charstring_template());
  execute(tc_ref_boolean_template());
  execute(tc_ref_objid_template());
  execute(tc_ref_verdicttype_template());
  execute(tc_ref_component_template());
  execute(tc_ref_default_template());
  execute(tc_ref_enumerated_template());
  execute(tc_ref_record_of_template());
  execute(tc_ref_record_template());
  execute(tc_ref_empty_record_template());
  execute(tc_ref_union_template());
  execute(tc_ref_array_template());
  execute(tc_asn1_bool());
  execute(tc_asn1_bitstr());
  execute(tc_asn1_octetstr());
  execute(tc_asn1_charstr());
  execute(tc_asn1_integer());
  //execute(tc_asn1_real());
}

}
