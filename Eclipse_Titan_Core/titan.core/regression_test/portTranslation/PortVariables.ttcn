/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Szabo, Bence Janos
 *
 ******************************************************************************/
module PortVariables {

	type record of integer RoI;

	type port VP1 message {
		out integer, charstring, RoI;
		in integer, charstring, RoI;
	} with {
		extension "provider"
	}

	type port NVP1 message map to VP1 {
		out charstring to integer with char_to_default_int_template() : charstring with char_to_default_char() : charstring with char_to_default_const_char() : RoI with char_to_default_roi() : integer with char_to_int();
		in integer, charstring, RoI;

		const charstring c_cs := "DefaultConst"
		var charstring cs := "Default";
		var template integer i := 3;
		var template RoI roi := {1,2,3};
		var integer num;
	}

	function char_to_default_int_template(in charstring input, out integer output) port NVP1 {
		if (input == "int template") {
			output := valueof(i);
			port.setstate(0);
			i := 666;
		} else {
			port.setstate(1);
		}
	} with {
		extension "prototype(fast)";
	}

	function char_to_default_char(in charstring input, out charstring output) port NVP1 {
		if (input == "charstring") {
			output := cs;
			port.setstate(0);
			cs := "Modified";
		} else {
			port.setstate(1);
		}
	} with {
		extension "prototype(fast)";
	}

	function char_to_default_const_char(in charstring input, out charstring output) port NVP1 {
		if (input == "const charstring") {
			output := c_cs;
			port.setstate(0);
		} else {
			port.setstate(1);
		}
	} with {
		extension "prototype(fast)";
	}

	function char_to_default_roi(in charstring input, out RoI output) port NVP1 {
		if (input == "RoI") {
			output := valueof(roi);
			port.setstate(0);
			roi := {6,6,6};
		} else {
			port.setstate(1);
		}
	} with {
		extension "prototype(fast)";
	}

	function char_to_int(in charstring input, out integer output) port NVP1 {
		if (input == "Unbound") {
			if (isbound(num)) {
				output := num;
			} else {
				output := 0;
			}
			port.setstate(0);
			num := 666;
		} else {
			port.setstate(1);
		}
	} with {
		extension "prototype(fast)";
	}





	type component MyComp {
		port NVP1 p[2];
	}

	type component System {
		port VP1 p1;
		port VP1 p2;
	}


	testcase tc_variable_change_test(boolean test_changed) runs on MyComp system System {
		map(self:p[0], system:p1);

		// Test that the default values of port variables are set
		// and change them inside the translation functions
		p[0].send("int template");
		timer t := 0.5;
		t.start;
		alt {
			[] p[0].receive(3) { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		p[0].send("charstring");
		t.start;
		alt {
			[] p[0].receive("Default") { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		p[0].send("const charstring");
		t.start;
		alt {
			[] p[0].receive("DefaultConst") { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		var RoI roi := {1,2,3};
		p[0].send("RoI");
		t.start;
		alt {
			[] p[0].receive(roi) { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		p[0].send("Unbound");
		t.start;
		alt {
			// 0 means that num is unbound
			[] p[0].receive(0) { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		// Test that the variables are changed
		if (test_changed) {
			p[0].send("int template");
			t.start;
			alt {
				[] p[0].receive(666) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			p[0].send("charstring");
			t.start;
			alt {
				[] p[0].receive("Modified") { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			// The const did not change
			p[0].send("const charstring");
			t.start;
			alt {
				[] p[0].receive("DefaultConst") { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			roi := {6,6,6};
			p[0].send("RoI");
			t.start;
			alt {
				[] p[0].receive(roi) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			p[0].send("Unbound");
			t.start;
			alt {
				[] p[0].receive(666) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;
		}

		// p[0] and p[1] should have different port variable instances
		// Theese tests would fail if they would share the variables
		map(self:p[1], system:p2);

		// Test that the default values of port variables are set
		// and change them inside the translation functions
		p[1].send("int template");
		t.start;
		alt {
			[] p[1].receive(3) { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		p[1].send("charstring");
		t.start;
		alt {
			[] p[1].receive("Default") { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		p[1].send("const charstring");
		t.start;
		alt {
			[] p[1].receive("DefaultConst") { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		roi := {1,2,3};
		p[1].send("RoI");
		t.start;
		alt {
			[] p[1].receive(roi) { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		p[1].send("Unbound");
			t.start;
			alt {
				[] p[1].receive(0) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

		// Test that the variables are changed
		if (test_changed) {
			p[1].send("int template");
			t.start;
			alt {
				[] p[1].receive(666) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			p[1].send("charstring");
			t.start;
			alt {
				[] p[1].receive("Modified") { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			// The const did not change
			p[1].send("const charstring");
			t.start;
			alt {
				[] p[1].receive("DefaultConst") { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			roi := {6,6,6};
			p[1].send("RoI");
			t.start;
			alt {
				[] p[1].receive(roi) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			p[1].send("Unbound");
			t.start;
			alt {
				[] p[1].receive(666) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;
		}
	}

	control {
		execute(tc_variable_change_test(true));
		// Test that the variables are restored to the default values
		execute(tc_variable_change_test(false));
	}
}