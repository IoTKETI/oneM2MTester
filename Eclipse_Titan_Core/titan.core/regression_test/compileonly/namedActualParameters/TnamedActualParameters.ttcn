/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Kovacs, Ferenc
 *   Raduly, Csaba
 *   Szabados, Kristof
 *
 ******************************************************************************/
module TnamedActualParameters
{
  type component C1 { }

  type component C2
  {
    timer T_e := 2.718281828459045;
  }

  function foo(in integer par1, in float par2, in charstring par3, in boolean par4 := false, in hexstring par5 := 'DECAFBAD'H)
  {
    setverdict(pass);
  }

  testcase foo_tc() runs on C1
  {
    foo(13, 3.1415926535897932384626433, "Hello", true, 'BAADF00D'H);
    foo(42, 2.718281828459045, "Yikes"); // ok, par4-5 defaulted
    foo(par1 := 3, par2 := 0.0, par3 := "Nomen est omen", par4 := true, par5 := 'BABEFACE'H); // all named parameters
    foo(par1 := 3, par2 := 6.02214199E23, par3 := "A"); // par1-3 named, par4-5 defaulted
  }

  altstep foo_altstep(in integer par1, in float par2, in charstring par3, in boolean par4 := false, in hexstring par5 := 'DECAFBAD'H) runs on C2
  {
    [] T_e.timeout { setverdict(pass); }
  }

  testcase foo_altstep_tc() runs on C2
  {
    T_e.start;
    alt {
      [] foo_altstep(13, 2.718281828459045535897932384626433, "Hello", true, 'BAADF00D'H);
      [] foo_altstep(42, 2.718281828459045, "Yikes"); // ok, par4-5 defaulted
      [] foo_altstep(par1 := 3, par2 := 0.0, par3 := "Nomen est omen", par4 := true, par5 := 'BABEFACE'H); // all named parameters
      [] foo_altstep(par1 := 3, par2 := 6.02214199E23, par3 := "A"); // par1-3 named, par4-5 defaulted
    }
  }

  function omit_default(in integer par1, in float par2, in charstring par3, in boolean par4 := false, in hexstring par5 := 'DECAFBAD'H)
  {
    setverdict(pass);
  }

  testcase omit_default_tc() runs on C1
  {
    // OK: omit all unnamed parameters
    omit_default(par1 := 4, par2 := 6.66, par3 := "string");
  }

  altstep omit_default_altstep(in integer par1, in float par2, in charstring par3, in boolean par4 := false, in hexstring par5 := 'DECAFBAD'H)
  {
    [] any timer.timeout { setverdict(pass); }
  }

  testcase omit_default_altstep_tc() runs on C2
  {
    T_e.start;
    alt {
      // OK: omit all unnamed parameters
      [] omit_default_altstep(par1 := 4, par2 := 6.66, par3 := "string");
    }
  }

  function omit_explicit(in integer par1, in float par2, in charstring par3, in boolean par4 := false, in hexstring par5 := 'DECAFBAD'H)
  {
    setverdict(pass);
  }

  testcase omit_explicit_tc() runs on C1
  {
    // OK: par1-3 omitted from the unnamed part but set in the named part
    omit_explicit(par1 := 13, par2 := 127.001, par3 := "Home, sweet home", par4:=false, par5:='00000000'H);
  }

  altstep omit_explicit_altstep(in integer par1, in float par2, in charstring par3, in boolean par4 := false, in hexstring par5 := 'DECAFBAD'H)
  {
    [] any timer.timeout { setverdict(pass); }
  }

  testcase omit_explicit_altstep_tc() runs on C2
  {
    T_e.start;
    alt {
      // OK: par1-3 omitted from the unnamed part but set in the named part
      [] omit_explicit_altstep( par1 := 13, par2 := 127.001, par3 := "Home, sweet home", par4:=false, par5:='00000000'H);
    }
  }

  function omit_omit(in integer par1, in float par2, in charstring par3, in boolean par4 := false, in hexstring par5 := 'DECAFBAD'H)
  {
    setverdict(pass);
  }

  testcase omit_omit_tc() runs on C1
  {
    // OK: par1-3 from named, par4-5 from defaults
    omit_omit(par1 := 4, par2 := 4.0, par3 := "four");
  }

  altstep omit_omit_altstep(in integer par1, in float par2, in charstring par3, in boolean par4 := false, in hexstring par5 := 'DECAFBAD'H)
  {
    [] any timer.timeout { setverdict(pass); }
  }

  testcase omit_omit_altstep_tc() runs on C2
  {
    T_e.start;
    alt {
      // OK: par1-3 from named, par4-5 from defaults
      [] omit_omit_altstep(par1 := 4, par2 := 4.0, par3 := "four");
    }
  }

  function tcparam(in integer par1, in float par2, in charstring par3, in boolean par4 := false, in hexstring par5 := 'DECAFBAD'H)
  {
    setverdict(pass);
  }

  testcase tcparam_tc(in integer par1, in float par2, in charstring par3, in boolean par4 := false, in hexstring par5 := 'DECAFBAD'H) runs on C1
  {
    tcparam(par1, par2, par3, par4, par5);
  }

  altstep tcparam_altstep(in integer par1, in float par2, in charstring par3, in boolean par4 := false, in hexstring par5 := 'DECAFBAD'H)
  {
    [] any timer.timeout { setverdict(pass); }
  }

  testcase tcparam_altstep_tc(in integer par1, in float par2, in charstring par3, in boolean par4 := false, in hexstring par5 := 'DECAFBAD'H) runs on C2
  {
    T_e.start;
    alt {
      [] tcparam_altstep(par1, par2, par3, par4, par5);
    }
  }

  // For HK33280.
  altstep HK33280_as(in integer par1) { [] any timer.timeout { setverdict(pass) } }
  function HK33280(in integer par1) { }
  testcase HK33280_tc(in integer par1, in integer par2) runs on C2
  {
    T_e.start
    alt { [] HK33280_as(par1 := par1 + par1 + par1) }
    HK33280(par1 := 1 + 2 * par1 + par1)
  }

  control
  {
    execute(tcparam_tc(par1 := 42, par2 := 0.0, par3 := "zero", par4 := true, par5 := '11111111'H)); // named
    execute(tcparam_altstep_tc(par1 := 42, par2 := 0.0, par3 := "zero", par4 := true, par5 := '11111111'H)); // named
    execute(HK33280_tc(par1 := 1 + 2 + 3, par2 := 1 + 2 + 3 + 4)); // named
  }
}
