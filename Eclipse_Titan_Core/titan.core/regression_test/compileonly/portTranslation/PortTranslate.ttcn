/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Szabo, Bence Janos
 *
 ******************************************************************************/
module PortTranslate {


	type port P1 message {
		in integer
	} with {
		extension "provider"
	}

	type port PT1 message map to P1 {
		in integer from charstring with str_to_int() : charstring with str_to_int() : octetstring with oct_to_int()
	}

	type port PT2 message map to P1 {
		in integer from charstring with str_to_int() : charstring with str_to_int() : octetstring with oct_to_int()
		in charstring from integer with int_to_str() : integer with int_to_str() : octetstring with oct_to_str()
	}

///////////////////////////////////////////////////////////////////////////////

	type port P1_ message {
		in integer, hexstring
	} with {
		extension "provider"
	}

	type port P2_ message {
		in charstring, octetstring
	} with {
		extension "provider"
	}
	
	type port PT2_ message map to P1_, P2_ {
		in integer from octetstring with oct_to_int() : hexstring with hex_to_int() : charstring with str_to_int()
		in charstring from octetstring with oct_to_str() : hexstring with hex_to_str() : integer with int_to_str()
	}

///////////////////////////////////////////////////////////////////////////////

	type component MyComp {
		port PT1 pt1
		port PT2 pt2
		port PT2_ pt2_
	}

	type component MySystem {
		port P1 p1
		port P1_ p1_
		port P2 p2
		port P2_ p2_
	}

	// Check that mapping is possible
	testcase tc_map() runs on MyComp system MySystem {
		map(self:pt1, system:p1);
		map(self:pt2, system:p1);
		map(self:pt2_, system:p1_);
		map(self:pt2_, system:p2_);
	}

///////////////////////////////////////////////////////////////////////////////

	type port P2 message {
		in integer , charstring
	} with {
		extension "provider"
	}

	type port PT3 message map to P2 {
		in integer from charstring with str_to_int()
		in charstring from integer with int_to_str()
	}

///////////////////////////////////////////////////////////////////////////////

	type port P3 message {
		in integer, charstring
		inout octetstring
	} with {
		extension "provider"
	}

	type port PT4 message map to P3 {
		in integer
		in charstring
		inout octetstring
	}

///////////////////////////////////////////////////////////////////////////////

	type port P4 message {
		in integer, charstring
		in octetstring
		out octetstring
	} with {
		extension "provider"
	}

	type port PT5 message map to P4 {
		in integer
		in charstring
		inout octetstring
	}

///////////////////////////////////////////////////////////////////////////////

	type port P5 message {
		in integer, charstring
		in octetstring
		out octetstring
	} with {
		extension "provider"
	}

	type port PT6 message map to P5 {
		in integer
		in charstring
		in octetstring
		out octetstring
	}

///////////////////////////////////////////////////////////////////////////////

	type port P6 message {
		in integer, charstring
		in octetstring
		out octetstring, integer
	} with {
		extension "provider"
	}

	type port PT7 message map to P6 {
		in integer
		in charstring
		in octetstring
		out octetstring to hexstring with oct_to_hex() : hexstring with oct_to_hex(), integer to hexstring with int_to_hex() : hexstring with int_to_hex()
	}

///////////////////////////////////////////////////////////////////////////////

	type port P7 message {
		in integer
	} with {
		extension "provider"
	}

	type port P8 message {
		in integer
	} with {
		extension "provider"
	}

	type port PT9 message map to P7, P8 {
		in integer
	}

///////////////////////////////////////////////////////////////////////////////

	type port P9 message {
		in integer
		out charstring, octetstring
	} with {
		extension "provider"
	}

	type port P10 message {
		in integer
		out octetstring, charstring
	} with {
		extension "provider"
	}

	type port PT10 message map to P9, P10 {
		in integer
		out charstring to octetstring with str_to_oct(), octetstring to charstring with oct_to_str()
	}


///////////////////////////////////////////////////////////////////////////////

	type port P13 message {
		in integer, hexstring
		out charstring, octetstring
	} with {
		extension "provider"
	}

	type port P14 message {
		in integer
		out octetstring, charstring
	} with {
		extension "provider"
	}

	type port PT12 message map to P13, P14 {
		in integer, hexstring
		out charstring, octetstring
	}

///////////////////////////////////////////////////////////////////////////////

	type port P15 message {
		in integer, hexstring
		out charstring, octetstring
		inout bitstring
	} with {
		extension "provider"
	}

	type port P16 message {
		in integer, bitstring
		out octetstring, charstring, bitstring
	} with {
		extension "provider"
	}

	type port PT13 message map to P15, P16 {
		in integer, hexstring
		out charstring, octetstring
		inout bitstring
	}

///////////////////////////////////////////////////////////////////////////////

	type port P17 message {
		out integer, hexstring, charstring
	} with {
		extension "provider"
	}

	type port P18 message {
		out charstring, octetstring, integer
	} with {
		extension "provider"
	}
	
	type port PT14 message map to P17, P18 {
		out integer to bitstring with int_to_bit() : hexstring with int_to_hex()
		out charstring to bitstring with str_to_bit() : hexstring with str_to_hex()
	}


///////////////////////////////////////////////////////////////////////////////

	type port P19 message {
		inout integer
	} with {
		extension "provider"
	}
	
	type port PT15 message map to P19 {
		out integer
		in integer
	}

///////////////////////////////////////////////////////////////////////////////

	type port P20 message {
		out charstring
		out bitstring
	} with {
		extension "provider"
	}

	type port P21 message {
		out integer
		out hexstring
	} with {
		extension "provider"
	}

	type port P22 message {
		out octetstring
		out hexstring
	} with {
		extension "provider"
	}

	type port PT16 message map to P20, P21, P22 {
		out integer to charstring with int_to_str() : octetstring with int_to_oct()
		out bitstring to hexstring with bit_to_hex()
	}


	type component Comp1 {
		port PT16 pt16[4][5][5];
		port P22  p22[3][5][6];
	}

	testcase tc_port_arr() runs on Comp1 {
		map(self:pt16[1][2][3], system:p22[1][2][3]);
	}

	/* Conversion functions */

	function int_to_str(in integer i, out charstring j) {

	} with {
		extension "prototype(fast)";
	}

	function int_to_oct(in integer i, out octetstring j) {

	} with {
		extension "prototype(fast)";
	}

	function int_to_bit(in integer i, out bitstring j) {

	} with {
		extension "prototype(fast)";
	}

	function int_to_hex(in integer i, out hexstring j) {

	} with {
		extension "prototype(fast)";
	}

	/////////////////////////////////////////////////////

	function str_to_int(in charstring i, out integer j) {

	} with {
		extension "prototype(fast)";
	}

	function str_to_oct(in charstring i, out octetstring j) {

	} with {
		extension "prototype(fast)";
	}

	function str_to_bit(in charstring i, out bitstring j) {

	} with {
		extension "prototype(fast)";
	}

	function str_to_hex(in charstring i, out hexstring j) {

	} with {
		extension "prototype(fast)";
	}

	/////////////////////////////////////////////////////

	function oct_to_int(in octetstring i, out integer j) {

	} with {
		extension "prototype(fast)";
	}

	function oct_to_str(in octetstring i, out charstring j) {

	} with {
		extension "prototype(fast)";
	}

	function oct_to_bit(in octetstring i, out bitstring j) {

	} with {
		extension "prototype(fast)";
	}

	function oct_to_hex(in octetstring i, out hexstring j) {

	} with {
		extension "prototype(fast)";
	}

	/////////////////////////////////////////////////////

	function bit_to_int(in bitstring i, out integer j) {

	} with {
		extension "prototype(fast)";
	}

	function bit_to_str(in bitstring i, out charstring j) {

	} with {
		extension "prototype(fast)";
	}

	function bit_to_oct(in bitstring i, out octetstring j) {

	} with {
		extension "prototype(fast)";
	}

	function bit_to_hex(in bitstring i, out hexstring j) {

	} with {
		extension "prototype(fast)";
	}

	/////////////////////////////////////////////////////

	function hex_to_int(in hexstring i, out integer j) {

	} with {
		extension "prototype(fast)";
	}

	function hex_to_str(in hexstring i, out charstring j) {

	} with {
		extension "prototype(fast)";
	}

	function hex_to_oct(in hexstring i, out octetstring j) {

	} with {
		extension "prototype(fast)";
	}

	function hex_to_bit(in hexstring i, out bitstring j) {

	} with {
		extension "prototype(fast)";
	}



}