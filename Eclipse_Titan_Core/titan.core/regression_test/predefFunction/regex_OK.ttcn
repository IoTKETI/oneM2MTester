/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *   Raduly, Csaba
 *
 ******************************************************************************/
module regex_OK {	//^In TTCN-3 module `regex_OK'://

type component PDTestComponent {};


/*--- REGEXP_CHARSTRING --------------------------------------------------*/


testcase regexp_char() runs on PDTestComponent{ //In testcase definition//

//var charstring reg_char1 := "123abcd _efg\nhhhhx"

// POSITIVE TEST CASES
var charstring reg[55];

reg[0] 	:= regexp("123hhh"		,"[1-3]#(,)([h-h]#(,))"		,0)
reg[1] 	:= regexp("123hhh"		,"[1-3]#(3,)(h#(3,))"		,0)
reg[2] 	:= regexp("123hhh"		,"[1-3]#(3,4)(h#(3,4))"		,0)
reg[3] 	:= regexp("123hhh"		,"[1-3]#(1,3)(h#(1,3))"		,0)
reg[4] 	:= regexp("123hhh"		,"[1-3]#(,3)(h#(,3))"		,0)

reg[5] 	:= regexp("333 hhh"		,"[^1-2]#(,) ([^a-g,i-z]#(,))" ,0)
reg[6] 	:= regexp("333 hhh"		,"[^1-2,4]#(,) ([^a-g,i]#(,))" ,0)
reg[7] 	:= regexp("333 hhh"		,"[^1,2,4]#(,) ([^a,b,i]#(,))" ,0) //In variable assignment//   //In operation `regexp\(\)'//   //In character string pattern//   //Charstring pattern: Duplicate character `.' in the character set//2
reg[8] 	:= regexp("333 hhh"		,"[^1-2]#(,)[3] ([^a-g]#(,))"  ,0)
reg[9]  := regexp("333 hhh"		,"[^1-2]#(,)[33] ([^i-z]#(,))" ,0) //In variable assignment//   //In operation `regexp\(\)'//   //In character string pattern//   //Charstring pattern: Duplicate character `.' in the character set//

reg[10]  := regexp("333 hhh"		,"[^1-2]#(,)[3,33] ([h,g]#(,))" ,0) //In variable assignment//   //In operation `regexp\(\)'//   //In character string pattern//   //Charstring pattern: Duplicate character `.' in the character set//2
reg[11]  := regexp("333 hhh"		,"[^1-2]#(,)[33,3,4] ([h]#(,))" ,0) //In variable assignment//   //In operation `regexp\(\)'//   //In character string pattern//   //Charstring pattern: Duplicate character `.' in the character set//3
reg[12]  := regexp("333 hhh"		,"[^1-2]#(,) ([h,hh]h#(,))"     ,0) //In variable assignment//   //In operation `regexp\(\)'//   //In character string pattern//   //Charstring pattern: Duplicate character `.' in the character set//2
reg[13]  := regexp("333 hhh"		,"[^1-2]#(,) ([h,hh,hhh]#(,))"  ,0) //In variable assignment//   //In operation `regexp\(\)'//   //In character string pattern//   //Charstring pattern: Duplicate character `.' in the character set//6
reg[14]  := regexp("333 hhh"		,"[^1-2]#(,) ([h,g,hh]#(,))"    ,0) //In variable assignment//   //In operation `regexp\(\)'//   //In character string pattern//   //Charstring pattern: Duplicate character `.' in the character set//3

reg[15]  := regexp("333 hhh "		,"\d\d\d (\w\w\w) "    ,0) //In charstring value//   //Unknown escape sequence `\\.' was treated literally//6
reg[16]  := regexp("333 hhh "		,"\w#(,) (\w\w#(,2)) " ,0) //In charstring value//   //Unknown escape sequence `\\.' was treated literally//3
reg[17]  := regexp("333 hhh "		,"\w#(,) (\w#(,2)\w) " ,0) //In charstring value//   //Unknown escape sequence `\\.' was treated literally//3
reg[18]  := regexp("333 hhh "		,"\w#(3,) (\w?\w) "    ,0) //In charstring value//   //Unknown escape sequence `\\.' was treated literally//3
reg[19]  := regexp("333 hhh "		,"\w\d3 (h\wh) "       ,0) //In charstring value//   //Unknown escape sequence `\\.' was treated literally//3

reg[20]  := regexp("333\thhh "		,"????(???)?"          ,0)
reg[21]  := regexp("333\thhh "		,"3??\t(?h?)?"         ,0)
reg[22]  := regexp("333\thhh "		,"?#(,)\t(?#(,))?"     ,0)
reg[23]  := regexp("333\thhh "		,"?#(,)?(h?\w) "       ,0) //In charstring value//   //Unknown escape sequence `\\.' was treated literally//
reg[24]  := regexp("333\thhh "		,"?#(,3)\t(h??#(,2))?" ,0)

reg[25]  := regexp("333\rhhh "		,"?*\r(*) "	     ,0)
reg[26]  := regexp("333\rhhh "		,"*?3\r(h*) "    ,0)
reg[27]  := regexp("333\rhhh "		,"*333\r(***h) " ,0)
reg[28]  := regexp("333\rhhh "		,"*(h*?h)?"      ,0)
reg[29]  := regexp("333\rhhh "		,"*?(???)?"      ,0)

reg[30]  := regexp("333\rhhh "		,"*???\r(?*h#(2,)) " ,0)
reg[31]  := regexp("333\rhhh "		,"\w\d*\r(\w?*) "    ,0) //In charstring value//   //Unknown escape sequence `\\.' was treated literally//3
reg[32]  := regexp("333\rhhh "		,"*?(h*h\w) "        ,0) //In charstring value//   //Unknown escape sequence `\\.' was treated literally//
reg[33]  := regexp("333\rhhh "		,"*\r(\w\w\w) "      ,0) //In charstring value//   //Unknown escape sequence `\\.' was treated literally//3
reg[34]  := regexp("333\rhhh "		,"*\r(*) "           ,0)

reg[35]  := regexp("333\"hhh "		,"*\"(???)(?)*"    ,0)
reg[36]  := regexp("333\"hhh "		,"*3?(?*??)[ ,1]"  ,0)
reg[37]  := regexp("333\"hhh "		,"*3?(???)[1, ,2]" ,0) //In variable assignment//   //In operation `regexp\(\)'//   //In character string pattern//   //Charstring pattern: Duplicate character `.' in the character set//
reg[38]  := regexp @nocase ("333\"hhh "		,"*33?(???)[^a,1]" ,0)
reg[39]  := regexp @nocase ("333\"hhh "		,"333\"(???)*"     ,0)


for (var integer j:=0; j<=39; j:=j+1) {
	if (reg[j] == "hhh")
	     {setverdict(pass);}
	else {setverdict(fail);}
}


reg[40] 	:= regexp("123\rabc"	,"(*)123(*)abc"	,1)
reg[41] 	:= regexp("\r123"	,"(*)123(*)"	,0)
reg[42] 	:= regexp("\r123\r"	,"(*)123(?)"	,1)
reg[43] 	:= regexp("\t\n\r123\r"	,"??(?)123(?)"	,0)
reg[44] 	:= regexp("\t\n\r123"	,"(?)(?)(?)(*)"	,2)

reg[45] 	:= regexp("(\r)"	,"(\()(?)(\))"	,1) //In charstring value//   //Unknown escape sequence `\\.' was treated literally//2
reg[46] 	:= regexp("\"(\r)\""	,"?(\()(?)(\))?",1) //In charstring value//   //Unknown escape sequence `\\.' was treated literally//2
reg[47] 	:= regexp("\r"		,"(?)"		,0)
reg[48] 	:= regexp("\r"		,"(*)"		,0)
reg[49] 	:= regexp("\r"		,"(**)"		,0)

reg[50] 	:= regexp("\r \t \n"	,"(*) (*) (*)"	,0)
reg[51] 	:= regexp("\r\r\r\r"	,"(*)(\r#(3))"	,0)
reg[52] 	:= regexp("\r"		,"([^\n,\t])"	,0)
reg[53] 	:= regexp("\r "		,"(*)(?)(?)"	,1)
reg[54] 	:= regexp(" \r "	,"(?)(*?*) "	,1)


for (var integer j:=40; j<=54; j:=j+1) {
	if (reg[j] == "\r")
	     {setverdict(pass);}
	else {setverdict(fail);}
}


// NEGATIVE TEST CASES
var charstring regn[10];

regn[0] 	:= regexp("\r"		,"(?)(?)"	,1)
regn[1] 	:= regexp("\r \n"	,"(?)(\n)"	,1)
regn[2] 	:= regexp("12ab"	,"(\d\d\d)(\w)"	,1) //In charstring value//   //Unknown escape sequence `\\.' was treated literally//4
regn[3] 	:= regexp("12ab"	,"(\d#(3))(?)"	,1) //In charstring value//   //Unknown escape sequence `\\.' was treated literally//
regn[4] 	:= regexp("\r"		,"(?)(r*)"	,1)

regn[5] 	:= regexp("\r"		,"(*)([\t,\n])"	,1)
regn[6] 	:= regexp("\r"		,"(*)([^\r])"	,1)
regn[7] 	:= regexp("123 abc"	,"123??(a??)"	,0)
regn[8] 	:= regexp("1234"	,"([1-3]#(,))"	,0)
regn[9] 	:= regexp("123a"	,"(\d#(,))"	,0) //In charstring value//   //Unknown escape sequence `\\.' was treated literally//

for (var integer j:=0; j<=9; j:=j+1) {
	if (regn[j] == "")
	     {setverdict(pass);}
	else {setverdict(fail);}
}

}

testcase  regexp_degen() runs on PDTestComponent {
  var charstring reg[6];
  //These would be errors:
  //reg[-2] := regexp(strng, "([]+)", 0);
  //reg[-1] := regexp(strng, "([^]+)", 0);
  reg[0] := regexp("@@@]]]###", "*([]]#3)(*)", 0); // a right square bracket
  reg[1] := regexp("]]]!!!]]]", "*([^]]#3)(*)", 0); // not a right square bracket

  reg[2] := regexp("+++---!!!", "*([-]#3)(*)", 0); // a dash
  reg[3] := regexp("---???---", "*([^-]#3)(*)", 0); // not a dash

  reg[4] := regexp("[[[-]-+++", "*([]-]#3)(*)", 0); // a right square bracket or dash
  reg[5] := regexp("[[[---]]]", "*([^]-]#3)(*)", 0);// not a right square bracket or dash

  for(var integer i:=0; i<6; i:=i+1) {
    log(reg[i]);
    if( lengthof(reg[i])==3 )
	     {setverdict(pass);}
	else {setverdict(fail);}
  }
}

const charstring c_cs_val := "aBc5XYz";
const charstring c_cs_pattern := "(abc?xyz)";

// case-insensitive regexp
testcase regexp_nocase() runs on PDTestComponent {
  // regexp with constants (calculated at compile-time)
  var charstring v_res_const := regexp @nocase (c_cs_val, c_cs_pattern, 0);
  if (v_res_const != c_cs_val) {
    setverdict(fail, "Const regexp failed. Got: ", v_res_const, ", expected: ", c_cs_val);
  }
  
  // regexp with variables (calculated at runtime)
  var charstring v_cs_val := "aBE5XYz";
  var charstring v_cs_pattern := "(ab[A-e]?xyz)";
  var charstring v_res_var := regexp @nocase (v_cs_val, v_cs_pattern, 0);
  if (v_res_var != v_cs_val) {
    setverdict(fail, "Var regexp failed. Got: ", v_res_var, ", expected: ", v_cs_val);
  }
  setverdict(pass);
}

control {
	execute (regexp_char());
	execute (regexp_degen());
	execute (regexp_nocase());
}

}
