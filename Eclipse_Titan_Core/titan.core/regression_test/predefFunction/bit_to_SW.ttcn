/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Raduly, Csaba
 *
 ******************************************************************************/
module bit_to_SW {	//^In TTCN-3 module `bit_to_SW'://

type component PDTestComponent {};

/*--- BIT2HEX --------------------------------------------------*/

const hexstring b2hcon := bit2hex(''B)
const hexstring b2hcon1 := bit2hex('000000000000'B & ''B & '111111111111'B)
const hexstring b2hcon2 := bit2hex(substr('000000000000111111111111'B,0,12) & ''B & substr('000000000000111111111111'B,12,12))
const hexstring b2hcon3 := bit2hex(('000000000000'B <@ 13) & ''B & ('111111111111'B @> 13))
const hexstring b2hcon4 := bit2hex((not4b '111111111111'B) & '111111111111'B)
const hexstring b2hcon5 := bit2hex('000000000000111111111111'B and4b '000000000000111111111111'B)
const hexstring b2hcon6 := bit2hex('000000000000000000000000'B or4b  '000000000000111111111111'B)
const hexstring b2hcon7 := bit2hex('000000000000000000000000'B xor4b '000000000000111111111111'B)
const hexstring b2hcon8 := bit2hex('10011'B)
const hexstring b2hcon9 := bit2hex('11'B)

const hexstring b2hconh := '000FFF'H

testcase bit_to_hex() runs on PDTestComponent{ //^In testcase definition//

	if ((b2hcon == bit2hex(''B))
	and (b2hcon == ''H))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2hcon1 == bit2hex('000000000000'B & ''B & '111111111111'B))
	and (b2hcon1 == b2hconh))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2hcon2 == bit2hex(substr('000000000000111111111111'B,0,12) & ''B & substr('000000000000111111111111'B,12,12)))
	and (b2hcon2 == b2hconh))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2hcon3 == bit2hex(('000000000000'B <@ 13) & ''B & ('111111111111'B @> 13)))
	and (b2hcon3 == b2hconh))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2hcon4 == bit2hex((not4b '111111111111'B) & '111111111111'B))
	and (b2hcon4 == b2hconh))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2hcon5 == bit2hex('000000000000111111111111'B and4b '000000000000111111111111'B))
	and (b2hcon5 == b2hconh))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2hcon6 == bit2hex('000000000000000000000000'B or4b  '000000000000111111111111'B))
	and (b2hcon6 == b2hconh))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2hcon7 == bit2hex('000000000000000000000000'B xor4b '000000000000111111111111'B))
	and (b2hcon7 == b2hconh))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2hcon8 == bit2hex('10011'B))
	and (b2hcon8 == '13'H))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2hcon9 == bit2hex('11'B))
	and (b2hcon9 == '3'H))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//
}

/*--- BIT2INT --------------------------------------------------*/

const integer b2icon := bit2int(''B)
const integer b2icon1 := bit2int('111111'B & '111111'B)
const integer b2icon2 := bit2int((not4b '111111'B) & '111111'B)
const integer b2icon3 := bit2int(('111111'B and4b '000000'B) & '111111'B)
const integer b2icon4 := bit2int(('000000'B or4b '000000'B) & '111111'B)
const integer b2icon5 := bit2int(('000011'B xor4b '000011'B) & '111111'B)
const integer i1 := 12345678910111213141516;
const bitstring bs1 := '00000000000000000010100111010100001010110110010101101000100100110010100010111011111000001100'B;

testcase bit_to_int() runs on PDTestComponent{ //^In testcase definition//

	if ((b2icon == bit2int(''B))
	and (b2icon == 0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2icon1 == bit2int('111111'B & '111111'B))
	and (b2icon1 == 4095))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2icon2 == bit2int((not4b '111111'B) & '111111'B))
	and (b2icon2 == 63))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2icon3 == bit2int(('111111'B and4b '000000'B) & '111111'B))
	and (b2icon3 == 63))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2icon4 == bit2int(('000000'B or4b '000000'B) & '111111'B))
	and (b2icon4 == 63))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2icon5 == bit2int(('000011'B xor4b '000011'B) & '111111'B))
	and (b2icon5 == 63))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if (bit2int(bs1) == 12345678910111213141516)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//
	if (bit2int('00000000000000000010100111010100001010110110010101101000100100110010100010111011111000001100'B) == 12345678910111213141516)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//
	if (bit2int(bs1) == 12345678910111213141516)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//
	if (bit2int(int2bit(bit2int('010100111010100001010110110010101101000100100110010100010111011111000001100'B), 75)) == 12345678910111213141516)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//
}

/*--- BIT2OCT --------------------------------------------------*/

const octetstring b2ocon := bit2oct(''B)
const octetstring b2ocon1 := bit2oct('000000000000'B & ''B & '111111111111'B)
const octetstring b2ocon2 := bit2oct(substr('000000000000111111111111'B,0,12) & ''B & substr('000000000000111111111111'B,12,12))
const octetstring b2ocon3 := bit2oct(('000000000000'B <@ 13) & ''B & ('111111111111'B @> 13))
const octetstring b2ocon4 := bit2oct((not4b '111111111111'B) & '111111111111'B)
const octetstring b2ocon5 := bit2oct('000000000000111111111111'B and4b '000000000000111111111111'B)
const octetstring b2ocon6 := bit2oct('000000000000000000000000'B or4b  '000000000000111111111111'B)
const octetstring b2ocon7 := bit2oct('000000000000000000000000'B xor4b '000000000000111111111111'B)
const octetstring b2ocon8 := bit2oct('10011'B)
const octetstring b2ocon9 := bit2oct('11'B)

const octetstring b2ocono := '000FFF'O

testcase bit_to_oct() runs on PDTestComponent{ //^In testcase definition//

	if ((b2ocon == bit2oct(''B))
	and (b2ocon == ''O))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2ocon1 == bit2oct('000000000000'B & ''B & '111111111111'B))
	and (b2ocon1 == b2ocono))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2ocon2 == bit2oct(substr('000000000000111111111111'B,0,12) & ''B & substr('000000000000111111111111'B,12,12)))
	and (b2ocon2 == b2ocono))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2ocon3 == bit2oct(('000000000000'B <@ 13) & ''B & ('111111111111'B @> 13)))
	and (b2ocon3 == b2ocono))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2ocon4 == bit2oct((not4b '111111111111'B) & '111111111111'B))
	and (b2ocon4 == b2ocono))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2ocon5 == bit2oct('000000000000111111111111'B and4b '000000000000111111111111'B))
	and (b2ocon5 == b2ocono))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2ocon6 == bit2oct('000000000000000000000000'B or4b  '000000000000111111111111'B))
	and (b2ocon6 == b2ocono))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2ocon7 == bit2oct('000000000000000000000000'B xor4b '000000000000111111111111'B))
	and (b2ocon7 == b2ocono))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2ocon8 == bit2oct('10011'B))
	and (b2ocon8 == '13'O))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2ocon9 == bit2oct('11'B))
	and (b2ocon9 == '03'O))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//
}

/*--- BIT2STR --------------------------------------------------*/

const charstring b2scon := bit2str(''B)
const charstring b2scon1 := bit2str('000000'B & ''B & '111111'B)
const charstring b2scon2 := bit2str(substr('000000111111'B,0,6) & ''B & substr('000000111111'B,6,6))
const charstring b2scon3 := bit2str(('000000'B <@ 3) & ''B & ('111111'B @> 3))
const charstring b2scon4 := bit2str((not4b '111111'B) & '111111'B)
const charstring b2scon5 := bit2str('000000111111'B and4b '000000111111'B)
const charstring b2scon6 := bit2str('000000000000'B or4b  '000000111111'B)
const charstring b2scon7 := bit2str('000000000000'B xor4b '000000111111'B)

const charstring b2scons := "000000111111"

testcase bit_to_str() runs on PDTestComponent{ //^In testcase definition//

	if ((b2scon == bit2str(''B))
	and (b2scon == ""))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2scon1 == bit2str('000000'B & ''B & '111111'B))
	and (b2scon1 == b2scons))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2scon2 == bit2str(substr('000000111111'B,0,6) & ''B & substr('000000111111'B,6,6)))
	and (b2scon2 == b2scons))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2scon3 == bit2str(('000000'B <@ 3) & ''B & ('111111'B @> 3)))
	and (b2scon3 == b2scons))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2scon4 == bit2str((not4b '111111'B) & '111111'B))
	and (b2scon4 == b2scons))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2scon5 == bit2str('000000111111'B and4b '000000111111'B))
	and (b2scon5 == b2scons))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2scon6 == bit2str('000000000000'B or4b  '000000111111'B))
	and (b2scon6 == b2scons))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//

	if ((b2scon7 == bit2str('000000000000'B xor4b '000000111111'B))
	and (b2scon7 == b2scons))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
	//^warning: Control never reaches this code because of previous effective condition\(s\)//
}

control {
	execute (bit_to_hex());
	execute (bit_to_int());
	execute (bit_to_oct());
	execute (bit_to_str());
}

}
