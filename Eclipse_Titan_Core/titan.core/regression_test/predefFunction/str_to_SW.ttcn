/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Raduly, Csaba
 *
 ******************************************************************************/
module str_to_SW {	//^In TTCN-3 module `str_to_SW'://

type component PDTestComponent {};


/*--- STR2BIT --------------------------------------------------*/

const bitstring s2bcon := str2bit("")
const bitstring s2bcon1 := str2bit("000000" & "" & "111111")
const bitstring s2bcon2 := str2bit(substr("000000111111",0,6) & "" & substr("000000111111",6,6))
const bitstring s2bcon3 := str2bit(("000000" <@ lengthof(s2bcon2)/2) & "" & ("111111" @> lengthof(s2bcon2)/2))

testcase str_to_bit() runs on PDTestComponent{ //In testcase definition//


	if ((s2bcon == str2bit(""))
	and (s2bcon == ''B))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//

	if ((s2bcon1 == str2bit("000000" & "" & "111111"))
	and (s2bcon1 == '000000111111'B))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//

	if ((s2bcon2 == str2bit(substr("000000111111",0,6) & "" & substr("000000111111",6,6)))
	and (s2bcon2 == '000000111111'B))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//

	if ((s2bcon3 == str2bit(("000000" <@ lengthof(s2bcon2)/2) & "" & ("111111" @> lengthof(s2bcon2)/2)))
	and (s2bcon3 == '000000111111'B))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
}

/*--- STR2FLOAT --------------------------------------------------*/

//const float s2fcon := str2float("")
const float s2fcon := str2float("0.0")
const float s2fcon1 := str2float("12345678901.0")
const float s2fcon2 := str2float("000000000000" & "12345678901.0") //^In constant definition// \
	//^In the operand of operation `str2float\(\)'// \
	//^warning: Leading zero digit was detected and ignored in the mantissa of the operand of operation \`str2float\(\)\'//
const float s2fcon3 := str2float("-12" & "345678901.0")
const float s2fcon4 := str2float("1.234E3")
//const float s2fcon5 := str2float("1.234-3")
const float s2fcon5 := str2float("1.234")
//const float s2fcon6 := str2float("1,234E3")
const float s2fcon6 := str2float("1.0")
//const float s2fcon7 := str2float("--234")

// HL67862
const float s2fcon7 := str2float("1");
const float s2fcon7m:= str2float("-1");
const float s2fcon8m:= str2float("-1.");
const float s2fcon8 := str2float("1.");
const float s2fcon9 := str2float("+001"); //^In constant definition// \
	//^In the operand of operation `str2float\(\)'// \
	//^warning: Leading zero digit was detected and ignored in the mantissa of the operand of operation \`str2float\(\)\'//
const float s2fcon10:= str2float("+001."); //^In constant definition// \
	//^In the operand of operation `str2float\(\)'// \
	//^warning: Leading zero digit was detected and ignored in the mantissa of the operand of operation \`str2float\(\)\'//
const float s2fcon11:= str2float("-0");
const float s2fcon12:= str2float("-0.");
const float s2fcon13:= str2float("-0.0");


// HL67862
const charstring s2fmp7_str := "1";
const charstring s2fmp7m_str:= "-1";
const charstring s2fmp8m_str:= "-1.";
const charstring s2fmp8_str := "1.";
const charstring s2fmp9_str := "+001";
const charstring s2fmp10_str:= "+001.";
const charstring s2fmp11_str:= "-0";
const charstring s2fmp12_str:= "-0.";
const charstring s2fmp13_str:= "-0.0";




testcase str_to_float() runs on PDTestComponent{ //In testcase definition//

// compile-time
	if ((s2fcon == str2float("0.0"))
	and (s2fcon == 0.0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2fcon1 == str2float("12345678901.0"))
	and (s2fcon1 == 12345678901.0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2fcon2 == str2float("000000000000" & "12345678901.0")) //^In if statement// \
		//In the left operand of operation `and'// \
		//In the right operand of operation `=='// \
		//In the operand of operation \`str2float\(\)\'// \
		//^warning: Leading zero digit was detected and ignored in the mantissa of the operand of operation `str2float\(\)'//
	and (s2fcon2 == 12345678901.0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2fcon3 == str2float("-12" & "345678901.0"))
	and (s2fcon3 == -12345678901.0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2fcon4 == str2float("1.234E3"))
	and (s2fcon4 == 1234.0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2fcon5 == str2float("1.234"))
	and (s2fcon5 == 1.234))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2fcon6 == str2float("1.0"))
	and (s2fcon6 == 1.0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//

	if ((s2fcon7 == str2float("1"    )) and (s2fcon7 == 1.0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2fcon7m== str2float("-1"   )) and (s2fcon7m==-1.0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2fcon8m== str2float("-1."  )) and (s2fcon8m==-1.0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2fcon8 == str2float("1."   )) and (s2fcon8 == 1.0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2fcon9 == str2float("+001" )) and (s2fcon9 == 1.0)) //^In if statement// \
		//In the left operand of operation `and'// \
		//In the right operand of operation `=='// \
		//In the operand of operation \`str2float\(\)\'// \
		//^warning: Leading zero digit was detected and ignored in the mantissa of the operand of operation `str2float\(\)'//
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2fcon10== str2float("+001.")) and (s2fcon10== 1.0)) //^In if statement// \
		//In the left operand of operation `and'// \
		//In the right operand of operation `=='// \
		//In the operand of operation \`str2float\(\)\'// \
		//^warning: Leading zero digit was detected and ignored in the mantissa of the operand of operation `str2float\(\)'//
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2fcon11== str2float("-0"   )) and (s2fcon11== -0.0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2fcon12== str2float("-0."  )) and (s2fcon12== -0.0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2fcon13== str2float("-0.0" )) and (s2fcon13== -0.0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
/* run-time
	if ((s2fmp == str2float(s2fmp_str))
	and (s2fmp == 0.0))
	     {setverdict(pass);}
	else {setverdict(fail);}
	if ((s2fmp1 == str2float(s2fmp1_str))
	and (s2fmp1 == 12345678901.0))
	     {setverdict(pass);}
	else {setverdict(fail);}
	if ((s2fmp2 == str2float("000000000000" & "12345678901.0"))
	and (s2fmp2 == 12345678901.0))
	     {setverdict(pass);}
	else {setverdict(fail);}
	if ((s2fmp3 == str2float("-12" & "345678901.0"))
	and (s2fmp3 == -12345678901.0))
	     {setverdict(pass);}
	else {setverdict(fail);}
	if ((s2fmp4 == str2float(s2fmp4_str))
	and (s2fmp4 == 1234.0))
	     {setverdict(pass);}
	else {setverdict(fail);}
	if ((s2fmp5 == str2float(s2fmp5_str))
	and (s2fmp5 == 1.234))
	     {setverdict(pass);}
	else {setverdict(fail);}
	if ((s2fmp6 == str2float(s2fmp6_str))
	and (s2fmp6 == 1.0))
	     {setverdict(pass);}
	else {setverdict(fail);}

	if ((s2fmp7  == str2float(s2fmp7_str)) and (s2fmp7 == 1.0))
	     {setverdict(pass);}
	else {setverdict(fail);}
	if ((s2fmp7m == str2float(s2fmp7m_str)) and (s2fmp7m==-1.0))
	     {setverdict(pass);}
	else {setverdict(fail);}
	if ((s2fmp8m == str2float(s2fmp8m_str)) and (s2fmp8m==-1.0))
	     {setverdict(pass);}
	else {setverdict(fail);}
	if ((s2fmp8  == str2float(s2fmp8_str)) and (s2fmp8 == 1.0))
	     {setverdict(pass);}
	else {setverdict(fail);}
	if ((s2fmp9  == str2float(s2fmp9_str)) and (s2fmp9 == 1.0))
	     {setverdict(pass);}
	else {setverdict(fail);}
	if ((s2fmp10 == str2float(s2fmp10_str)) and (s2fmp10== 1.0))
	     {setverdict(pass);}
	else {setverdict(fail);}
	if ((s2fmp11 == str2float(s2fmp11_str)) and (s2fmp11==-0.0))
	     {setverdict(pass);}
	else {setverdict(fail);}
	if ((s2fmp12 == str2float(s2fmp12_str)) and (s2fmp12== 0.0))
	     {setverdict(pass);}
	else {setverdict(fail);}
	if ((s2fmp13 == str2float(s2fmp13_str)) and (s2fmp13== 0.0))
	     {setverdict(pass);}
	else {setverdict(fail);}
*/
}


/*--- STR2HEX --------------------------------------------------*/

const hexstring s2hcon := str2hex("")
const hexstring s2hcon1 := str2hex("000000" & "" & "111111")
const hexstring s2hcon2 := str2hex(substr("000000111111",0,6) & "" & substr("000000111111",6,6))
const hexstring s2hcon3 := str2hex(("000000" <@ lengthof(s2hcon2)/2) & "" & ("111111" @> lengthof(s2hcon2)/2))

testcase str_to_hex() runs on PDTestComponent{ //In testcase definition//


	if ((s2hcon == str2hex(""))
	and (s2hcon == ''H))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//

	if ((s2hcon1 == str2hex("000000" & "" & "111111"))
	and (s2hcon1 == '000000111111'H))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//

	if ((s2hcon2 == str2hex(substr("000000111111",0,6) & "" & substr("000000111111",6,6)))
	and (s2hcon2 == '000000111111'H))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//

	if ((s2hcon3 == str2hex(("000000" <@ lengthof(s2hcon2)/2) & "" & ("111111" @> lengthof(s2hcon2)/2)))
	and (s2hcon3 == '000000111111'H))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
}

/*--- STR2INT --------------------------------------------------*/

const integer s2icon := str2int("0")
const integer s2icon1 := str2int("" & "1234567890")
const integer s2icon2 := str2int("12" & "34567890")
const integer s2icon3 := str2int("0000000000000000000000" & "1234567890") //^In constant definition// \
	//^In the operand of operation `str2int\(\)'// \
	//^warning: Leading zero digit was detected and ignored in the operand of operation \`str2int\(\)\'//
const integer s2icon4 := str2int("-12" & "34567890")
//const integer s2icon5 := str2int("12ap")
const integer s2icon5 := str2int("12")
//const integer s2icon6 := str2int("ap")
const integer s2icon6 := str2int("1234567891011121314151617181920")
const integer s2icon7 := str2int("-1234567891011121314151617181920")
const integer s2icon8 := str2int("+1");
const integer s2icon9 := str2int("01"); //^In constant definition// \
	//^In the operand of operation `str2int\(\)'// \
	//^warning: Leading zero digit was detected and ignored in the operand of operation \`str2int\(\)\'//
const integer s2icon10 := str2int("+01"); //^In constant definition// \
	//^In the operand of operation `str2int\(\)'// \
	//^warning: Leading zero digit was detected and ignored in the operand of operation \`str2int\(\)\'//
const integer s2icon11 := str2int("-01"); //^In constant definition// \
	//^In the operand of operation `str2int\(\)'// \
	//^warning: Leading zero digit was detected and ignored in the operand of operation \`str2int\(\)\'//

testcase str_to_int() runs on PDTestComponent{ //In testcase definition//
	if ((s2icon == str2int("0"))
	and (s2icon == 0))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2icon8 == str2int("+1"))
	and (s2icon8 == 1))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2icon9 == str2int("01")) //^In if statement// \
		//In the left operand of operation `and'// \
		//In the right operand of operation `=='// \
		//In the operand of operation \`str2int\(\)\'// \
		//^warning: Leading zero digit was detected and ignored in the operand of operation `str2int\(\)'//
	and (s2icon9 == 1))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2icon10 == str2int("+01")) //^In if statement// \
		//In the left operand of operation `and'// \
		//In the right operand of operation `=='// \
		//In the operand of operation \`str2int\(\)\'// \
		//^warning: Leading zero digit was detected and ignored in the operand of operation `str2int\(\)'//
	and (s2icon10 == 1))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2icon11 == str2int("-01")) //^In if statement// \
		//In the left operand of operation `and'// \
		//In the right operand of operation `=='// \
		//In the operand of operation \`str2int\(\)\'// \
		//^warning: Leading zero digit was detected and ignored in the operand of operation `str2int\(\)'//
	and (s2icon11 == -1))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2icon1 == str2int("" & "1234567890"))
	and (s2icon1 == 1234567890))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2icon2 == str2int("12" & "34567890"))
	and (s2icon2 == 1234567890))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2icon3 == str2int("00000000000000000000000" & "1234567890")) //^In if statement// \
		//In the left operand of operation `and'// \
		//In the right operand of operation `=='// \
		//In the operand of operation \`str2int\(\)\'// \
		//^warning: Leading zero digit was detected and ignored in the operand of operation `str2int\(\)'//
	and (s2icon3 == 1234567890))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2icon4 == str2int("-12" & "34567890"))
	and (s2icon4 == -1234567890))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((s2icon5 == str2int("12"))
	and (s2icon5 == 12))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
    /* TODO move to error ttcn
	if ((s2icon6 == str2int("ap"))
	and (s2icon6 == 0))
	     {setverdict(pass);}
	else {setverdict(fail);}
    */
        // Compile time evaluation.  (Positive/negative.)
	if ((str2int("1234567891011121314151617181920") == s2icon6)
	and (s2icon6 == str2int("1234567891011121314151617181920")))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((str2int("-1234567891011121314151617181920") == s2icon7)
	and (s2icon7 == str2int("-1234567891011121314151617181920")))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((int2str(str2int("1234567891011121314151617181920")) == "1234567891011121314151617181920")
	and ("1234567891011121314151617181920" == int2str(str2int("1234567891011121314151617181920"))))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((int2str(str2int("-1234567891011121314151617181920")) == "-1234567891011121314151617181920")
	and ("-1234567891011121314151617181920" == int2str(str2int("-1234567891011121314151617181920"))))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((str2int("1234567891011121314151617181920") - 10 == s2icon6 - 10)
	and (s2icon6 + 10 == str2int("1234567891011121314151617181920") + 10))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((str2int("-1234567891011121314151617181920") + 10 == s2icon7 + 10)
	and (s2icon7 - 10 == str2int("-1234567891011121314151617181920") - 10))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
}


/*--- STR2OCT --------------------------------------------------*/

const octetstring s2ocon := str2oct("")
const octetstring s2ocon1 := str2oct("000000" & "" & "111111")
const octetstring s2ocon2 := str2oct(substr("000000111111",0,6) & "" & substr("000000111111",6,6))
const octetstring s2ocon3 := str2oct(("000000" <@ lengthof(s2ocon2)/2) & "" & ("111111" @> lengthof(s2ocon2)/2))

testcase str_to_oct() runs on PDTestComponent{ //In testcase definition//


	if ((s2ocon == str2oct(""))
	and (s2ocon == ''O))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//

	if ((s2ocon1 == str2oct("000000" & "" & "111111"))
	and (s2ocon1 == '000000111111'O))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//

	if ((s2ocon2 == str2oct(substr("000000111111",0,6) & "" & substr("000000111111",6,6)))
	and (s2ocon2 == '000000111111'O))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//

	if ((s2ocon3 == str2oct(("000000" <@ lengthof(s2ocon2)/2) & "" & ("111111" @> lengthof(s2ocon2)/2)))
	and (s2ocon3 == '000000111111'O))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
}


control {
	execute (str_to_bit());
	execute (str_to_float());
	execute (str_to_hex());
	execute (str_to_int());
	execute (str_to_oct());
}

}
