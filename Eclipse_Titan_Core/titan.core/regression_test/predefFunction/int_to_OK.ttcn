/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Raduly, Csaba
 *
 ******************************************************************************/
module int_to_OK {

type component PDTestComponent {};


/*--- INT2BIT --------------------------------------------------*/

const     bitstring i2bcon := '0000011111000001111100001111'B

modulepar bitstring i2bpar := '0000011111000001111100001111'B
modulepar bitstring i2bpar1 := int2bit(0,10);
modulepar bitstring i2bpar2 := int2bit(0,0);
modulepar bitstring i2bpar3 := int2bit(1,1)
modulepar bitstring i2bpar4 := int2bit(255,8)
modulepar bitstring i2bpar5 := int2bit(bit2int(i2bcon),lengthof(i2bcon))
modulepar bitstring i2bpar6 := not4b int2bit(bit2int(not4b i2bcon),lengthof(i2bcon))
modulepar bitstring i2bpar7 := int2bit(bit2int(substr(i2bcon,0,lengthof(i2bcon)/2)),lengthof(i2bcon)/2)
modulepar bitstring i2bpar8 := int2bit(bit2int(substr(i2bcon,  lengthof(i2bcon)/2,  lengthof(i2bcon)/2)),lengthof(i2bcon)/2)

testcase int_to_bit() runs on PDTestComponent{
	var integer i1 := 12345678910111213141516
	var bitstring bs1 := '00000000000000000010100111010100001010110110010101101000100100110010100010111011111000001100'B
	var bitstring bs2 := '010100111010100001010110110010101101000100100110010100010111011111000001100'B
	if ((i2bpar1 == '0000000000'B)
	and (i2bpar1 == int2bit(0,10)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2bpar2 == ''B)and (i2bpar2 ==  int2bit(0,0)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2bpar3 == '1'B)and (i2bpar3 ==  int2bit(1,1)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2bpar4 == '11111111'B)and (i2bpar4 ==  int2bit(255,8)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2bpar5 == i2bpar)and (i2bpar5 ==  int2bit(bit2int(i2bpar),lengthof(i2bpar))))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2bpar6 == i2bpar)and (i2bpar5 ==  not4b int2bit(bit2int(not4b i2bpar),lengthof(i2bpar))))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if (i2bpar == (i2bpar7 & i2bpar8))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if (int2bit(i1, 92) == bs1)
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	/* compile-time
	if (int2bit(12345678910111213141516, 92) == '00000000000000000010100111010100001010110110010101101000100100110010100010111011111000001100'B)
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
    */
	if (int2bit(12345678910111213141516, 92) == bs1)
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if (int2bit(12345678910111213141516, 75) == bs2)
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
}

/*--- INT2CHAR --------------------------------------------------*/

const integer i2cpari[3] := {0,1,2}

type record of integer i2crtype
const i2crtype i2cparii := {0,1,2}

modulepar charstring i2cpar1 :=  int2char(8 mod 6)
modulepar charstring i2cpar2 :=  int2char(i2cpari[2])
modulepar charstring i2cpar3 :=  int2char(sizeof(i2cpari)-1)
modulepar charstring i2cpar4 :=  int2char(sizeof(i2cparii)-1)

testcase int_to_char() runs on PDTestComponent{

	if ((i2cpar1 == int2char(8 mod 6))
	and (i2cpar1 == ""))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2cpar2 == int2char(i2cpari[2]))
	and (i2cpar2 == ""))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2cpar3 == int2char(sizeof(i2cpari)-1))
	and (i2cpar3 == ""))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2cpar4 == int2char(sizeof(i2cparii)-1))
	and (i2cpar4 == ""))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}

	var integer j
	var charstring c

	for (j:=0; j<128; j:=j+1) {
		if (char2int(int2char(j)) == j)
			 {setverdict(pass);}
		else {setverdict(fail, __LINE__);}
	}

}

/*--- INT2UNICHAR --------------------------------------------------*/



modulepar universal charstring i2uccon1 :=  int2unichar(1)
modulepar universal charstring i2uccon2 :=  int2unichar(256)
modulepar universal charstring i2uccon3 :=  int2unichar(65536)
modulepar universal charstring i2uccon4 :=  int2unichar(16777216)
modulepar universal charstring i2uccon5 :=  int2unichar(2147483647)


testcase int_to_unichar() runs on PDTestComponent{

log (i2uccon1)
log (i2uccon2)
log (i2uccon3)
log (i2uccon4)
log (i2uccon5)

	if ((i2uccon1 == int2unichar(1))
	and (i2uccon1 == char(0, 0, 0, 1)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2uccon2 == int2unichar(256))
	and (i2uccon2 == char(0, 0, 1, 0)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2uccon3 == int2unichar(65536))
	and (i2uccon3 == char(0, 1, 0, 0)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2uccon4 == int2unichar(16777216))
	and (i2uccon4 == char(1, 0, 0, 0)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2uccon5 == int2unichar(2147483647))
	and (i2uccon5 == char(127, 255, 255, 255)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}

}


/*--- INT2FLOAT --------------------------------------------------*/


const integer i2fpari[3] := {0,1,2}

type record of integer i2frtype;
const i2frtype i2fparii := {0}

type float i2fflo (-1.0 .. 6.0)

modulepar float i2fpar1 := int2float(3/2)
modulepar float i2fpar2 := int2float(-3)
modulepar float i2fpar3 := int2float(lengthof(""))
modulepar float i2fpar4 := int2float(i2fpari[0])
modulepar float i2fpar5 := int2float(i2fparii[0])
modulepar float i2fpar8 := int2float(2147483648)
modulepar float i2fpar9 := int2float(214748364800)
modulepar float i2fpar10 := int2float(4294967296)

modulepar i2fflo i2fpar6 := int2float(20/3)
modulepar i2fflo i2fpar7 := int2float(8 mod 6)

testcase int_to_float() runs on PDTestComponent{

	if ((i2fpar1 == 1.0)
	and (i2fpar1 == int2float(3/2)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2fpar2 == -3.0)
	and (i2fpar2 == -3E0))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2fpar3 == 0.0)
	and (i2fpar3 == int2float(lengthof(""))))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2fpar4 == 0.0)
	and (i2fpar4 == int2float(i2fpari[0])))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2fpar5 == 0.0)
	and (i2fpar5 == int2float(i2fparii[0])))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2fpar6 == 6.0)
	and (i2fpar6 == int2float(20/3)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2fpar7 == 2.0)
	and (i2fpar7 == int2float(8 mod 6)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
    if ((i2fpar8 == 2147483648.0)
	and (i2fpar8 == int2float(2147483648)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
    if ((i2fpar9 == 214748364800.0)
	and (i2fpar9 == int2float(214748364800)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
    if ((i2fpar10 == 4294967296.0)
	and (i2fpar10 == int2float(4294967296)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
    var float i2fvar1 := 2147483648.0
    var float i2fvar2 := 214748364800.0
    var float i2fvar3 := 4294967296.0
    if ((i2fvar1 == 2147483648.0)
	and (i2fvar1 == int2float(2147483648)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
    if ((i2fvar2 == 214748364800.0)
	and (i2fvar2 == int2float(214748364800)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
    if ((i2fvar3 == 4294967296.0)
	and (i2fvar3 == int2float(4294967296)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}

}

/*--- INT2HEX --------------------------------------------------*/

const     hexstring i2hcon := '0123456'H
modulepar hexstring i2hpar := '0123456'H
modulepar hexstring i2hpar1 := int2hex(0,10)
modulepar hexstring i2hpar2 := int2hex(0,0)
modulepar hexstring i2hpar3 := int2hex(15,1)
modulepar hexstring i2hpar4 := int2hex(hex2int(i2hcon),lengthof(i2hcon))
modulepar integer i2hpari := hex2int(i2hcon)

testcase int_to_hex() runs on PDTestComponent{
	var integer i1 := 12345678910111213141516
	var hexstring hs1 := '000000000000029D42B65689328BBE0C'H
	var hexstring hs2 := '029D42B65689328BBE0C'H
	if ((i2hpar1 == '0000000000'H)
	and (i2hpar1 == int2hex(0,10)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2hpar2 == ''H) and (i2hpar2 ==  int2hex(0,0)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2hpar3 == 'F'H)
	and (i2hpar3 == int2hex(15,1)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2hpar4 == i2hpar)
	and (i2hpar4 == int2hex(hex2int(i2hpar),lengthof(i2hpar))))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if (int2hex(i1, 32) == hs1) { setverdict(pass) } else { setverdict(fail, __LINE__) }
	//compile-time: if (int2hex(12345678910111213141516, 32) == '000000000000029D42B65689328BBE0C'H) { setverdict(pass) } else { setverdict(fail, __LINE__) }
	if (int2hex(12345678910111213141516, 32) == hs1) { setverdict(pass) } else { setverdict(fail, __LINE__) }
	if (int2hex(12345678910111213141516, 20) == hs2) { setverdict(pass) } else { setverdict(fail, __LINE__) }
}

/*--- INT2OCT --------------------------------------------------*/

const     octetstring i2ocon := '12345678'O
modulepar octetstring i2opar := '12345678'O
modulepar octetstring i2opar1 := int2oct(0,10)
modulepar octetstring i2opar2 := int2oct(0,0)
modulepar octetstring i2opar3 := int2oct(15,1)
modulepar octetstring i2opar4 := int2oct(oct2int(i2ocon),lengthof(i2ocon))
modulepar octetstring i2opar5 := int2oct(33,8);
modulepar integer i2opari := oct2int(i2ocon)

testcase int_to_oct() runs on PDTestComponent{
    var integer i1 := 881883119815076896174081;
    var octetstring os1 := '00000000000000000000000000000000000000000000BABEFACEDECAFBADF001'O
    var octetstring os2 := 'BABEFACEDECAFBADF001'O
	if ((i2opar1 == '00000000000000000000'O)
	and (i2opar1 == int2oct(0,10)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2opar2 == ''O)and (i2opar2 ==  int2oct(0,0)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2opar3 == '0F'O)
	and (i2opar3 == int2oct(15,1)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if (i2opar5 == '0000000000000021'O)
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2opar4 == i2opar)
	and (i2opar4 == int2oct(oct2int(i2opar),lengthof(i2opar))))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	log(i1);
	log(int2oct(i1, 32));
	log(os1);
	if (int2oct(i1, 32) == os1) { setverdict(pass) } else { setverdict(fail, __LINE__, match(int2oct(i1, 32) , os1)) }
	//compile-time: if (int2oct(12345678910111213141516, 32) == '00000000000000000000000000000000000000000000029D42B65689328BBE0C'O) { setverdict(pass) } else { setverdict(fail, __LINE__) }
	if (int2oct(881883119815076896174081, 32) == os1) { setverdict(pass) } else { setverdict(fail, __LINE__) }
	if (int2oct(881883119815076896174081, 10) == os2) { setverdict(pass) } else { setverdict(fail, __LINE__) }
}

/*--- INT2STR --------------------------------------------------*/

const     charstring i2scon :=  "1234567890"
modulepar charstring i2spar :=  "1234567890"
modulepar charstring i2spar1 := int2str(0)
modulepar charstring i2spar2 := int2str(-1)
modulepar charstring i2spar3 := int2str(16 mod 3)
modulepar charstring i2spar4 := int2str(16 rem 3)
modulepar charstring i2spar5 := int2str(lengthof(i2scon))

const     integer i2sconi := str2int(i2scon)

modulepar charstring i2spar6 := int2str(i2sconi)
const     charstring i2scon7 := "1234567891011121314151617181920"
modulepar charstring i2spar7 := "1234567891011121314151617181920"
const     charstring i2scon8 := "-1234567891011121314151617181920"  // Negative values.
modulepar charstring i2spar8 := "-1234567891011121314151617181920"  // Negative values.
modulepar integer i2spari1 := str2int(i2scon7)
modulepar integer i2spari2 := str2int(i2scon8)

testcase int_to_str() runs on PDTestComponent{

	var charstring cc := int2str(i2sconi)
	var charstring vv := "1234567891011121314151617181920"
	var charstring vv1 := "-1234567891011121314151617181920"
	var integer ii := str2int(vv)
	var integer ii1 := str2int(vv1)

	if ((i2spar1 == "0")
	and (i2spar1 == int2str(0)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2spar2 == "-1")
	and (i2spar2 == int2str(-1)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2spar3 == "1")
	and (i2spar3 == int2str(16 mod 3)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2spar4 == "1")
	and (i2spar4 == int2str(16 rem 3)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2spar5 == "10")
	and (i2spar5 == int2str(lengthof(i2spar))))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2spar6 == i2spar)
	and (i2spar6 == int2str(i2sconi)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	// Compile time evaluation.  (Positive/negative.)
	if ((i2spar7 == int2str(1234567891011121314151617181920)
	and (int2str(1234567891011121314151617181920) == i2spar7)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((int2str(1234567891011121314151617181930 - 10) == i2spar7)
	and (i2spar7 == int2str(1234567891011121314151617181930 - 10)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2spar7 == int2str(i2spari1)
	and (int2str(i2spari1) == i2spar7)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((int2str(i2spari1 + 10 - 10) == i2spar7)
	and (i2spar7 == int2str(i2spari1 + 10 - 10)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2spar8 == int2str(-1234567891011121314151617181920)
	and (int2str(1234567891011121314151617181920) == i2spar7)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((int2str(-1234567891011121314151617181930 + 10) == i2spar8)
	and (i2spar8 == int2str(-1234567891011121314151617181930 + 10)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2spar8 == int2str(i2spari2)
	and (int2str(i2spari2) == i2spar8)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((int2str(i2spari2 + 10 - 10) == i2spar8)
	and (i2spar8 == int2str(i2spari2 + 10 - 10)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	// Run-time evaluation.  (Positive/negative.)
	if ((vv == int2str(1234567891011121314151617181920)
	and (int2str(1234567891011121314151617181920) == vv)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((int2str(1234567891011121314151617181910 + 10) == vv)
	and (vv == int2str(1234567891011121314151617181910 + 10)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((vv == int2str(ii)
	and (int2str(1234567891011121314151617181920) == vv)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((int2str(ii + 10 - 10) == vv)
	and (vv == int2str(ii + 10 - 10)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2spari1 == ii)
	and (ii == i2spari1))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((int2str(i2spari1) == int2str(ii))
	and (int2str(ii) == int2str(i2spari1)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((vv1 == int2str(-1234567891011121314151617181920)
	and (int2str(-1234567891011121314151617181920) == vv1)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((int2str(-1234567891011121314151617181910 - 10) == vv1)
	and (vv1 == int2str(-1234567891011121314151617181910 - 10)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((vv1 == int2str(ii1)
	and (int2str(-1234567891011121314151617181920) == vv1)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((int2str(ii1 + 10 - 10) == vv1)
	and (vv1 == int2str(ii1 + 10 - 10)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((i2spari2 == ii1)
	and (ii1 == i2spari2))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
	if ((int2str(i2spari2) == int2str(ii1))
	and (int2str(ii1) == int2str(i2spari2)))
	     {setverdict(pass);}
	else {setverdict(fail, __LINE__);}
}




control {
	execute (int_to_bit());
	execute (int_to_char());
	execute (int_to_unichar());

	execute (int_to_float());
	execute (int_to_hex());
	execute (int_to_oct());
	execute (int_to_str());
}

}
