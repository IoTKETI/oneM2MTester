/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Raduly, Csaba
 *
 ******************************************************************************/
module shifty_SW {	//^In TTCN-3 module `shifty_SW'://

type component PDTestComponent {};


/*--- SHIFT ON BITSTRING --------------------------------------------------*/

const bitstring shiconb := '0000000000'B
const bitstring shiconb1 := '0000110000'B
const bitstring shiconb2 := shiconb1 >> 2 // '0000001100'B
const bitstring shiconb3 := shiconb1 << 2 // '0011000000'B
const bitstring shiconb4 := shiconb1 << 5 // '1000000000'B
const bitstring shiconb5 := shiconb1 >> 5 // '0000000001'B
const bitstring shiconb6 := shiconb1 << 0 // '0000110000'B
const bitstring shiconb7 := shiconb1 >> 0 // '0000110000'B
const bitstring shiconb8 := shiconb1 << 11 // '0000000000'B
const bitstring shiconb9 := shiconb1 >> 11 // '0000000000'B
const bitstring shiconb10 := ''B
const bitstring shiconb11 := ''B >> 2
const bitstring shiconb12 := ''B << 2
const bitstring shiconb13 := ''B >> 0
const bitstring shiconb14 := ''B << 0
const bitstring shiconb15 := shiconb1 >> -2 // '0011000000'B
const bitstring shiconb16 := shiconb1 << -2 // '0000001100'B

testcase shift_bitstr() runs on PDTestComponent{ //In testcase definition//

	if (shiconb1 == shiconb2 << 2)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconb1 == shiconb3 >> 2)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconb1 != shiconb4 >> 5)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconb1 != shiconb5 << 5)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconb1 == shiconb6)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconb1 == shiconb7)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconb == shiconb8)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconb == shiconb9)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((shiconb10 == shiconb11)
	and (shiconb10 == shiconb12))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((shiconb10 == shiconb13)
	and (shiconb10 == shiconb14))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconb15 == shiconb3)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconb16 == shiconb2)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
}

/*--- SHIFT ON HEXSTRING --------------------------------------------------*/

const hexstring shiconh := '0000000000'H
const hexstring shiconh1 := '0000110000'H
const hexstring shiconh2 := shiconh1 >> 2 // '0000001100'H
const hexstring shiconh3 := shiconh1 << 2 // '0011000000'H
const hexstring shiconh4 := shiconh1 << 5 // '1000000000'H
const hexstring shiconh5 := shiconh1 >> 5 // '0000000001'H
const hexstring shiconh6 := shiconh1 << 0 // '0000110000'H
const hexstring shiconh7 := shiconh1 >> 0 // '0000110000'H
const hexstring shiconh8 := shiconh1 << 11 // '0000000000'H
const hexstring shiconh9 := shiconh1 >> 11 // '0000000000'H
const hexstring shiconh10 := ''H
const hexstring shiconh11 := ''H >> 2
const hexstring shiconh12 := ''H << 2
const hexstring shiconh13 := ''H >> 0
const hexstring shiconh14 := ''H << 0
const hexstring shiconh15 := shiconh1 >> -2 // '0011000000'H
const hexstring shiconh16 := shiconh1 << -2 // '0000001100'H

testcase shift_hexstr() runs on PDTestComponent{ //In testcase definition//

	if (shiconh1 == shiconh2 << 2)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconh1 == shiconh3 >> 2)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconh1 != shiconh4 >> 5)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconh1 != shiconh5 << 5)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconh1 == shiconh6)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconh1 == shiconh7)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconh == shiconh8)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconh == shiconh9)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((shiconh10 == shiconh11)
	and (shiconh10 == shiconh12))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((shiconh10 == shiconh13)
	and (shiconh10 == shiconh14))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconh15 == shiconh3)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shiconh16 == shiconh2)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
}

/*--- SHIFT ON OCTETSTRING --------------------------------------------------*/

const octetstring shicono := '0000000000'O
const octetstring shicono1 := '0000AA0000'O
const octetstring shicono2 := shicono1 >> 2 // '00000000AA'O
const octetstring shicono3 := shicono1 << 2 // 'AA00000000'O
const octetstring shicono4 := shicono1 << 5 // '0000000000'O
const octetstring shicono5 := shicono1 >> 5 // '0000000000'O
const octetstring shicono6 := shicono1 << 0 // '0000AA0000'O
const octetstring shicono7 := shicono1 >> 0 // '0000AA0000'O
const octetstring shicono8 := shicono1 << 11 // '0000000000'O
const octetstring shicono9 := shicono1 >> 11 // '0000000000'O
const octetstring shicono10 := ''O
const octetstring shicono11 := ''O >> 2
const octetstring shicono12 := ''O << 2
const octetstring shicono13 := ''O >> 0
const octetstring shicono14 := ''O << 0
const octetstring shicono15 := shicono1 >> -2 // 'AA00000000'O
const octetstring shicono16 := shicono1 << -2 // '00000000AA'O

testcase shift_octetstr() runs on PDTestComponent{ //In testcase definition//

	if (shicono1 == shicono2 << 2)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shicono1 == shicono3 >> 2)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shicono1 != shicono4 >> 5)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shicono1 != shicono5 << 5)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shicono1 == shicono6)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shicono1 == shicono7)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shicono == shicono8)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shicono == shicono9)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((shicono10 == shicono11)
	and (shicono10 == shicono12))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if ((shicono10 == shicono13)
	and (shicono10 == shicono14))
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shicono15 == shicono3)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
	if (shicono16 == shicono2)
	     {setverdict(pass);}
	else {setverdict(fail);} //^In else statement// \
                             //^warning\: Control never reaches this code because of previous effective condition\(s\)//
}

control {
	execute (shift_bitstr());
	execute (shift_hexstr());
	execute (shift_octetstr());
}

}
