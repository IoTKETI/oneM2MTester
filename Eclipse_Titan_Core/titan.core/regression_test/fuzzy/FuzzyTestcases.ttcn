/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Baranyi, Botond
 *
 ******************************************************************************/

// This module contains test cases for fuzzy parameters
module FuzzyTestcases {

import from FuzzyTypes all;
import from FuzzyFunctions all;

testcase tc_fuzzy_int() runs on CT {
  var integer v_usages := 0;
  var integer v_exp_res := 0;
  var integer v_res := f_fuzzy_usage_int(f_fuzzy_return_int(1), v_usages);
  if (ct_calls != v_usages) {
    setverdict(fail, "Expected ", v_usages, " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  
  v_usages := 3;
  v_exp_res := 6;
  v_res := f_fuzzy_usage_int(f_fuzzy_return_int(2), v_usages);
  if (ct_calls != v_usages) {
    setverdict(fail, "Expected ", v_usages, " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  
  setverdict(pass);
}

testcase tc_fuzzy_wrapped_float() runs on CT {
  var integer v_outer_usages := 0;
  var integer v_inner_usages := 0;
  var float v_exp_res := 1.0;
  var float v_res := f_wrapped_fuzzy_usage_float(f_fuzzy_return_float(0.6), v_outer_usages, v_inner_usages);
  if (ct_calls != v_outer_usages * v_inner_usages) {
    setverdict(fail, "Expected ", v_outer_usages * v_inner_usages, " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  
  v_outer_usages := 3;
  v_inner_usages := 4;
  v_exp_res := 1000.0;
  v_res := f_wrapped_fuzzy_usage_float(f_fuzzy_return_float(2.5), v_outer_usages, v_inner_usages);
  if (ct_calls != v_outer_usages * v_inner_usages) {
    setverdict(fail, "Expected ", v_outer_usages * v_inner_usages, " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  setverdict(pass);
}

// non-standard
testcase tc_fuzzy_in_fuzzy_cstr() runs on CT {
  var integer v_outer_usages := 0;
  var integer v_inner_usages := 0;
  var charstring v_exp_res := "";
  var charstring v_res := f_fuzzy_usage_cstr(f_fuzzy_usage_cstr(f_fuzzy_return_cstr("ab"), v_inner_usages), v_outer_usages);
  if (ct_calls != v_outer_usages) {
    setverdict(fail, "Expected ", v_outer_usages, " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  
  v_outer_usages := 2;
  v_inner_usages := 3;
  v_exp_res := "abababababab"; // "ab" x 6
  v_res := f_fuzzy_usage_cstr(f_fuzzy_usage_cstr(f_fuzzy_return_cstr("ab"), v_inner_usages), v_outer_usages);
  if (ct_calls != v_outer_usages) {
    setverdict(fail, "Expected ", v_outer_usages, " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  setverdict(pass);
}

testcase tc_lazy_wrapped_in_fuzzy_bstr() runs on CT {
  var integer v_outer_usages := 0;
  var integer v_inner_usages := 0;
  var bitstring v_exp_res := ''B;
  var bitstring v_res := f_wrapped_fuzzy_usage_bstr(f_fuzzy_return_bstr('10'B), v_outer_usages, v_inner_usages);
  if (ct_calls != v_outer_usages * 2) {
    setverdict(fail, "Expected ", v_outer_usages * 2, " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  
  v_outer_usages := 3;
  v_inner_usages := 4;
  v_exp_res := '101010101010101010101010101010'B; // '10'B x 15
  v_res := f_wrapped_fuzzy_usage_bstr(f_fuzzy_return_bstr('10'B), v_outer_usages, v_inner_usages);
  if (ct_calls != v_outer_usages * 2) {
    setverdict(fail, "Expected ", v_outer_usages * 2, " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  setverdict(pass);
}

testcase tc_fuzzy_wrapped_in_lazy_hstr() runs on CT {
  var integer v_outer_usages := 0;
  var integer v_inner_usages := 0;
  var hexstring v_exp_res := ''H;
  var hexstring v_res := f_wrapped_lazy_usage_hstr(f_fuzzy_return_hstr('12EF'H), v_outer_usages, v_inner_usages);
  if (ct_calls != v_outer_usages * v_inner_usages) {
    setverdict(fail, "Expected ", v_outer_usages * v_inner_usages, " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  
  v_outer_usages := 3;
  v_inner_usages := 2;
  v_exp_res := 'AC3AC3AC3AC3AC3AC3AC3AC3AC3'H; // 'AC3'H x 9
  v_res := f_wrapped_lazy_usage_hstr(f_fuzzy_return_hstr('AC3'H), v_outer_usages, v_inner_usages);
  if (ct_calls != v_outer_usages * v_inner_usages + 1) {
    setverdict(fail, "Expected ", v_outer_usages * v_inner_usages + 1, " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  setverdict(pass);
}

testcase tc_fuzzy_wrapped_in_lazy_wrapped_in_fuzzy_ostr() runs on CT {
  var integer v_outer_usages := 0;
  var integer v_middle_usages := 0;
  var integer v_inner_usages := 0;
  var octetstring v_exp_res := ''O;
  var octetstring v_res := f_double_wrapped_fuzzy_usage_ostr(f_fuzzy_return_ostr('12EF'O), v_outer_usages, v_middle_usages, v_inner_usages);
  if (ct_calls != v_outer_usages * (v_middle_usages * v_inner_usages + 1)) {
    setverdict(fail, "Expected ", v_outer_usages * (v_middle_usages * v_inner_usages + 1), " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  
  v_outer_usages := 2;
  v_middle_usages := 2;
  v_inner_usages := 3;
  v_exp_res := 'DADADADADADADADADADADADADADADADADADA'O; // 'DE'O x 18
  v_res := f_double_wrapped_fuzzy_usage_ostr(f_fuzzy_return_ostr('DA'O), v_outer_usages, v_middle_usages, v_inner_usages);
  if (ct_calls != v_outer_usages * (v_middle_usages * v_inner_usages + 2)) {
    setverdict(fail, "Expected ", v_outer_usages * (v_middle_usages * v_inner_usages + 2), " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  setverdict(pass);
}

testcase tc_lazy_wrapped_in_fuzzy_wrapped_in_lazy_ustr() runs on CT {
  var integer v_outer_usages := 0;
  var integer v_middle_usages := 0;
  var integer v_inner_usages := 0;
  var universal charstring v_exp_res := "";
  var universal charstring v_res := f_double_wrapped_lazy_usage_ustr(f_fuzzy_return_ustr(char(0, 1, 2, 3)), v_outer_usages, v_middle_usages, v_inner_usages);
  if (ct_calls != v_outer_usages * v_middle_usages * 2) {
    setverdict(fail, "Expected ", v_outer_usages * v_middle_usages * 2, " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  
  v_outer_usages := 2;
  v_middle_usages := 3;
  v_inner_usages := 2;
  v_exp_res := "áááááááááááááááááááá"; // "á" x 20
  v_res := f_double_wrapped_lazy_usage_ustr(f_fuzzy_return_ustr("á"), v_outer_usages, v_middle_usages, v_inner_usages);
  if (ct_calls != v_outer_usages * v_middle_usages * 2 + 1) {
    setverdict(fail, "Expected ", v_outer_usages * v_middle_usages * 2 + 1, " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  setverdict(pass);
}

testcase tc_fuzzy_wrapped_rec() runs on CT {
  var integer v_rec_usages := 0;
  var integer v_int_usages := 0;
  var integer v_str_usages := 0;
  var Rec v_rec := { num := 5, str := "xy" };
  var Rec v_exp_res := { num := 0, str := "" };
  var Rec v_res := f_wrapped_fuzzy_usage_rec(f_fuzzy_return_rec(v_rec), v_rec_usages, v_int_usages, v_str_usages);
  if (ct_calls != v_rec_usages * (v_int_usages + v_str_usages)) {
    setverdict(fail, "Expected ", v_rec_usages * (v_int_usages + v_str_usages), " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  
  v_rec_usages := 2;
  v_int_usages := 4;
  v_str_usages := 3;
  v_exp_res := { num := 40, str := "xyxyxyxyxyxy" };
  v_res := f_wrapped_fuzzy_usage_rec(f_fuzzy_return_rec(v_rec), v_rec_usages, v_int_usages, v_str_usages);
  if (ct_calls != v_rec_usages * (v_int_usages + v_str_usages)) {
    setverdict(fail, "Expected ", v_rec_usages * (v_int_usages + v_str_usages), " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  setverdict(pass);
}

testcase tc_fuzzy_int_temp() runs on CT {
  var template integer vt_int := (0..infinity);
  var IntList v_values := { };
  var integer v_exp_res := 0;
  var integer v_res := f_fuzzy_usage_int_temp(f_fuzzy_return_int_temp(vt_int), v_values);
  if (ct_calls != lengthof(v_values)) {
    setverdict(fail, "Expected ", lengthof(v_values), " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  
  v_values := { 1, -6, 199, 0, -3000 };
  v_exp_res := 3;
  v_res := f_fuzzy_usage_int_temp(f_fuzzy_return_int_temp(vt_int), v_values);
  if (ct_calls != lengthof(v_values)) {
    setverdict(fail, "Expected ", lengthof(v_values), " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  setverdict(pass);
}

testcase tc_fuzzy_wrapped_list_temp() runs on CT {
  var template IntList vt_list := { };
  var IntList v_values := { };
  var integer v_exp_res := 0;
  var integer v_res := f_wrapped_fuzzy_usage_list_temp(f_fuzzy_return_list_temp(vt_list), v_values);
  if (ct_calls != (lengthof(v_values) + 1) * lengthof(vt_list) + 1) {
    setverdict(fail, "Expected ", (lengthof(v_values) + 1) * lengthof(vt_list) + 1, " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  
  ct_calls := 0;
  vt_list := { ?, (1, (100..200)), (-infinity..0), -2 };
  v_values := { 1, -6, 199, 0, -3000 };
  v_exp_res := 10;
  v_res := f_wrapped_fuzzy_usage_list_temp(f_fuzzy_return_list_temp(vt_list), v_values);
  if (ct_calls != (lengthof(v_values) + 1) * lengthof(vt_list) + 1) {
    setverdict(fail, "Expected ", (lengthof(v_values) + 1) * lengthof(vt_list) + 1, " calls, got ", ct_calls);
  }
  if (v_res != v_exp_res) {
    setverdict(fail, "Expected result: ", v_exp_res, ", got: ", v_res);
  }
  setverdict(pass);
}

testcase tc_fuzzy_altstep_bool() runs on CT {
  connect(self:pt, self:pt);
  pt.send(3);
  timer tmr;
  tmr.start(0.5);
  alt {
    [] tmr.timeout {
      setverdict(fail, "First test timed out.");
    }
    [] as_fuzzy_bool(f_fuzzy_return_bool(false));
  }
  if (ct_calls != 2) {
    setverdict(fail, "Expected 2 calls, got ", ct_calls);
  }
  
  ct_calls := 0;
  pt.send(-6);
  tmr.stop;
  tmr.start(0.5);
  alt {
    [] tmr.timeout {
      setverdict(fail, "Second test timed out.");
    }
    [] as_fuzzy_bool(f_fuzzy_return_bool(true));
  }
  if (ct_calls != 3) {
    setverdict(fail, "Expected 3 calls, got ", ct_calls);
  }
  setverdict(pass);
}

// Testcase with fuzzy parameters
testcase tc_fuzzy_testcase_uni(in template @fuzzy Uni pt_fuzzy) runs on CT {
  var Uni v_values[4] := {
    { i := 10 },
    { os := 'AB12F9'O },
    { i := -991 },
    { ucs := "eeeeee" }
  };
  var integer v_nof_matches := 0;
  for (var integer i := 0; i < lengthof(v_values); i := i + 1) {
    if (match(v_values[i], pt_fuzzy)) {
      v_nof_matches := v_nof_matches + 1;
    }
  }
  if (ct_calls != lengthof(v_values)) {
    setverdict(fail, "Expected ", lengthof(v_values), " calls, got ", ct_calls);
  }
  if (v_nof_matches != 2) {
    setverdict(fail, "Expected 2 matches, got ", v_nof_matches);
  }
  setverdict(pass);
}

control {
  execute(tc_fuzzy_int());
  execute(tc_fuzzy_wrapped_float());
  execute(tc_fuzzy_in_fuzzy_cstr());
  execute(tc_lazy_wrapped_in_fuzzy_bstr());
  execute(tc_fuzzy_wrapped_in_lazy_hstr());
  execute(tc_fuzzy_wrapped_in_lazy_wrapped_in_fuzzy_ostr());
  execute(tc_lazy_wrapped_in_fuzzy_wrapped_in_lazy_ustr());
  execute(tc_fuzzy_wrapped_rec());
  execute(tc_fuzzy_int_temp());
  execute(tc_fuzzy_wrapped_list_temp());
  execute(tc_fuzzy_altstep_bool());
  
  var template Uni vt_uni := { i := ? };
  execute(tc_fuzzy_testcase_uni(f_fuzzy_return_uni_temp(vt_uni)));
}

} // end of module
