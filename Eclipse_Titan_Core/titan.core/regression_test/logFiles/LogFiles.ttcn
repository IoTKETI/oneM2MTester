/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Delic, Adam
 *   Kovacs, Ferenc
 *   Raduly, Csaba
 *
 ******************************************************************************/
module LogFiles
{
  modulepar
  {
    StrList PTC_Names;
    StrList PTC_Severities;
  }

  type record of charstring StrList;

  external function readlogfile(in charstring filename) return StrList;

  type port MyPort message
  {
    inout charstring;
  } with { extension "internal" }

  type component MyComp
  {
    port MyPort p1;
    port MyPort p2;
    port MyProcPort p;
  }

  signature MySignature(in MyComp c) return MyComp;
  template MySignature MySignatureTemplate := { c:=? }

  type port MyProcPort procedure
  {
    inout MySignature;
  }
  with { extension "internal" }

  function myptcfn() runs on MyComp
  {
    var charstring msg;
    p1.receive(charstring:?) -> value msg;
    log(msg);
    p2.send(msg);
    setverdict(pass);
  }

  type record of MyComp MyCompList;

  testcase mytc() runs on MyComp
  {
    // create component ring with names from cfg file
    var integer i;
    var MyCompList comp_list := { };
    for (i:=0; i<sizeof(PTC_Names); i:=i+1)
    {
      comp_list[sizeof(comp_list)] := MyComp.create(PTC_Names[i]);
    }
    connect(self:p2,comp_list[0]:p1);
    for (i:=1; i<sizeof(comp_list); i:=i+1) { connect(comp_list[i-1]:p2,comp_list[i]:p1); }
    connect(comp_list[sizeof(comp_list)-1]:p2,self:p1);

    for (i:=0; i<sizeof(comp_list); i:=i+1)
    {
      comp_list[i].start(myptcfn());
    }

    timer T;
    var charstring msg;
    p2.send("Hello component!");
    T.start(10.0);
    alt
    {
      [] p1.receive("Hello component!") -> value msg { log(msg); T.stop; }
      [] T.timeout { setverdict(fail); }
    }
    setverdict(pass);
  }

  function checkLineMatches(in charstring line, in charstring regexp_str)
  {
    var charstring match_regexp := "(" & regexp_str & ")";
    var charstring matching_str := regexp(line, match_regexp, 0);
    if (lengthof(matching_str)==0) { setverdict(fail, "\nline=",line, "\nregexp=",match_regexp); }
  }

  function checkContainsMatchingLineCount(in StrList list, in charstring regexp_str, in integer required_matching_lines)
  {
    var charstring match_regexp := "(" & regexp_str & ")";
    var integer number_of_lines_matching := 0;
    var integer i;
    for (i:=0; i<sizeof(list); i:=i+1)
    {
        var charstring matching_str := regexp(list[i], match_regexp, 0);
        if (lengthof(matching_str)!=0) { number_of_lines_matching := number_of_lines_matching + 1; }
    }
    if (number_of_lines_matching!=required_matching_lines) {
      setverdict(fail, "Number of matching lines: ", match(number_of_lines_matching, required_matching_lines));
      log(match(number_of_lines_matching, required_matching_lines), "  regexp=", match_regexp, "  list=", list);
    }
  }

  function get_conn_p1_comp_name_pattern(in integer ptc_index) return charstring
  {
    if (ptc_index==0) { return "mtc"; }
    return PTC_Names[ptc_index-1] & "\\(\\d#(1,2)\\)";
  }

  function get_conn_p2_comp_name_pattern(in integer ptc_index) return charstring
  {
    if (ptc_index>=sizeof(PTC_Names)-1) { return "mtc"; }
    return PTC_Names[ptc_index+1] & "\\(\\d#(1,2)\\)";
  }

  function checkLogFile_fn(in integer index)
  {
    log("Checking ", PTC_Names[index], ".log for ", PTC_Severities[index]);
    var StrList list := readlogfile(PTC_Names[index] & ".log");
    // check only containes the specified severity
    var charstring mypattern := "* (" & PTC_Severities[index] & "_[A-Z]#(1,100)) *";
    var integer i;
    for (i:=0; i<sizeof(list); i:=i+1)
    {
      var charstring matching_str := regexp(list[i],mypattern,0);
      //log("matching_str = ",matching_str);
      if (lengthof(matching_str)==0) { setverdict(fail); log("line=",list[i],"  regexp=",mypattern);  }
    }
    // check for proper log lines: log string, log severity_subcategory, component instance name
    if (PTC_Severities[index]=="PORTEVENT")
    {
      checkContainsMatchingLineCount(list, "* PORTEVENT_STATE *Port p? was started.", 2);
      checkContainsMatchingLineCount(list, "* PORTEVENT_STATE *Port p? was stopped.", 2);
      checkContainsMatchingLineCount(list, "* PORTEVENT_MQUEUE *Message enqueued on p1 from "
        & get_conn_p1_comp_name_pattern(index) & " charstring : \"Hello component!\" id 1", 1);
      checkContainsMatchingLineCount(list, "* PORTEVENT_MCRECV *Receive operation on port p1 succeeded, message from "
        & get_conn_p1_comp_name_pattern(index) & ": charstring : \"Hello component!\" id 1", 1);
      checkContainsMatchingLineCount(list, "* PORTEVENT_MQUEUE *Message with id 1 was extracted from the queue of p1.", 1);
      checkContainsMatchingLineCount(list, "* PORTEVENT_MCSEND *Sent on p2 to "
        & get_conn_p2_comp_name_pattern(index) & " charstring : \"Hello component!\"", 1);
    }
    else if (PTC_Severities[index]=="MATCHING")
    {
      checkContainsMatchingLineCount(list, "* MATCHING_MCSUCCESS *Matching on port p1 succeeded: \"Hello component!\" with ? matched", 1);
    }
    else if (PTC_Severities[index]=="USER")
    {
      checkContainsMatchingLineCount(list, "* USER_UNQUALIFIED *\"Hello component!\"", 1);
    }
    else if (PTC_Severities[index]=="PARALLEL")
    {
      checkLineMatches(list[0], "* PARALLEL_PTC *Initializing variables, timers and ports of component type *.MyComp inside testcase *.");
      checkLineMatches(list[1], "* PARALLEL_PTC *Component type *.MyComp was initialized.");
      checkLineMatches(list[2], "* PARALLEL_PTC *Starting function myptcfn\\(\\).");
      checkLineMatches(list[3], "* PARALLEL_PTC *Function myptcfn finished. PTC terminates.");
      checkLineMatches(list[4], "* PARALLEL_PTC *Terminating component type *.MyComp.");
      checkLineMatches(list[5], "* PARALLEL_PTC *Component type *.MyComp was shut down inside testcase *.");
    }
    else if (PTC_Severities[index]=="EXECUTOR")
    {
      checkLineMatches(list[0], "* EXECUTOR_COMPONENT *TTCN-3 Parallel Test Component started on * component name: "
        & PTC_Names[index] & ". Version: *");
      checkLineMatches(list[1], "* EXECUTOR_LOGOPTIONS *TTCN Logger v\\d#(1,4).\\d#(1,4) options: *");
      checkLineMatches(list[2], "* EXECUTOR_RUNTIME *Connected to MC.");
      checkLineMatches(list[3], "* EXECUTOR_RUNTIME *Disconnected from MC.");
      checkLineMatches(list[4], "* EXECUTOR_COMPONENT *TTCN-3 Parallel Test Component finished.");
    }
    else if (PTC_Severities[index]=="VERDICTOP")
    {
      checkLineMatches(list[0], "* VERDICTOP_SETVERDICT *setverdict\\(pass\\): none -> pass");
      checkLineMatches(list[1], "* VERDICTOP_FINAL *Final verdict of PTC: pass");
    }
  }

  testcase checklogfiles_tc() runs on MyComp
  {
    var integer i;
    for (i:=0; i<sizeof(PTC_Names); i:=i+1)
    {
      checkLogFile_fn(i);
    }
    setverdict(pass);

    // Check that EXECUTOR_EXTCOMMAND appears in the log,
    // even without being specified in the config files.
    var StrList MTClog := readlogfile("MTC.log");
    if (lengthof(MTClog) == 0) { setverdict(fail, "MTC log empty"); }
    checkContainsMatchingLineCount(MTClog, "* Starting external command `[^']+'.", 2);
    checkContainsMatchingLineCount(MTClog, "* External command `[^']+' was executed successfully \\(exit status: 0\\).", 2);
  }

  // check MTC.log generated by previous execution using LogFiles.cfg
  // run from LogFiles2.cfg (second invocation)
  testcase checkMTClogfile_tc() runs on MyComp
  {
    var StrList list := readlogfile("MTC.log");
    // check first two lines
    checkLineMatches(list[0], "* EXECUTOR_COMPONENT *TTCN-3 Main Test Component started on *. Version: *.");
    checkLineMatches(list[1], "* EXECUTOR_LOGOPTIONS *TTCN Logger v\\d#(1,4).\\d#(1,4) options: *");
    // check timer messages
    checkContainsMatchingLineCount(list, "* TIMEROP_START *Start timer T: \\d#(1,10) s", 1);
    checkContainsMatchingLineCount(list, "* TIMEROP_STOP *Stop timer T: \\d#(1,10) s", 1);
    // check TESTCASE_xxx messages
    checkContainsMatchingLineCount(list, "* TESTCASE_START *Test case mytc started.", 1);
    checkContainsMatchingLineCount(list, "* TESTCASE_FINISH *Test case mytc finished. Verdict: pass", 1);
    // check for every created component
    var integer i;
    for (i:=0; i<sizeof(PTC_Names); i:=i+1)
    {
      checkContainsMatchingLineCount(list, "* PARALLEL_PTC *PTC was created. Component reference: \\d#(1,3), alive: (yes|no), "
        & "type: *, component name: " & PTC_Names[i] & ".", 1);
      checkContainsMatchingLineCount(list, "* PARALLEL_PTC *Starting function myptcfn\\(\\) on component "
        & PTC_Names[i] & "\\(\\d#(1,3)\\).", 1);
      checkContainsMatchingLineCount(list, "* VERDICTOP_FINAL *Local verdict of PTC "
        & PTC_Names[i] & "\\(\\d#(1,3)\\): pass \\(pass -> pass\\)", 1);
    }
    for (i:=0; i<=sizeof(PTC_Names); i:=i+1)
    {
      checkContainsMatchingLineCount(list, "* PARALLEL_PORTCONN *Connect operation on "
        & get_conn_p1_comp_name_pattern(i) & ":p2 and " & get_conn_p2_comp_name_pattern(i-1) & ":p1 finished.", 1);
    }
    setverdict(pass);
  }

  function myprocptcfn1() runs on MyComp
  {
    var MyComp vl_comp;
    p.call(MySignature:{self})
    {
      [] p.getreply(MySignatureTemplate) -> value vl_comp;
    }
    log("Received component value: ", vl_comp);
    p2.send("ok.");
    setverdict(pass);
  }

  function myprocptcfn2() runs on MyComp
  {
    var MyComp vl_comp;
    p.getcall(MySignatureTemplate) -> param (vl_comp);
	  p.reply(MySignatureTemplate value self);
    log("Received component value: ", vl_comp);
    p2.send("ok.");
    setverdict(pass);
  }

  // run from LogFilesProc.cfg (third invocation)
  testcase proc_tc() runs on MyComp
  {
    var MyComp c1, c2;
    c1 := MyComp.create("STAN");
    c2 := MyComp.create("PAN");
    connect(c1:p,c2:p);
    connect(mtc:p2,c1:p2);
    connect(mtc:p2,c2:p2);
    c1.start(myprocptcfn1());
    c2.start(myprocptcfn2());
    p2.receive(charstring:"ok.");
    p2.receive(charstring:"ok.");
    // check log file of STAN
    var StrList list := readlogfile("PROC_STAN.log");
    checkLineMatches(list[0], "* PORTEVENT_PCOUT *Called on p to PAN\\(\\d#(1,3)\\) *");
    checkLineMatches(list[1], "* PORTEVENT_PQUEUE *Reply enqueued on p from PAN\\(\\d#(1,3)\\) * value PAN\\(\\d#(1,3)\\) id 1");
    checkLineMatches(list[2], "* MATCHING_PCSUCCESS *Matching on port p succeeded: * matched value PAN\\(\\d#(1,3)\\) with \\? matched");
    checkLineMatches(list[3], "* PORTEVENT_PCIN *Getreply operation on port p succeeded, reply from PAN\\(\\d#(1,3)\\): * value PAN\\(\\d#(1,3)\\) id 1");
    checkLineMatches(list[4], "* PORTEVENT_PQUEUE *Operation with id 1 was extracted from the queue of p.");
    checkLineMatches(list[5], "* USER_UNQUALIFIED *Received component value: PAN\\(\\d#(1,3)\\)");
    // check log file of PAN
    list := readlogfile("PROC_PAN.log");
    checkLineMatches(list[0], "* PORTEVENT_PQUEUE *Call enqueued on p from STAN\\(\\d#(1,3)\\) *.MySignature : \\{ c := STAN\\(\\d#(1,3)\\) \\} id 1");
    checkLineMatches(list[1], "* MATCHING_PCSUCCESS *Matching on port p succeeded: \\{ c := STAN\\(\\d#(1,3)\\) with \\? matched \\}");
    checkLineMatches(list[2], "* PORTEVENT_PCIN *Getcall operation on port p succeeded, call from STAN\\(\\d#(1,3)\\): *.MySignature : \\{ c := STAN\\(\\d#(1,3)\\) \\} id 1");
    checkLineMatches(list[3], "* PORTEVENT_PQUEUE *Operation with id 1 was extracted from the queue of p.");
    checkLineMatches(list[4], "* PORTEVENT_PCOUT *Replied on p to STAN\\(\\d#(1,3)\\) *.MySignature : \\{ \\} value PAN\\(\\d#(1,3)\\)");
    checkLineMatches(list[5], "* USER_UNQUALIFIED *Received component value: STAN\\(\\d#(1,3)\\)");
    setverdict(pass);
  }

  // Tests for HM34022.
  function f_level2()
  {
    log("f_level2()");
  }

  function f_level1()
  {
    f_level2();
  }

  testcase checkifstackisstillworking_tc() runs on MyComp
  {
    f_level1();
    var StrList list := readlogfile("MTC.log");
    var charstring match_regexp := "(?*USER_UNQUALIFIED LogFiles.ttcn:\\d+\\(controlpart:LogFiles\\)->LogFiles.ttcn:\\d+\\(testcase:checkifstackisstillworking_tc\\)->LogFiles.ttcn:\\d+\\(function:f_level1\\)->LogFiles.ttcn:\\d+\\(function:f_level2\\) f_level2\\(?*)";
    for (var integer i := 0; i < sizeof(list); i := i + 1) {
      var charstring match_str := regexp(list[i], match_regexp, 0);
      if (lengthof(match_str) != 0) {
        setverdict(pass);
        break;
      }
    }
    if (getverdict != pass) {
      setverdict(fail, "Something is wrong with the stack log...");
    }
  }

  control // Executed from LogFiles.cfg (first invocation).
  {
    execute(mytc());
    execute(checklogfiles_tc());
    execute(checkifstackisstillworking_tc());
  }
}
