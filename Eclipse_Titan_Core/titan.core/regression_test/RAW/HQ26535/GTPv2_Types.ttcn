/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Lovassy, Arpad
 *   Raduly, Csaba
 *
 ******************************************************************************/

module GTPv2_Types
{
 import from General_Types all;

 external function enc_PDU_GTPCv2(in PDU_GTPCv2 pdu) return octetstring
 with { extension "prototype(convert)" extension "encode(RAW)" }

 external function dec_PDU_GTPCv2(in octetstring stream) return PDU_GTPCv2
 with { extension "prototype(convert)" extension "decode(RAW)" }

type record Cause
{
 OCT1              elementIdentifier, //dec 2, '02'O  
 LIN2_BO_LAST      lengthIndicator,
 BIT4              instance,
 BIT4              spare,
 OCT1              causeValue,
 BIT1              cS,
 BIT1              bCE,
 BIT1              pCE,
 BIT5              spare2,
 OCT1              typeOfOffendingIE optional,
 LIN2_BO_LAST      lengthIndicator2 optional,
 BIT4              instanceOfOffendingIE optional,
 BIT4              spare3 optional
} with { 
        variant "PRESENCE (elementIdentifier = '02'O; )" 
        variant (lengthIndicator) "LENGTHTO(causeValue,cS,bCE,pCE,spare2,typeOfOffendingIE,
                                            lengthIndicator2,instanceOfOffendingIE,spare3 )" 
};

type record EPS_BearerID
{
 OCT1              elementIdentifier, // dec 73, '49'O  
 LIN2_BO_LAST      lengthIndicator,
 BIT4              instance,
 BIT4              spare,
 integer           ePS_Bearer_ID_Value,
 BIT4              spare2,   //'0000'B
 octetstring       additionalOctets  optional 
}with { 
  variant (lengthIndicator) "LENGTHTO(ePS_Bearer_ID_Value,spare2,additionalOctets)"
  variant "PRESENCE (elementIdentifier = '49'O; )"
  variant(ePS_Bearer_ID_Value) "FIELDLENGTH(4)"; 
};

type record Indication
{
 OCT1                elementIdentifier,   // dec 77, '4D'O; 
 LIN2_BO_LAST        lengthIndicator,
 BIT4                instance,
 BIT4                spare,
 BIT1                sGWCI,
 BIT1                iSRAI,
 BIT1                iSRSI,
 BIT1                oI,
 BIT1                dFI,
 BIT1                hI,
 BIT1                dTF,
 BIT1                dAF,
 BIT1                mSV,
 BIT1                sI,
 BIT1                pT,
 BIT1                pBit,
 BIT1                cRSI,
 BIT1                cFSI,
 BIT1                uIMSI,
 BIT1                sQCI,
 BIT1                cCRSI  optional,
 BIT1                iSRAU  optional,
 BIT1                mBMDT  optional,
 BIT1                s4AF   optional,
 BIT1                s6AF   optional,
 BIT3                spare2 optional,
 octetstring         additionalOctets  optional
} with { 
  variant (lengthIndicator) "LENGTHTO(sGWCI,iSRAI,iSRSI,oI,dFI,hI,dTF,dAF,
                                      mSV,sI,pT,pBit,cRSI,cFSI,uIMSI,
                                      sQCI, cCRSI, iSRAU,mBMDT,s4AF,s6AF,
                                      spare2,additionalOctets)"
  variant "PRESENCE (elementIdentifier = '4D'O; )" 
};

type set of  ProtocolID_or_ContainerID   ProtocolIDs_and_ContainerIDs;

type record ProtocolID_or_ContainerID
{
  OCT2               protocolID_or_ContainerID,
  LIN1               lengthIndicator,
  octetstring        protID_orContID_Contents
} with { variant (lengthIndicator) "LENGTHTO (protID_orContID_Contents)"};


type record ProtocolConfigOptions
{
 OCT1                         elementIdentifier, // dec 78 '4E'O;
 LIN2_BO_LAST                 lengthIndicator,
 BIT4                         instance,
 BIT4                         spare,
 BIT3                         configProtocol,
 BIT4                         spare2,  //'0000'B
 BIT1                         extensionField,   //'1'B
 ProtocolIDs_and_ContainerIDs protocolIDs_and_ContainerIDs optional
} with { 
  variant (lengthIndicator) "LENGTHTO(configProtocol,spare2,extensionField,protocolIDs_and_ContainerIDs)"
  variant "PRESENCE (elementIdentifier = '4E'O; )" 
};

type record UserLocationInfo
{
 OCT1                         elementIdentifier,   // dec 86, '56'O; 
 LIN2_BO_LAST                 lengthIndicator,
 BIT4                         instance,
 BIT4                         spare,
 BIT1                         cGI_Flag,
 BIT1                         sAI_Flag,
 BIT1                         rAI_Flag,
 BIT1                         tAI_Flag,
 BIT1                         eCGI_Flag, 
 BIT1                         lAI_Flag, 
 BIT2                         spare2,
 CGI                          cGI optional,
 SAI                          sAI optional,
 RAI                          rAI optional,
 TAI                          tAI optional,
 ECGI                         eCGI optional,
 LAI                          lAI optional,
 octetstring                  additionalOctets  optional 
} with { 
  variant (lengthIndicator) "LENGTHTO(cGI_Flag,sAI_Flag,rAI_Flag,tAI_Flag,eCGI_Flag,
                                      lAI_Flag,spare2,cGI,sAI,rAI,tAI,eCGI,lAI,additionalOctets)"
  variant(cGI)       "PRESENCE(cGI_Flag = '1'B)";
  variant(sAI)       "PRESENCE(sAI_Flag = '1'B)";
  variant(rAI)       "PRESENCE(rAI_Flag = '1'B)";
  variant(tAI)       "PRESENCE(tAI_Flag = '1'B)";
  variant(eCGI)      "PRESENCE(eCGI_Flag = '1'B)";
  variant(lAI)       "PRESENCE(lAI_Flag = '1'B)";  
  variant "PRESENCE (elementIdentifier = '56'O; )"   
};

//8.21.1

type record CGI
{  
 HEX1                         mccDigit1,
 HEX1                         mccDigit2,
 HEX1                         mccDigit3,
 HEX1                         mncDigit3, 
 HEX1                         mncDigit1,
 HEX1                         mncDigit2,
 OCT2                         lAC,
 OCT2                         cI
};
  
//8.21.2
type record SAI
{
 HEX1                         mccDigit1,
 HEX1                         mccDigit2,
 HEX1                         mccDigit3,
 HEX1                         mncDigit3,
 HEX1                         mncDigit1, 
 HEX1                         mncDigit2, 
 OCT2                         lAC,
 OCT2                         sAC  
};

//8.21.3
type record RAI 
{
 HEX1                         mccDigit1,
 HEX1                         mccDigit2,
 HEX1                         mccDigit3,
 HEX1                         mncDigit3,
 HEX1                         mncDigit1,
 HEX1                         mncDigit2,
 OCT2                         lAC,
 OCT2                         rAC  
};  
 
//8.21.4
type record TAI
{
 HEX1                         mccDigit1,
 HEX1                         mccDigit2,
 HEX1                         mccDigit3,
 HEX1                         mncDigit3,
 HEX1                         mncDigit1, 
 HEX1                         mncDigit2, 
 OCT2                         tAC 
};  
 
//8.21.5
type record ECGI
{
 HEX1                         mccDigit1,
 HEX1                         mccDigit2,
 HEX1                         mccDigit3,
 HEX1                         mncDigit3,
 HEX1                         mncDigit1, 
 HEX1                         mncDigit2,
 HEX1                         spare,                  
 integer                      eCI    
} with { 
  variant (spare,eCI) "FIELDORDER(msb)";                  
  variant(eCI) "FIELDLENGTH(28)";
  variant (eCI) "BYTEORDER(last)";
};  

//8.21.6
type record LAI
{
 HEX1                         mccDigit1,
 HEX1                         mccDigit2,
 HEX1                         mccDigit3,
 HEX1                         mncDigit3,
 HEX1                         mncDigit1, 
 HEX1                         mncDigit2,
 OCT2                         lAC
}

//8.22
type record FullyQualifiedTEID
{
 OCT1                         elementIdentifier,   // dec 87, '57'O; 
 LIN2_BO_LAST                 lengthIndicator,
 BIT4                         instance,
 BIT4                         spare,
 integer                      interfaceType, 
 BIT1                         v6_Flag,
 BIT1                         v4_Flag,
 OCT4                         tEID_GRE_Key,
 OCT4                         iPv4_Address optional,
 OCT16                        iPv6_Address optional,
 octetstring                  additionalOctets  optional    
} with {   
  variant "PRESENCE (elementIdentifier = '57'O; )" 
  variant (lengthIndicator) "LENGTHTO(interfaceType,v6_Flag,v4_Flag,tEID_GRE_Key,
                                      iPv4_Address,iPv6_Address,additionalOctets)" 
  variant(interfaceType) "FIELDLENGTH(6)";
  variant(iPv4_Address)  "PRESENCE(v4_Flag = '1'B)";
  variant(iPv6_Address)  "PRESENCE(v6_Flag = '1'B)";
}; 

type record UE_TimeZone
{
 OCT1                         elementIdentifier,  //dec 114, '72'O  
 LIN2_BO_LAST                 lengthIndicator,
 BIT4                         instance,
 BIT4                         spare,   
 OCT1                         timeZone,
 BIT2                         daylightSavingTime,
 BIT6                         spare2,
 octetstring                  additionalOctets  optional 
} with { 
  variant (lengthIndicator) "LENGTHTO(timeZone,daylightSavingTime,spare2,additionalOctets)"; 
  variant "PRESENCE (elementIdentifier = '72'O; )";      
}; 

type record NodeType
{
 OCT1                         elementIdentifier,// dec 135, '87'O    
 LIN2_BO_LAST                 lengthIndicator,
 BIT4                         instance,
 BIT4                         spare,
 OCT1                         nodeTypeValue, 
 octetstring                  additionalOctets optional
}with { 
  variant (lengthIndicator) "LENGTHTO(nodeTypeValue,additionalOctets)"; 
  variant "PRESENCE (elementIdentifier = '87'O;)";            
};

type set DeleteSessionRequest
{

 Cause                                   cause optional,
 EPS_BearerID                            linkedEPS_Bearer_ID optional, 
 UserLocationInfo                        uLI optional, 
 Indication                              indicationFlags optional,
 ProtocolConfigOptions                   protocolConfigOptions optional, 
 NodeType                                originatingNode optional, 
 FullyQualifiedTEID                      fullyQualifiedTEID optional, 
 UE_TimeZone                             uE_TimeZone optional, 
 PrivateExtension                        privateExtension optional
}

type union GTPCv2_PDUs {
 DeleteSessionRequest                         deleteSessionRequest   
}

// TOP LEVEL GTPC PDU
type record PDU_GTPCv2
{
 BIT3                           spare,   //0 
 BIT1                           t_Bit,
 BIT1                           p_Bit,
 BIT3                           version,  //'010'B
 OCT1                           messageType,
 LIN2_BO_LAST                   lengthf, 
 OCT4                           tEID optional,
 OCT3                           sequenceNumber,
 OCT1                           spare3, // 0
 GTPCv2_PDUs                    gtpcv2_pdu,
 PDU_GTPCv2                     piggybackPDU_GTPCv2 optional
}  with { 
   variant (tEID) "PRESENCE(t_Bit = '1'B)";
   variant (piggybackPDU_GTPCv2) "PRESENCE(p_Bit = '1'B)";   
   variant (lengthf) "LENGTHTO(tEID,sequenceNumber,spare3,gtpcv2_pdu)";
   variant (gtpcv2_pdu) "CROSSTAG( 
                          deleteSessionRequest,                              messageType = '24'O;  //36    
                           )";                          
};

} with { encode "RAW"} // End of module
