/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Botond Baranyi – initial implementation
 *
 ******************************************************************************/

module ustr {

type record Rec {
  integer num,
  universal charstring ustr
}
with {
  variant "";
  variant (ustr) "FIELDLENGTH(32)"; // 32 UTF-8 characters
}

type component CT {}

external function f_enc_rec(in Rec x) return octetstring
  with { extension "prototype(convert) encode(RAW)" }
  
external function f_dec_rec(in octetstring x) return Rec
  with { extension "prototype(convert) decode(RAW)" }
  
external function f_enc_ustr(in universal charstring x) return octetstring
  with { extension "prototype(convert) encode(RAW)" }
  
external function f_dec_ustr(in octetstring x) return universal charstring
  with { extension "prototype(convert) decode(RAW)" }
  
const universal charstring c_ustr := "árvíztűrő tükörfúrógép"; // 31 UTF-8 characters
const octetstring c_enc_ustr := 'C3A17276C3AD7A74C5B172C5912074C3BC6BC3B67266C3BA72C3B367C3A970'O;
  
testcase tc_RAW_ustr() runs on CT {
  var octetstring v_enc := f_enc_ustr(c_ustr);
  if (v_enc != c_enc_ustr) {
    setverdict(fail, "Encoding error. Expected: ", c_enc_ustr, ", got: ", v_enc);
  }
  var universal charstring v_dec := f_dec_ustr(c_enc_ustr);
  if (v_dec != c_ustr) {
    setverdict(fail, "Decoding error. Expected: ", c_ustr, ", got: ", v_dec);
  }
  setverdict(pass);
}

testcase tc_RAW_ustr_in_rec() runs on CT {
  var Rec v_rec := { 10, c_ustr };
  var octetstring v_enc_rec := '0A'O & c_enc_ustr & '00'O;
  var octetstring v_enc := f_enc_rec(v_rec);
  if (v_enc != v_enc_rec) {
    setverdict(fail, "Encoding error. Expected: ", v_enc_rec, ", got: ", v_enc);
  }
  var Rec v_dec := f_dec_rec(v_enc_rec);
  var Rec v_dec_rec := { 10, c_ustr & char(0, 0, 0, 0) };
  if (v_dec != v_dec_rec) {
    setverdict(fail, "Decoding error. Expected: ", v_dec_rec, ", got: ", v_dec);
  }
  setverdict(pass);
}

control {
  execute(tc_RAW_ustr());
  execute(tc_RAW_ustr_in_rec());
}

}
with {
  encode "RAW"
}
