/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Hanko, Matyas
 *   Szabados, Kristof
 *   Szabo, Janos Zoltan â€“ initial implementation
 *   Szalai, Gabor
 *
 ******************************************************************************/
module SCCP_typedefs.objid { itu_t(0) identified_organization (4) etsi(0) reserved(127)
                             etsi_identified_organization(0) ericsson(5)
                             testing (0) generic(0) sccp(1) v3(3) typeDefinitions(2) patchNo(3)
                           }

// The SCCP top-level PDU type is: PDU_SCCP

//content:
//group Types containing:
//    parameters -protocol timers
//    group FieldDefinitions
//    group ParameterDefinitions
//    group PDUDefinitions
//EncDec_SCCP message types
//and templates
//Other Type Definitions
//SCCP component related definitions
//EncDec component related definitions
//EncDec component behaviour

{//start of the module
/*
parameters
{//startparameters

//------------------Protocol Timer Values----------------------------------

//Waiting for connection confirm message  -1 to 2 minutes

  float      tspc_timer_T_conn_est:=120.0;

//Delay to send a message on a conn IT on a
//connection section when there are no
//messages to send
//5 to 10 minutes

  float       tspc_timer_T_ias:=600.0;
//Waiting to receive a message on a connection
//section
//11 to 21 minutes
  float       tspc_timer_T_iar:=1260.0;
//Waiting for release complete message -10 to 20 seconds

  float       tspc_timer_T_rel:=20.0;
//Waiting for release complete message; or to
//repeat sending released message after the
//initial T(rel) expiry
//10 to 20 seconds
  float       tspc_timer_T_repeat_rel:=20.0;

//Waiting for release complete message; or to
//release connection resources, freeze the LRN
//and alert a maintenance function after the
//initial T(rel) expiry
//extending to 1 minute
  float       tspc_timer_T_int:=60.0;

//Waiting to resume normal procedure for
//temporary connection sections during the
//restart procedure
//23 to 25 minutes
  float       tspc_timer_T_guard:=1500.0;
//Waiting to release temporary connection
//section or alert maintenance function after
//reset request message is sent
//10 to 20 seconds
  float       tspc_timer_T_reset:=20.0;
//Waiting to receive all the segments of the
//remaining segments single segmented
//message after receiving the first segment
//10 to 20 seconds

//  float       tspc_timer_T_reasssembly;

float       tspc_timer_T_internal_reset:=0.0;
//zero-only for sending internal signals!!

float       tspc_timer_guard :=120.0
//the same as tspc_timer_T_conn_est:1 or 2 minutes

}//end parameters

*/

import from general_typedefs all;
// import from MTP3_ASPs all;
//import from SCCP_EncDec all;
// import from SCCP_ASPs  all;

group Types
{
group FieldDefinitions
{
//--------------------------------------------------------------------------------
// Field Parameter Name (Q713 $3)
//--------------------------------------------------------------------------------
type enumerated SCCP_field_ParameterName
  {
   eop(0),       dLocRef(1),      sLocRef(2),    cdPA(3),    cgPA(4),      protclass(5),
   segmReas(6),  recSeqNum(7),    seqSegm(8),    creditdd(9),  relCause(10), retCause(11),
   resCause(12), errorCause(13),  refCause(14),  datadd(15),   segm(16),     hopCount(17),
   imp(18),      longData(19)
  }
   with { variant "FIELDLENGTH(8)"}
     //EOP End of optional parameters,      DLocRef Destination local reference,
     //SLocRef Source local reference,      CdPA Called party address,
     //CgPA Calling party address,          ProtClass Protocol class,
     //SegmReas Segmenting/reassembling,    RecSeqNum Receive sequence number,
     //SeqSegm Sequencing/segmenting,       Credit Credit,
     //RelCause Release cause,              RetCau Return cause,
     //ResCau Reset cause,                  ErrCau Error cause,
     //RefCau Refusal cause,                Data Data,
     //SEGM Segmentation,                   HopCount Hop counter,
     //IMP Importance,                      LongData Long data,

//--------------------------------------------------------------------------------
// Field Address Indicator (Q713 $3.4.1)
//--------------------------------------------------------------------------------
type record  SCCP_field_AddressIndicator
  {
   BIT1          pointCodeIndic,
   BIT1          ssnIndicator,
   BIT4          globalTitleIndic,
   BIT1          routingIndicator,
   BIT1          reserved
  }
   with { variant "" }

//--------------------------------------------------------------------------------
// Subfield Signalling Point Code (Q713 $3.4.2.1)
//--------------------------------------------------------------------------------
type record  SCCP_field_SignallingPointCode
  {
   BIT2          reserved ,
   BIT14         pointCode
   }
   with { variant (reserved) "FIELDORDER(msb)";
         variant (pointCode) "FIELDORDER(msb)"  }

//--------------------------------------------------------------------------------
// Subfield Subsystem Number (Q713 $3.4.2.2)
//--------------------------------------------------------------------------------
//type enumerated SCCP_field_SubsystemNumber
//  {
//   notKnown(0),  sCCPmanagement(1),  reservedForITU(2),  iSUP(3),  oMAP(4),  mAP(5),
//   hLR(6),       vLR(7),             mSC(8),             eIC(9),   aUC(10),  isdnSS(11),
//   reservedForIntUse(12),            bISDNe2e(13),       tCtestResponder(14)
//  }
//     with { variant "FIELDLENGTH(8)" }

//values declared in SCCPConstants

type integer    SCCP_field_SubsystemNumber
   with { variant "FIELDLENGTH(8)" };

//--------------------------------------------------------------------------------
// Subfield Global Title (Q713 $3.4.2.3)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Subfield Global Title, Nature of address only (GTI=0001) (Q713 $3.4.2.3.1)

type record  SCCP_field_GlobalTitle_NoA
  {
   BIT7          natureOfAddress,
   BIT1          oddeven,
   OCTN           globalTitleAddress
     //it should be hexstring, number digits are in BCD;
     //hexstring not supported yet by ETH compiler
  }
   with { variant "" }

//--------------------------------------------------------------------------------
// Global Title, Translation type only (GTI=0010) (Q713 $3.4.2.3.2)

type record  SCCP_field_GlobalTitle_TT
  {
   OCT1          translationType,
   OCTN           globalTitleAddress
  }
   with { variant "" }

//--------------------------------------------------------------------------------
// Global Title, Translation type & numbering plan & encoding scheme
// (GTI=0011) (Q713 $3.4.2.3.3)

type record  SCCP_field_GlobalTitle_TT_NP_ES
  {
   OCT1          translationType,
   BIT4          encodingScheme,
   BIT4          numberingPlan,
   OCTN           globalTitleAddress
  }
   with { variant "" }

//--------------------------------------------------------------------------------
// Global Title, Translation type & numbering plan & encoding scheme & nature of
// address (GTI=0100) (Q713 $3.4.2.3.4)

type record  SCCP_field_SignallingPointCode_TT_NP_ES_NoA
  {
   OCT1          translationType,
   BIT4          encodingScheme,
   BIT4          numberingPlan,
   BIT7          natureOfAddress,
   BIT1          reserved,
   OCTN           globalTitleAddress
  }
   with { variant "" }

type union  SCCP_field_GlobalTitle
  {
   Dummy                                         gti0000,
   SCCP_field_GlobalTitle_NoA                    gti0001,
   SCCP_field_GlobalTitle_TT                     gti0010,
   SCCP_field_GlobalTitle_TT_NP_ES               gti0011,
   SCCP_field_SignallingPointCode_TT_NP_ES_NoA   gti0100
  }
   with { variant "" }
   // no TAG is added as alternatives depend on the gti field of the address indicator

//--------------------------------------------------------------------------------
// Field Protocol Class (Q713 $3.6)
//--------------------------------------------------------------------------------
//type enumerated SCCP_field_ProtocolClass
//  { class0 (0), class1(1), class2(2), class3(3) }
//   with { variant "FIELDLENGTH(4)" }
//ethgry(2002-08-01): replaced by BIT4

//--------------------------------------------------------------------------------
// Field Importance (Q713 $3.19)
//--------------------------------------------------------------------------------
type integer SCCP_field_Importance
   with { variant "FIELDLENGTH(3)" }

}//endgroup FieldDefinitions

group ParameterDefinitions
{
//--------------------------------------------------------------------------------
// Parameter Message Type (Q713 $2.1)
//--------------------------------------------------------------------------------
type enumerated SCCP_param_MessageType
  {
   cr(1),      cc(2),      cref(3),    rlsd(4),    rlc(5),    dt1(6),    dt2(7),
   ak(8),      udt(9),     udts(10),   ed(11),     ea(12),    rsr(13),   rsc(14),
   err(15),    it(16),     xudt(17),   xudts(18),  ludt(19),  ludts(20)
  }
   with { variant "FIELDLENGTH(8)" }

   //CR Connection request,    CC Connection confirm,    CREF Connection refused,
   //RLSD Released,            RLC Release complete,     DT1 Data form 1,
   //DT2 Data form 2,          AK Data acknowledgement,  UDT Unitdata,
   //UDTS Unitdata service,    ED Expedited data,        EA Expedited data acknowledgement,
   //RSR Reset request,        RSC Reset confirm,        ERR Protocol data unit error,
   //IT Inactivity test,       XUDT Extended unitdata,   XUDTS Extended unitdata service,
   //LUDT Long unitdata,       LUDTS Long unitdata service

//--------------------------------------------------------------------------------
// End of Optional Parameters (Q713 $3.1)
//--------------------------------------------------------------------------------
type record SCCP_param_EndOfOptionalParams
  {
   SCCP_field_ParameterName             paramName (eop)
  }
   with { variant "" }

//--------------------------------------------------------------------------------
// Parameter Destination Local Reference (Q713 $3.2)
//--------------------------------------------------------------------------------
type octetstring SCCP_param_DestLocalReference
 with { variant "FIELDLENGTH(3)"}

//--------------------------------------------------------------------------------
// Parameter Source Local Reference (Q713 $3.3)
//--------------------------------------------------------------------------------

type octetstring SCCP_param_SourceLocalReference
 with { variant "FIELDLENGTH(3)" }

//--------------------------------------------------------------------------------
// Parameter Called/Calling Party Address (Q713 $3.4/$3.5)
//--------------------------------------------------------------------------------
type union SCCP_superfield_SignallingPointCode
  {
   SCCP_field_SignallingPointCode   present_,
   Dummy                            absent
  } with { variant "" }

type union SCCP_superfield_SubsystemNumber
  {
   SCCP_field_SubsystemNumber        present_,
   Dummy                            absent
  } with { variant "" }

type record SCCP_param_CPartyAddress
  {
   LIN1                                  paramLength,
   SCCP_field_AddressIndicator           addressIndicator,
   SCCP_superfield_SignallingPointCode   signPointCode,
   SCCP_superfield_SubsystemNumber        subsystemNumber,
   SCCP_field_GlobalTitle                globalTitle
  }
   with { variant (signPointCode) "CROSSTAG(
                                    present_, addressIndicator.pointCodeIndic = '1'B;
                                    absent,  addressIndicator.pointCodeIndic = '0'B)";
          variant (subsystemNumber) "CROSSTAG(
                                    present_, addressIndicator.ssnIndicator = '1'B;
                                    absent,  addressIndicator.ssnIndicator = '0'B)";
          variant (globalTitle) "CROSSTAG(
                                    gti0000, addressIndicator.globalTitleIndic = '0000'B;
                                    gti0001, addressIndicator.globalTitleIndic = '0001'B;
                                    gti0010, addressIndicator.globalTitleIndic = '0010'B;
                                    gti0011, addressIndicator.globalTitleIndic = '0011'B;
                                    gti0100, addressIndicator.globalTitleIndic = '0100'B)";
          variant (paramLength) "LENGTHTO(addressIndicator, signPointCode,
                                          subsystemNumber,  globalTitle  )"
        }

type record SCCP_param_CPartyAddress_opt
  {
   SCCP_field_ParameterName              paramName(cdPA, cgPA),
   LIN1                                  paramLength,
   SCCP_field_AddressIndicator           addressIndicator,
   SCCP_superfield_SignallingPointCode   signPointCode,
   SCCP_superfield_SubsystemNumber        subsystemNumber,
   SCCP_field_GlobalTitle                globalTitle
  }
   with { variant (signPointCode) "CROSSTAG(
                                    present_, addressIndicator.pointCodeIndic = '1'B;
                                    absent,  addressIndicator.pointCodeIndic = '0'B)";
          variant (subsystemNumber) "CROSSTAG(
                                    present_, addressIndicator.ssnIndicator = '1'B;
                                    absent,  addressIndicator.ssnIndicator = '0'B)";
          variant (globalTitle) "CROSSTAG(
                                    gti0000, addressIndicator.globalTitleIndic = '0000'B;
                                    gti0001, addressIndicator.globalTitleIndic = '0001'B;
                                    gti0010, addressIndicator.globalTitleIndic = '0010'B;
                                    gti0011, addressIndicator.globalTitleIndic = '0011'B;
                                    gti0100, addressIndicator.globalTitleIndic = '0100'B)";
          variant (paramLength) "LENGTHTO(addressIndicator, signPointCode,
                                          subsystemNumber,  globalTitle  )"
        }

     //Note: the whole type definition of SCCP_param_CPartyAddress is reproduced here
     //on purpose, ->to simplify template definition!

//--------------------------------------------------------------------------------
// Parameter Protocol Class (Q713 $3.6)
//--------------------------------------------------------------------------------
type record SCCP_param_ProtocolClass
  {
   BIT4                             class,
   BIT4                             messageHandling
  }
   with { variant "" }

//--------------------------------------------------------------------------------
// Parameter Segmenting/reassembling (Q713 $3.7)
//--------------------------------------------------------------------------------
type record SCCP_param_SegmentingReassembl
  {
   BIT1                             more,
   BIT7                             reserved
  }
   with { variant "" }

//--------------------------------------------------------------------------------
// Parameter Receive Sequence Number (Q713 $3.8)
//--------------------------------------------------------------------------------
type record SCCP_param_RecSeqNumber
  {
   BIT1                             reserved,
   BIT7                             pr
  }
   with { variant "" }

//--------------------------------------------------------------------------------
// Parameter Sequencing/Segmenting (Q713 $3.9)
//--------------------------------------------------------------------------------
type record SCCP_param_SequencingSegmenting
  {
   BIT1                             reserved,
   BIT7                             p_s,
   BIT1                             more,
   BIT7                             pr
  }
   with { variant "" }

//--------------------------------------------------------------------------------
// Parameter Credit(Q713 $3.10)
//--------------------------------------------------------------------------------
type octetstring SCCP_param_Credit
  with { variant "FIELDLENGTH(1)" }//ethlel0813

type record SCCP_param_Credit_opt
  {
   SCCP_field_ParameterName         paramName(creditdd),
   LIN1                             paramLength, // always 1!
   OCT1                             credit
  }
   with { variant "" }

//--------------------------------------------------------------------------------
// Parameter Release Cause(Q713 $3.11)
//--------------------------------------------------------------------------------
//type enumerated  SCCP_param_ReleaseCause
//  { endUserOrig(0),     endUserCong(1),      endUserFailure(2),  sCCPUserOrig(3),
//    remProcError(4),    inconsConnData(5),   accessFailure(6),   accessCongestion(7),
//    subsystFailure(8),  subsystCongest(9),   mTPFailure(10),     networkCongest(11),
//    expResetTimer(12),  expRecInacTimer(13), reserved(14),       unqualified(15),
//    sCCPFailure(16)
//  }
//   with { variant "FIELDLENGTH(8)" }

//values declared in SCCPConstants

type integer SCCP_param_ReleaseCause
   with { variant "FIELDLENGTH(8), COMP(nosign)" };

//--------------------------------------------------------------------------------
// Parameter Return Cause(Q713 $3.12)
//--------------------------------------------------------------------------------
//type enumerated  SCCP_param_ReturnCause
//  { noTransl4AddrNature(0),    noTransl4SpecifAddr(1),    subsystemCongestion(2),
//    subsystemFailure(3),       unequippedUser(4),         mTPFailure(5),
//    networkCongestion(6),      unqualified(7),            errorMessageTransport(8),
//    errorLocalProcessing(9),   destNoReassembly(10),      sCCPFailure(11),
//    hopCounterViolation(12),   segmeNotSupported(13),     segmentationFailure(14)
//  }
//   with { variant "FIELDLENGTH(8)" }

//values declared in SCCPConstants

type integer SCCP_param_ReturnCause
   with { variant "FIELDLENGTH(8), COMP(nosign)" };

//--------------------------------------------------------------------------------
// Parameter Reset Cause(Q713 $3.13)
//--------------------------------------------------------------------------------
//type enumerated  SCCP_param_ResetCause
//  { endUserOriginated(0),               sCCPUserOriginated(1),
//   messOutOfOrder_incPs(2),            messOutOfOrder_incPr(3),
//    remProcErr_messOutOfWindow(4),      emProcErr_IncPsAfterReinit(5),
//    remProcErr_general(6),              remEndUserOperational(7),
//    networkOperational(8),              accessOperational(9),
//    networkCongestion(10),              reserved(11),
//    unqualified(12)
//  }
//   with { variant "FIELDLENGTH(8)" }

//values declared in SCCPConstants

type integer SCCP_param_ResetCause
   with { variant "FIELDLENGTH(8), COMP(nosign)" };

//--------------------------------------------------------------------------------
// Parameter Error Cause(Q713 $3.14)
//--------------------------------------------------------------------------------
//type enumerated  SCCP_param_ErrorCause
//  { unassignedDestinationLRN(0),              inconsistentSourceLRN(1),
//    pointCodeMismatch(2),                     serviceClassMismatch(3),
//    unqualified(4)
//  }
//   with { variant "FIELDLENGTH(8)" }

//values declared in SCCPConstants

type integer SCCP_param_ErrorCause
   with { variant "FIELDLENGTH(8), COMP(nosign)" };

//--------------------------------------------------------------------------------
// Parameter Refusal Cause(Q713 $3.15)
//--------------------------------------------------------------------------------
   //type enumerated  SCCP_param_RefusalCause
   //  { endUserOrigin(0),             endUserConges(1),          endUserFailure(2),
   //    sCCPUserOrigin(3),            destAddrUnkn(4),           destInaccess(5),
   //    qOSNotAvail_nonTransient(6),  qOSNotAvail_transient(7),  accessFailure(8),
   //    accessCongestion(9),          subsystemFailure(10),      subsystemCongest(11),
   //    expConnEstTimer(12),          incomUserData(13),         reserved(14),
   //    unqualified(15),              hopCounterViol(16),        sCCPFailure(17),
   //    noTransl4address(18),         unequippedUser(19)
   //  }
   //   with { variant "FIELDLENGTH(8)" }

//values declared in SCCPConstants

type integer SCCP_param_RefusalCause
   with { variant "FIELDLENGTH(8), COMP(nosign)" };

//--------------------------------------------------------------------------------
// Parameter User data (Q713 $3.16)
//--------------------------------------------------------------------------------
type record SCCP_param_Data
  {
   LIN1                             paramLength,
   OCTN                             data
  }
   with { variant (paramLength) "LENGTHTO(data)" }

type record SCCP_param_Data_opt
  {
   SCCP_field_ParameterName         paramName(datadd),
   LIN1                             paramLength,
   OCTN                             data
  }
   with { variant (paramLength) "LENGTHTO(data)" }

//--------------------------------------------------------------------------------
// Parameter Segmentation (Q713 $3.17)
//--------------------------------------------------------------------------------

type record SCCP_param_Segmentation_opt
  {
   SCCP_field_ParameterName         paramName(segm),
   LIN1                             paramLength,       //always 4!
   BIT4                             remainingSegment,
   BIT2                             reserved,
   BIT1                             class,
   BIT1                             firstSegm,
   OCT3                             segmLocalRef
  }
   with { variant "" }

//--------------------------------------------------------------------------------
// Parameter Hop counter (Q713 $3.18)
//--------------------------------------------------------------------------------
type integer SCCP_param_HopCounter
   with { variant "FIELDLENGTH(8), COMP(nosign)" };

type record SCCP_param_HopCounter_opt
  {
   SCCP_field_ParameterName         paramName(hopCount),
   LIN1                             paramLength,           //always 1!
   SCCP_param_HopCounter            counter
  }
   with { variant "" }

//--------------------------------------------------------------------------------
// Parameter Importance (Q713 $3.19)
//--------------------------------------------------------------------------------

type record SCCP_param_Importance_opt
  {
   SCCP_field_ParameterName         paramName(imp),
   LIN1                             paramLength,           //always 1!
   SCCP_field_Importance            importance,
   BIT5                             reserved
  }
   with { variant "" }

//--------------------------------------------------------------------------------
// Parameter Long data (Q713 $3.20)
//--------------------------------------------------------------------------------
type record SCCP_param_LongData
  {
   LIN2                             paramLength,
   OCTN                              data
  }
   with { variant (paramLength) "LENGTHTO(data)" }

//********************************************************************************
// SCCP management parameters (Q713 $5)
//********************************************************************************

//--------------------------------------------------------------------------------
// SCMG format identifier (Q713 $5.1)
//--------------------------------------------------------------------------------
type enumerated SCMG_param_FormatId
  {
   sSAallowed(1),               // SSA subsystem-allowed
   sSPprohib(2),                // SSP subsystem-prohibited
   sSTstaTest(3),               // SST subsystem-status-test
   sORoutReq(4),                // SOR subsystem-out-of-service-request
   sORoutGrant (5),             // SOG subsystem-out-of-service-grant
   sSCcongest(6)                // SSC SCCP/subsystem-congested
  }
   with { variant "FIELDLENGTH(8)" }

//--------------------------------------------------------------------------------
// Affected SSN (Q713 $5.2.1)
//--------------------------------------------------------------------------------
type SCCP_field_SubsystemNumber SCMG_param_AffectedSSN;

//--------------------------------------------------------------------------------
// Affected Pointcode (Q713 $5.2.2)
//--------------------------------------------------------------------------------
type SCCP_field_SignallingPointCode SCMG_param_AffectedPointCode;

//--------------------------------------------------------------------------------
// Subsystem Multiplicity Indicator (Q713 $5.2.3)
//--------------------------------------------------------------------------------
type record SCMG_param_MultiplIndicator
  {
   BIT2          smi,
   BIT6          reserved
  }
   with { variant "" }

//--------------------------------------------------------------------------------
// SCCP congestion level (Q713 $5.2.4)
//--------------------------------------------------------------------------------
type record SCMG_param_CongestionLevel
  {
   BIT4          congLevel,
   BIT4          reserved
  }
   with { variant "" }

}//endgroup ParameterDefinitions

group PDUDefinitions
{
//********************************************************************************
// Message Connection Request (CR) (Q713 $4.2)
//********************************************************************************
//--------------------------------------------------------------------------------
// Optional part
type set  SCCP_ConnReq_optionalPart
  {
   SCCP_param_Credit_opt                  credit           optional,
   SCCP_param_CPartyAddress_opt           callingPAddress  optional,
   SCCP_param_Data_opt                    data             optional,
   SCCP_param_HopCounter_opt              hopCounter       optional,
   SCCP_param_Importance_opt              importance       optional
  }
   with { variant "TAG (credit,           paramName= creditdd;
                        callingPAddress,  paramName= cgPA;
                        data,             paramName= datadd;
                        hopCounter,       paramName= hopCount;
                        importance ,      paramName= imp)"
        }

//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_ConnectionRequest
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_SourceLocalReference      sourceLocRef,
   SCCP_param_ProtocolClass             protClass,
   LIN1                                 pointer1,    //will be 2
   LIN1                                 pointer2,
   SCCP_param_CPartyAddress             calledPAddress,
   SCCP_ConnReq_optionalPart            optionalPart,
   SCCP_param_EndOfOptionalParams       eop   optional
  }
   with { variant (pointer1) "POINTERTO(calledPAddress)";
          variant (pointer2) "POINTERTO(optionalPart)"
            //Note, that optional part itself is mandatory but it may be empty!
        }

//********************************************************************************
// Message Connection Confirm (CC) (Q713 $4.3)
//********************************************************************************
//--------------------------------------------------------------------------------
// Optional part
type set  SCCP_ConnConfirm_optionalPart
  {
   SCCP_param_Credit_opt                  credit           optional,
   SCCP_param_CPartyAddress_opt           calledPAddress   optional,
   SCCP_param_Data_opt                    data             optional,
   SCCP_param_Importance_opt              importance       optional
  }
   with { variant "TAG (credit,           paramName= creditdd;
                        calledPAddress,   paramName= cdPA;
                        data,             paramName= datadd;
                        importance,       paramName= imp)"
        }

//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_ConnectionConfirm
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_DestLocalReference        destLocRef,
   SCCP_param_SourceLocalReference      sourceLocRef,
   SCCP_param_ProtocolClass             protClass,
   LIN1                                 pointer1,       //always 1!
   SCCP_ConnConfirm_optionalPart        optionalPart,
   SCCP_param_EndOfOptionalParams       eop   optional
  }
   with { variant (pointer1) "POINTERTO(optionalPart)" }

//********************************************************************************
// Message Connection Refused (CREF) (Q713 $4.4)
//********************************************************************************
//--------------------------------------------------------------------------------
// Optional part
type set  SCCP_ConnRefused_optionalPart
  {
   SCCP_param_CPartyAddress_opt           calledPAddress   optional,
   SCCP_param_Data_opt                    data             optional,
   SCCP_param_Importance_opt              importance       optional
  }
   with { variant "TAG (calledPAddress,   paramName= cdPA;
                        data,             paramName= datadd;
                        importance,       paramName= imp)"
        }

//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_ConnectionRefused
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_DestLocalReference        destLocRef,
   SCCP_param_RefusalCause              refusalCause,
   LIN1                                 pointer1,         //always 1!
   SCCP_ConnRefused_optionalPart        optionalPart,
   SCCP_param_EndOfOptionalParams       eop   optional
  }
   with { variant "" }

//********************************************************************************
// Message Released (RLSD) (Q713 $4.5)
//********************************************************************************
//--------------------------------------------------------------------------------
// Optional part
type set  SCCP_Released_optionalPart
  {
   SCCP_param_Data_opt                    data             optional,
   SCCP_param_Importance_opt              importance       optional
  }
   with { variant "TAG (data,            paramName= datadd;
                        importance,      paramName= imp)"
        }

//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_Released
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_DestLocalReference        destLocRef,
   SCCP_param_SourceLocalReference      sourceLocRef,
   SCCP_param_ReleaseCause              releaseCause,
   LIN1                                 pointer1,      //always 1!
   SCCP_Released_optionalPart           optionalPart,
   SCCP_param_EndOfOptionalParams       eop   optional
  }
   with { variant "" }

//********************************************************************************
// Message Release Complete (RLC) (Q713 $4.6)
//********************************************************************************
//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_ReleaseComplete
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_DestLocalReference        destLocRef,
   SCCP_param_SourceLocalReference      sourceLocRef
  }
   with { variant "" }

//********************************************************************************
// Message Data form 1 (DT1) (Q713 $4.7)
//********************************************************************************
//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_DataForm1
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_DestLocalReference        destLocRef,
   SCCP_param_SegmentingReassembl       segmentingReassembl,
   LIN1                                 pointer1,            //always 1!
   SCCP_param_Data                      data
  }
   with { variant "" }
            //Note, that optional part itself is mandatory but it may be empty!

//********************************************************************************
// Message Data form 2 (DT2) (Q713 $4.8)
//********************************************************************************
//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_DataForm2
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_DestLocalReference        destLocRef,
   SCCP_param_SequencingSegmenting      sequencingSegmenting,
   LIN1                                 pointer1,              //always 1!
   SCCP_param_Data                      data
  }
   with { variant "" }

//********************************************************************************
// Message Data Acknowledgement (AK) (Q713 $4.9)
//********************************************************************************
//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_DataAcknowledgement
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_DestLocalReference        destLocRef,
   SCCP_param_RecSeqNumber              recSeqNumber,
   SCCP_param_Credit                    credit
  }
   with { variant "" }

//********************************************************************************
// Message Unitdata (UDT) (Q713 $4.10)
//********************************************************************************
//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_Unitdata
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_ProtocolClass             protClass,
   LIN1                                 pointer1,       //will be 3
   LIN1                                 pointer2,
   LIN1                                 pointer3,
   SCCP_param_CPartyAddress             calledPAddress,
   SCCP_param_CPartyAddress             callingPAddress,
   SCCP_param_Data                      data
  }
   with { variant (pointer1) "POINTERTO(calledPAddress)";
          variant (pointer2) "POINTERTO(callingPAddress)";
          variant (pointer3) "POINTERTO(data)"
        }

//********************************************************************************
// Message Unitdata service (UDTS) (Q713 $4.11)
//********************************************************************************
//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_UnitdataService
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_ReturnCause               returnCause,
   LIN1                                 pointer1,       //will be 3
   LIN1                                 pointer2,
   LIN1                                 pointer3,
   SCCP_param_CPartyAddress             calledPAddress,
   SCCP_param_CPartyAddress             callingPAddress,
   SCCP_param_Data                      data
  }
   with { variant (pointer1) "POINTERTO(calledPAddress)";
          variant (pointer2) "POINTERTO(callingPAddress)";
          variant (pointer3) "POINTERTO(data)"
        }

//********************************************************************************
// Message Expedited Data (ED) (Q713 $4.12)
//********************************************************************************
//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_ExpeditedData
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_DestLocalReference        destLocRef,
   LIN1                                 pointer1,              //always 1!
   SCCP_param_Data                      data
  }
   with { variant "" }

//********************************************************************************
// Message Expedited Data Acknowledgement (EA) (Q713 $4.13)
//********************************************************************************
//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_ExpeditedDataAck
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_DestLocalReference        destLocRef
  }
   with { variant "" }

//********************************************************************************
// Message Reset Request (RSR) (Q713 $4.14)
//********************************************************************************
//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_ResetRequest
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_DestLocalReference        destLocRef,
   SCCP_param_SourceLocalReference      sourceLocRef,
   SCCP_param_ResetCause                resetCause
  }
   with { variant "" }

//********************************************************************************
// Message Reset Confirmation (RSC) (Q713 $4.15)
//********************************************************************************
//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_ResetConfirm
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_DestLocalReference        destLocRef,
   SCCP_param_SourceLocalReference      sourceLocRef
  }
   with { variant "" }

//********************************************************************************
// Message Protocol data unit error (ERR) (Q713 $4.16)
//********************************************************************************
//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_ProtDataUnitError
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_DestLocalReference        destLocRef,
   SCCP_param_ErrorCause                errorCause
  }
   with { variant "" }

//********************************************************************************
// Message Inactivity test (IT) (Q713 $4.17)
//********************************************************************************
//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_InactivityTest
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_DestLocalReference        destLocRef,
   SCCP_param_SourceLocalReference      sourceLocRef,
   SCCP_param_ProtocolClass             protClass,
   SCCP_param_SequencingSegmenting      sequencingSegmenting,
   SCCP_param_Credit                    credit
  }
   with { variant "" }

//********************************************************************************
// Message Extended Unitdata (XUDT) (Q713 $4.18)
//********************************************************************************
//--------------------------------------------------------------------------------
// Optional part
type set  SCCP_ExtUnitdata_optionalPart
  {
   SCCP_param_Segmentation_opt            segmentation     optional,
   SCCP_param_Importance_opt              importance       optional
  }
   with { variant "TAG (segmentation,     paramName= segm;
                        importance,       paramName= imp)"
        }

//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_ExtUnitdata
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_ProtocolClass             protClass,
   SCCP_param_HopCounter                hopCounter,
   LIN1                                 pointer1,      //will be 4
   LIN1                                 pointer2,
   LIN1                                 pointer3,
   LIN1                                 pointer4,
   SCCP_param_CPartyAddress             calledPAddress,
   SCCP_param_CPartyAddress             callingPAddress,
   SCCP_param_Data                      data,
   SCCP_ExtUnitdata_optionalPart        optionalPart,
   SCCP_param_EndOfOptionalParams       eop   optional
  }
   with { variant (pointer1) "POINTERTO(calledPAddress)";
          variant (pointer2) "POINTERTO(callingPAddress)";
          variant (pointer3) "POINTERTO(data)";
          variant (pointer4) "POINTERTO(optionalPart)"
            //Note, that optional part itself is mandatory but may be empty!
        }

//********************************************************************************
// Message Extended Unitdata Service(XUDTS) (Q713 $4.19)
//********************************************************************************
//--------------------------------------------------------------------------------
// Optional part
// The same as SCCP_ExtUnitdata_optionalPart

//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_ExtUnitdataService
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_ReturnCause               returnCause,
   SCCP_param_HopCounter                hopCounter,
   LIN1                                 pointer1,      //will be 4
   LIN1                                 pointer2,
   LIN1                                 pointer3,
   LIN1                                 pointer4,
   SCCP_param_CPartyAddress             calledPAddress,
   SCCP_param_CPartyAddress             callingPAddress,
   SCCP_param_Data                      data,
   SCCP_ExtUnitdata_optionalPart        optionalPart,
   SCCP_param_EndOfOptionalParams       eop   optional
  }
   with { variant (pointer1) "POINTERTO(calledPAddress)";
          variant (pointer2) "POINTERTO(callingPAddress)"
          variant (pointer3) "POINTERTO(data)"
          variant (pointer4) "POINTERTO(optionalPart)"
            //Note, that optional part itself is mandatory but it may be empty!
        }

//********************************************************************************
// Message Long Unitdata (LUDT) (Q713 $4.20)
//********************************************************************************
//--------------------------------------------------------------------------------
// Optional part
// The same as SCCP_ExtUnitdata_optionalPart

//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_LongUnitdata
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_ProtocolClass             protClass,
   SCCP_param_HopCounter                hopCounter,
   LIN1                                 pointer1,      //will be 5
   LIN1                                 pointer2,
   LIN2                                 pointer3,
   LIN1                                 pointer4,
   SCCP_param_CPartyAddress             calledPAddress,
   SCCP_param_CPartyAddress             callingPAddress,
   SCCP_param_LongData                  longData,
   SCCP_ExtUnitdata_optionalPart        optionalPart,
   SCCP_param_EndOfOptionalParams       eop   optional
  }
   with { variant (pointer1) "POINTERTO(calledPAddress)";
          variant (pointer2) "POINTERTO(callingPAddress)";
          variant (pointer3) "POINTERTO(longData)";
          variant (pointer4) "POINTERTO(optionalPart)"
            //Note, that optional part itself is mandatory but it may be empty!
        }

//********************************************************************************
// Message Long Unitdata Service (LUDTS) (Q713 $4.21)
//********************************************************************************
//--------------------------------------------------------------------------------
// Optional part
// The same as SCCP_ExtUnitdata_optionalPart

//--------------------------------------------------------------------------------
// Message definition
//--------------------------------------------------------------------------------
type record  PDU_SCCP_LongUnitdataService
  {
   SCCP_param_MessageType               messageType,
   SCCP_param_ReturnCause               returnCause,
   SCCP_param_HopCounter                hopCounter,
   LIN1                                 pointer1,      //will be 5
   LIN1                                 pointer2,
   LIN2                                 pointer3,
   LIN1                                 pointer4,
   SCCP_param_CPartyAddress             calledPAddress,
   SCCP_param_CPartyAddress             callingPAddress,
   SCCP_param_LongData                  longData,
   SCCP_ExtUnitdata_optionalPart        optionalPart,
   SCCP_param_EndOfOptionalParams       eop   optional
  }
   with { variant (pointer1) "POINTERTO(calledPAddress)";
          variant (pointer2) "POINTERTO(callingPAddress)";
          variant (pointer3) "POINTERTO(longData)";
          variant (pointer4) "POINTERTO(optionalPart)";
            //Note, that optional part itself is mandatory but it may be empty!
        }

//********************************************************************************
// SCCP management messages (Q713 $5.3)
//********************************************************************************
/*type record  PDU_SCMG_message
  {
   SCMG_param_FormatId                  messageType,
   SCMG_param_AffectedSSN               affectedSSN,
   SCMG_param_AffectedPointCode         affectedPC,
   SCMG_param_MultiplIndicator          smi,
   SCMG_param_CongestionLevel           congLevel optional
      //shall be present in all messages except SSG
  }
   with { variant "" }
*/

//********************************************************************************
// SCCP Top Level PDU (Q713 $4.2)
//********************************************************************************

type union  PDU_SCCP
  {
   PDU_SCCP_ConnectionRequest          connrequest,
   PDU_SCCP_ConnectionRefused          connrefused,
   PDU_SCCP_Released                   released,
   PDU_SCCP_ReleaseComplete            relcomp,
   PDU_SCCP_DataForm1                  dataform1,
   PDU_SCCP_DataForm2                  dataform2,
   PDU_SCCP_DataAcknowledgement        dataack,
   PDU_SCCP_UnitdataService            udataserv,
   PDU_SCCP_ExpeditedData              expdata,
   PDU_SCCP_ExpeditedDataAck           expdataack ,
   PDU_SCCP_ResetRequest               resetreq,
   PDU_SCCP_ResetConfirm               resconf,
   PDU_SCCP_ProtDataUnitError          pduerror,
   PDU_SCCP_InactivityTest             inacttest,
   PDU_SCCP_ExtUnitdata                extudata,
   PDU_SCCP_ExtUnitdataService         extudataserv ,
   PDU_SCCP_LongUnitdata               longudata,
   PDU_SCCP_LongUnitdataService        longudataserv,
   PDU_SCCP_Unitdata                   unitdata,
   PDU_SCCP_ConnectionConfirm          connconfirm
  // PDU_SCMG_message                    scmg
  }
   with { variant "TAG (connrequest,       messageType = cr;
                        connconfirm,       messageType = cc;
                        connrefused,       messageType = cref;
                        released,          messageType = rlsd;
                        relcomp,           messageType = rlc;
                        dataform1,         messageType = dt1;
                        dataform2,         messageType = dt2;
                        dataack,           messageType = ak;
                        unitdata,          messageType = udt;
                        udataserv,         messageType = udts;
                        expdata,           messageType = ed;
                        expdataack,        messageType = ea;
                        resetreq,          messageType = rsr;
                        resconf,           messageType = rsc;
                        pduerror,          messageType = err;
                        inacttest,         messageType = it;
                        extudata,          messageType = xudt;
                        extudataserv,      messageType = xudts;
                        longudata,         messageType = ludt;
                        longudataserv,     messageType = ludts)"
        }

}//endgroup PDUDefinitions

}//endgroup Types

/*

group OtherTypedefinitions
{//startgroup  OtherTypedefinitions

type enumerated states
    {
                idle,
    connection_pending_OG,
    connection_pending_IC,
    active,
    disconnect_pending,
    //reset_OG,- as N_RESET_req and N_RESET_resp will not be received, this state should never occur
    reset_bothway,
    reset_IC,
    //frozen_reference,
    wait_conn_confirm

    }

type record       StateTransition
    {
    OCT3    localReference,
    OCT3  remoteReference,
    states  state,
    integer  connectionId
    }

type record Bootparameters

  {
  octetstring   own_GT,
  octetstring   remote_GT,
  integer      SSN,
  OCT1      SIO,
  integer      own_SPC,
  integer      remote_SPC,
  integer      SLS

  }
}//endgroup OtherTypedefinitions

  group MessageTypes
  {
    // *************************************************************************
    // *  ASP_sccp type definitions                                                 *
    // *************************************************************************

//       type record ASP_MTP3_TRANSFERind_sccp
//        {
//         octetstring       sio length(1),  // see values in Q.704 $14.2.1
//         integer           opc,
//         integer           dpc,
//         integer           sls,
//         PDU_SCCP          data
//        }

      type record ASP_MTP3_TRANSFERreq_sccp
        {
         octetstring       sio length(1),  // see values in Q.704 $14.2.1
         integer           opc,
         integer           dpc,
         integer           sls,
         PDU_SCCP          data
        }

  }//end group Messagetypes

group ASPTemplates
{

// *************************************************************************
// *  ASP template definitions   sending                                             *
// *************************************************************************

//  template ASP_MTP3_TRANSFERind_sccp cS_asp_MTP3_TRANSFERind_sccp
//  (
//
//   octetstring  par_sio,
//   integer      par_opc,
//   integer      par_dpc,
//   integer      par_sls,
//   PDU_SCCP  par_data) :=
//      {
//       sio  :=                              par_sio,
//        opc  :=                              par_opc,
//        dpc  :=                              par_dpc,
//        sls  :=                              par_sls,
//        data :=                              par_data
//       }

  template ASP_MTP3_TRANSFERreq_sccp cS_asp_MTP3_TRANSFERreq_sccp
  (

   octetstring  par_sio,
   integer      par_opc,
   integer      par_dpc,
   integer      par_sls,
   PDU_SCCP  par_data) :=
       {
        sio  :=                              par_sio,
        opc  :=                              par_opc,
        dpc  :=                              par_dpc,
        sls  :=                              par_sls,
        data :=                              par_data
       }

// *************************************************************************
// *  ASP template definitions   receiving                                            *
// *************************************************************************

//template ASP_MTP3_TRANSFERind_sccp cR_asp_MTP3_TRANSFERind_sccp
// (
//
//   PDU_SCCP  par_data) :=
//       {
//        sio  :=                              ?,
//        opc  :=                              ?,
//        dpc  :=                              ?,
//        sls  :=                              ?,
//        data :=                              par_data
//       }

  template ASP_MTP3_TRANSFERreq_sccp cR_asp_MTP3_TRANSFERreq_sccp
//  (

 //  PDU_SCCP    par_data)
  :=
      {
        sio  :=                              ?,
        opc  :=                              ?,
        dpc  :=                              ?,
        sls  :=                              ?,
        data :=                              ?  //par_data
       }

}//endgroup ASPTemplates

// *************************************************************************
// *************************************************************************
//SCCP Component related declarations
// *************************************************************************
// *************************************************************************

//SCCP_porttype/SCCP_PCO
//+-----------------+-----------------+
//|SCCP_comptype
//|
//+-----------------+-----------------+
//MTP3sccpEncDecUser_porttype/MTP3sccp_PCO

//Defined in SCCP_ASPs
//type port SCCP_porttype
//  message
//  {
//   in   N_CONNECT_req, N_CONNECT_res, N_DATA_req, N_DISCONNECT_req,
//        N_UNITDATA_req, N_RESET_req, N_RESET_resp;
//   out  N_CONNECT_ind, N_CONNECT_cfm, N_DATA_ind, N_DISCONNECT_ind,
//        N_UNITDATA_ind, N_NOTICE_ind, N_STATE_ind, N_RESET_ind, N_RESET_cfm;
//  } with {extension "internal"}

type port MTP3sccpEncDecUser_porttype  message
  {
  in   PDU_SCCP_ConnectionRequest,PDU_SCCP_ConnectionConfirm,
  PDU_SCCP_ConnectionRefused,PDU_SCCP_Released,
  PDU_SCCP_ReleaseComplete,PDU_SCCP_DataForm1,
  PDU_SCCP_Unitdata,PDU_SCCP_UnitdataService,
  PDU_SCCP_ResetRequest,PDU_SCCP_ResetConfirm,
  PDU_SCCP_ProtDataUnitError,PDU_SCCP_InactivityTest;

  out  ASP_MTP3_TRANSFERreq_sccp;
  }

with { extension "internal" }

type component SCCP_comptype

  {//startcomponent  SCCP_comptype

//Component variables
//***************************************************************

var StateTransition StateTable[16]; //16 connections 0 to 15

var integer    v_reference;

var integer   v_session;

var Bootparameters Boot_pars;

var octetstring v_own_GT;
var octetstring v_remote_GT;
var integer   v_SSN;
var OCT1   v_SIO;
var integer  v_own_SPC;
var integer  v_remote_SPC;
var integer  v_SLS;

//***************************************************************

//component timers

timer t_T_conn_est[16]:= { tspc_timer_T_conn_est,tspc_timer_T_conn_est,
      tspc_timer_T_conn_est,tspc_timer_T_conn_est,
      tspc_timer_T_conn_est,tspc_timer_T_conn_est,
      tspc_timer_T_conn_est,tspc_timer_T_conn_est,
      tspc_timer_T_conn_est,tspc_timer_T_conn_est,
      tspc_timer_T_conn_est,tspc_timer_T_conn_est,
      tspc_timer_T_conn_est,tspc_timer_T_conn_est,
      tspc_timer_T_conn_est,tspc_timer_T_conn_est };

timer t_T_ias[16]:=   { tspc_timer_T_ias,tspc_timer_T_ias,
      tspc_timer_T_ias,tspc_timer_T_ias,
      tspc_timer_T_ias,tspc_timer_T_ias,
      tspc_timer_T_ias,tspc_timer_T_ias,
      tspc_timer_T_ias,tspc_timer_T_ias,
      tspc_timer_T_ias,tspc_timer_T_ias,
      tspc_timer_T_ias,tspc_timer_T_ias,
      tspc_timer_T_ias,tspc_timer_T_ias };

timer t_T_iar[16]:= { tspc_timer_T_iar,tspc_timer_T_iar,
      tspc_timer_T_iar,tspc_timer_T_iar,
      tspc_timer_T_iar,tspc_timer_T_iar,
      tspc_timer_T_iar,tspc_timer_T_iar,
      tspc_timer_T_iar,tspc_timer_T_iar,
      tspc_timer_T_iar,tspc_timer_T_iar,
      tspc_timer_T_iar,tspc_timer_T_iar,
      tspc_timer_T_iar,tspc_timer_T_iar };

timer t_T_rel[16]:= { tspc_timer_T_rel,tspc_timer_T_rel,
      tspc_timer_T_rel,tspc_timer_T_rel,
      tspc_timer_T_rel,tspc_timer_T_rel,
      tspc_timer_T_rel,tspc_timer_T_rel,
      tspc_timer_T_rel,tspc_timer_T_rel,
      tspc_timer_T_rel,tspc_timer_T_rel,
      tspc_timer_T_rel,tspc_timer_T_rel,
      tspc_timer_T_rel,tspc_timer_T_rel };

timer t_T_repeat_rel[16]:= { tspc_timer_T_repeat_rel,tspc_timer_T_repeat_rel,
      tspc_timer_T_repeat_rel,tspc_timer_T_repeat_rel,
      tspc_timer_T_repeat_rel,tspc_timer_T_repeat_rel,
      tspc_timer_T_repeat_rel,tspc_timer_T_repeat_rel,
      tspc_timer_T_repeat_rel,tspc_timer_T_repeat_rel,
      tspc_timer_T_repeat_rel,tspc_timer_T_repeat_rel,
      tspc_timer_T_repeat_rel,tspc_timer_T_repeat_rel,
      tspc_timer_T_repeat_rel,tspc_timer_T_repeat_rel };

timer t_T_int[16]:= { tspc_timer_T_int,tspc_timer_T_int,
      tspc_timer_T_int,tspc_timer_T_int,
      tspc_timer_T_int,tspc_timer_T_int,
      tspc_timer_T_int,tspc_timer_T_int,
      tspc_timer_T_int,tspc_timer_T_int,
      tspc_timer_T_int,tspc_timer_T_int,
      tspc_timer_T_int,tspc_timer_T_int,
      tspc_timer_T_int,tspc_timer_T_int };

timer t_T_guard[16]:= { tspc_timer_T_guard,tspc_timer_T_guard,
      tspc_timer_T_guard,tspc_timer_T_guard,
      tspc_timer_T_guard,tspc_timer_T_guard,
      tspc_timer_T_guard,tspc_timer_T_guard,
      tspc_timer_T_guard,tspc_timer_T_guard,
      tspc_timer_T_guard,tspc_timer_T_guard,
      tspc_timer_T_guard,tspc_timer_T_guard,
      tspc_timer_T_guard,tspc_timer_T_guard };

timer t_T_reset[16]:= { tspc_timer_T_reset,tspc_timer_T_reset,
      tspc_timer_T_reset,tspc_timer_T_reset,
      tspc_timer_T_reset,tspc_timer_T_reset,
      tspc_timer_T_reset,tspc_timer_T_reset,
      tspc_timer_T_reset,tspc_timer_T_reset,
      tspc_timer_T_reset,tspc_timer_T_reset,
      tspc_timer_T_reset,tspc_timer_T_reset,
      tspc_timer_T_reset,tspc_timer_T_reset };

timer t_T_internal_reset[16]:= { tspc_timer_T_internal_reset,tspc_timer_T_internal_reset,
      tspc_timer_T_internal_reset,tspc_timer_T_internal_reset,
      tspc_timer_T_internal_reset,tspc_timer_T_internal_reset,
      tspc_timer_T_internal_reset,tspc_timer_T_internal_reset,
      tspc_timer_T_internal_reset,tspc_timer_T_internal_reset,
      tspc_timer_T_internal_reset,tspc_timer_T_internal_reset,
      tspc_timer_T_internal_reset,tspc_timer_T_internal_reset,
      tspc_timer_T_internal_reset,tspc_timer_T_internal_reset };

timer t_guard[16]:= { tspc_timer_guard,tspc_timer_guard,
      tspc_timer_guard,tspc_timer_guard,
      tspc_timer_guard,tspc_timer_guard,
      tspc_timer_guard,tspc_timer_guard,
      tspc_timer_guard,tspc_timer_guard,
      tspc_timer_guard,tspc_timer_guard,
      tspc_timer_guard,tspc_timer_guard,
      tspc_timer_guard,tspc_timer_guard };

// Component Port Declarations

          port MTP3sccpEncDecUser_porttype MTP3sccp_PCO;
          port SCCP_porttype    SCCP_PCO;//port type defined in SCCP_ASPs

     }//endcomponent  SCCP_comptype

//*************************************************************************
//*************************************************************************
//EncDec Component related declarations
//*************************************************************************
//*************************************************************************

//*************************************************************************
// Port type declarations for EncDec component:
//*************************************************************************

type port MTP3sccpEncDec_porttype  message
  {
  in   ASP_MTP3_TRANSFERreq_sccp;

  out PDU_SCCP_ConnectionRequest,PDU_SCCP_ConnectionConfirm,
  PDU_SCCP_ConnectionRefused,PDU_SCCP_Released,
  PDU_SCCP_ReleaseComplete,PDU_SCCP_DataForm1,
  PDU_SCCP_Unitdata,PDU_SCCP_UnitdataService,
  PDU_SCCP_ResetRequest,PDU_SCCP_ResetConfirm,
  PDU_SCCP_ProtDataUnitError,PDU_SCCP_InactivityTest;
  }
with { extension "internal" }

//Defined in MTP3_ITU_ASps:
//  type port MTP3user_portType message
//    {
//     in  ASP_MTP3_TRANSFERind;
//     out ASP_MTP3_TRANSFERreq;
//    }

type component SCCP_EncDec_comptype

//MTP3sccpEncDec_porttype/MTP3sccpEncDec_PCO
//+-----------------+-----------------+
//|SCCP_EncDec_comptype
//|
//+-----------------+-----------------+
//MTP3user_porttype/MTP3user_sccpPCO

  {//startcomponent  SCCP_EncDec_comptype

  // Component Port Declarations
      port MTP3sccpEncDec_porttype MTP3sccpEncDec_PCO;
      port MTP3user_porttype    MTP3user_sccp_PCO;//port type
    //defined  in MTP3_ITU_ASPs

  }//endcomponent  SCCP_EncDec_comptype

  //ethlelx
//  type component MSC_systemtype

//MTP3_porttype
//+-----------------+-----------------+
//|MSC_systemtype
//|
//+-----------------+-----------------+

//    {
//     port MTP3_porttype          MTP3_system;
//    } //

*/

external function enc_PDU_SCCP(in PDU_SCCP pdu) return octetstring
  with { extension "prototype(convert) encode(RAW)" }
external function dec_PDU_SCCP(in octetstring stream) return PDU_SCCP
  with { extension "prototype(convert) decode(RAW)" }

}//endmodule SCCPTypes
with { encode "RAW"}

