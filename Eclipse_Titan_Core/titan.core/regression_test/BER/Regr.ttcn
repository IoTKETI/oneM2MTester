/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Beres, Szabolcs
 *   Forstner, Matyas
 *   Koppany, Csaba
 *   Kovacs, Ferenc
 *   Szabados, Kristof
 *   Szabo, Janos Zoltan â€“ initial implementation
 *
 ******************************************************************************/
module Regr
{
  import from Regr1 language "ASN.1:1997" all
    with {encode "DER:1997"};
  import from Regr2 language "ASN.1:1997" all
    with {encode "DER:1997"};

  external function enc_ber_int(in integer r) return octetstring
    with { extension "encode(BER:BER_ENCODE_DER) prototype(convert) errorbehavior(ALL:WARNING)" }
  external function dec_ber_int(in octetstring r) return integer
    with { extension "decode(BER:BER_ENCODE_DER) prototype(convert) errorbehavior(ALL:WARNING)" }

  type component comp_ber { }

  type port MyPort1 message
  {
    out T0, T2, T3, T4, T5, T6, T7, T8,
      T10, T11;
    in octetstring;
  }

  type port MyPort2 message
  {
    in T0, T2, T3, T4, T5, T6, T7, T8,
      T10, T11;
    out octetstring;
  }

  type component MyComponent
  {
    timer T := 1.0;
    port MyPort1 P1;
    port MyPort2 P2;
  }

  type component MySystemType
  {
    port MyPort2 S1;
    port MyPort1 S2;
  }

  altstep MyAltstep() runs on MyComponent
  {
    [] P1.receive { setverdict(fail); }
    [] P2.receive { setverdict(fail); }
    [] T.timeout { setverdict(inconc); T.start; }
  }

  testcase TC0a() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c0a);
    T.start;
    P1.receive(d0a);
    setverdict(pass);
    T.stop;

    P2.send(d0a);
    T.start;
    P2.receive(c0a);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC2a() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c2a);
    T.start;
    P1.receive(d2a);
    setverdict(pass);
    T.stop;

    P2.send(d2a);
    T.start;
    P2.receive(c2a);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC2b() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c2b);
    T.start;
    P1.receive(d2b);
    setverdict(pass);
    T.stop;

    P2.send(d2b);
    T.start;
    P2.receive(c2b);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC3a() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c3a);
    T.start;
    P1.receive(d3a);
    setverdict(pass);
    T.stop;

    P2.send(d3a);
    T.start;
    P2.receive(c3a);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC3b() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c3b);
    T.start;
    P1.receive(d3b);
    setverdict(pass);
    T.stop;

    P2.send(d3b);
    T.start;
    P2.receive(c3b);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC3c() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c3c);
    T.start;
    P1.receive(d3c);
    setverdict(pass);
    T.stop;

    P2.send(d3c);
    T.start;
    P2.receive(c3c);
    setverdict(pass);
    T.stop;

    P1.send(c3d);
    T.start;
    P1.receive(d3d);
    setverdict(pass);
    T.stop;

    P2.send(d3d);
    T.start;
    P2.receive(c3d);
    setverdict(pass);
    T.stop;

    P1.send(c3e);
    T.start;
    P1.receive(d3e);
    setverdict(pass);
    T.stop;

    P2.send(d3e);
    T.start;
    P2.receive(c3e);
    setverdict(pass);
    T.stop;

    P1.send(c3f);
    T.start;
    P1.receive(d3f);
    setverdict(pass);
    T.stop;

    P2.send(d3f);
    T.start;
    P2.receive(c3f);
    setverdict(pass);
    T.stop;

    P1.send(c3g);
    T.start;
    P1.receive(d3g);
    setverdict(pass);
    T.stop;

    P2.send(d3g);
    T.start;
    P2.receive(c3g);
    setverdict(pass);
    T.stop;

    P1.send(c3h);
    T.start;
    P1.receive(d3h);
    setverdict(pass);
    T.stop;

    P2.send(d3h);
    T.start;
    P2.receive(c3h);
    setverdict(pass);
    T.stop;

    P1.send(c3i);
    T.start;
    P1.receive(d3i);
    setverdict(pass);
    T.stop;

    P2.send(d3i);
    T.start;
    P2.receive(c3i);
    setverdict(pass);
    T.stop;

    P1.send(c3j);
    T.start;
    P1.receive(d3j);
    setverdict(pass);
    T.stop;

    P2.send(d3j);
    T.start;
    P2.receive(c3j);
    setverdict(pass);
    T.stop;

    P1.send(c3k);
    T.start;
    P1.receive(d3k);
    setverdict(pass);
    T.stop;

    P2.send(d3k);
    T.start;
    P2.receive(c3k);
    setverdict(pass);
    T.stop;

    P1.send(c3l);
    T.start;
    P1.receive(d3l);
    setverdict(pass);
    T.stop;

    P2.send(d3l);
    T.start;
    P2.receive(c3l);
    setverdict(pass);
    T.stop;

    P1.send(c3m);
    T.start;
    P1.receive(d3m);
    setverdict(pass);
    T.stop;

    P2.send(d3m);
    T.start;
    P2.receive(c3m);
    setverdict(pass);
    T.stop;

    P1.send(c3n);
    T.start;
    P1.receive(d3n);
    setverdict(pass);
    T.stop;

    P2.send(d3n);
    T.start;
    P2.receive(c3n);
    setverdict(pass);
    T.stop;

    P1.send(c3o);
    T.start;
    P1.receive(d3o);
    setverdict(pass);
    T.stop;

    P2.send(d3o);
    T.start;
    P2.receive(c3o);
    setverdict(pass);
    T.stop;

    P1.send(c3p);
    T.start;
    P1.receive(d3p);
    setverdict(pass);
    T.stop;

    P2.send(d3p);
    T.start;
    P2.receive(c3p);
    setverdict(pass);
    T.stop;

    P1.send(c3q);
    T.start;
    P1.receive(d3q);
    setverdict(pass);
    T.stop;

    P2.send(d3q);
    T.start;
    P2.receive(c3q);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC4() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c4a);
    T.start;
    P1.receive(d4a);
    setverdict(pass);
    T.stop;

    P2.send(d4a);
    T.start;
    P2.receive(c4a);
    setverdict(pass);
    T.stop;

    P1.send(c4b);
    T.start;
    P1.receive(d4b);
    setverdict(pass);
    T.stop;

    P2.send(d4b);
    T.start;
    P2.receive(c4b);
    setverdict(pass);
    T.stop;

    P1.send(c4c);
    T.start;
    P1.receive(d4c);
    setverdict(pass);
    T.stop;

    P2.send(d4c);
    T.start;
    P2.receive(c4c);
    setverdict(pass);
    T.stop;

    P1.send(c4d);
    T.start;
    P1.receive(d4d);
    setverdict(pass);
    T.stop;

    P2.send(d4d);
    T.start;
    P2.receive(c4d);
    setverdict(pass);
    T.stop;

    P1.send(c4e);
    T.start;
    P1.receive(d4e);
    setverdict(pass);
    T.stop;

    P2.send(d4d);
    T.start;
    P2.receive(c4d);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC5() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c5a);
    T.start;
    P1.receive(d5a);
    setverdict(pass);
    T.stop;

    P2.send(d5a);
    T.start;
    P2.receive(c5a);
    setverdict(pass);
    T.stop;

    P1.send(c5b);
    T.start;
    P1.receive(d5b);
    setverdict(pass);
    T.stop;

    P2.send(d5b);
    T.start;
    P2.receive(c5b);
    setverdict(pass);
    T.stop;

    P1.send(c5c);
    T.start;
    P1.receive(d5c);
    setverdict(pass);
    T.stop;

    P2.send(d5c);
    T.start;
    P2.receive(c5c);
    setverdict(pass);
    T.stop;

    P1.send(c5d);
    T.start;
    P1.receive(d5d);
    setverdict(pass);
    T.stop;

    P2.send(d5d);
    T.start;
    P2.receive(c5d);
    setverdict(pass);
    T.stop;

    P1.send(c5e);
    T.start;
    P1.receive(d5e);
    setverdict(pass);
    T.stop;

    P2.send(d5e);
    T.start;
    P2.receive(c5e);
    setverdict(pass);
    T.stop;

    P1.send(c5f);
    T.start;
    P1.receive(d5f);
    setverdict(pass);
    T.stop;

    P2.send(d5f);
    T.start;
    P2.receive(c5f);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC6() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c6a);
    T.start;
    P1.receive(d6a);
    setverdict(pass);
    T.stop;

    P2.send(d6a);
    T.start;
    P2.receive(c6a);
    setverdict(pass);
    T.stop;

    P1.send(c6b);
    T.start;
    P1.receive(d6b);
    setverdict(pass);
    T.stop;

    P2.send(d6b);
    T.start;
    P2.receive(c6b);
    setverdict(pass);
    T.stop;

    P1.send(c6c);
    T.start;
    P1.receive(d6c);
    setverdict(pass);
    T.stop;

    P2.send(d6c);
    T.start;
    P2.receive(c6d); // Yes, c6d==c6c
    setverdict(pass);
    T.stop;

    P1.send(c6d);
    T.start;
    P1.receive(d6d);
    setverdict(pass);
    T.stop;

    P2.send(d6d);
    T.start;
    P2.receive(c6d);
    setverdict(pass);
    T.stop;

    P1.send(c6e);
    T.start;
    P1.receive(d6e);
    setverdict(pass);
    T.stop;

    P2.send(d6e);
    T.start;
    P2.receive(c6e);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC7() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c7a);
    T.start;
    P1.receive(d7a);
    setverdict(pass);
    T.stop;

    P2.send(d7a);
    T.start;
    P2.receive(c7a);
    setverdict(pass);
    T.stop;

    P1.send(c7b);
    T.start;
    P1.receive(d7b);
    setverdict(pass);
    T.stop;

    P2.send(d7b);
    T.start;
    P2.receive(c7b);
    setverdict(pass);
    T.stop;

    P1.send(c7c);
    T.start;
    P1.receive(d7c);
    setverdict(pass);
    T.stop;

    P2.send(d7c);
    T.start;
    P2.receive(c7c);
    setverdict(pass);
    T.stop;

    P1.send(c7d);
    T.start;
    P1.receive(d7d);
    setverdict(pass);
    T.stop;

    P2.send(d7d);
    T.start;
    P2.receive(c7d);
    setverdict(pass);
    T.stop;

    P1.send(c7e);
    T.start;
    P1.receive(d7e);
    setverdict(pass);
    T.stop;

    P2.send(d7e);
    T.start;
    P2.receive(c7e);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC8() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c8a);
    T.start;
    P1.receive(d8a);
    setverdict(pass);
    T.stop;

    P2.send(d8a);
    T.start;
    P2.receive(c8a);
    setverdict(pass);
    T.stop;

    P1.send(c8b);
    T.start;
    P1.receive(d8b);
    setverdict(pass);
    T.stop;

    P2.send(d8b);
    T.start;
    P2.receive(c8b);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC10() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c10a);
    T.start;
    P1.receive(d10a);
    setverdict(pass);
    T.stop;

    P2.send(d10a);
    T.start;
    P2.receive(c10a);
    setverdict(pass);
    T.stop;

    P1.send(c10b);
    T.start;
    P1.receive(d10b);
    setverdict(pass);
    T.stop;

    P2.send(d10b);
    T.start;
    P2.receive(c10b);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC11_12() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c11_12a);
    T.start;
    P1.receive(d11_12a);
    setverdict(pass);
    T.stop;

    P2.send(d11_12a);
    T.start;
    P2.receive(c11_12a);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC11_13() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c11_13a);
    T.start;
    P1.receive(d11_13a);
    setverdict(pass);
    T.stop;

    P2.send(d11_13a);
    T.start;
    P2.receive(c11_13a);
    setverdict(pass);
    T.stop;

    P1.send(c11_13b);
    T.start;
    P1.receive(d11_13b);
    setverdict(pass);
    T.stop;

    P2.send(d11_13b);
    T.start;
    P2.receive(c11_13b);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC11_14() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c11_14a);
    T.start;
    P1.receive(d11_14a);
    setverdict(pass);
    T.stop;

    P2.send(d11_14a);
    T.start;
    P2.receive(c11_14a);
    setverdict(pass);
    T.stop;

    P1.send(c11_14b);
    T.start;
    P1.receive(d11_14b);
    setverdict(pass);
    T.stop;

    P2.send(d11_14b);
    T.start;
    P2.receive(c11_14b);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC11_15() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c11_15a);
    T.start;
    P1.receive(d11_15a);
    setverdict(pass);
    T.stop;

    P2.send(d11_15a);
    T.start;
    P2.receive(c11_15a);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC11_16() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c11_16a);
    T.start;
    P1.receive(d11_16a);
    setverdict(pass);
    T.stop;

    P2.send(d11_16a);
    T.start;
    P2.receive(c11_16a);
    setverdict(pass);
    T.stop;

    P1.send(c11_16b);
    T.start;
    P1.receive(d11_16b);
    setverdict(pass);
    T.stop;

    P2.send(d11_16b);
    T.start;
    P2.receive(c11_16b);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC11_17() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c11_17a);
    T.start;
    P1.receive(d11_17a);
    setverdict(pass);
    T.stop;

    P2.send(d11_17a);
    T.start;
    P2.receive(c11_17a);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC11_18() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c11_18a);
    T.start;
    P1.receive(d11_18a);
    setverdict(pass);
    T.stop;

    P2.send(d11_18a);
    T.start;
    P2.receive(c11_18a);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC11_19() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c11_19a);
    T.start;
    P1.receive(d11_19a);
    setverdict(pass);
    T.stop;

    P2.send(d11_19a);
    T.start;
    P2.receive(c11_19a);
    setverdict(pass);
    T.stop;

    P1.send(c11_19b);
    T.start;
    P1.receive(d11_19b);
    setverdict(pass);
    T.stop;

    P2.send(d11_19b);
    T.start;
    P2.receive(c11_19b);
    setverdict(pass);
    T.stop;

    P1.send(c11_19c);
    T.start;
    P1.receive(d11_19c);
    setverdict(pass);
    T.stop;

    P2.send(d11_19c);
    T.start;
    P2.receive(c11_19c);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC11_20() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c11_20a);
    T.start;
    P1.receive(d11_20a);
    setverdict(pass);
    T.stop;

    P2.send(d11_20a);
    T.start;
    P2.receive(c11_20a);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC11_21() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c11_21a);
    T.start;
    P1.receive(d11_21a);
    setverdict(pass);
    T.stop;

    P2.send(d11_21a);
    T.start;
    P2.receive(c11_21a);
    setverdict(pass);
    T.stop;

    P1.send(c11_21b);
    T.start;
    P1.receive(d11_21b);
    setverdict(pass);
    T.stop;

    P2.send(d11_21b);
    T.start;
    P2.receive(c11_21b);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  testcase TC11_22() runs on MyComponent system MySystemType
  {
    var default d := activate(MyAltstep());
    map(mtc:P1, system:S2);
    map(mtc:P2, system:S1);

    P1.send(c11_22a);
    T.start;
    P1.receive(d11_22a);
    setverdict(pass);
    T.stop;

    P2.send(d11_22a);
    T.start;
    P2.receive(c11_22a);
    setverdict(pass);
    T.stop;

    deactivate(d);
    unmap(mtc:P1, system:S2);
    unmap(mtc:P2, system:S1);
  }

  function check_enc_dec(integer int, octetstring expected) {
    var octetstring encoded_pdu := enc_ber_int(int);
    if (encoded_pdu == expected) {setverdict(pass);}
    else {setverdict(fail, "Encoding failed, encoded_pdu is ", log2str(encoded_pdu));}
    var integer decoded :=  dec_ber_int(encoded_pdu);
    if (int == decoded) { setverdict(pass); }
    else {setverdict(fail, "decoding failed, decoded is ", decoded);}
  } with {
    extension "transparent"
  }

  testcase tc_int_enc_dec() runs on comp_ber {

    check_enc_dec( 0, '020100'O);

    check_enc_dec(-1, '0201FF'O);
    check_enc_dec( 1, '020101'O);

    check_enc_dec(-2, '0201FE'O);
    check_enc_dec( 2, '020102'O);
    check_enc_dec(-5, '0201FB'O);
    check_enc_dec( 5, '020105'O);

    check_enc_dec(-254, '0202FF02'O);
    check_enc_dec( 254, '020200FE'O);
    check_enc_dec(-255, '0202FF01'O);
    check_enc_dec( 255, '020200FF'O);
    check_enc_dec(-256, '0202FF00'O);
    check_enc_dec( 256, '02020100'O);

    check_enc_dec(-1234, '0202FB2E'O);

    // 2^16
    check_enc_dec(-65534, '0203FF0002'O);
    check_enc_dec( 65534, '020300FFFE'O);
    check_enc_dec(-65535, '0203FF0001'O);
    check_enc_dec( 65535, '020300FFFF'O);
    check_enc_dec(-65536, '0203FF0000'O);
    check_enc_dec( 65536, '0203010000'O);

    // 2^24
    check_enc_dec(-16777215, '0204FF000001'O);
    check_enc_dec( 16777215, '020400FFFFFF'O);
    check_enc_dec(-16777216, '0204FF000000'O);
    check_enc_dec( 16777216, '020401000000'O);
    check_enc_dec(-16777217, '0204FEFFFFFF'O);
    check_enc_dec( 16777217, '020401000001'O);

    // 2^32 
    check_enc_dec(-4294967295, '0205FF00000001'O);
    check_enc_dec( 4294967295, '020500FFFFFFFF'O);
    check_enc_dec(-4294967296, '0205FF00000000'O);
    check_enc_dec( 4294967296, '02050100000000'O);
    check_enc_dec(-4294967297, '0205FEFFFFFFFF'O);
    check_enc_dec( 4294967297, '02050100000001'O);

    // 8 bit min,max
    check_enc_dec(-128, '020180'O);
    check_enc_dec( 127, '02017F'O);

    // 32 bit min,max 
    check_enc_dec(-2147483648, '020480000000'O);
    check_enc_dec( 2147483647, '02047FFFFFFF'O);

    // 40 bit min,max 
    check_enc_dec(-549755813888, '02058000000000'O);
    check_enc_dec( 549755813887, '02057FFFFFFFFF'O);

    // 48 bit min,max 
    check_enc_dec(-140737488355328, '0206800000000000'O);
    check_enc_dec( 140737488355327, '02067FFFFFFFFFFF'O);

    // 56 bit min,max 
    check_enc_dec(-36028797018963968, '020780000000000000'O);
    check_enc_dec( 36028797018963967, '02077FFFFFFFFFFFFF'O);

    // 64 bit min,max 
    check_enc_dec(-9223372036854775808,  '02088000000000000000'O);
    check_enc_dec( 9223372036854775807, '02087FFFFFFFFFFFFFFF'O);

    check_enc_dec(-12345678910111213141516, '020AFD62BD49A976CD7441F4'O);
    check_enc_dec( 12345678910111213141516, '020A029D42B65689328BBE0C'O);
    
  }

  control
  {
    execute(TC0a());
    execute(TC2a());
    execute(TC2b());
    execute(TC3a());
    execute(TC3b());
    execute(TC3c());
    execute(TC4());
    execute(TC5());
    execute(TC6());
    execute(TC7());
    execute(TC8());
    execute(TC10());
    execute(TC11_12());
    execute(TC11_13());
    execute(TC11_14());
    execute(TC11_15());
    execute(TC11_16());
    execute(TC11_17());
    execute(TC11_18());
    execute(TC11_19());
    execute(TC11_20());
    execute(TC11_21());
    execute(TC11_22());
    execute(tc_int_enc_dec());
  }

}
