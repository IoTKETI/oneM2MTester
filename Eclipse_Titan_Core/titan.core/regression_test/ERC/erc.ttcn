/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Szabados, Kristof
 *
 ******************************************************************************/
module erc
{
type enumerated days { Monday, Tuesday, Wednesday, Thursday, Friday};

modulepar float m_float1;
modulepar boolean m_boolean1;
modulepar days m_days;
modulepar charstring m_string1;
modulepar integer m_integer1;
modulepar bitstring m_bitstring1;
modulepar hexstring m_hexstring1;
modulepar octetstring m_octetstring1;
modulepar charstring m_env_test;

type integer mysubarray1[2];
type mysubarray1 mysubarray2[4];
modulepar mysubarray2 m_array1;
template mysubarray2 t_array1 := {{1,1},{2,2},{3,3},?}

type integer mysubarray3[4][2];
modulepar mysubarray3 m_array2;
template mysubarray3 t_array2 := {{1,1},{2,2},{3,3},{4,4}};

modulepar float m_included1_float;
modulepar octetstring m_included1_binaryoctet;
modulepar charstring m_included1_string;
modulepar integer m_included1_integer;
modulepar bitstring m_included1_bitstring;
modulepar hexstring m_included1_hexstring;
modulepar octetstring m_included1_octetstring;

modulepar float m_included2_float;
modulepar octetstring m_included2_binaryoctet;
modulepar charstring m_included2_string;
modulepar integer m_included2_integer;
modulepar bitstring m_included2_bitstring;
modulepar hexstring m_included2_hexstring;
modulepar octetstring m_included2_octetstring;

modulepar float m_base_float;
modulepar octetstring m_base_binaryoctet;
modulepar charstring m_base_string;
modulepar integer m_base_integer;
modulepar bitstring m_base_bitstring;
modulepar hexstring m_base_hexstring;
modulepar octetstring m_base_octetstring;
modulepar mysubarray3 m_base_array;

modulepar{
  charstring ttcn_keyword1,ttcn_keyword2;
    }

type component empty_comp{};

testcase test_own_config() runs on empty_comp
{
  if(m_float1 == 1.0){setverdict(pass);}
  else{setverdict(fail);}
  if(m_boolean1 == true){setverdict(pass);}
  else{setverdict(fail);}
  if(m_days == Monday){setverdict(pass);}
  else{setverdict(fail);}
  if(m_string1 == "charstring"){setverdict(pass);}
  else{setverdict(fail);}
  if(m_integer1 == 1){setverdict(pass);}
  else{setverdict(fail);}
  if(m_bitstring1 == '00001111'B){setverdict(pass);}
  else{setverdict(fail);}
  if(m_hexstring1 == 'FFFF'H){setverdict(pass);}
  else{setverdict(fail);}
  if(m_octetstring1 == 'FFFF'O){setverdict(pass);}
  else{setverdict(fail);}
  if(m_env_test == "variable"){setverdict(pass);}
  else{setverdict(fail);}
  if(match(m_array1,t_array1)){setverdict(pass);}
  else{setverdict(fail);}
  if(match(m_array2,t_array2)){setverdict(pass);}
  else{setverdict(fail);}
  if(ttcn_keyword1 == "module"){setverdict(pass);}
  else{setverdict(fail);}
  if(ttcn_keyword2 == "create"){setverdict(pass);}
  else{setverdict(fail);}
}

testcase test_included1_config() runs on empty_comp
{
  if(m_included1_float == 2.0){setverdict(pass);}
  else{setverdict(fail);}
  if(m_included1_binaryoctet == '62696E617279'O){setverdict(pass);}
  else{setverdict(fail);}
  if(m_included1_string == "included1_charstring"){setverdict(pass);}
  else{setverdict(fail);}
  if(m_included1_integer == 2){setverdict(pass);}
  else{setverdict(fail);}
  if(m_included1_bitstring == '11110000'B){setverdict(pass);}
  else{setverdict(fail);}
  if(m_included1_hexstring == '0000'H){setverdict(pass);}
  else{setverdict(fail);}
  if(m_included1_octetstring == '0000'O){setverdict(pass);}
  else{setverdict(fail);}
}

testcase test_included2_config() runs on empty_comp
{
  if(m_included2_float == 3.0){setverdict(pass);}
  else{setverdict(fail);}
  if(m_included2_binaryoctet == '32'O){setverdict(pass);}
  else{setverdict(fail);}
  if(m_included2_string == "included2_charstring"){setverdict(pass);}
  else{setverdict(fail);}
  if(m_included2_integer == 3){setverdict(pass);}
  else{setverdict(fail);}
  if(m_included2_bitstring == '00110011'B){setverdict(pass);}
  else{setverdict(fail);}
  if(m_included2_hexstring == '00FF'H){setverdict(pass);}
  else{setverdict(fail);}
  if(m_included2_octetstring == '00FF'O){setverdict(pass);}
  else{setverdict(fail);}
}

testcase test_base_config() runs on empty_comp
{
  if(m_base_float == 4.0){setverdict(pass);}
  else{setverdict(fail);}
  if(m_base_binaryoctet == '62696E6172795F6F63746574'O){setverdict(pass);}
  else{setverdict(fail);}
  if(m_base_string == "base_charstring"){setverdict(pass);}
  else{setverdict(fail);}
  if(m_base_integer == 4){setverdict(pass);}
  else{setverdict(fail);}
  if(m_base_bitstring == '11001100'B){setverdict(pass);}
  else{setverdict(fail);}
  if(m_base_hexstring == '0F0F'H){setverdict(pass);}
  else{setverdict(fail);}
  if(m_base_octetstring == 'F0F0'O){setverdict(pass);}
  else{setverdict(fail);}
  if(match(m_base_array,t_array2)){setverdict(pass);}
  else{setverdict(fail);}
}

control{
  execute(test_own_config());
  execute(test_included1_config());
  execute(test_included2_config());
  execute(test_base_config());
    }
}
