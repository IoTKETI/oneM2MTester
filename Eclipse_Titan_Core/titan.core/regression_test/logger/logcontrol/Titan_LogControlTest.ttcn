/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *
 ******************************************************************************/
module Titan_LogControlTest {

//Compile and run this module by script "logcontroltest.sh" 
//You can set Titan_LogControlTest.cfg before running the script

import from TitanLoggerControl all;
//import from Titan_LogTestDefinitions all;

modulepar Severities tsp_file_log_level := log_nothing;

const charstring c_legacy_logger_plugin := "LegacyLogger"
const charstring c_dummy_logger:="DummyLogger";

type component MTC {}

//========================================================
// function f_compareAndEvaluate
// Forced setverdict according to matching of input pars:
// not used yet
//========================================================
function f_compareAndEvaluate(in Severities pl_sevReal, in Severities pl_sevExpected) {
  var Severities vl_sevOrig:=get_file_mask(c_legacy_logger_plugin);
  set_file_mask(c_legacy_logger_plugin, {VERDICTOP_SETVERDICT,USER_UNQUALIFIED});
  if(match(pl_sevReal, pl_sevExpected )) {
    setverdict(pass);
  }else{
    setverdict(fail);
    log("Real: ",pl_sevReal , " Expected: ", pl_sevExpected);
  }
  set_file_mask(c_legacy_logger_plugin,vl_sevOrig);
}

function f_reverseSeverityList(in Severities pl_sevOrig, inout Severities pl_sevRev) {
  var integer vl_size:=sizeof(pl_sevOrig);
  pl_sevRev:={};
  if( not isvalue(pl_sevOrig) ) { 
    log("This record is not acceptable, it contains hole:",pl_sevOrig);
    return;
  }

  for( var integer i:=0;i<vl_size; i:=i+1) {
    pl_sevRev[i]:= pl_sevOrig[vl_size-i-1];
  }
}

group PluginTest {
  
  //************************************************************
  // Testcases
  //************************************************************
  testcase tc_plugin_positive() runs on MTC
  {
    set_file_mask(c_legacy_logger_plugin, log_all)
    f_compareAndEvaluate(get_file_mask(c_legacy_logger_plugin),log_all);
  }

  testcase tc_plugin_negative() runs on MTC
  {
    log(">>>>Expected result: dynamic testcase error<<<<");
    set_file_mask( c_dummy_logger, log_all);
    log(get_file_mask( c_dummy_logger));
    log(">>>This line cannot be reached (yet)<<<")
    setverdict(fail);
  }

}//group

//*************************************************************
group SetTest {
//*************************************************************
  //Console mask, file mask inteference test:

  testcase tc_set_file_mask() runs on MTC
  {
    set_file_mask(c_legacy_logger_plugin, log_all);
    set_console_mask(c_legacy_logger_plugin,log_nothing)
    f_compareAndEvaluate(get_file_mask(c_legacy_logger_plugin),log_all);
  }

  testcase tc_set_console_mask() runs on MTC
  {
    set_file_mask(c_legacy_logger_plugin, log_all);
    set_console_mask(c_legacy_logger_plugin, log_all)
    f_compareAndEvaluate(get_console_mask(c_legacy_logger_plugin),log_all);
  }

  testcase tc_set_console_maskrep() runs on MTC
  {
    var Severities vl_sev:={ VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL, VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL};
    var Severities vl_sevExpected:= { VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL};
    set_file_mask(c_legacy_logger_plugin, log_all);
    set_console_mask(c_legacy_logger_plugin, vl_sev)
    var Severities vl_sevReal:=get_console_mask(c_legacy_logger_plugin);
    f_compareAndEvaluate(vl_sevReal,vl_sevExpected)
  }

  //pass
  testcase tc_set_file_mask0() runs on MTC
  {
    var Severities vl_sev:={  };
    set_file_mask(c_legacy_logger_plugin,log_nothing );
    set_console_mask(c_legacy_logger_plugin,log_all);
    var Severities vl_sevReal:=get_file_mask(c_legacy_logger_plugin);
    f_compareAndEvaluate(vl_sevReal,vl_sev);
  }


}//group SetTest

//*************************************************************
group AddToTest {
  //*************************************************************
  //pass
  testcase tc_add_to_file_maskrep() runs on MTC
  {
    var Severities vl_sev:={ VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL, VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL};
    var Severities vl_sevExpected:={ VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL};
    set_file_mask(c_legacy_logger_plugin, log_nothing);
    add_to_file_mask(c_legacy_logger_plugin, vl_sev );
    set_console_mask(c_legacy_logger_plugin, log_all);
    var Severities vl_sevReal:=get_file_mask(c_legacy_logger_plugin);
    f_compareAndEvaluate(vl_sevReal,vl_sevExpected );
  }

  //pass
  testcase tc_add_to_file_mask0() runs on MTC
  {
    var Severities vl_sev:={  };
    set_file_mask(c_legacy_logger_plugin, log_nothing);
    add_to_file_mask(c_legacy_logger_plugin, vl_sev );
    set_console_mask(c_legacy_logger_plugin, log_all);
    var Severities vl_sevReal:=get_file_mask(c_legacy_logger_plugin);
    f_compareAndEvaluate(vl_sevReal,vl_sev);
  }

  //pass
  testcase tc_add_to_file_mask1() runs on MTC
  {
    var Severities vl_sev:={  VERDICTOP_SETVERDICT };
    set_file_mask(c_legacy_logger_plugin, log_nothing);
    add_to_file_mask(c_legacy_logger_plugin, vl_sev );
    //set_console_mask(c_legacy_logger_plugin, log_all);
    var Severities vl_sevReal:=get_file_mask(c_legacy_logger_plugin);
    f_compareAndEvaluate(vl_sevReal,vl_sev);
  }

  //pass
  testcase tc_add_to_file_mask2() runs on MTC
  {
    var Severities vl_sev:={ VERDICTOP_SETVERDICT, VERDICTOP_FINAL};
    var Severities vl_sevExpected:= vl_sev;
    set_file_mask(c_legacy_logger_plugin, log_nothing);
    add_to_file_mask(c_legacy_logger_plugin, vl_sev );
    set_console_mask(c_legacy_logger_plugin, log_all);
    var Severities vl_sevReal:=get_file_mask(c_legacy_logger_plugin);
    f_compareAndEvaluate(vl_sevReal,vl_sevExpected );
  }

  //pass
  testcase tc_add_to_file_mask3() runs on MTC
  {
    var Severities vl_sev:={ VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL};
    var Severities vl_sevExpected:= vl_sev;
    set_file_mask(c_legacy_logger_plugin, log_nothing);
    add_to_file_mask(c_legacy_logger_plugin, vl_sev );
    set_console_mask(c_legacy_logger_plugin, log_all);
    var Severities vl_sevReal:=get_file_mask(c_legacy_logger_plugin);
    f_compareAndEvaluate(vl_sevReal,vl_sevExpected );
  }

  testcase tc_add_to_file_complex1() runs on MTC
  {
    var Severities vl_sevList:=log_all;
    var Severities vl_sevExpected:={ };
    var Severities vl_sev:={}
    var integer vl_nofSev:=sizeof(vl_sevList);
    var Severities vl_sevReal:={};
    log(">>>Number of tested severities:", vl_nofSev );
    var integer vl_succ:=0, vl_fail:=0;
    for(var integer i:=0; i<vl_nofSev; i:=i+1) {
      vl_sev:={ vl_sevList[i] }
      vl_sevExpected:=vl_sev;
      set_file_mask(c_legacy_logger_plugin, log_nothing);
      add_to_file_mask(c_legacy_logger_plugin, vl_sev );
      set_console_mask(c_legacy_logger_plugin, log_all);
      vl_sevReal:=get_file_mask(c_legacy_logger_plugin);
      //test:
      set_file_mask(c_legacy_logger_plugin, {USER_UNQUALIFIED, VERDICTOP_SETVERDICT, TESTCASE_START,TESTCASE_FINISH});
      if(match(vl_sevReal, vl_sevExpected)) {
        setverdict(pass); vl_succ:=vl_succ+1;
      }else{
        setverdict(fail); 
        vl_fail:=vl_fail+1;
        log("Real: ",vl_sevReal , " Expected: ", vl_sevExpected );
      }
    }//for
    set_file_mask(c_legacy_logger_plugin, {USER_UNQUALIFIED, VERDICTOP_SETVERDICT, TESTCASE_START,TESTCASE_FINISH});
    log(">>>Statistics: total: ",vl_nofSev," success:", vl_succ, " fail: ", vl_fail)
  }

  //incementally add severities to the existing ones:
  testcase tc_add_to_file_complex2() runs on MTC
  {
    var Severities vl_sevList:=log_all;
    var Severities vl_sevExpected:={ };
    var Severities vl_sev:={}
    var integer vl_nofSev:=sizeof(vl_sevList);
    var Severities vl_sevReal:={};
    log(">>>Number of tested severities:", vl_nofSev );
    var integer vl_succ:=0, vl_fail:=0;
    for(var integer i:=0; i<vl_nofSev; i:=i+1) {
      vl_sev[i]:= vl_sevList[i];
      vl_sevExpected:=vl_sev;
      set_file_mask(c_legacy_logger_plugin, log_nothing);
      add_to_file_mask(c_legacy_logger_plugin, vl_sev );
      set_console_mask(c_legacy_logger_plugin, log_all);
      vl_sevReal:=get_file_mask(c_legacy_logger_plugin);
      //test:
      set_file_mask(c_legacy_logger_plugin, {USER_UNQUALIFIED, VERDICTOP_SETVERDICT, TESTCASE_START,TESTCASE_FINISH});
      if(match(vl_sevReal, vl_sevExpected)) {
        setverdict(pass); vl_succ:=vl_succ+1;
      }else{
        setverdict(fail); 
        vl_fail:=vl_fail+1;
        log("Real: ",vl_sevReal , " Expected: ", vl_sevExpected );
      }
    }//for
    set_file_mask(c_legacy_logger_plugin, {USER_UNQUALIFIED, VERDICTOP_SETVERDICT, TESTCASE_START,TESTCASE_FINISH});
    log(">>>Statistics: total: ",vl_nofSev," success:", vl_succ, " fail: ", vl_fail)
  }

  testcase tc_add_to_file_complexReverse() runs on MTC
  {
    var Severities vl_sevList:=log_all;
    var Severities vl_sevExpected:={ };
    var Severities vl_sev:={}
    var integer vl_nofSev:=sizeof(vl_sevList);
    var Severities vl_sevReal:={};
    log(">>>Number of tested severities:", vl_nofSev );
    var integer vl_succ:=0, vl_fail:=0;
    for(var integer i:=0; i<vl_nofSev; i:=i+1) {
      vl_sev[i]:= vl_sevList[vl_nofSev-i-1];
      f_reverseSeverityList(vl_sev,vl_sevExpected);
      set_file_mask(c_legacy_logger_plugin, log_nothing);
      add_to_file_mask(c_legacy_logger_plugin, vl_sev );
      set_console_mask(c_legacy_logger_plugin, log_all);
      vl_sevReal:=get_file_mask(c_legacy_logger_plugin);
      //test:
      set_file_mask(c_legacy_logger_plugin, {USER_UNQUALIFIED, VERDICTOP_SETVERDICT, TESTCASE_START,TESTCASE_FINISH});
      if(match(vl_sevReal, vl_sevExpected)) {
        setverdict(pass); vl_succ:=vl_succ+1;
      }else{
        setverdict(fail); 
        vl_fail:=vl_fail+1;
        log("Real: ",vl_sevReal , " Expected: ", vl_sevExpected );
      }
    }//for
    set_file_mask(c_legacy_logger_plugin, {USER_UNQUALIFIED, VERDICTOP_SETVERDICT, TESTCASE_START,TESTCASE_FINISH});
    log(">>>Statistics: total: ",vl_nofSev," success:", vl_succ, " fail: ", vl_fail)
  }


  //---- Add to CONSOLE --
    //pass
  testcase tc_add_to_console_maskrep() runs on MTC
  {
    var Severities vl_sev:={ VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL, VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL};
    var Severities vl_sevExpected:={ VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL};
    set_console_mask(c_legacy_logger_plugin, log_nothing);
    add_to_console_mask(c_legacy_logger_plugin, vl_sev );
    //set_console_mask(c_legacy_logger_plugin, log_all);
    var Severities vl_sevReal:=get_console_mask(c_legacy_logger_plugin);
    f_compareAndEvaluate(vl_sevReal,vl_sevExpected );
  }

  //pass
  testcase tc_add_to_console_mask0() runs on MTC
  {
    var Severities vl_sev:={  };
    set_console_mask(c_legacy_logger_plugin, log_nothing);
    add_to_console_mask(c_legacy_logger_plugin, vl_sev );
    //set_console_mask(c_legacy_logger_plugin, log_all);
    var Severities vl_sevReal:=get_console_mask(c_legacy_logger_plugin);
    f_compareAndEvaluate(vl_sevReal,vl_sev);
  }

  //pass
  testcase tc_add_to_console_mask1() runs on MTC
  {
    var Severities vl_sev:={  VERDICTOP_SETVERDICT };
    set_console_mask(c_legacy_logger_plugin, log_nothing);
    add_to_console_mask(c_legacy_logger_plugin, vl_sev );
    //set_console_mask(c_legacy_logger_plugin, log_all);
    var Severities vl_sevReal:=get_console_mask(c_legacy_logger_plugin);
    f_compareAndEvaluate(vl_sevReal,vl_sev);
  }

  //pass
  testcase tc_add_to_console_mask2() runs on MTC
  {
    var Severities vl_sev:={ VERDICTOP_SETVERDICT, VERDICTOP_FINAL};
    var Severities vl_sevExpected:= vl_sev;
    set_console_mask(c_legacy_logger_plugin, log_nothing);
    add_to_console_mask(c_legacy_logger_plugin, vl_sev );
    //set_console_mask(c_legacy_logger_plugin, log_all);
    var Severities vl_sevReal:=get_console_mask(c_legacy_logger_plugin);
    f_compareAndEvaluate(vl_sevReal,vl_sevExpected );
  }

  //pass
  testcase tc_add_to_console_mask3() runs on MTC
  {
    var Severities vl_sev:={ VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL};
    var Severities vl_sevExpected:= vl_sev;
    set_console_mask(c_legacy_logger_plugin, log_nothing);
    add_to_console_mask(c_legacy_logger_plugin, vl_sev );
    //set_console_mask(c_legacy_logger_plugin, log_all);
    var Severities vl_sevReal:=get_console_mask(c_legacy_logger_plugin);
    f_compareAndEvaluate(vl_sevReal,vl_sevExpected );
  }

  testcase tc_add_to_console_complex1() runs on MTC
  {
    var Severities vl_sevList:=log_all;
    var Severities vl_sevExpected:={ };
    var Severities vl_sev:={}
    var integer vl_nofSev:=sizeof(vl_sevList);
    var Severities vl_sevReal:={};
    log(">>>Number of tested severities:", vl_nofSev );
    var integer vl_succ:=0, vl_fail:=0;
    for(var integer i:=0; i<vl_nofSev; i:=i+1) {
      vl_sev:={ vl_sevList[i] }
      vl_sevExpected:=vl_sev;
      set_console_mask(c_legacy_logger_plugin, log_nothing);
      add_to_console_mask(c_legacy_logger_plugin, vl_sev );
      //set_console_mask(c_legacy_logger_plugin, log_all);
      vl_sevReal:=get_console_mask(c_legacy_logger_plugin);
      //test:
      set_console_mask(c_legacy_logger_plugin, {USER_UNQUALIFIED, VERDICTOP_SETVERDICT, TESTCASE_START,TESTCASE_FINISH});
      if(match(vl_sevReal, vl_sevExpected)) {
        setverdict(pass); vl_succ:=vl_succ+1;
      }else{
        setverdict(fail); 
        vl_fail:=vl_fail+1;
        log("Real: ",vl_sevReal , " Expected: ", vl_sevExpected );
      }
    }//for
    set_console_mask(c_legacy_logger_plugin, {USER_UNQUALIFIED, VERDICTOP_SETVERDICT, TESTCASE_START,TESTCASE_FINISH});
    log(">>>Statistics: total: ",vl_nofSev," success:", vl_succ, " fail: ", vl_fail)
  }

  //incementally add severities to the existing ones:
  testcase tc_add_to_console_complex2() runs on MTC
  {
    var Severities vl_sevList:=log_all;
    var Severities vl_sevExpected:={ };
    var Severities vl_sev:={}
    var integer vl_nofSev:=sizeof(vl_sevList);
    var Severities vl_sevReal:={};
    log(">>>Number of tested severities:", vl_nofSev );
    var integer vl_succ:=0, vl_fail:=0;
    for(var integer i:=0; i<vl_nofSev; i:=i+1) {
      vl_sev[i]:= vl_sevList[i];
      vl_sevExpected:=vl_sev;
      set_console_mask(c_legacy_logger_plugin, log_nothing);
      add_to_console_mask(c_legacy_logger_plugin, vl_sev );
      //set_console_mask(c_legacy_logger_plugin, log_all);
      vl_sevReal:=get_console_mask(c_legacy_logger_plugin);
      //test:
      set_console_mask(c_legacy_logger_plugin, {USER_UNQUALIFIED, VERDICTOP_SETVERDICT, TESTCASE_START,TESTCASE_FINISH});
      if(match(vl_sevReal, vl_sevExpected)) {
        setverdict(pass); vl_succ:=vl_succ+1;
      }else{
        setverdict(fail); 
        vl_fail:=vl_fail+1;
        log("Real: ",vl_sevReal , " Expected: ", vl_sevExpected );
      }
    }//for
    set_console_mask(c_legacy_logger_plugin, {USER_UNQUALIFIED, VERDICTOP_SETVERDICT, TESTCASE_START,TESTCASE_FINISH});
    log(">>>Statistics: total: ",vl_nofSev," success:", vl_succ, " fail: ", vl_fail)
  }

  testcase tc_add_to_console_complexReverse() runs on MTC
  {
    var Severities vl_sevList:=log_all;
    var Severities vl_sevExpected:={ };
    var Severities vl_sev:={}
    var integer vl_nofSev:=sizeof(vl_sevList);
    var Severities vl_sevReal:={};
    log(">>>Number of tested severities:", vl_nofSev );
    var integer vl_succ:=0, vl_fail:=0;
    for(var integer i:=0; i<vl_nofSev; i:=i+1) {
      vl_sev[i]:= vl_sevList[vl_nofSev-i-1];
      f_reverseSeverityList(vl_sev,vl_sevExpected);
      set_console_mask(c_legacy_logger_plugin, log_nothing);
      add_to_console_mask(c_legacy_logger_plugin, vl_sev );
      //set_console_mask(c_legacy_logger_plugin, log_all);
      vl_sevReal:=get_console_mask(c_legacy_logger_plugin);
      //test:
      set_console_mask(c_legacy_logger_plugin, {USER_UNQUALIFIED, VERDICTOP_SETVERDICT, TESTCASE_START,TESTCASE_FINISH});
      if(match(vl_sevReal, vl_sevExpected)) {
        setverdict(pass); vl_succ:=vl_succ+1;
      }else{
        setverdict(fail); 
        vl_fail:=vl_fail+1;
        log("Real: ",vl_sevReal , " Expected: ", vl_sevExpected );
      }
    }//for
    set_console_mask(c_legacy_logger_plugin, {USER_UNQUALIFIED, VERDICTOP_SETVERDICT, TESTCASE_START,TESTCASE_FINISH});
    log(">>>Statistics: total: ",vl_nofSev," success:", vl_succ, " fail: ", vl_fail)
  }

} //group AddToTest

testcase tc_f_reverseSeverityListNeg() runs on MTC {
  var Severities vl_sevList:={}, vl_sevReversed:={}, vl_sevExpected:={};
  vl_sevList[0]:= USER_UNQUALIFIED;
  vl_sevList[2]:=   VERDICTOP_SETVERDICT;
  f_reverseSeverityList(vl_sevList, vl_sevReversed);
  f_compareAndEvaluate(vl_sevReversed,vl_sevExpected);
}

testcase tc_f_reverseSeverityListPos() runs on MTC {
  var Severities vl_sevList:={}, vl_sevReversed:={}, vl_sevExpected:={VERDICTOP_SETVERDICT,USER_UNQUALIFIED};
  vl_sevList[0]:= USER_UNQUALIFIED;
  vl_sevList[1]:=   VERDICTOP_SETVERDICT;
  f_reverseSeverityList(vl_sevList, vl_sevReversed);
  f_compareAndEvaluate(vl_sevReversed,vl_sevExpected);
}

testcase tc_f_reverseSeverityListEmpty() runs on MTC {
  var Severities vl_sevList:={}, vl_sevReversed:={USER_UNQUALIFIED}, vl_sevExpected:={ };
  f_reverseSeverityList(vl_sevList, vl_sevReversed);
  f_compareAndEvaluate(vl_sevReversed,vl_sevExpected);
}


testcase tc_remove_from_file_mask0() runs on MTC {
  var Severities vl_sev:={TESTCASE_START,TESTCASE_FINISH, VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL,USER_UNQUALIFIED};
  var Severities vl_sevToRemove:={ }
  var Severities vl_sevExpected:= {TESTCASE_START,TESTCASE_FINISH,USER_UNQUALIFIED,VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL};
  set_file_mask(c_legacy_logger_plugin, vl_sev );

  remove_from_file_mask(c_legacy_logger_plugin,vl_sevToRemove);
  var Severities vl_sevReal:=get_file_mask(c_legacy_logger_plugin);
  f_compareAndEvaluate(vl_sevReal,vl_sevExpected);
  set_file_mask(c_legacy_logger_plugin,log_all);
}
  
testcase tc_remove_from_file_mask2() runs on MTC {
  var Severities vl_sev:={TESTCASE_START,TESTCASE_FINISH, VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL,USER_UNQUALIFIED};
  var Severities vl_sevToRemove:={VERDICTOP_GETVERDICT, USER_UNQUALIFIED}
  var Severities vl_sevExpected:={TESTCASE_START,TESTCASE_FINISH,VERDICTOP_SETVERDICT,VERDICTOP_FINAL};
  set_file_mask(c_legacy_logger_plugin, vl_sev );

  remove_from_file_mask(c_legacy_logger_plugin,vl_sevToRemove);
  var Severities vl_sevReal:=get_file_mask(c_legacy_logger_plugin);
  f_compareAndEvaluate(vl_sevReal,vl_sevExpected);
  set_file_mask(c_legacy_logger_plugin,log_all);
}

testcase tc_remove_from_console_mask0() runs on MTC {
  var Severities vl_sev:={TESTCASE_START,TESTCASE_FINISH, VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL,USER_UNQUALIFIED};
  var Severities vl_sevToRemove:={ }
  var Severities vl_sevExpected:= {TESTCASE_START,TESTCASE_FINISH,USER_UNQUALIFIED,VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL};
  set_console_mask(c_legacy_logger_plugin, vl_sev );

  remove_from_console_mask(c_legacy_logger_plugin,vl_sevToRemove);
  var Severities vl_sevReal:=get_console_mask(c_legacy_logger_plugin);
  f_compareAndEvaluate(vl_sevReal,vl_sevExpected);
  set_file_mask(c_legacy_logger_plugin,log_all);
}
  
testcase tc_remove_from_console_mask2() runs on MTC {
  var Severities vl_sev:={TESTCASE_START,TESTCASE_FINISH, VERDICTOP_GETVERDICT, VERDICTOP_SETVERDICT, VERDICTOP_FINAL,USER_UNQUALIFIED};
  var Severities vl_sevToRemove:={VERDICTOP_GETVERDICT, USER_UNQUALIFIED}
  var Severities vl_sevExpected:={TESTCASE_START,TESTCASE_FINISH,VERDICTOP_SETVERDICT,VERDICTOP_FINAL};
  set_console_mask(c_legacy_logger_plugin, vl_sev );
  remove_from_console_mask(c_legacy_logger_plugin,vl_sevToRemove);
  var Severities vl_sevReal:=get_console_mask(c_legacy_logger_plugin);
  f_compareAndEvaluate(vl_sevReal,vl_sevExpected);
  set_file_mask(c_legacy_logger_plugin,log_all);
  set_console_mask(c_legacy_logger_plugin,log_all);
}
control {

  execute(tc_plugin_positive());
  //execute(tc_plugin_negative()); //DTE!!!
  execute(tc_set_file_mask());
  execute(tc_set_console_mask());
  execute(tc_set_console_mask());
  execute(tc_set_console_maskrep());
  execute(tc_add_to_file_mask0());
  execute(tc_set_file_mask0());  
  execute(tc_add_to_file_mask1()); set_file_mask(c_legacy_logger_plugin, log_all);
  execute(tc_add_to_file_mask2());
  execute(tc_add_to_file_mask3());
  execute(tc_add_to_file_maskrep());
  execute(tc_add_to_file_complex1());
  execute(tc_add_to_file_complex1());
  execute(tc_add_to_file_complex2());
  execute(tc_add_to_file_complexReverse());
  execute(tc_add_to_console_mask1());
  execute(tc_add_to_console_mask2());
  execute(tc_add_to_console_mask3());
  execute(tc_add_to_console_maskrep());
  execute(tc_add_to_console_complex1());
  execute(tc_add_to_console_complex1());
  execute(tc_add_to_console_complex2());
  execute(tc_add_to_console_complexReverse()); 
  execute(tc_f_reverseSeverityListNeg()); 
  execute(tc_f_reverseSeverityListPos()); 
  execute(tc_f_reverseSeverityListEmpty()); 
  execute(tc_remove_from_file_mask0()); 
  execute(tc_remove_from_file_mask2()); 
  execute(tc_remove_from_console_mask0()); 
  execute(tc_remove_from_console_mask2()); 

  set_file_mask(c_legacy_logger_plugin,log_all);
  log("====LOG TEST 1 FINISHED====");
  
  var verdicttype vl_verdict:=none;
  log("====LOGLEVEL: NOTHING====");
  var Severities vl_sev:=  log_nothing;

  //TODO:
  //   execute(tc_action());
  //   execute(tc_default());
  //   vl_verdict :=execute(tc_error1());
  //   log(vl_verdict);
  //   execute(tc_ex_runtime());
  //   execute(tc_function_rnd());
  //   //execute(tc_parallel_ptc());
  //   execute(tc_parallel_portconn());
  //   execute(tc_parallel_portmap());
  //   execute(tc_portevent());
  //   execute(tc_timer());
  //   execute(tc_UserLog());
  //   execute(tc_verdict());
  //   execute(tc_matching());
  //   execute(tc_encdec());
  //   log("====LOGLEVEL: NOTHING finished====");
}

}//module
