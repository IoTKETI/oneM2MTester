/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Szabo, Bence Janos
 *
 ******************************************************************************/
module UIDCharsTest
{
    modulepar universal charstring modpar;
    modulepar universal charstring u11;

    type universal charstring MyCharStr1 (char(U+000041, U004353, U+533 ), "xyz") length (1..9);
    const MyCharStr1 str := char(U+000041, U004353, U+533);

    type universal charstring MyCharStr2 (char(U011) .. char(U+444FF4));
    const MyCharStr2 str2 := char(U111);

    type universal charstring MyCharStr3 (char(U011) .. char(U+444FF4)) length(2..9);
    const MyCharStr3 str3 := char(U11a, U+1f3) & char(U+00113f3);

    type component EmptyCT {}
    
    testcase tc_chars() runs on EmptyCT {
        var universal charstring v_a  :=  char(U+000041);  //USI notation for character "A"
        var universal charstring v_b  :=  char(U+171);  //USI notation for character "ű"
        var universal charstring v_c  :=  char(U41);    //USI notation for character "A" without leading zeroes
        var universal charstring v_d  :=  char(U171,U+00000041);  //USI notation for character "ű" and "A"  without leading zeroes and + sign notation
	    var universal charstring v_e := char (U4E2d, U56fD);
        var universal charstring v_f  :=  char(U171,U+00000041) & "a" & char(0, 0, 0 , 63) & char(U+003F);
	    var universal charstring a_exp := "A";
        var universal charstring b_exp := "ű";
	    var universal charstring c_exp := "A";
	    var universal charstring d_exp := "űA";
	    var universal charstring e_exp := "中国";
	    var universal charstring f_exp := "űAa??";

    	if (match(v_a,a_exp) and 
            match(v_b,b_exp) and
            match(v_c,c_exp) and
            match(v_d,d_exp) and
	        match(v_e,e_exp) and
	        match(v_f,f_exp))
        {
    		setverdict(pass,"v_a:",v_a, "v_b:",v_b, "v_c:",v_c,"v_d:",v_d,"v_e:",v_e,"v_f:",v_f);
    	}
    	else {
    		setverdict(fail,"v_a:",v_a, "v_b:",v_b, "v_c:",v_c,"v_d:",v_d,"v_e:",v_e,"v_f:",v_f);
    	}
    }

	testcase tc_pattern() runs on EmptyCT {
		var template universal charstring utmp := pattern "[\q{ U23425 }-\q{ U23427 }]";
        var template universal charstring utmp2 := pattern "[\q{ U23425 }-\q{ U23427 }]#(2,5)";
        var template universal charstring utmp3 := pattern "[\q{ U23425, U+23427 }]#(2,5)";
	var charstring u1 := "s";
		var universal charstring exp := char(U+23426 );
        var universal charstring exp_2 :=  char(U+23426 , U+023425,  U23427);
        var universal charstring not_exp_2 :=  char(U+23426 , U+023425,  U23429);
        var universal charstring exp_3 :=  char(U+23425 , U+023427,  U23427);

		if(match(exp, utmp) and
           match(exp_2, utmp2) and
           not match(not_exp_2, utmp2) and
           match(exp_3, utmp3)){
			setverdict(pass);		
		}else{
			setverdict(fail);
		}
	}

	testcase tc_module_param() runs on EmptyCT {
        const universal charstring exp := "CDZ";
		if(match(modpar, exp) and
		   match(u11, exp)) {
			setverdict(pass);
		} else {
			setverdict(fail);
		}
	}

    control
    {
	    execute(tc_chars());
	    execute(tc_pattern());
	    execute(tc_module_param());
    }
}

