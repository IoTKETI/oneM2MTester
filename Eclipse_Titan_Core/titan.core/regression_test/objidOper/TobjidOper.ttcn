/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *   Kovacs, Ferenc
 *   Raduly, Csaba
 *   Szabados, Kristof
 *
 ******************************************************************************/
module TobjidOper {

type component objidOper_comptype { }

external function enco(in objid oi) return octetstring
with { extension "prototype(convert) encode(BER:BER_ENCODE_DER)" }

external function deco(in octetstring oi) return objid
with { extension "prototype(convert) decode(BER:BER_ACCEPT_ALL)" }

type objid typedefbasic_myobjid;
type objid MyObjids0 (objid{itu_t(0) identified_organization(4) etsi(0)})
type objid MyObjids1 (objid{itu_t identified_organization etsi(0)})
type objid MyObjids2 (objid{0 4 0})
const integer c_etsi := 0
template integer t_etsi := 0
const objid itu_idOrg := objid{itu_t identified_organization}
const objid c_etsiMobNet := objid{itu_t identified_organization etsi(0) mobile_domain(0) umts_Network(1)}
const objid c_etsiNet := objid{itu_t identified_organization etsi(0) inDomain(1) in_Network(1)}
type objid MyObjids3 (objid{itu_idOrg c_etsi})
type objid MyObjids4 (objid{0 4 0 0}, objid{0 4 0 1})
type MyObjids4 MyObjids5
template MyObjids4 t_myobjids1 := objid{0 4 0 0}
// These should be allowed as well:
// type MyObjids MyNarrowerObjids (objid{0 4 0 0 1 0}, objid{0 4 1 1}, objid{0 4 1 3})
// type objid MyObjidRange (objid{0 4 0 0}..objid{0 4 0 5})
// But concatenation of object identifier doesn't seem to work at all...

// Lots of '1' bits
const objid c_bits := objid {
  0

  1
  3
  7
  15
  31
  63
  127
  255

  511
  1023
  2047
  4095
  8191
  16383
  32767
  65535

  131071
  262143
  524287
  1048575
  2097151
  4194303
  8388607
  16777215

  33554431
  67108863
  134217727
  268435455
  536870911
  1073741823
  2147483647
  4294967295
//  4294967296 is too big
//  8589934592
};

// Powers of two
const objid c_pow2 := objid {
  1
  2
  4
  8
  16
  32
  64
  128
  256

  512
  1024
  2048
  4096
  8192
  16384
  32768
  65536

  131072
  262144
  524288
  1048576
  2097152
  4194304
  8388608
  16777216

  33554432
  67108864
  134217728
  268435456
  536870912
  1073741824
  2147483648

//  4294967296 is too big
//  8589934592
};

const objid c_0_1_infinity // for small values of infinity
   := objid { 0 1 4294967295 }

const octetstring expected := '0606018FFFFFFF7F'O

// encoding of { 0 1 70368744177663 } a.k.a. { 0 1 0x3FFFFFFFFFFF }
const octetstring bigger  := '0608018FFFFFFFFFFF7F'O


testcase objidSubtypes() runs on objidOper_comptype {
  if (c_etsiMobNet != c_etsiNet) { setverdict(pass) }
  else { setverdict(fail) }
}

external function indexer(in objid o, in integer idx) return integer;

testcase encdec() runs on objidOper_comptype
{
  var octetstring os := enco(c_0_1_infinity);
  //action(os);
  if (os == expected) { setverdict(pass); }
  else { setverdict(fail, match(os, expected)); }

  var objid oi := deco(expected);
  //action(oi);
  if (oi == c_0_1_infinity) { setverdict(pass); }
  else { setverdict(fail, match(oi, c_0_1_infinity)); }

  // Decode the bigger objid. The value will overflow and it will be clamped
  // to 2**32-1 (4294967295) as long as objid is limited to 32bits.
  oi := deco(bigger);
  action(oi);

  if (sizeof(oi) != sizeof(c_0_1_infinity)) {
    setverdict(fail, "Number of objid components: ",
      match(sizeof(oi), sizeof(c_0_1_infinity)))
  }
  else {
    // All components should look equal
    for (var integer i := 0; i < sizeof(oi); i := i + 1) {
      if (indexer(oi, i) == indexer(c_0_1_infinity, i)) { /*setverdict(pass);*/ }
      else {
        setverdict(fail, "Mismatch at ", i, ": ",
          match(indexer(oi, i), indexer(c_0_1_infinity, i)));
      }
    }
  }
  
  // However, the (decoded) oi has an overflow whereas c_0_1_infinity does not,
  // therefore they (should) compare as not equal.
  if (oi != c_0_1_infinity) { setverdict(pass, match(oi, c_0_1_infinity)); }
  else { setverdict(fail, match(oi, c_0_1_infinity)); }

  os := enco(c_bits);
  oi := deco(os);

  if (sizeof(oi) != sizeof(c_bits)) {
    setverdict(fail, "Number of objid components: ",
      match(sizeof(oi), sizeof(c_bits)))
  }
  else {
    // All components should look equal
    for (var integer i := 0; i < sizeof(oi); i := i + 1) {
      if (indexer(oi, i) == indexer(c_bits, i)) { /*setverdict(pass);*/ }
      else {
        setverdict(fail, "Mismatch at ", i, ": ",
          match(indexer(oi, i), indexer(c_bits, i)));
      }
    }
  }

  os := enco(c_pow2);
  oi := deco(os);

  if (sizeof(oi) != sizeof(c_pow2)) {
    setverdict(fail, "Number of objid components: ",
      match(sizeof(oi), sizeof(c_pow2)))
  }
  else {
    // All components should look equal
    for (var integer i := 0; i < sizeof(oi); i := i + 1) {
      if (indexer(oi, i) == indexer(c_pow2, i)) { /*setverdict(pass);*/ }
      else {
        setverdict(fail, "Mismatch at ", i, ": ",
          match(indexer(oi, i), indexer(c_pow2, i)));
      }
    }
  }
  
}

testcase objidWithVars() runs on objidOper_comptype
{
  var integer v1 := 1;
  var integer v2 := 20;
  var integer v3 := 300;
  var integer v4 := -87;
  const integer c1 := 0;
  var objid o1 := objid { c1 v1 };

  if (o1 == objid { 0 1 }) { setverdict(pass); }
  else { setverdict(fail, o1, " != ", objid { 0 1 }); }

  if (objid { c1 3 v2 } == objid { 0 3 20 }) { setverdict(pass); }
  else { setverdict(fail, objid { c1 3 v2 }, " != ", objid { 0 3 20 }); }

  if (objid { c1 2 3 } == objid { 0 2 3 }) { setverdict(pass); }
  else { setverdict(fail, objid { c1 2 3 }, " != ", objid { 0 2 3 }); }

  var objid o2 := objid { 0 v1 };
  if (o1 == o2) { setverdict(pass); }
  else { setverdict(fail, o1, " != ", o2); }

  @try {
    var objid o_bad := objid { v1 v2 v3 v4 };
    setverdict(fail, "error expected when creating ", objid { v1 v2 v3 v4 });
  }
  @catch (msg) {
    if (match(msg, pattern "*Dynamic test case error: An OBJECT IDENTIFIER component cannot be negative")) { setverdict(pass); }
    else { setverdict(fail, "unexpected error: ", msg); }
  }

  var template objid to1 := (objid { 0 1 6 }, objid { v1 6 v3 });

  if (match(objid { 1 6 v3 }, to1)) { setverdict(pass); }
  else { setverdict(fail, objid { 1 6 v3 }, " doesn't match ", to1); }

  if (match(objid { 1 2 3 }, to1)) { setverdict(fail, objid { 1 2 3 }, " matches ", to1); }
  else { setverdict(pass); }
}

control {
  execute(objidSubtypes());
  execute(encdec());
  execute(objidWithVars());
}

}
