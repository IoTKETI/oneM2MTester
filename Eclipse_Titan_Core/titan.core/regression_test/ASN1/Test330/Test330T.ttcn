/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Kulcsar, Endre
 *   Szabados, Kristof
 *
 ******************************************************************************/
module Test330T
{

import from Test330A all;
/*
// start of simulated import from ASN
//note : the following commented out section should be equivalent to
//the sequences imported from ASN1
type union MyUnion {
        boolean bOOLEAN ,
        bitstring bIT_STRING ,
	octetstring oCTET_STRING }

type record MyExampleMessageType1
{
integer field1 ,  //Type

MyUnion field2

}
//end of simulated import from ASN
*/

template MyExampleMessageType1 myExampleMessage1 :=
{
field1 := ?,

field2 := ?
}

template MyExampleMessageType1 myExampleMessage2 :=
{
field1 := *,

field2 := *
}

template MyExampleMessageType1 myExampleMessage3 :=
{
field1 := 10,

field2 := {bOOLEAN := true}  // bOOLEAN????
}

//*********************************************

const MyExampleMessageType1 myExampleMessage4 :=
{
field1 := 6,  // has to be integer

field2 := {bOOLEAN := true}  // bOOLEAN????
}

const MyExampleMessageType1 myExampleMessage5 :=
{
field1 := 6,  // has to be integer

field2 := {bIT_STRING := '001100'B}  //bIT_STRING????
}

const MyExampleMessageType1 myExampleMessage6 :=
{
field1 := 6,  // has to be integer

field2 := {oCTET_STRING := '1234567890ABCDEF'O} //oCTET_STRING???
}

//*********************************************

type port MyPort message
{
inout MyType
} with { extension "internal" }

type record MyType
{
MyExampleMessageType1 firstfield
}

template MyType myMessage(template MyExampleMessageType1 par_MyExampleMessageType1) :=
{
firstfield := par_MyExampleMessageType1
}

type component MyMainComponent
    {
      port MyPort M_PCO;
    }

type component MyParallelComponent
    {
      port MyPort P_PCO;
    }

function handle_msg_on_ptc() runs on MyParallelComponent
{

// AS  PARAMETER *********************************************
P_PCO.receive (myMessage(myExampleMessage1))
setverdict ( pass );

P_PCO.receive (myMessage(myExampleMessage2))
setverdict ( pass );

P_PCO.receive (myMessage(myExampleMessage3))
setverdict ( pass );

P_PCO.receive (myMessage(myExampleMessage4))
setverdict ( pass );

P_PCO.receive (myMessage(myExampleMessage5))
setverdict ( pass );

P_PCO.receive (myMessage(myExampleMessage6))
setverdict ( pass );

P_PCO.receive (myMessage(myExampleMessage1))
setverdict ( pass );

} // end of function

testcase Test() runs on MyMainComponent
{

// AS A VARIABLE *********************************************
var MyExampleMessageType1 myExampleMessage7 := myExampleMessage4

var MyParallelComponent myparallelcomponent := MyParallelComponent.create;
connect ( mtc:M_PCO, myparallelcomponent: P_PCO );
 myparallelcomponent.start(handle_msg_on_ptc());

// AS A PARAMETER *********************************************
M_PCO.send(myMessage(myExampleMessage3))

M_PCO.send(myMessage(myExampleMessage3))

M_PCO.send(myMessage(myExampleMessage3))

M_PCO.send(myMessage(myExampleMessage4))

M_PCO.send(myMessage(myExampleMessage5))

M_PCO.send(myMessage(myExampleMessage6))

M_PCO.send(myMessage(myExampleMessage7))

myparallelcomponent.done;
}

control
    {
    execute (Test())
    }

}  // end of module
