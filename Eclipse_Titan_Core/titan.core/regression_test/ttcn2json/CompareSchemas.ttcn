/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *
 ******************************************************************************/

// This module compares two JSON schemas generated by the TITAN compiler
module CompareSchemas {

//////////////////////////////////////
// JSON schema container data types //
//////////////////////////////////////

// top level object
type record JsonSchema {
  DefSchemas defs,
  RefSchemas refs
}

// definitions section:
type set of DefSchema DefSchemas;

type record DefSchema {
  charstring moduleName,
  charstring typeName,
  TypeSchema schema
}

type set of TypeSchemaElement TypeSchema;

type record TypeSchemaElement {
  ElemKey key,
  ElemValue val
}

type enumerated ElemKey {
  Ref, Type, SubType, Pattern, OriginalName, UnusedAlias, MinItems, MaxItems, MinLength, MaxLength, Minimum, Maximum, // strVal
  AdditionalProperties, OmitAsNull, exclusiveMinimum, exclusiveMaximum, // boolVal
  Default, // strVal or boolVal
  NumericValues, Required, FieldOrder, // strArrayVal
  Enum, ValueList, // arrayVal
  Items, // typeVal
  AnyOf, AllOf, // typeArrayVal
  Properties, // fieldSetVal
  Extension // extVal
}

type union ElemValue {
  charstring strVal,
  boolean boolVal,
  record of charstring strArrayVal,
  TypeSchema typeVal,
  record of TypeSchema typeArrayVal,
  set of FieldValue fieldSetVal,
  ExtensionValue extVal,
  ArrayValue arrayVal
}

type record FieldValue {
  charstring fieldName,
  TypeSchema schema
}

type record ExtensionValue {
  charstring key,
  charstring val
}

type union AnyValue {
  charstring strVal, // number, string or null
  boolean boolVal,
  ObjectValue objectVal,
  ArrayValue arrayVal
}

type record ObjectSegment {
  charstring key,
  AnyValue val
}

type set of ObjectSegment ObjectValue;

type record of AnyValue ArrayValue;

// references/functions section:
type set of RefSchema RefSchemas;

type record RefSchema {
  charstring ref,
  EncDecData enc optional,
  EncDecData dec optional
}

type record EncDecData {
  PrototypeData prototype,
  ErrorBehaviorData eb optional,
  charstring printing optional
}

type record of charstring PrototypeData;

type record of ErrorBehaviorElem ErrorBehaviorData;

type record ErrorBehaviorElem {
  charstring errorType,
  charstring errorBehavior
}

//////////////////////////////////
// Import and compare functions //
//////////////////////////////////

// Imports a JSON schema from the given file and stores it in the specified container.
// Throws a Dynamic Testcase Error if the file cannot be read or does not have the correct format.
// The resulting JsonSchema should not have any unbound fields.
external function f_ext_import_schema(in charstring file, out JsonSchema schema);

// Compares the two schemas found in the files specified by the parameters.
// Returns true if they are equal.
function f_compare_schemas(in charstring schema_file1, in charstring schema_file2) return boolean
{
  // read the schemas from the files
  var JsonSchema schema1;
  f_ext_import_schema(schema_file1, schema1);
  var JsonSchema schema2;
  f_ext_import_schema(schema_file2, schema2);

  // log both schemas (good luck digging through these...)
  //log("Generated (", schema_file1, "): ", schema1);
  //log("Expected (", schema_file2, "): ", schema2);

  // set the verdict depending on their equality
  if (match(schema1, schema2)) {
    return true;
  }
  log(match(schema1, schema2));
  return false;
}

}
