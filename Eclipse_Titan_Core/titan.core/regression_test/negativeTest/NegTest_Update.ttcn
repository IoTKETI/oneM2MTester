/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Baranyi, Botond
 *
 ******************************************************************************/

// This module tests the '@update' statement, which changes the erroneous
// attributes of constants and templates.
module NegTest_Update {

import from NegTest_JSON all;

/************* Erroneous constants **************/
const IntList c1 := { 1, 3, 5, 7, 9 } with { erroneous([2]) "value := 99" }
const Rec c2 := { num := 3, str := "abc" } with { erroneous(num) "value := float: 3.0" }
const Uni c3 := { list := { 10, 20 } } // not erroneous initially

/************* Erroneous templates **************/
template IntListList t1 := { { 1, 2, 3 }, { 10, 20, 30 }, { 100, 200, 300 } } with { erroneous([1][0]) "after := omit all"; erroneous([2][2]) "before := omit all" };
template Set t2 := { list := { 0, 3, 6 }, rec := { num := 100, str := "aeiou" }, b := true };
template Uni2 t3 := { i := 10 } with { erroneous(i) "value := charstring: \"ten\"" };

template IntList t_pard1(integer p) := { 0, p } with { erroneous([1]) "value := Rec: { num := 0, str := \"xy\" }" };
template Rec t_pard2(template integer p) := { num := p, str := "p" } with { erroneous(num) "after := omit all" };
template Uni t_pard3(template Uni p) := p;

/******* Test cases for local constants *********/
testcase tc_update_const_change() runs on CT {
  @update(c1) with { erroneous([1]) "before := omit all" }
  var octetstring res := f_enc_il(c1);
  if (char2oct("[3,5,7,9]") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

testcase tc_update_const_remove() runs on CT {
  @update(c2); // removes the erroneous attributes
  var octetstring res := f_enc_r(c2);
  if (char2oct("{\"num\":3,\"str\":\"abc\"}") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

testcase tc_update_const_add() runs on CT {
  @update(c3) with { erroneous(list[1]) "value := Rec: { num := 0, str := \"xy\" }" }
  var octetstring res := f_enc_u(c3);
  if (char2oct("{\"list\":[10,{\"num\":0,\"str\":\"xy\"}]}") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

testcase tc_update_const_reset() runs on CT {
  @update(c3);
  var octetstring res := f_enc_u(c3);
  if (char2oct("{\"list\":[10,20]}") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

/******* Test cases for local templates *********/
testcase tc_update_temp_change() runs on CT {
  @update(t1) with { erroneous([1]) "value := charstring: \"aaaa\""; erroneous([2]) "after := il4" /* from the imported module */ };
  var octetstring res := f_enc_ill(valueof(t1));
  if (char2oct("[[1,2,3],\"aaaa\",[100,200,300],[4,5,false,6]]") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

testcase tc_update_temp_add() runs on CT {
  @update(t2) with { erroneous(rec.str) "value := omit" };
  var octetstring res := f_enc_s(valueof(t2));
  if (char2oct("{\"list\":[0,3,6],\"rec\":{\"num\":100},\"b\":true}") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

testcase tc_update_temp_remove() runs on CT {
  @update(t3);
  var octetstring res := f_enc_u2(valueof(t3));
  if (char2oct("10") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

testcase tc_update_temp_readd() runs on CT {
  @update(t3) with { erroneous(i) "value := float: 123.456" };
  var octetstring res := f_enc_u2(valueof(t3));
  if (char2oct("123.456000") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

/* Test cases for local parameterized templates */
testcase tc_update_temp_pard_change() runs on CT {
  @update(t_pard1) with { erroneous([0]) "after := IntList: { 1, 2, 4 }" };
  var octetstring res := f_enc_il(valueof(t_pard1(7)));
  if (char2oct("[0,[1,2,4],7]") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

testcase tc_update_temp_pard_remove() runs on CT {
  @update(t_pard2);
  var octetstring res := f_enc_r(valueof(t_pard2(-9)));
  if (char2oct("{\"num\":-9,\"str\":\"p\"}") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

testcase tc_update_temp_pard_add() runs on CT {
  @update(t_pard3) with { erroneous(i) "value := float: 0.123456" };
  var octetstring res := f_enc_u(valueof(t_pard3(Uni: { i := 700 })));
  if (char2oct("{\"i\":0.123456}") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

testcase tc_update_temp_pard_reset() runs on CT {
  @update(t_pard3);
  var octetstring res := f_enc_u(valueof(t_pard3(Uni: { i := 700 })));
  if (char2oct("{\"i\":700}") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

/* Test cases for imported constants and templates */
testcase tc_update_imported_const_change() runs on CT {
  @update(c_imp) with { erroneous([1]) "before := omit all" };
  var octetstring res := f_enc_il(c_imp);
  if (char2oct("[12,23,34]") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

testcase tc_update_imported_temp_add() runs on CT {
  @update(t_imp) with { erroneous(str) "value := \"bye\"" };
  var octetstring res := f_enc_r(valueof(t_imp));
  if (char2oct("{\"num\":10,\"str\":\"bye\"}") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

testcase tc_update_imported_temp_pard_remove() runs on CT {
  @update(t_imp_pard);
  var octetstring res := f_enc_u2(valueof(t_imp_pard(il2 /* from the imported module */)));
  if (char2oct("[0,1,2]") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

testcase tc_update_imported_temp_pard_readd() runs on CT {
  @update(t_imp_pard) with { erroneous(list[0]) "after := omit all" };
  var octetstring res := f_enc_u2(valueof(t_imp_pard(il2)));
  if (char2oct("[0]") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

/* Test case for using '@update' in an interleave statement */
testcase tc_update_in_interleave() runs on CT {
  var octetstring res1, res2;
  timer tmr1, tmr2;
  tmr1.start(0.5);
  tmr2.start(0.5);
  interleave {
    [] tmr1.timeout {
      @update(t1) with { erroneous([1][0]) "after := omit all"; erroneous([2][2]) "before := omit all" };
      res1 := f_enc_ill(valueof(t1));
    }
    [] tmr2.timeout {
      @update(c_imp) with { erroneous([3]) "value := 234" };
    }
  }
  res2 := f_enc_il(c_imp);
  if (char2oct("[[1,2,3],[10],[300]]") == res1 and
      char2oct("[1,12,23,234]") == res2) {
    setverdict(pass);
  }
  else {
    setverdict(fail, res1, " ", res2);
  }
}

/* Test cases with dynamic values in attribute specs */
testcase tc_update_const_change_dynamic() runs on CT {
  var integer v := 17;
  @update(c1) with { erroneous([1]) "value := v"; erroneous([4]) "value := 2 * v - 5" }
  var octetstring res := f_enc_il(c1);
  if (char2oct("[1,17,5,7,29]") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

function f_return_list(in integer p) return IntList {
  var IntList ret_val;
  for (var integer i := 0; i < p; i := i + 1) {
    ret_val[i] := i;
  }
  return ret_val;
}

testcase tc_update_temp_change_dynamic() runs on CT {
  var Rec v := { num := 6, str := "something" };
  @update(t2) with { erroneous(list) "value := v"; erroneous(rec) "value := f_return_list(6)" }
  var octetstring res := f_enc_s(valueof(t2));
  if (char2oct("{\"list\":{\"num\":6,\"str\":\"something\"},\"rec\":[0,1,2,3,4,5],\"b\":true}") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

testcase tc_update_imported_temp_pard_change_dynamic() runs on CT {
  var IntList v := { 2, 4, 8, 16 };
  @update(t_imp_pard) with { erroneous(list) "value := f_return_list(v[1]) & { v[2] } & v" }
  var octetstring res := f_enc_u2(valueof(t_imp_pard(v)));
  if (char2oct("[0,1,2,3,8,2,4,8,16]") == res) { setverdict(pass); }
  else { setverdict(fail, res); }
}

/*************** Control part ***************/
control {
  execute(tc_update_const_change());
  execute(tc_update_const_remove());
  execute(tc_update_const_add());
  execute(tc_update_const_reset());
  execute(tc_update_temp_change());
  execute(tc_update_temp_add());
  execute(tc_update_temp_remove());
  execute(tc_update_temp_readd());
  execute(tc_update_temp_pard_change());
  execute(tc_update_temp_pard_remove());
  execute(tc_update_temp_pard_add());
  execute(tc_update_temp_pard_reset());
  execute(tc_update_imported_const_change());
  execute(tc_update_imported_temp_add());
  execute(tc_update_imported_temp_pard_remove());
  execute(tc_update_imported_temp_pard_readd());
  execute(tc_update_in_interleave());
  execute(tc_update_const_change_dynamic());
  execute(tc_update_temp_change_dynamic());
  execute(tc_update_imported_temp_pard_change_dynamic());
}

}
