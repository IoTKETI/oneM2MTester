/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Raduly, Csaba
 *
 ******************************************************************************/
module AnyUser {

import from AnytypeTest all;

type record of integer address;
type float AT_integer; // there's an AT_integer in AnytypeTest
type charstring universal_charstring;
type record of anytype rof_any;
type integer AT_INTEGER;

type component AU {}

testcase tc_au() runs on AU
{
  var AnytypeTest.other_anytype oa;
  oa.integer := 3;

  var anytype myany;
  myany.other_anytype.charstring := "How's that?"
  // Be very careful and check each stop
  if (ischosen(myany.other_anytype)) { setverdict(pass); }
  else { setverdict(fail); }
  if (ischosen(myany.other_anytype.charstring)) // HM33408
  { setverdict(pass); } else { setverdict(fail); }

  // Testing a field of a user-defined type in the "remote" anytype
  if (ischosen(myany.other_anytype.level4)) { setverdict(fail); }
  else { setverdict(pass); }

  myany.AT_integer := 0.5;
  if (ischosen(myany.other_anytype)) { setverdict(fail, "Should not be other_anytype anymore"); }
  else { setverdict(pass); }
  if (ischosen(myany.AT_integer)) { setverdict(pass); }
  else { setverdict(fail); }

  myany.rof_string := { "There can be only one" }
  if (ischosen(myany.rof_string)) { setverdict(pass); }
  else { setverdict(fail); }

  myany.universal charstring := char(0,0,0,193) & "RV" & char(0,0,0,205) & "Z";
  if (ischosen(myany.universal charstring)) { setverdict(pass); }
  else { setverdict(fail); }

  var rof_any anys := { { universal_charstring := "The answer: 42" } }
  if (ischosen(anys[0].universal_charstring)) { setverdict(pass); }
  else { setverdict(fail); }

  anys[0].other_anytype := { charstring := "xxx" }
  if (ischosen(anys[0].other_anytype.charstring)) // HM33408
  { setverdict(pass); } else { setverdict(fail); }
  if (ischosen(anys[0].other_anytype.level4)) { setverdict(fail); }
  else { setverdict(pass); }
}

control {
  execute(tc_au());
}

}
with {
// extension "anytype" is cumulative
extension "anytype rof_string, other_anytype" // both from AnytypeTest
extension "anytype integer, universal charstring"
extension "anytype AT_integer" // this is our (non-integer) AT_integer
extension "anytype AT_INTEGER" // test that there is no clash with
//                                the generated field accessor for integer
extension "anytype universal_charstring" // HM33256
}

