/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *
 ******************************************************************************/
// This module tests the following functions for UTF-16:
// oct2unichar
// unichar2oct
// get_stringencoding
module UTF16Testcases {

import from Common all;


//============== Testcases ===========================

// === get_stringencoding test ======
testcase tc_get_stringencoding_UTF16() runs on MTC {
  f_check_string_encoding('FEFF01'O, "UTF-16BE" );
  //f_check_string_encoding('FFFE0000'O, "UTF-16LE" );
  f_check_string_encoding('FEFF0000'O, "UTF-16BE" );
}

//testcase tc_get_stringencoding_UTF16_buggy() runs on MTC {
//  f_check_string_encoding('FFFE0000'O, "UTF-16LE" );
//}

// === tc_oct2unichar =====

testcase tc_oct2unichar_UTF16_negative_01() runs on MTC {

  f_oct2unichar_negativetest(
    inputOs := 'FEFF01'O,
    encType := "UTF-16BE",
    expectedErrorMsg := "Wrong UTF-16 string. The number of bytes \(3\) in octetstring shall be non negative and divisible by 2"
  );  
}


//too large 2
testcase tc_oct2unichar_UTF16_negative_D800() runs on MTC {  
  f_oct2unichar_negativetest(
    inputOs :=  'FEFFD800'O,
    encType := "UTF-16BE",
    expectedErrorMsg := "Wrong UTF-16 string. The decoding algorythm does not expect 0x00 or EOL"
  );
}

testcase tc_oct2unichar_UTF16_negative_D80000() runs on MTC {  
  f_oct2unichar_negativetest(
    inputOs :=  'FEFFD80000'O,
    encType := "UTF-16BE",
    expectedErrorMsg := "Wrong UTF-16 string. The number of bytes \(5\) in octetstring shall be non negative and divisible by 2"
  );
}

testcase tc_oct2unichar_UTF16_negative_D8000000() runs on MTC {  
  f_oct2unichar_negativetest(
    inputOs :=  'FEFFD8000000'O,
    encType := "UTF-16BE",
    expectedErrorMsg := "Wrong UTF-16 string. The decoding algorythm does not expect 0x00 or EOL"
  );
}

testcase tc_oct2unichar_UTF16_negative_toobig() runs on MTC {  
  f_oct2unichar_negativetest(
    inputOs :=  'FEFFD800FFFF'O,
    encType := "UTF-16BE",
    expectedErrorMsg := "Wrong UTF-16 string. The word \(0xFFFF\) shall be between 0xDC00 and 0xDFFF"
  );
}
//0000..D7FF UTF-16BE converting octetstring to unicode and converting back
testcase tc_oct2unichar_UTF16_BMP() runs on MTC {

  var integer L := 0;
  var integer N := oct2int('D7FF'O)
  for(var integer i:=L;i<=N;i:=i+55) {   

    f_oct2unichar_positivetest(
      inputOs :=  c_BOM_UTF16BE & int2oct(i,2),
      encType := "UTF-16",
      expectedUCS := int2unichar(i),
      expectedEncType := "UTF-16BE"
    )

  }
}
//0000..D7FF UTF-16BE converting octetstring to unicode and converting back
testcase tc_oct2unichar_UTF16BE_BMP() runs on MTC {

  var integer L := 0;
  var integer N := oct2int('D7FF'O)
  for(var integer i:=L;i<=N;i:=i+129) {   

    f_oct2unichar_positivetest(
      inputOs :=  c_BOM_UTF16BE & int2oct(i,2),
      encType := "UTF-16BE",
      expectedUCS := int2unichar(i),
      expectedEncType := "UTF-16BE"
    )

  }
}


//0000..D7FF UTF-16BE converting octetstring to unicode and converting back
testcase tc_oct2unichar_UTF16LE_BMP() runs on MTC {
  var integer L := 0;
  var integer N := oct2int('D7FF'O)
  var octetstring o := ''O;

  for(var integer i:=L;i<=N;i:=i+129) {
    o:=int2oct(i,2);
    if(f_changeOrder(o)==false) {setverdict(fail); break}

    f_oct2unichar_positivetest(
      inputOs :=  c_BOM_UTF16LE & o,
      encType := "UTF-16LE",
      expectedUCS := int2unichar(i),
      expectedEncType := "UTF-16LE"
    )

  }

}

testcase tc_oct2unichar_UTF16_Z() runs on MTC {
  var octetstring o := '007A'O;
  var universal charstring u:= char(0,0,0,122);
  f_oct2unichar_positivetest(
    inputOs :=  o,
    encType := "UTF-16",
    expectedUCS := u,
    expectedEncType := "UTF-16BE",
    expectedOs :=c_BOM_UTF16BE & o
  );

}

testcase tc_oct2unichar_UTF16BE_Z() runs on MTC {
  var octetstring o := c_BOM_UTF16BE & '007A'O;
  var universal charstring u:= char(0,0,0,122);
  f_oct2unichar_positivetest(
    inputOs :=  o,
    encType := "UTF-16",
    expectedUCS := u,
    expectedEncType := "UTF-16BE",
    expectedOs :=o
  );

}

testcase tc_oct2unichar_UTF16LE_Z() runs on MTC {
  var octetstring o := c_BOM_UTF16LE & '7A00'O;
  var universal charstring u:= char(0,0,0,122);
  f_oct2unichar_positivetest(
    inputOs :=  o,
    encType := "UTF-16LE",
    expectedUCS := u,
    expectedEncType := "UTF-16LE",
    expectedOs :=o
  );

}

testcase tc_oct2unichar_UTF16_water() runs on MTC {
  var octetstring o := '6C34'O;
  var universal charstring u:= char(0,0,108,52);
  f_oct2unichar_positivetest(
    inputOs :=  o,
    encType := "UTF-16",
    expectedUCS := u,
    expectedEncType := "UTF-16BE",
    expectedOs :=c_BOM_UTF16BE & o
  );

}

testcase tc_oct2unichar_UTF16_linearb() runs on MTC {
  var octetstring o := 'D800DC00'O;
  var universal charstring u:= char(0,1,0,0);
  f_oct2unichar_positivetest(
    inputOs :=  o,
    encType := "UTF-16",
    expectedUCS := u,
    expectedEncType := "UTF-16BE",
    expectedOs :=c_BOM_UTF16BE & o
  );
}

// unichar2oct test

testcase tc_unichar2oct_positive1() runs on MTC {
  var integer i:= 1;
  var universal charstring u :=int2unichar(i);
  f_unichar2oct_positivetest(u,"UTF-16", c_BOM_UTF16BE & int2oct(i,2))
  f_unichar2oct_positivetest(u,"UTF-16BE", c_BOM_UTF16BE & int2oct(i,2));
  var octetstring o:= int2oct(i,2);
  f_changeOrder(o);
  f_unichar2oct_positivetest(u,"UTF-16LE", c_BOM_UTF16LE & o);
}

testcase tc_unichar2oct_positive2() runs on MTC {
  var integer i:= 1;
  var universal charstring u :=int2unichar(i);
  f_unichar2oct_positivetest(u,"UTF-16", c_BOM_UTF16BE & int2oct(i,2))
  f_unichar2oct_positivetest(u,"UTF-16BE", c_BOM_UTF16BE & int2oct(i,2));
  var octetstring o:= int2oct(i,2);
  f_changeOrder(o);
  f_unichar2oct_positivetest(u,"UTF-16LE", c_BOM_UTF16LE & o);
}

// check if an expression can be passed
testcase tc_unichar2oct_0to80() runs on MTC {
  var universal charstring u;
  var integer L := oct2int('0000'O);
  var integer N := oct2int('0080'O);
  for( var integer i:=L;i<=N; i:=i+8) {
    u:=int2unichar(i);
    log("i:",i,"\tu:",u);
    log("UTF-8   : ",unichar2oct(int2unichar(i),"UTF-8"));
    log("UTF-16  : ",unichar2oct(int2unichar(i),"UTF-16"));
    log("UTF-16BE: ",unichar2oct(int2unichar(i),"UTF-16BE"));
    log("UTF-16LE: ",unichar2oct(int2unichar(i),"UTF-16LE"));
    log("UTF-32  : ",unichar2oct(int2unichar(i),"UTF-32"));
    log("UTF-32BE: ",unichar2oct(int2unichar(i),"UTF-32BE"));
    log("UTF-32LE: ",unichar2oct(int2unichar(i),"UTF-32LE"));
  }
  setverdict(pass);
}

//check if the conversion failed or not
testcase tc_unichar2octAndReverse_0toD7FF() runs on MTC {
  var universal charstring u;
  var integer L := oct2int('0000'O);
  var integer N := oct2int('D7FF'O);
  for( var integer i:=L;i<=N; i:=i+1025) {
    u:=int2unichar(i);
    log("===== i:",i,"\tu:",u,"=====");
    f_unichar2octAndReverse(u, "UTF-8");
    f_unichar2octAndReverse(u, "UTF-16");
    f_unichar2octAndReverse(u, "UTF-16BE");
    f_unichar2octAndReverse(u, "UTF-16LE"); //Dynamic test case error: The detected coding type(UTF-32LE) does not match the expected one(UTF-16LE)
    f_unichar2octAndReverse(u, "UTF-32");
    f_unichar2octAndReverse(u, "UTF-32BE");
    f_unichar2octAndReverse(u, "UTF-32LE");   
  }
  setverdict(pass);
}


testcase tc_unichar2octAndReverse_E000toFFFF () runs on MTC {
  var universal charstring u;
  var integer L := oct2int('E000'O);
  var integer N := oct2int('FFFF'O);
  for( var integer i:=L;i<=N; i:=i+1025) {
    u:=int2unichar(i);
    log("===== i:",i,"\tu:",u,"=====");
    f_unichar2octAndReverse(u, "UTF-8");
    f_unichar2octAndReverse(u, "UTF-16");
    f_unichar2octAndReverse(u, "UTF-16BE");
    //f_unichar2octAndReverse(u, "UTF-16LE"); Dynamic test case error: The detected coding type(UTF-32LE) does not match the expected one(UTF-16LE)
    f_unichar2octAndReverse(u, "UTF-32");
    f_unichar2octAndReverse(u, "UTF-32BE");
    f_unichar2octAndReverse(u, "UTF-32LE");   
  }
  setverdict(pass);
}

testcase tc_unichar2octAndReverse_10000to10FFFF() runs on MTC {
  var universal charstring u;
  var integer L := oct2int('010000'O);
  var integer N := oct2int('10FFFF'O);
  for( var integer i:=L;i<=N; i:=i+256*256+1) {
    u:=int2unichar(i);
    log("===== i:",i,"\tu:",u,"=====");
    f_unichar2octAndReverse(u, "UTF-8");
    f_unichar2octAndReverse(u, "UTF-16");
    f_unichar2octAndReverse(u, "UTF-16BE");
    f_unichar2octAndReverse(u, "UTF-16LE");
    f_unichar2octAndReverse(u, "UTF-32");
    f_unichar2octAndReverse(u, "UTF-32BE");
    f_unichar2octAndReverse(u, "UTF-32LE");
  }
  setverdict(pass);
}
//external function f_enc(in integer i, out octetstring o)
//  with { extension "prototype(fast)"; extension "encode(XER)"}


// expected result is checked
testcase tc_unichar2oct_utf16_0toD7FF() runs on MTC {
  var universal charstring u;
  var integer L := oct2int('0000'O);
  var integer N := oct2int('D7FF'O);
  for( var integer i:=L;i<=N; i:=i+255) {
    u:=int2unichar(i);
    log("i:",i,"\tu:",u);

    f_unichar2oct_positivetest(u,"UTF-16", c_BOM_UTF16BE & int2oct(i,2))
    f_unichar2oct_positivetest(u,"UTF-16BE", c_BOM_UTF16BE & int2oct(i,2));
    var octetstring o:= int2oct(i,2);
    f_changeOrder(o);
    f_unichar2oct_positivetest(u,"UTF-16LE", c_BOM_UTF16LE & o);   
  }
  setverdict(pass);
}


testcase tc_unichar2oct_utf16_asciistring() runs on MTC {
  //var universal charstring us1 :="ÃrvÃ­ztÅ±rÅ tÃ¼kÃ¶rfÃºrÃ³gÃ©p"
  var universal charstring us1 := c_arvizturo;
  //var charstring cs1 := "ÃrvÃ­ztÅ±rÅ tÃ¼kÃ¶rfÃºrÃ³gÃ©p";
  var universal charstring us2 :="Steve Jobs likes the Apple"

  f_unichar2oct_positivetest(
    u := us1,
    encodingType:="UTF-16",
    expectedResult := f_ucharstring2utf16BE(us1)
  )

  f_unichar2oct_positivetest(
    u := us2,
    encodingType:="UTF-16",
    expectedResult := f_ucharstring2utf16BE(us2)
  )

}

testcase tc_unichar2oct_utf16BE_asciistring() runs on MTC {
  //var universal charstring us1 :="ÃrvÃ­ztÅ±rÅ tÃ¼kÃ¶rfÃºrÃ³gÃ©p"
  var universal charstring us1 := c_arvizturo;
  //var charstring cs1 := "ÃrvÃ­ztÅ±rÅ tÃ¼kÃ¶rfÃºrÃ³gÃ©p";
  var universal charstring us2 :="Steve Jobs likes the Apple"


  f_unichar2oct_positivetest(
    u := us1,
    encodingType:="UTF-16BE",
    expectedResult := f_ucharstring2utf16BE(us1)
  )

  f_unichar2oct_positivetest(
    u := us2,
    encodingType:="UTF-16BE",
    expectedResult := f_ucharstring2utf16BE(us2)
  )

}

testcase tc_unichar2oct_utf16LE_asciistring() runs on MTC {

  //var universal charstring us1 :="ÃrvÃ­ztÅ±rÅ tÃ¼kÃ¶rfÃºrÃ³gÃ©p"
  var universal charstring us1 := c_arvizturo;
  //var charstring cs1 := "ÃrvÃ­ztÅ±rÅ tÃ¼kÃ¶rfÃºrÃ³gÃ©p";
  var universal charstring us2 :="Steve Jobs likes the Apple"
  //2
  var octetstring os_expected := f_ucharstring2utf16BE(us1);

  if( not f_changeOrder(os_expected) ) { setverdict(fail, "Odd length is not expected") }
  f_unichar2oct_positivetest(
    u := us1,
    encodingType:="UTF-16LE",
    expectedResult :=  os_expected
  )

  os_expected := f_ucharstring2utf16BE(us2);
  if( not f_changeOrder(os_expected) ) { setverdict(fail, "Odd length is not expected") }
  f_unichar2oct_positivetest(
    u := us2,
    encodingType:="UTF-16LE",
    expectedResult :=  os_expected
  )

}

testcase tc_unichar2oct_utf16_asciistring1() runs on MTC {
  var universal charstring us1 :="ÃrvÃ­ztÅ±rÅ tÃ¼kÃ¶rfÃºrÃ³gÃ©p"
  f_unichar2oct_positivetest(
    u := us1,
    encodingType:="UTF-16",
    expectedResult := f_ucharstring2utf16BE(us1)
  )
}

testcase tc_unichar2oct_utf16BE_asciistring1() runs on MTC {
  var universal charstring us1 :="ÃrvÃ­ztÅ±rÅ tÃ¼kÃ¶rfÃºrÃ³gÃ©p";

  f_unichar2oct_positivetest(
    u := us1,
    encodingType:="UTF-16BE",
    expectedResult := f_ucharstring2utf16BE(us1)
  )
}

testcase tc_unichar2oct_utf16LE_asciistring1() runs on MTC {
  var universal charstring us1 :="ÃrvÃ­ztÅ±rÅ tÃ¼kÃ¶rfÃºrÃ³gÃ©p"
 
  var octetstring os_expected := f_ucharstring2utf16BE(us1);

  if( not f_changeOrder(os_expected) ) { setverdict(fail, "Odd length is not expected") }
  f_unichar2oct_positivetest(
    u := us1,
    encodingType:="UTF-16LE",
    expectedResult :=  os_expected
  )
 
}

testcase tc_unichar2oct_utf16_upperplanes() runs on MTC {
  var RoUCS us := { 
    char(0,1,0,0), char(0,1,0,175), char(0,1,255,255),
    char(0,2,0,0), char(0,2,0,175), char(0,2,255,255),
    char(0,3,0,0), char(0,3,0,175), char(0,3,255,255),
    char(0,15,0,0), char(0,15,0,175), char(0,15,255,255),
    char(0,16,0,0), char(0,16,0,175), char(0,16,255,255)
    };
  var RoOS os := {
    c_BOM_UTF16BE &'D800DC00'O, c_BOM_UTF16BE &'D800DCAF'O, c_BOM_UTF16BE &'D83FDFFF'O,
    c_BOM_UTF16BE &'D840DC00'O, c_BOM_UTF16BE &'D840DCAF'O, c_BOM_UTF16BE &'D87FDFFF'O,
    c_BOM_UTF16BE &'D880DC00'O, c_BOM_UTF16BE &'D880DCAF'O, c_BOM_UTF16BE &'D8BFDFFF'O,
    c_BOM_UTF16BE &'DB80DC00'O, c_BOM_UTF16BE &'DB80DCAF'O, c_BOM_UTF16BE &'DBBFDFFF'O,
    c_BOM_UTF16BE &'DBC0DC00'O, c_BOM_UTF16BE &'DBC0DCAF'O, c_BOM_UTF16BE &'DBFFDFFF'O
  }
  var integer len:=lengthof(us);

  for(var integer i:=0;i<len;i:=i+1) {

    f_unichar2oct_positivetest(
      u := us[i],
      encodingType:="UTF-16",
      expectedResult :=  os[i]
    )
  }
}

testcase tc_unichar2oct_utf16BE_upperplanes() runs on MTC {
  var RoUCS us := { 
    char(0,1,0,0), char(0,1,0,175), char(0,1,255,255),
    char(0,2,0,0), char(0,2,0,175), char(0,2,255,255),
    char(0,3,0,0), char(0,3,0,175), char(0,3,255,255),
    char(0,15,0,0), char(0,15,0,175), char(0,15,255,255),
    char(0,16,0,0), char(0,16,0,175), char(0,16,255,255)
    };
  var RoOS os := {
    c_BOM_UTF16BE &'D800DC00'O, c_BOM_UTF16BE &'D800DCAF'O, c_BOM_UTF16BE &'D83FDFFF'O,
    c_BOM_UTF16BE &'D840DC00'O, c_BOM_UTF16BE &'D840DCAF'O, c_BOM_UTF16BE &'D87FDFFF'O,
    c_BOM_UTF16BE &'D880DC00'O, c_BOM_UTF16BE &'D880DCAF'O, c_BOM_UTF16BE &'D8BFDFFF'O,
    c_BOM_UTF16BE &'DB80DC00'O, c_BOM_UTF16BE &'DB80DCAF'O, c_BOM_UTF16BE &'DBBFDFFF'O,
    c_BOM_UTF16BE &'DBC0DC00'O, c_BOM_UTF16BE &'DBC0DCAF'O, c_BOM_UTF16BE &'DBFFDFFF'O
  }
  var integer len:=lengthof(us);

  for(var integer i:=0;i<len;i:=i+1) {

    f_unichar2oct_positivetest(
      u := us[i],
      encodingType:="UTF-16BE",
      expectedResult :=  os[i]
    )

  }
}

testcase tc_unichar2oct_utf16LE_upperplanes() runs on MTC {
  var RoUCS us := { 
    char(0,1,0,0), char(0,1,0,175), char(0,1,255,255),
    char(0,2,0,0), char(0,2,0,175), char(0,2,255,255),
    char(0,3,0,0), char(0,3,0,175), char(0,3,255,255),
    char(0,15,0,0), char(0,15,0,175), char(0,15,255,255),
    char(0,16,0,0), char(0,16,0,175), char(0,16,255,255)
    };
  var RoOS os := {
    c_BOM_UTF16BE &'D800DC00'O, c_BOM_UTF16BE &'D800DCAF'O, c_BOM_UTF16BE &'D83FDFFF'O,
    c_BOM_UTF16BE &'D840DC00'O, c_BOM_UTF16BE &'D840DCAF'O, c_BOM_UTF16BE &'D87FDFFF'O,
    c_BOM_UTF16BE &'D880DC00'O, c_BOM_UTF16BE &'D880DCAF'O, c_BOM_UTF16BE &'D8BFDFFF'O,
    c_BOM_UTF16BE &'DB80DC00'O, c_BOM_UTF16BE &'DB80DCAF'O, c_BOM_UTF16BE &'DBBFDFFF'O,
    c_BOM_UTF16BE &'DBC0DC00'O, c_BOM_UTF16BE &'DBC0DCAF'O, c_BOM_UTF16BE &'DBFFDFFF'O
  }
  var integer len:=lengthof(us);

  for(var integer i:=0;i<len;i:=i+1) {
    f_changeOrder(os[i]);
    f_unichar2oct_positivetest(
      u := us[i],
      encodingType:="UTF-16LE",
      expectedResult :=  os[i]
    )

  }
}

testcase tc_unichar2oct_utf16_upperplane_longer() runs on MTC {
  var RoUCS us := { 
    char(0,1,0,0) & char(0,1,0,175) & char(0,1,255,255),
    char(0,2,0,0) & char(0,2,0,175) & char(0,2,255,255),
    char(0,3,0,0) & char(0,3,0,175) & char(0,3,255,255),
    char(0,15,0,0)& char(0,15,0,175)& char(0,15,255,255),
    char(0,16,0,0)& char(0,16,0,175)& char(0,16,255,255),
    char(0,16,0,0) & char(0,0,0,1) & " "
    };
  var RoOS os := {
    c_BOM_UTF16BE &'D800DC00'O &'D800DCAF'O &'D83FDFFF'O,
    c_BOM_UTF16BE &'D840DC00'O &'D840DCAF'O &'D87FDFFF'O,
    c_BOM_UTF16BE &'D880DC00'O &'D880DCAF'O &'D8BFDFFF'O,
    c_BOM_UTF16BE &'DB80DC00'O &'DB80DCAF'O &'DBBFDFFF'O,
    c_BOM_UTF16BE &'DBC0DC00'O &'DBC0DCAF'O &'DBFFDFFF'O,
    c_BOM_UTF16BE &'DBC0DC00'O &'0001'O &'0020'O
  }
  var integer len:=lengthof(us);

  for(var integer i:=0;i<len;i:=i+1) {

    f_unichar2oct_positivetest(
      u := us[i],
      encodingType:="UTF-16",
      expectedResult :=  os[i]
    )
  }
}

testcase tc_unichar2oct_utf16BE_upperplane_longer() runs on MTC {
  var RoUCS us := { 
    char(0,1,0,0) & char(0,1,0,175) & char(0,1,255,255),
    char(0,2,0,0) & char(0,2,0,175) & char(0,2,255,255),
    char(0,3,0,0) & char(0,3,0,175) & char(0,3,255,255),
    char(0,15,0,0)& char(0,15,0,175)& char(0,15,255,255),
    char(0,16,0,0)& char(0,16,0,175)& char(0,16,255,255),
    char(0,16,0,0) & char(0,0,0,1) & " "
    };
  var RoOS os := {
    c_BOM_UTF16BE &'D800DC00'O &'D800DCAF'O &'D83FDFFF'O,
    c_BOM_UTF16BE &'D840DC00'O &'D840DCAF'O &'D87FDFFF'O,
    c_BOM_UTF16BE &'D880DC00'O &'D880DCAF'O &'D8BFDFFF'O,
    c_BOM_UTF16BE &'DB80DC00'O &'DB80DCAF'O &'DBBFDFFF'O,
    c_BOM_UTF16BE &'DBC0DC00'O &'DBC0DCAF'O &'DBFFDFFF'O,
    c_BOM_UTF16BE &'DBC0DC00'O &'0001'O &'0020'O
  }
  var integer len:=lengthof(us);

  for(var integer i:=0;i<len;i:=i+1) {

    f_unichar2oct_positivetest(
      u := us[i],
      encodingType:="UTF-16BE",
      expectedResult :=  os[i]
    )
  }
}

testcase tc_unichar2oct_utf16LE_upperplane_longer() runs on MTC {
  var RoUCS us := { 
    char(0,1,0,0) & char(0,1,0,175) & char(0,1,255,255),
    char(0,2,0,0) & char(0,2,0,175) & char(0,2,255,255),
    char(0,3,0,0) & char(0,3,0,175) & char(0,3,255,255),
    char(0,15,0,0)& char(0,15,0,175)& char(0,15,255,255),
    char(0,16,0,0)& char(0,16,0,175)& char(0,16,255,255),
    char(0,16,0,0) & char(0,0,0,1) & " "
    };
  var RoOS os := {
    c_BOM_UTF16BE &'D800DC00'O &'D800DCAF'O &'D83FDFFF'O,
    c_BOM_UTF16BE &'D840DC00'O &'D840DCAF'O &'D87FDFFF'O,
    c_BOM_UTF16BE &'D880DC00'O &'D880DCAF'O &'D8BFDFFF'O,
    c_BOM_UTF16BE &'DB80DC00'O &'DB80DCAF'O &'DBBFDFFF'O,
    c_BOM_UTF16BE &'DBC0DC00'O &'DBC0DCAF'O &'DBFFDFFF'O,
    c_BOM_UTF16BE &'DBC0DC00'O &'0001'O &'0020'O
  }
  var integer len:=lengthof(us);

  for(var integer i:=0;i<len;i:=i+1) {
    f_changeOrder(os[i]);
    f_unichar2oct_positivetest(
      u := us[i],
      encodingType:="UTF-16LE",
      expectedResult :=  os[i]
    )
  }
}

testcase tc_unichar2oct_utf16_toobigplanes() runs on MTC {
  var RoUCS us := { 
    char(0,17,0,0), char(0,17,0,175), char(0,17,255,255),
    char(0,18,0,0), char(0,18,0,175), char(0,18,255,255),
    char(0,19,0,0), char(0,19,0,175), char(0,19,255,255),
    char(0,20,0,0), char(0,20,0,175), char(0,20,255,255),
    char(127,255,0,0), char(127,255,255,175), char(127,255,255,255)
    };

  var integer len:=lengthof(us);

  for(var integer i:=0;i<len;i:=i+1) {

    f_unichar2oct_negativetest(
      u := us[i],
      encodingType:="UTF-16",
      expectedError:=""
    )
  }
}

testcase tc_unichar2oct_utf16BE_toobigplanes() runs on MTC {
  var RoUCS us := { 
    char(0,17,0,0), char(0,17,0,175), char(0,17,255,255),
    char(0,18,0,0), char(0,18,0,175), char(0,18,255,255),
    char(0,19,0,0), char(0,19,0,175), char(0,19,255,255),
    char(0,20,0,0), char(0,20,0,175), char(0,20,255,255),
    char(127,255,0,0), char(127,255,255,175), char(127,255,255,255)
    };

  var integer len:=lengthof(us);

  for(var integer i:=0;i<len;i:=i+1) {

    f_unichar2oct_negativetest(
      u := us[i],
      encodingType:="UTF-16BE",
      expectedError:=""
    )
  }
}

testcase tc_unichar2oct_utf16LE_toobigplanes() runs on MTC {
  var RoUCS us := { 
    char(0,17,0,0), char(0,17,0,175), char(0,17,255,255),
    char(0,18,0,0), char(0,18,0,175), char(0,18,255,255),
    char(0,19,0,0), char(0,19,0,175), char(0,19,255,255),
    char(0,20,0,0), char(0,20,0,175), char(0,20,255,255),
    char(127,255,0,0), char(127,255,255,175), char(127,255,255,255)
    };

  var integer len:=lengthof(us);

  for(var integer i:=0;i<len;i:=i+1) {

    f_unichar2oct_negativetest(
      u := us[i],
      encodingType:="UTF-16LE",
      expectedError:=""
    )
  }
}
testcase tc_remove_bom_utf16() runs on MTC {
  var octetstring o1:= 'EFBBBF7F'O;
  var octetstring o2:= remove_bom(o1);
  if( o2 == '7F'O) {
    setverdict(pass);
  } else {
    setverdict(fail);
  }
}

control{

  execute(tc_get_stringencoding_UTF16());
  //execute(tc_get_stringencoding_UTF16_buggy());
  execute(tc_oct2unichar_UTF16_negative_01());
  execute(tc_oct2unichar_UTF16_negative_D800());
  execute(tc_oct2unichar_UTF16_negative_D80000());
  execute(tc_oct2unichar_UTF16_negative_D8000000());
  execute(tc_oct2unichar_UTF16_negative_toobig())
  execute(tc_oct2unichar_UTF16_BMP());
  execute(tc_oct2unichar_UTF16BE_BMP());
  execute(tc_oct2unichar_UTF16LE_BMP());
  execute(tc_oct2unichar_UTF16_Z());
  execute(tc_oct2unichar_UTF16BE_Z());
  execute(tc_oct2unichar_UTF16LE_Z());
  execute(tc_oct2unichar_UTF16_water());
  execute(tc_oct2unichar_UTF16_linearb());

  execute(tc_unichar2oct_positive1());
  execute(tc_unichar2oct_positive2());
  execute(tc_unichar2oct_0to80());

  execute(tc_unichar2octAndReverse_0toD7FF());
  execute(tc_unichar2octAndReverse_E000toFFFF());
  execute(tc_unichar2octAndReverse_10000to10FFFF());
  execute(tc_unichar2oct_utf16_0toD7FF());
  execute(tc_unichar2oct_utf16_asciistring());
  execute(tc_unichar2oct_utf16BE_asciistring());
  execute(tc_unichar2oct_utf16LE_asciistring());
  execute(tc_unichar2oct_utf16_asciistring1());
  execute(tc_unichar2oct_utf16BE_asciistring1());
  execute(tc_unichar2oct_utf16LE_asciistring1());
  execute(tc_unichar2oct_utf16_upperplanes());
  execute(tc_unichar2oct_utf16BE_upperplanes());
  execute(tc_unichar2oct_utf16LE_upperplanes());
  execute(tc_remove_bom_utf16());
}
}
