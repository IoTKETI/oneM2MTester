/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Szabo, Bence Janos
 *
 ******************************************************************************/

module EncDecvalueUnichar {

type integer Byte (-128 .. 127) with { variant "8 bit" };

type bitstring BStr16 with { variant "16 bit" };

type hexstring HStr;

type octetstring OStr;

type charstring CStr;

type universal charstring UStr;

// Component type
type component CT {}

// Test cases
testcase tc_byte() runs on CT
{

  var Byte x := 30;
  var universal charstring enc := encvalue_unichar(x, "UTF-8");
  var Byte x_exp;
  var integer res := decvalue_unichar(enc, x_exp, "UTF-8");
  if (match(x_exp, x) and res == 0 and match(lengthof(enc),0)) {
    setverdict(pass);
  }
  else {
    setverdict(fail);
  }
}

testcase tc_bstr() runs on CT
{
  var BStr16 x := '0100010101110011'B;
  var universal charstring enc := encvalue_unichar(x, "UTF-8");
  var BStr16 x_exp;
  var integer res := decvalue_unichar(enc, x_exp, "UTF-8");
  if (match(x_exp, x) and res == 0 and match(lengthof(enc),0)) {
    setverdict(pass);
  }
  else {
    setverdict(fail);
  }
  
  // with default UTF-8 coding
  x := '0100010101110011'B;
  enc := encvalue_unichar(x);
  res := decvalue_unichar(enc, x_exp);
  if (match(x_exp, x) and res == 0 and match(lengthof(enc),0)) {
    setverdict(pass);
  }
  else {
    setverdict(fail);
  }
}

testcase tc_hstr() runs on CT
{
  var HStr x := '44'H;
  var universal charstring enc := encvalue_unichar(x, "UTF-8");
  var HStr x_exp;
  var integer res := decvalue_unichar(enc, x_exp, "UTF-8");
  if (match(x_exp, x) and res == 0 and match(lengthof(enc),0)) {
    setverdict(pass);
  }
  else {
    setverdict(fail);
  }
}

testcase tc_ostr() runs on CT
{
  var OStr x := '1255'O;
  var universal charstring enc := encvalue_unichar(x, "UTF-8");
  var OStr x_exp;
  var integer res := decvalue_unichar(enc, x_exp, "UTF-8");
  if (match(x_exp, x) and res == 0 and match(lengthof(enc),0)) {
    setverdict(pass);
  }
  else {
    setverdict(fail);
  }
}

testcase tc_cstr() runs on CT
{
  var CStr x := "CdVsBgAa";
  var universal charstring enc := encvalue_unichar(x, "UTF-8");
  var CStr x_exp;
  var integer res := decvalue_unichar(enc, x_exp, "UTF-8");
  if (match(x_exp, x) and res == 0 and match(lengthof(enc),0)) {
    setverdict(pass);
  }
  else {
    setverdict(fail);
  }
}

testcase tc_ustr() runs on CT
{
  var UStr x := "CdVsBgAa";
  var universal charstring enc := encvalue_unichar(x, "UTF-8");
  var UStr x_exp;
  var integer res := decvalue_unichar(enc, x_exp, "UTF-8");
  if (match(x_exp, x) and res == 0 and match(lengthof(enc),0)) {
    setverdict(pass);
  }
  else {
    setverdict(fail);
  }
}

  
// Control part
control {
  execute(tc_byte());
  execute(tc_bstr());
  execute(tc_hstr());
  execute(tc_ostr());
  execute(tc_cstr());
  execute(tc_ustr());
}

}
with {
  encode "RAW";
}

