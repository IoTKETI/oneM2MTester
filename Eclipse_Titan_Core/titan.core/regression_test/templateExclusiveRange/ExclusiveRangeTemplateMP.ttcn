/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Szabo, Bence Janos
 *
 ******************************************************************************/
module ExclusiveRangeTemplateMP {

modulepar template integer mp_int_positive_templ;
modulepar template integer mp_int_negative_templ;

modulepar template float mp_float_positive_templ;
modulepar template float mp_float_negative_templ;
modulepar template float mp_float_infinity_templ;

modulepar template charstring mp_charstring_templ;

modulepar template universal charstring mp_unicharstring_charstring_templ;
modulepar template universal charstring mp_unicharstring_unicharstring_templ;

type component EmptyCT {}


testcase tc_integer_mp() runs on EmptyCT {

  var integer f := 10;
  if (match(f, mp_int_positive_templ)) {
    setverdict(fail, match(f, mp_int_positive_templ));
  }
  f := 1;
  if (match(f, mp_int_positive_templ)) {
    setverdict(fail, match(f, mp_int_positive_templ));
  }
  f := 0;
  if (match(f, mp_int_positive_templ)) {
    setverdict(fail, match(f, mp_int_positive_templ));
  }
  f := 2;
  if (match(f, mp_int_positive_templ) == false) {
    setverdict(fail, match(f, mp_int_positive_templ));
  }
  f := 9;
  if (match(f, mp_int_positive_templ) == false) {
    setverdict(fail, match(f, mp_int_positive_templ));
  }

  if ("(!1 .. !10)" != log2str(mp_int_positive_templ)) {
    setverdict(fail, match("(!1 .. !10)", log2str(mp_int_positive_templ)));
  }
  template integer copy_mp_int_positive_templ := mp_int_positive_templ;
  if (log2str(mp_int_positive_templ) != log2str(copy_mp_int_positive_templ)) {
    setverdict(fail, match(log2str(mp_int_positive_templ), log2str(copy_mp_int_positive_templ)));
  }

  var template integer tmp;
  string2ttcn(ttcn2string(mp_int_positive_templ), tmp);
  if (log2str(mp_int_positive_templ) != log2str(tmp)) {
    setverdict(fail, "Expected: ", mp_int_positive_templ, " Got: ", tmp);
  }

  f := -10;
  if (match(f, mp_int_negative_templ) == false) {
    setverdict(fail, match(f, mp_int_negative_templ));
  }
  f := -1;
  if (match(f, mp_int_negative_templ) == false) {
    setverdict(fail, match(f, mp_int_negative_templ));
  }
  f := 0;
  if (match(f, mp_int_negative_templ) == false) {
    setverdict(fail, match(f, mp_int_negative_templ));
  }
  f := -1;
  if (match(f, mp_int_negative_templ) == false) {
    setverdict(fail, match(f, mp_int_negative_templ));
  }
  f := -2;
  if (match(f, mp_int_negative_templ) == false) {
    setverdict(fail, match(f, mp_int_negative_templ));
  }
  f := -9;
  if (match(f, mp_int_negative_templ) == false) {
    setverdict(fail, match(f, mp_int_negative_templ));
  }

  if ("(-infinity .. !1)" != log2str(mp_int_negative_templ)) {
    setverdict(fail, match("(-infinity .. !1)", log2str(mp_int_negative_templ)));
  }
  template integer copy_negative_templ := mp_int_negative_templ;
  if (log2str(mp_int_negative_templ) != log2str(copy_negative_templ)) {
    setverdict(fail, match(log2str(mp_int_negative_templ), log2str(copy_negative_templ)));
  }

  string2ttcn(ttcn2string(mp_int_negative_templ), tmp);
  if (log2str(mp_int_negative_templ) != log2str(tmp)) {
    setverdict(fail, "Expected: ", mp_int_negative_templ, " Got: ", tmp);
  }

  setverdict(pass);
}

testcase tc_float_mp() runs on EmptyCT {

  template float positive_templ:= (!1.0 .. !10.0);
  var float f := 10.0;
  if (match(f, mp_float_positive_templ)) {
    setverdict(fail, match(f, mp_float_positive_templ));
  }
  f := 1.0;
  if (match(f, mp_float_positive_templ)) {
    setverdict(fail, match(f, mp_float_positive_templ));
  }
  f := 0.0;
  if (match(f, mp_float_positive_templ)) {
    setverdict(fail, match(f, mp_float_positive_templ));
  }
  f := 1.0;
  if (match(f, 11.0)) {
    setverdict(fail, match(f, mp_float_positive_templ));
  }
  f := 2.0;
  if (match(f, mp_float_positive_templ) == false) {
    setverdict(fail, match(f, mp_float_positive_templ));
  }
  f := 9.0;
  if (match(f, mp_float_positive_templ) == false) {
    setverdict(fail, match(f, mp_float_positive_templ));
  }

  if ("(!1.000000 .. !10.000000)" != log2str(mp_float_positive_templ)) {
    setverdict(fail, match("(!1.000000 .. !10.000000)", log2str(mp_float_positive_templ)));
  }
  template float copy_positive_templ := mp_float_positive_templ;
  if (log2str(mp_float_positive_templ) != log2str(copy_positive_templ)) {
    setverdict(fail, match(log2str(mp_float_positive_templ), log2str(copy_positive_templ)));
  }

  var template float tmp;
  string2ttcn(ttcn2string(mp_float_positive_templ), tmp);
  if (log2str(mp_float_positive_templ) != log2str(tmp)) {
    setverdict(fail, "Expected: ", mp_float_positive_templ, " Got: ", tmp);
  }

  f := -10.0;
  if (match(f, mp_float_negative_templ)) {
    setverdict(fail, match(f, mp_float_negative_templ));
  }
  f := -1.0;
  if (match(f, mp_float_negative_templ)) {
    setverdict(fail, match(f, mp_float_negative_templ));
  }
  f := -0.0;
  if (match(f, mp_float_negative_templ)) {
    setverdict(fail, match(f, mp_float_negative_templ));
  }
  f := -11.0;
  if (match(f, mp_float_negative_templ)) {
    setverdict(fail, match(f, mp_float_negative_templ));
  }
  f := -2.0;
  if (match(f, mp_float_negative_templ) == false) {
    setverdict(fail, match(f, mp_float_negative_templ));
  }
  f := -9.0;
  if (match(f, mp_float_negative_templ) == false) {
    setverdict(fail, match(f, mp_float_negative_templ));
  }
  f := -5.0;
  if (match(f, mp_float_negative_templ) == false) {
    setverdict(fail, match(f, mp_float_negative_templ));
  }

  if ("(!-10.000000 .. !-1.000000)" != log2str(mp_float_negative_templ)) {
    setverdict(fail, match("(!-10.000000 .. !-1.000000)", log2str(mp_float_negative_templ)));
  }
  template float copy_negative_templ := mp_float_negative_templ;
  if (log2str(mp_float_negative_templ) != log2str(copy_negative_templ)) {
    setverdict(fail, match(log2str(mp_float_negative_templ), log2str(copy_negative_templ)));
  }

  string2ttcn(ttcn2string(mp_float_negative_templ), tmp);
  if (log2str(mp_float_negative_templ) != log2str(tmp)) {
    setverdict(fail, "Expected: ", mp_float_negative_templ, " Got: ", tmp);
  }

  if (match(f, mp_float_infinity_templ) == false) {
    setverdict(fail, match(f, mp_float_infinity_templ));
  }
  f := -infinity;
  if (match(f, mp_float_infinity_templ)) {
    setverdict(fail, match(f, mp_float_infinity_templ));
  }
  f := infinity;
  if (match(f, mp_float_infinity_templ)) {
    setverdict(fail, match(f, mp_float_infinity_templ));
  }

  if ("(!-infinity .. !10.000000)" != log2str(mp_float_infinity_templ)) {
    setverdict(fail, match("(!-infinity .. !10.000000)", log2str(mp_float_infinity_templ)));
  }
  template float copy_infinity_templ := mp_float_infinity_templ;
  if (log2str(mp_float_infinity_templ) != log2str(copy_infinity_templ)) {
    setverdict(fail, match(log2str(mp_float_infinity_templ), log2str(copy_infinity_templ)));
  }

  string2ttcn(ttcn2string(mp_float_infinity_templ), tmp);
  if (log2str(mp_float_infinity_templ) != log2str(tmp)) {
    setverdict(fail, "Expected: ", mp_float_infinity_templ, " Got: ", tmp);
  }

  setverdict(pass);
}

testcase tc_charstring_mp() runs on EmptyCT {

  var charstring f := "d";
  if (match(f, mp_charstring_templ)) {
    setverdict(fail, match(f, mp_charstring_templ));
  }
  f := "g";
  if (match(f, mp_charstring_templ)) {
    setverdict(fail, match(f, mp_charstring_templ));
  }
  f := "f";
  if (match(f, mp_charstring_templ) == false) {
    setverdict(fail, match(f, mp_charstring_templ));
  }
  f := "j";
  if (match(f, mp_charstring_templ)) {
    setverdict(fail, match(f, mp_charstring_templ));
  }
  f := "eeefff";
  if (match(f, mp_charstring_templ) == false) {
    setverdict(fail, match(f, mp_charstring_templ));
  }

  f := "dddeeefff";
  if (match(f, mp_charstring_templ)) {
    setverdict(fail, match(f, mp_charstring_templ));
  }
  f := "eeefffggg";
  if (match(f, mp_charstring_templ)) {
    setverdict(fail, match(f, mp_charstring_templ));
  }

  if ("(!\"d\" .. !\"g\")" != log2str(mp_charstring_templ)) {
    setverdict(fail, match("(!\"d\" .. !\"g\")", log2str(mp_charstring_templ)));
  }
  template charstring copy_templ := mp_charstring_templ;
  if (log2str(mp_charstring_templ) != log2str(copy_templ)) {
    setverdict(fail, match(log2str(mp_charstring_templ), log2str(copy_templ)));
  }

  var template charstring tmp;
  string2ttcn(ttcn2string(mp_charstring_templ), tmp);
  if (log2str(mp_charstring_templ) != log2str(tmp)) {
    setverdict(fail, "Expected: ", mp_charstring_templ, " Got: ", tmp);
  }

  setverdict(pass);
}


testcase tc_universal_charstring_mp() runs on EmptyCT {

  var universal charstring f := "d";
  if (match(f, mp_unicharstring_charstring_templ)) {
    setverdict(fail, match(f, mp_unicharstring_charstring_templ));
  }
  f := "g";
  if (match(f, mp_unicharstring_charstring_templ)) {
    setverdict(fail, match(f, mp_unicharstring_charstring_templ));
  }
  f := "f";
  if (match(f, mp_unicharstring_charstring_templ) == false) {
    setverdict(fail, match(f, mp_unicharstring_charstring_templ));
  }
  f := "j";
  if (match(f, mp_unicharstring_charstring_templ)) {
    setverdict(fail, match(f, mp_unicharstring_charstring_templ));
  }
  f := "eeefff";
  if (match(f, mp_unicharstring_charstring_templ) == false) {
    setverdict(fail, match(f, mp_unicharstring_charstring_templ));
  }

  f := "dddeeefff";
  if (match(f, mp_unicharstring_charstring_templ)) {
    setverdict(fail, match(f, mp_unicharstring_charstring_templ));
  }
  f := "eeefffggg";
  if (match(f, mp_unicharstring_charstring_templ)) {
    setverdict(fail, match(f, mp_unicharstring_charstring_templ));
  }

  if ("(!\"d\" .. !\"g\")" != log2str(mp_unicharstring_charstring_templ)) {
    setverdict(fail, match("(!\"d\" .. !\"g\")", log2str(mp_unicharstring_charstring_templ)));
  }
  template universal charstring copy_charstr_templ := mp_unicharstring_charstring_templ;
  if (log2str(mp_unicharstring_charstring_templ) != log2str(copy_charstr_templ)) {
    setverdict(fail, match(log2str(mp_unicharstring_charstring_templ), log2str(copy_charstr_templ)));
  }

  var template universal charstring tmp;
  string2ttcn(ttcn2string(mp_unicharstring_charstring_templ), tmp);
  if (log2str(mp_unicharstring_charstring_templ) != log2str(tmp)) {
    setverdict(fail, "Expected: ", mp_unicharstring_charstring_templ, " Got: ", tmp);
  }

  f := char(1,2,3,4);
  if (match(f, mp_unicharstring_unicharstring_templ)) {
    setverdict(fail, match(f, mp_unicharstring_unicharstring_templ));
  }
  f := char(1,2,4,5);
  if (match(f, mp_unicharstring_unicharstring_templ)) {
    setverdict(fail, match(f, mp_unicharstring_unicharstring_templ));
  }
  f := char(1,2,3,5);
  if (match(f, mp_unicharstring_unicharstring_templ) == false) {
    setverdict(fail, match(f, mp_unicharstring_unicharstring_templ));
  }
  f := char(1,2,4,4);
  if (match(f, mp_unicharstring_unicharstring_templ) == false) {
    setverdict(fail, match(f, mp_unicharstring_unicharstring_templ));
  }

  if ("(!char(1, 2, 3, 4) .. !char(1, 2, 4, 5))" != log2str(mp_unicharstring_unicharstring_templ)) {
    setverdict(fail, match("(!char(1, 2, 3, 4) .. !char(1, 2, 4, 5))", log2str(mp_unicharstring_unicharstring_templ)));
  }
  template universal charstring copy_unicharstr_templ := mp_unicharstring_unicharstring_templ;
  if (log2str(mp_unicharstring_unicharstring_templ) != log2str(copy_unicharstr_templ)) {
    setverdict(fail, match(log2str(mp_unicharstring_unicharstring_templ), log2str(copy_unicharstr_templ)));
  }

  string2ttcn(ttcn2string(mp_unicharstring_unicharstring_templ), tmp);
  if (log2str(mp_unicharstring_unicharstring_templ) != log2str(tmp)) {
    setverdict(fail, "Expected: ", mp_unicharstring_unicharstring_templ, " Got: ", tmp);
  }

  setverdict(pass);
}


control {
  execute(tc_integer_mp());
  execute(tc_float_mp());
  execute(tc_charstring_mp());
  execute(tc_universal_charstring_mp());
}

}