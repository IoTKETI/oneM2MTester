/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *
 ******************************************************************************/
module Types {

import from JsonData all;

const integer c_imported_i :=11;

type component MTC {}

type enumerated Days { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday };

type record R {
  integer i,
  charstring cs,
  boolean b,
  Days d
}

type record R2 {
  R r,
  float f
}

type record EmptyRec { }

type union A {
  R r,
  integer i,
  boolean b,
  float f
}

type record of universal charstring RoUCS;
type record of charstring RoCS;
type record of octetstring RoOS;
type record of integer RoI;

type record of verdicttype RoV; 
type record of float RoF;

type integer IntArr[3];
type float FloatArr[3];
type universal charstring StrArr[4];

type record Date {
  charstring month,
  integer day_idx,
  Days day_name
}

type record of Date Dates;

type record PhoneNumber {
  integer country_prefix,
  integer network_prefix,
  integer local_number
} with {
  variant(country_prefix) "JSON: name as CountryPrefix";
  variant(network_prefix) "JSON: name as NetworkPrefix";
  variant(local_number)   "JSON      :      name  as LocalNumber"
}


type record Profile0 {
  charstring name,
  PhoneNumber phone_no,
  charstring email_addr optional,
  Dates meetings optional
} 

type record Profile {
  charstring name,
  PhoneNumber phone_no,
  charstring email_addr optional,
  Dates meetings optional
} with {
  //variant(email_addr) "JSON : omit  as null";
  variant(meetings) "JSON:omit as null";
  variant(phone_no) "JSON: name as phone";
  variant(email_addr) "JSON: name as email";
}

type union CBA {
  integer i_val,
  Date date_val,
  float f_val,
  charstring cs_val
} with {
  variant(date_val) "JSON:name as date";
  variant(i_val) "JSON:name as int";
  variant(f_val) "JSON:name as float";
  variant(cs_val) "JSON:name as string";
}

type set Product {
  charstring name,
  float price optional,
  hexstring code
} with {
  variant(price) "JSON:omit as null"
}

type record KeywordFields {
  integer a1,
  integer a2,
  integer a3,
  integer a4,
  integer a5,
  integer a6,
  integer a7,
  integer a8,
  integer a9,
  integer a10,
  integer a11
}
with {
  variant(a1) "JSON: name as omit";
  variant(a2) "JSON: name as as";
  variant(a3) "JSON: name as null";
  variant(a4) "JSON: name as name";
  variant(a5) "JSON: name as value";
  variant(a6) "JSON: name as default";
  variant(a7) "JSON: name as extend";
  variant(a8) "JSON: name as metainfo";
  variant(a9) "JSON: name as for";
  variant(a10) "JSON: name as unbound";
  variant(a11) "JSON: name as JSON";
}

type union Thing {
  integer ival,
  float fval,
  boolean bval,
  enumerated { Tiny, Small, Average, Large, Huge } sizeval,
  bitstring bsval,
  octetstring osval,
  union {
    hexstring hsval,
    record of charstring rocsval
  } unival,
  charstring csval,
  universal charstring ucsval,
  Product prodval,
  record of integer roival,
  record {
    charstring name,
    float price,
    hexstring productID optional
  } prod2val
} with {
  variant "JSON:as value";
  variant (prod2val.productID) "JSON:name as code";
  variant(unival) "JSON:as value";
}

type record of Thing Stuff;

type record RecDef {
  integer i,
  float f,
  boolean b optional,
  bitstring bs,
  hexstring hs,
  octetstring os,
  charstring cs,
  universal charstring ucs,
  enumerated { Tiny, Small, Medium, Large, Huge } size,
  verdicttype vt
} with {
  variant(cs) "JSON : default(empty)";
  variant(i) "JSON:default(-19)";
  variant(f) "JSON:default(1.0e6)";
  variant(size) "JSON:default(Tiny)";
  variant(os) "JSON : default(1DE7)";
  variant(ucs) "JSON:default(Ã¼res)";
  variant(bs) "JSON:default (101)";
  variant(hs) "JSON:default(DEAD)";
  variant(vt) "JSON:default(fail)";
  variant(b) "JSON:default(false)";
}

type record HasPardType {
  ProtocolElem_Field1 pard,
  boolean buul,
  Price price
}

type union AsnThing {
  AsnNull nval,
  AsnInt ival,
  AsnAny anyval,
  AsnVisibleString vsval,
  ProtocolElem_Field1 pardval
} with {
  variant "JSON: as value";
}

type record of AsnThing AsnStuff;

type record OptionalUnions {
  charstring dummy,
  Thing uniTtcn optional,
  AsnThing uniAsn optional
} with {
  variant(uniTtcn) "JSON: omit as null";
  variant(uniAsn) " JSON: omit as null ";
}

type record MetainfoRecord {
  integer num,
  charstring str
}
with {
  variant(str) "JSON: metainfo for unbound";
}

type set MetainfoSet {
  integer num,
  charstring str,
  octetstring octets optional
}
with {
  variant " JSON : metainfo for unbound ";
  variant (num) " JSON : name as int ";
}

type record MetainfoInnerRecord {
  integer num,
  charstring str
}
with {
  variant "JSON: metainfo for unbound";
}

type record MetainfoOuterRecord {
  integer mynum,
  charstring mystr,
  MetainfoInnerRecord myRec
}

type record BinaryStrings {
  bitstring bit,
  hexstring hex,
  octetstring oct
}

type record of integer MetainfoRecOf
with { variant "JSON: metainfo for unbound"; }

type set of MetainfoRecord MetainfoSetOf
with { variant "JSON: metainfo for unbound"; }

type float MetainfoArray[3]
with { variant "JSON: metainfo for unbound"; }

type record RecAsValue {
  integer field
}
with {
  variant "JSON: as value";
}

type record RecNotAsValue {
  RoF field
}

type union UniNotAsValue {
  integer i,
  octetstring o
}

type set SetWithAsValueFields {
  UniNotAsValue uni,
  RecNotAsValue rec,
  record of anytype list
}
with {
  variant (uni) "JSON: as value";
  variant (rec) "JSON: as value";
  variant (list[-]) "JSON: as value";
}

} with {
  encode "JSON";
  extension "anytype integer, charstring, R, RoI, Thing";
}
