/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *
 ******************************************************************************/
/*
//AUTHOR: 
//DATE: 
//VERSION: 
*/
module setof_test
{

//=========================================================================
// Import Part
//=========================================================================
import from types all;
import from functions all;
//=========================================================================
// Module Parameters
//=========================================================================
modulepar {
  
  //set of
  template SoCS tspt_setof_mod4v1 := omit;
  template SoCS tspt_setof_mod4v2 := omit;
  template SoCS tspt_setof_mod4v3 := omit;
  template SoCS tspt_setof_mod4a := omit;
  template SoCS tspt_setof_mod4q := omit;
  template SoCS tspt_setof_mod4o := *;
  template SoCS tspt_setof_mod4c0 := *;
  template SoCS tspt_setof_mod4c1 := *;
  template SoCS tspt_setof_mod4c2 := *;
  template SoCS tspt_setof_mod4c3 := *;
  template SoCS tspt_setof_mod4vl := *;
  
  template SoCS tspt_setof_mod4v1ifp := omit;
  template SoCS tspt_setof_mod4v2ifp := omit;
  template SoCS tspt_setof_mod4v3ifp := omit;
  template SoCS tspt_setof_mod4aifp := omit;
  template SoCS tspt_setof_mod4qifp := omit;
  template SoCS tspt_setof_mod4oifp := *;
  template SoCS tspt_setof_mod4c0ifp := *;
  template SoCS tspt_setof_mod4c1ifp := *;
  template SoCS tspt_setof_mod4c2ifp := *;
  template SoCS tspt_setof_mod4c3ifp := *;
  template SoCS tspt_setof_mod4vlifp := *;
  template SoCS tspt_setof_mod4superset := *;
  template SoCS tspt_setof_mod4supersetifp := *;
  template SoCS tspt_setof_mod4supersetl3 := *;
  template SoCS tspt_setof_mod4supersetl1_3 := *;
  template SoCS tspt_setof_mod4supersetl3ifp := *;
  template SoCS tspt_setof_mod4subset := *;
  template SoCS tspt_setof_mod4subsetifp := *;
}

//=========================================================================
// Data Types
//=========================================================================

// Insert data type defintions here if applicable!
// You can use the data_type skeleton!

//=========================================================================
// Signatures
//=========================================================================

// Insert signature definitions here if applicable!
// You can use the signature skeleton!

//=========================================================================
//Port Types
//=========================================================================

// Insert port type defintions here if applicable!
// You can use the port_type skeleton!

//=========================================================================
//Component Types
//=========================================================================

// Insert component type defintions here if applicable!
// You can use the component_type skeleton!

//=========================================================================
// Constants
//=========================================================================

// Insert constants here if applicable!
// You can use the constant skeleton!

//=========================================================================
// Templates
//=========================================================================

// Insert templates here if applicable!
// You can use the template skeleton!

//=========================================================================
// Altsteps
//=========================================================================

// Insert altsteps here if applicable!
// You can use the altstep skeleton!

//=========================================================================
// Functions
//=========================================================================

// Insert functions here if applicable!
// You can use the function skeleton!

//=========================================================================
// Testcases
//=========================================================================
testcase tc_setof_ModulePar() runs on MC {
  log(log2str(tspt_setof_mod4v1));
  if( log2str(tspt_setof_mod4v1) == "{ \"a\" }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4v2));
  if( log2str(tspt_setof_mod4v2) == "{ \"a\", \"b\" }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4v3));
  if( log2str(tspt_setof_mod4v3) == "{ \"a\", \"b\", \"c\" }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4a));
  if( log2str(tspt_setof_mod4a) == "*") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4q));
  if( log2str(tspt_setof_mod4q) == "?") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4o));
  if( log2str(tspt_setof_mod4o) == "omit") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4c0));
  if( log2str(tspt_setof_mod4c0) == "{ complement (omit) }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4c1));
  if( log2str(tspt_setof_mod4c1) == "{ complement (\"a\"), \"b\" }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4c2));
  if( log2str(tspt_setof_mod4c2) == "{ complement (\"a\", \"b\"), \"c\" }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4c3));
  if( log2str(tspt_setof_mod4c3) == "complement({ \"a\" }, { \"a\", \"b\" }, { \"c\" })") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4vl));
  if( log2str(tspt_setof_mod4vl) == "{ (\"a\", \"b\"), (\"cica\", \"macska\", \"cat\") }") { setverdict(pass)} else { setverdict(fail) };
  log(log2str(tspt_setof_mod4superset));
  if( log2str(tspt_setof_mod4superset) == "superset(\"a\", \"b\")") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4supersetl3));
  if( log2str(tspt_setof_mod4supersetl3) == "superset(\"a\", \"b\") length (3)") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4supersetl1_3));
  if( log2str(tspt_setof_mod4supersetl1_3) == "superset(\"a\", \"b\") length (1 .. 3)") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4subset));
  if( log2str(tspt_setof_mod4subset) == "subset(\"a\", \"b\")") { setverdict(pass)} else { setverdict(fail) }
  
  log(log2str(tspt_setof_mod4v1ifp));
  if( log2str(tspt_setof_mod4v1ifp) == "{ \"a\" } ifpresent") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4v2ifp));
  if( log2str(tspt_setof_mod4v2ifp) == "{ \"a\", \"b\" } ifpresent") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4v3ifp));
  if( log2str(tspt_setof_mod4v3ifp) == "{ \"a\", \"b\", \"c\" } ifpresent") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4aifp));
  if( log2str(tspt_setof_mod4aifp) == "* ifpresent") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4qifp));
  if( log2str(tspt_setof_mod4qifp) == "? ifpresent") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4oifp));
  if( log2str(tspt_setof_mod4oifp) == "omit ifpresent") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4c0ifp));
  if( log2str(tspt_setof_mod4c0ifp) == "{ complement (omit) } ifpresent") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4c1ifp));
  if( log2str(tspt_setof_mod4c1ifp) == "{ complement (\"a\"), \"b\" } ifpresent") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4c2ifp));
  if( log2str(tspt_setof_mod4c2ifp) == "{ complement (\"a\", \"b\"), \"c\" } ifpresent") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4c3ifp));
  if( log2str(tspt_setof_mod4c3ifp) == "complement({ \"a\" }, { \"a\", \"b\" }, { \"c\" }) ifpresent") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4vlifp));
  if( log2str(tspt_setof_mod4vlifp) == "{ (\"a\", \"b\"), (\"cica\", \"macska\", \"cat\") } ifpresent") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4supersetifp));
  if( log2str(tspt_setof_mod4supersetifp) == "superset(\"a\", \"b\") ifpresent") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4supersetl3ifp));
  if( log2str(tspt_setof_mod4supersetl3ifp) == "superset(\"a\", \"b\") length (3) ifpresent") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(tspt_setof_mod4subsetifp));
  if( log2str(tspt_setof_mod4subsetifp) == "subset(\"a\", \"b\") ifpresent") { setverdict(pass)} else { setverdict(fail) }
}

testcase tc_setof_ModulePar_emb() runs on MC {
  log(log2str(t_rsocs(tspt_setof_mod4v1)));
  if( log2str(t_rsocs(tspt_setof_mod4v1)) == "{ s := { \"a\" } }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4v2)));
  if( log2str(t_rsocs(tspt_setof_mod4v2)) == "{ s := { \"a\", \"b\" } }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4v3)));
  if( log2str(t_rsocs(tspt_setof_mod4v3)) == "{ s := { \"a\", \"b\", \"c\" } }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4a)));
  if( log2str(t_rsocs(tspt_setof_mod4a)) == "{ s := * }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4q)));
  if( log2str(t_rsocs(tspt_setof_mod4q)) == "{ s := ? }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4o)));
  if( log2str(t_rsocs(tspt_setof_mod4o)) == "{ s := omit }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4c0)));
  if( log2str(t_rsocs(tspt_setof_mod4c0)) == "{ s := { complement (omit) } }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4c1)));
  if( log2str(t_rsocs(tspt_setof_mod4c1)) == "{ s := { complement (\"a\"), \"b\" } }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4c2)));
  if( log2str(t_rsocs(tspt_setof_mod4c2)) == "{ s := { complement (\"a\", \"b\"), \"c\" } }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4c3)));
  if( log2str(t_rsocs(tspt_setof_mod4c3)) == "{ s := complement({ \"a\" }, { \"a\", \"b\" }, { \"c\" }) }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4vl)));
  if( log2str(t_rsocs(tspt_setof_mod4vl)) == "{ s := { (\"a\", \"b\"), (\"cica\", \"macska\", \"cat\") } }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4superset)));
  if( log2str(t_rsocs(tspt_setof_mod4superset)) == "{ s := superset(\"a\", \"b\") }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4supersetl3)));
  if( log2str(t_rsocs(tspt_setof_mod4supersetl3)) == "{ s := superset(\"a\", \"b\") length (3) }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4subset)));
  if( log2str(t_rsocs(tspt_setof_mod4subset)) == "{ s := subset(\"a\", \"b\") }") { setverdict(pass)} else { setverdict(fail) }
  
  
  log(log2str(t_rsocs(tspt_setof_mod4v1ifp)));
  if( log2str(t_rsocs(tspt_setof_mod4v1ifp)) == "{ s := { \"a\" } ifpresent }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4v2ifp)));
  if( log2str(t_rsocs(tspt_setof_mod4v2ifp)) == "{ s := { \"a\", \"b\" } ifpresent }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4v3ifp)));
  if( log2str(t_rsocs(tspt_setof_mod4v3ifp)) == "{ s := { \"a\", \"b\", \"c\" } ifpresent }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4aifp)));
  if( log2str(t_rsocs(tspt_setof_mod4aifp)) == "{ s := * ifpresent }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4qifp)));
  if( log2str(t_rsocs(tspt_setof_mod4qifp)) == "{ s := ? ifpresent }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4oifp)));
  if( log2str(t_rsocs(tspt_setof_mod4oifp)) == "{ s := omit ifpresent }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4c0ifp)));
  if( log2str(t_rsocs(tspt_setof_mod4c0ifp)) == "{ s := { complement (omit) } ifpresent }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4c1ifp)));
  if( log2str(t_rsocs(tspt_setof_mod4c1ifp)) == "{ s := { complement (\"a\"), \"b\" } ifpresent }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4c2ifp)));
  if( log2str(t_rsocs(tspt_setof_mod4c2ifp)) == "{ s := { complement (\"a\", \"b\"), \"c\" } ifpresent }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4c3ifp)));
  if( log2str(t_rsocs(tspt_setof_mod4c3ifp)) == "{ s := complement({ \"a\" }, { \"a\", \"b\" }, { \"c\" }) ifpresent }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4vlifp)));
  if( log2str(t_rsocs(tspt_setof_mod4vlifp)) == "{ s := { (\"a\", \"b\"), (\"cica\", \"macska\", \"cat\") } ifpresent }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4supersetifp)));
  if( log2str(t_rsocs(tspt_setof_mod4supersetifp)) == "{ s := superset(\"a\", \"b\") ifpresent }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4supersetl3ifp)));
  if( log2str(t_rsocs(tspt_setof_mod4supersetl3ifp)) == "{ s := superset(\"a\", \"b\") length (3) ifpresent }") { setverdict(pass)} else { setverdict(fail) }
  log(log2str(t_rsocs(tspt_setof_mod4subsetifp)));
  if( log2str(t_rsocs(tspt_setof_mod4subsetifp)) == "{ s := subset(\"a\", \"b\") ifpresent }") { setverdict(pass)} else { setverdict(fail) }
  
}

testcase tc_setof_mod4vlifp_emb() runs on MC {
  log(log2str(t_rsocs(tspt_setof_mod4vlifp)));
  var RoRSoCS  vl_good_values := {{s:=omit}, {s:={"a","cica"} }}
  var RoRSoCS vl_wrong_values := { {{"c","cica"}}  }
  f_checkMatchingValues_rsocs(t_rsocs(tspt_setof_mod4vlifp),vl_good_values,vl_wrong_values);
}

testcase tc_setof_mod4superset_emb() runs on MC {
  log(log2str(t_rsocs(tspt_setof_mod4superset)));
  var RoRSoCS  vl_good_values := { {s:={"a","cica","b"} }, {s:={"a","b"} } ,  {s:={"a","b","a", "d", "anything"} } }
  var RoRSoCS vl_wrong_values := { {{"b","cica"}}, {{"a","c","anyth"}} }
  f_checkMatchingValues_rsocs(t_rsocs(tspt_setof_mod4superset),vl_good_values,vl_wrong_values);
}

testcase tc_setof_mod4supersetl3_emb() runs on MC {
  log(log2str(t_rsocs(tspt_setof_mod4supersetl3)));
  var RoRSoCS  vl_good_values := { {s:={"a","cica","b"} },  {s:={"a","b","a"} } }
  var RoRSoCS vl_wrong_values := { {{"b","cica"}}, {s:={"a","b","c","dada"} }  }
  f_checkMatchingValues_rsocs(t_rsocs(tspt_setof_mod4supersetl3),vl_good_values,vl_wrong_values);
}

testcase tc_setof_mod4supersetl1_3_emb() runs on MC {
  log(log2str(t_rsocs(tspt_setof_mod4supersetl1_3)));
  var RoRSoCS  vl_good_values := { {s:={"a","cica","b"} },  {s:={"a","b","a"} }, {s:={"a","b"} } }
  var RoRSoCS vl_wrong_values := { {{"b","cica"}}, {s:={"a","b","c","dada"} } }
  f_checkMatchingValues_rsocs(t_rsocs(tspt_setof_mod4supersetl1_3),vl_good_values,vl_wrong_values);
}


testcase tc_setof_mod4supersetifp_emb() runs on MC {
  log(log2str(t_rsocs(tspt_setof_mod4supersetifp)));
  var RoRSoCS  vl_good_values := {{s:=omit}, {s:={"a","cica","b"} },  {s:={"a","b"} },  {s:={"a","b","b"} } }
  var RoRSoCS vl_wrong_values := { {{"a","cica"}}  }
  f_checkMatchingValues_rsocs(t_rsocs(tspt_setof_mod4supersetifp),vl_good_values,vl_wrong_values);
}  

testcase tc_setof_mod4subset_emb() runs on MC {
  log(log2str(t_rsocs(tspt_setof_mod4subset)));
  var RoRSoCS  vl_good_values := { {s:={}}, {s:={"a"}}, {s:={"b"}}, {s:={"a","b"} } }
  var RoRSoCS vl_wrong_values := { {{"b","cica"}}  }
  f_checkMatchingValues_rsocs(t_rsocs(tspt_setof_mod4subset),vl_good_values,vl_wrong_values);
}

testcase tc_setof_mod4subsetifp_emb() runs on MC {
  log(log2str(t_rsocs(tspt_setof_mod4subsetifp)));
  var RoRSoCS  vl_good_values := {{s:=omit}, {s:={}},{s:={"a"}}, {s:={"b"}}, {s:={"a","b"}} }
  var RoRSoCS vl_wrong_values := { {{"a","cica"}},   {{"a","cica","b"}} }
  f_checkMatchingValues_rsocs(t_rsocs(tspt_setof_mod4subsetifp),vl_good_values,vl_wrong_values);
}  
//TODO: matching tests

//=========================================================================
// Control
//=========================================================================

control {
 log("***set of tests ******");
  execute(tc_setof_ModulePar());
  execute(tc_setof_ModulePar_emb());
  execute(tc_setof_mod4vlifp_emb());
  execute(tc_setof_mod4superset_emb());
  execute(tc_setof_mod4supersetl3_emb());
  execute(tc_setof_mod4supersetl1_3_emb());
  execute(tc_setof_mod4supersetifp_emb());
  execute(tc_setof_mod4subset_emb());
  execute(tc_setof_mod4subsetifp_emb());
}

}  // end of module
