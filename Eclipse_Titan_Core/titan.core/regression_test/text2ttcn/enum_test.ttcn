/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *
 ******************************************************************************/
module enum_test
// [.objid{ itu_t(0) identified_organization(4) etsi(0)
// identified_organization(127) ericsson(5) testing(0)
// <put further nodes here if needed>}]
{

//=========================================================================
// Import Part
//=========================================================================
import from types all;
import from functions all;
//=========================================================================
// Module Parameters
//=========================================================================
modulepar {
  template MyEnum tspt_enum_mod4v := omit
  template MyEnum tspt_enum_mod4a := first
  template MyEnum tspt_enum_mod4q := first
  template MyEnum tspt_enum_mod4o := first
  template MyEnum tspt_enum_mod4c0 := first
  template MyEnum tspt_enum_mod4c1 := first
  template MyEnum tspt_enum_mod4c2 := first
  template MyEnum tspt_enum_mod4vl1 := omit
  template MyEnum tspt_enum_mod4vl2 := omit  
  //ifpresent version ( in cfg file):
  template MyEnum tspt_enum_mod4vifp := omit
  template MyEnum tspt_enum_mod4aifp := first
  template MyEnum tspt_enum_mod4qifp := first
  template MyEnum tspt_enum_mod4oifp := first
  template MyEnum tspt_enum_mod4c0ifp := first
  template MyEnum tspt_enum_mod4c1ifp := first
  template MyEnum tspt_enum_mod4c2ifp := first
  template MyEnum tspt_enum_mod4vl1ifp := omit
  template MyEnum tspt_enum_mod4vl2ifp := omit   
}
//=========================================================================
// Data Types
//=========================================================================

// Insert data type defintions here if applicable!
// You can use the data_type skeleton!

//=========================================================================
// Signatures
//=========================================================================

// Insert signature definitions here if applicable!
// You can use the signature skeleton!

//=========================================================================
//Port Types
//=========================================================================

// Insert port type defintions here if applicable!
// You can use the port_type skeleton!

//=========================================================================
//Component Types
//=========================================================================

// Insert component type defintions here if applicable!
// You can use the component_type skeleton!

//=========================================================================
// Constants
//=========================================================================

// Insert constants here if applicable!
// You can use the constant skeleton!

//=========================================================================
// Templates
//=========================================================================

// Insert templates here if applicable!
// You can use the template skeleton!

//=========================================================================
// Altsteps
//=========================================================================

// Insert altsteps here if applicable!
// You can use the altstep skeleton!

//=========================================================================
// Functions
//=========================================================================

// Insert functions here if applicable!
// You can use the function skeleton!

//=========================================================================
// Testcases
//=========================================================================
testcase tc_enum_ModulePar() runs on MC {
   log(log2str(tspt_enum_mod4v));
   if(log2str(tspt_enum_mod4v) == "first (0)" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4a));
   if(log2str(tspt_enum_mod4a) == "*" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4q));
   if(log2str(tspt_enum_mod4q) == "?" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4o));
   if(log2str(tspt_enum_mod4o) == "omit" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4c0));
   if(log2str(tspt_enum_mod4c0) == "complement (omit)" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4c1));
   if(log2str(tspt_enum_mod4c1) == "complement (first (0))" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4c2));
   if(log2str(tspt_enum_mod4c2) == "complement (first (0), second (1))" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4vl1));
   if(log2str(tspt_enum_mod4vl1) == "first (0)" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4vl2));
   if(log2str(tspt_enum_mod4vl2) == "(first (0), second (1))" ) {setverdict(pass)} else {setverdict(fail)}
   
   log(log2str(tspt_enum_mod4vifp));
   if(log2str(tspt_enum_mod4vifp) == "first (0) ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4aifp));
   if(log2str(tspt_enum_mod4aifp) == "* ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4qifp));
   if(log2str(tspt_enum_mod4qifp) == "? ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4oifp));
   if(log2str(tspt_enum_mod4oifp) == "omit ifpresent") {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4c0ifp));
   if(log2str(tspt_enum_mod4c0ifp) == "complement (omit) ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4c1ifp));
   if(log2str(tspt_enum_mod4c1ifp) == "complement (first (0)) ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4c2ifp));
   if(log2str(tspt_enum_mod4c2ifp) == "complement (first (0), second (1)) ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4vl1ifp));
   if(log2str(tspt_enum_mod4vl1ifp) == "first (0) ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(tspt_enum_mod4vl2ifp));
   if(log2str(tspt_enum_mod4vl2ifp) == "(first (0), second (1)) ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
}

testcase tc_enum_ModulePar_emb() runs on MC {
   log(log2str(t_renum(tspt_enum_mod4v)));
   if(log2str(t_renum(tspt_enum_mod4v)) == "{ e := first (0) }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4a)));
   if(log2str(t_renum(tspt_enum_mod4a)) == "{ e := * }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4q)));
   if(log2str(t_renum(tspt_enum_mod4q)) == "{ e := ? }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4o)));
   if(log2str(t_renum(tspt_enum_mod4o)) == "{ e := omit }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4c0)));
   if(log2str(t_renum(tspt_enum_mod4c0)) == "{ e := complement (omit) }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4c1)));
   if(log2str(t_renum(tspt_enum_mod4c1)) == "{ e := complement (first (0)) }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4c2)));
   if(log2str(t_renum(tspt_enum_mod4c2)) == "{ e := complement (first (0), second (1)) }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4vl1)));
   if(log2str(t_renum(tspt_enum_mod4vl1)) == "{ e := first (0) }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4vl2)));
   if(log2str(t_renum(tspt_enum_mod4vl2)) == "{ e := (first (0), second (1)) }" ) {setverdict(pass)} else {setverdict(fail)}
   
   log(log2str(t_renum(tspt_enum_mod4vifp)));
   if(log2str(t_renum(tspt_enum_mod4vifp)) == "{ e := first (0) ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4aifp)));
   if(log2str(t_renum(tspt_enum_mod4aifp)) == "{ e := * ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4qifp)));
   if(log2str(t_renum(tspt_enum_mod4qifp)) == "{ e := ? ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4oifp)));
   if(log2str(t_renum(tspt_enum_mod4oifp)) == "{ e := omit ifpresent }") {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4c0ifp)));
   if(log2str(t_renum(tspt_enum_mod4c0ifp)) == "{ e := complement (omit) ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4c1ifp)));
   if(log2str(t_renum(tspt_enum_mod4c1ifp)) == "{ e := complement (first (0)) ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4c2ifp)));
   if(log2str(t_renum(tspt_enum_mod4c2ifp)) == "{ e := complement (first (0), second (1)) ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4vl1ifp)));
   if(log2str(t_renum(tspt_enum_mod4vl1ifp)) == "{ e := first (0) ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
   log(log2str(t_renum(tspt_enum_mod4vl2ifp)));
   if(log2str(t_renum(tspt_enum_mod4vl2ifp)) == "{ e := (first (0), second (1)) ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
}


testcase tc_enum_ttcn2str_emb() runs on MC {
   log(ttcn2string(t_renum(tspt_enum_mod4v)));
   if(ttcn2string(t_renum(tspt_enum_mod4v)) == "{ e := first }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4a)));
   if(ttcn2string(t_renum(tspt_enum_mod4a)) == "{ e := * }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4q)));
   if(ttcn2string(t_renum(tspt_enum_mod4q)) == "{ e := ? }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4o)));
   if(ttcn2string(t_renum(tspt_enum_mod4o)) == "{ e := omit }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4c0)));
   if(ttcn2string(t_renum(tspt_enum_mod4c0)) == "{ e := complement (omit) }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4c1)));
   if(ttcn2string(t_renum(tspt_enum_mod4c1)) == "{ e := complement (first) }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4c2)));
   if(ttcn2string(t_renum(tspt_enum_mod4c2)) == "{ e := complement (first, second) }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4vl1)));
   if(ttcn2string(t_renum(tspt_enum_mod4vl1)) == "{ e := first }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4vl2)));
   if(ttcn2string(t_renum(tspt_enum_mod4vl2)) == "{ e := (first, second) }" ) {setverdict(pass)} else {setverdict(fail)}
   
   log(ttcn2string(t_renum(tspt_enum_mod4vifp)));
   if(ttcn2string(t_renum(tspt_enum_mod4vifp)) == "{ e := first ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4aifp)));
   if(ttcn2string(t_renum(tspt_enum_mod4aifp)) == "{ e := * ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4qifp)));
   if(ttcn2string(t_renum(tspt_enum_mod4qifp)) == "{ e := ? ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4oifp)));
   if(ttcn2string(t_renum(tspt_enum_mod4oifp)) == "{ e := omit ifpresent }") {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4c0ifp)));
   if(ttcn2string(t_renum(tspt_enum_mod4c0ifp)) == "{ e := complement (omit) ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4c1ifp)));
   if(ttcn2string(t_renum(tspt_enum_mod4c1ifp)) == "{ e := complement (first) ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4c2ifp)));
   if(ttcn2string(t_renum(tspt_enum_mod4c2ifp)) == "{ e := complement (first, second) ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4vl1ifp)));
   if(ttcn2string(t_renum(tspt_enum_mod4vl1ifp)) == "{ e := first ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
   log(ttcn2string(t_renum(tspt_enum_mod4vl2ifp)));
   if(ttcn2string(t_renum(tspt_enum_mod4vl2ifp)) == "{ e := (first, second) ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
}
//=========================================================================
// Control
//=========================================================================

control {
  log("***enum tests ********");
  execute(tc_enum_ModulePar());
  execute(tc_enum_ModulePar_emb());
  execute(tc_enum_ttcn2str_emb());
}


}  // end of module
