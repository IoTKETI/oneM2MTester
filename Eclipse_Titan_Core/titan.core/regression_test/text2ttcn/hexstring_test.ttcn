/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *
 ******************************************************************************/
/*
//AUTHOR: 
//DATE: 
//VERSION: 
*/
module hexstring_test
{

//=========================================================================
// Import Part
//=========================================================================
import from types all;
import from functions all;

//=========================================================================
// Module Parameters
//=========================================================================
modulepar {
	

  //hexstring 
  //============================================================
  //================ Type: hexstring ==========================
  //============================================================

  //modulepar hexstrings not modified from cfg file
  template hexstring tspt_hs_v := 'ABBA'H;
  template hexstring tspt_hs_o := omit;
  template hexstring tspt_hs_a := *;
  template hexstring tspt_hs_q := ?;
  template hexstring tspt_hs_al1 := * length(2); //length restriction
  template hexstring tspt_hs_al2 := * length(2..4);
  template hexstring tspt_hs_ql1 := ? length(2);
  template hexstring tspt_hs_ql2 := ? length(2..4);
  template hexstring tspt_hs_vl1 := ('ABBA'H);
  template hexstring tspt_hs_vl2 := ('ABBA'H,'baba'H);
  template hexstring tspt_hs_vl3 := ('ABBA'H,'baba'H,'B12'H);
  template hexstring tspt_hs_c1 := complement('ABBA'H)
  template hexstring tspt_hs_c2 := complement('ABBA'H,'baba'H);
  template hexstring tspt_hs_c3 := complement('ABBA'H,'baba'H,'B12'H);
  //template hexstring tspt_hs_r1 := ('A'H..'B'H); //range not allowed
  //template hexstring tspt_hs_r2 := ('a'H..'c'H);
  template hexstring tspt_hs_pa := 'abc*123'H
  template hexstring tspt_hs_pq := 'abc?123'H

  template hexstring tspt_hs_vifp := 'ABBA'H ifpresent;
  template hexstring tspt_hs_oifp := omit ifpresent;
  template hexstring tspt_hs_aifp := * ifpresent;
  template hexstring tspt_hs_qifp := ? ifpresent;
  template hexstring tspt_hs_al1ifp := * length(2) ifpresent; //length restriction
  template hexstring tspt_hs_al2ifp := * length(2..4) ifpresent;
  template hexstring tspt_hs_ql1ifp := ? length(2) ifpresent;
  template hexstring tspt_hs_ql2ifp := ? length(2..4) ifpresent;
  template hexstring tspt_hs_vl1ifp := ('ABBA'H) ifpresent;
  template hexstring tspt_hs_vl2ifp := ('ABBA'H,'baba'H) ifpresent;
  template hexstring tspt_hs_vl3ifp := ('ABBA'H,'baba'H,'B12'H) ifpresent;
  template hexstring tspt_hs_c1ifp := complement('ABBA'H) ifpresent
  template hexstring tspt_hs_c2ifp := complement('ABBA'H,'baba'H) ifpresent;
  template hexstring tspt_hs_c3ifp := complement('ABBA'H,'baba'H,'B12'H) ifpresent;
  //template hexstring tspt_hs_r1ifp := ('A'H..'B'H) ifpresent; //range not allowed
  //template hexstring tspt_hs_r2ifp := ('a'H..'c'H) ifpresent; //range not allowed
  template hexstring tspt_hs_paifp := 'abc*123'H  ifpresent
  template hexstring tspt_hs_pqifp := 'abc?123'H  ifpresent  

  //modulepar hexstrings modified from cfg file
  template hexstring tspt_hs_mod4v := * //after mod:'ABBA';
  template hexstring tspt_hs_mod4o := * //omit;
  template hexstring tspt_hs_mod4a := 'A'H //*;
  template hexstring tspt_hs_mod4q := ''H //?;
  template hexstring tspt_hs_mod4al1 := 'A'H //* length(2); //length restriction
  template hexstring tspt_hs_mod4al2 := '12345'H //mofified for: * length(2..4);
  template hexstring tspt_hs_mod4ql1 := '12345'H //mofified for:? length(2);
  template hexstring tspt_hs_mod4ql2 := '12345'H //mofified for:? length(2..4);
  template hexstring tspt_hs_mod4vl1 := ('ABBA'H) //TODO: Adam //It should be mofified for: ('ABBA'H);
  template hexstring tspt_hs_mod4vl2 := '12345'H //mofified for:('ABBA'H,'baba'H);
  template hexstring tspt_hs_mod4vl3 := '12345'H //mofified for:('ABBA'H,'baba'H,'B12'H);
  template hexstring tspt_hs_mod4c1 := '12345'H //mofified for:complement('ABBA')
  template hexstring tspt_hs_mod4c2 := '12345'H //mofified for:complement('ABBA','baba');
  template hexstring tspt_hs_mod4c3 := '12345'H //mofified for:complement('ABBA','baba','Bye');
  template hexstring tspt_hs_mod4r1 := '12345'H //mofified for:('A'..'B'); //range
  template hexstring tspt_hs_mod4r2 := '12345'H //mofified for:('a'..'c');
  template hexstring tspt_hs_mod4pa := '12345'H //mofified for:pattern 'abc*123'
  template hexstring tspt_hs_mod4pq := '12345'H //mofified for:pattern 'abc?123'

  template hexstring tspt_hs_mod4vifp := '12345'H //mofified for:'ABBA' ifpresent;
  template hexstring tspt_hs_mod4oifp := '12345'H //mofified for:omit ifpresent;
  template hexstring tspt_hs_mod4aifp := '12345'H //mofified for:* ifpresent;
  template hexstring tspt_hs_mod4qifp := '12345'H //mofified for:? ifpresent;
  template hexstring tspt_hs_mod4al1ifp := '12345'H //mofified for:* length(2) ifpresent; //length restriction
  template hexstring tspt_hs_mod4al2ifp := '12345'H //mofified for:* length(2..4) ifpresent;
  template hexstring tspt_hs_mod4ql1ifp := '12345'H //mofified for:? length(2) ifpresent;
  template hexstring tspt_hs_mod4ql2ifp := '12345'H //mofified for:? length(2..4) ifpresent;
  template hexstring tspt_hs_mod4vl1ifp :=  ('ABBA'H) ifpresent //TODO: Adam //It should be mofified for: ('ABBA'H);
  template hexstring tspt_hs_mod4vl2ifp := '12345'H //mofified for:('ABBA','baba') ifpresent;
  template hexstring tspt_hs_mod4vl3ifp := '12345'H //mofified for:('ABBA','baba','B12') ifpresent;
  template hexstring tspt_hs_mod4c1ifp := '12345'H //mofified for:complement('ABBA') ifpresent
  template hexstring tspt_hs_mod4c2ifp := '12345'H //mofified for:complement('ABBA','baba') ifpresent;
  template hexstring tspt_hs_mod4c3ifp := '12345'H //mofified for:complement('ABBA','baba','Bye') ifpresent;
  //template hexstring tspt_hs_mod4r1ifp := '12345'H //mofified for:('A'H..'B'H) ifpresent; //range
  //template hexstring tspt_hs_mod4r2ifp := '12345'H //mofified for:('a'H..'c'H) ifpresent;
  template hexstring tspt_hs_mod4paifp := '12345'H //mofified for:pattern 'abc*xyz'H  ifpresent
  template hexstring tspt_hs_mod4pqifp := '12345'H //mofified for:pattern 'abc?xyz'H  ifpresent  
   
}

//=========================================================================
// Data Types
//=========================================================================

// Insert data type defintions here if applicable!
// You can use the data_type skeleton!

//=========================================================================
// Signatures
//=========================================================================

// Insert signature definitions here if applicable!
// You can use the signature skeleton!

//=========================================================================
//Port Types
//=========================================================================

// Insert port type defintions here if applicable!
// You can use the port_type skeleton!

//=========================================================================
//Component Types
//=========================================================================

// Insert component type defintions here if applicable!
// You can use the component_type skeleton!

//=========================================================================
// Constants
//=========================================================================

// Insert constants here if applicable!
// You can use the constant skeleton!

//=========================================================================
// Templates
//=========================================================================

// Insert templates here if applicable!
// You can use the template skeleton!

//=========================================================================
// Altsteps
//=========================================================================

// Insert altsteps here if applicable!
// You can use the altstep skeleton!

//=========================================================================
// Functions
//=========================================================================

// Insert functions here if applicable!
// You can use the function skeleton!

//=========================================================================
// Testcases
//=========================================================================

  testcase tc_hs_ModulePar_emb() runs on MC {
    log(t_rhs(tspt_hs_mod4v));
    if(log2str(t_rhs(tspt_hs_mod4v)) != "{ hs := \'ABBA\'H }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4o));
    if(log2str(t_rhs(tspt_hs_mod4o)) != "{ hs := omit }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4a));
    if(log2str(t_rhs(tspt_hs_mod4a)) != "{ hs := * }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4q));
    if(log2str(t_rhs(tspt_hs_mod4q)) != "{ hs := ? }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4al1));
    if(log2str(t_rhs(tspt_hs_mod4al1)) != "{ hs := * length (2) }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4al2));
    if(log2str(t_rhs(tspt_hs_mod4al2)) != "{ hs := * length (2 .. 4) }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4ql1));
    if(log2str(t_rhs(tspt_hs_mod4ql1)) != "{ hs := ? length (2) }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4ql2));
    if(log2str(t_rhs(tspt_hs_mod4ql2)) != "{ hs := ? length (2 .. 4) }") {setverdict(fail)} else {setverdict(pass)};
    log(">",t_rhs(tspt_hs_mod4vl1),"<");
    if(log2str(t_rhs(tspt_hs_mod4vl1)) != "{ hs := \'ABBA\'H }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4vl2));
    if(log2str(t_rhs(tspt_hs_mod4vl2)) != "{ hs := (\'ABBA\'H, \'BABA\'H) }") {setverdict(fail)} else {setverdict(pass)};
    log(">{ hs := (\'ABBA\'H, \'BABA\'H) }<");
    log(t_rhs(tspt_hs_mod4vl3));
    if(log2str(t_rhs(tspt_hs_mod4vl3)) != "{ hs := (\'ABBA\'H, \'BABA\'H, \'B12\'H) }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4c1));
    if(log2str(t_rhs(tspt_hs_mod4c1)) != "{ hs := complement (\'ABBA\'H) }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4c2));
    if(log2str(t_rhs(tspt_hs_mod4c2)) != "{ hs := complement (\'ABBA\'H, \'BABA\'H) }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4c3));
    if(log2str(t_rhs(tspt_hs_mod4c3)) != "{ hs := complement (\'ABBA\'H, \'BABA\'H, \'B12\'H) }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4pa));
    if(log2str(t_rhs(tspt_hs_mod4pa)) != "{ hs := \'ABC*123\'H }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4pq));
    if(log2str(t_rhs(tspt_hs_mod4pq)) != "{ hs := \'ABC?123\'H }") {setverdict(fail)} else {setverdict(pass)};
    //==
    log(t_rhs(tspt_hs_mod4vifp));
    if(log2str(t_rhs(tspt_hs_mod4vifp)) != "{ hs := \'ABBA\'H ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4oifp));
    if(log2str(t_rhs(tspt_hs_mod4oifp)) != "{ hs := omit ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4aifp));
    if(log2str(t_rhs(tspt_hs_mod4aifp)) != "{ hs := * ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4qifp));
    if(log2str(t_rhs(tspt_hs_mod4qifp)) != "{ hs := ? ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4al1ifp));
    if(log2str(t_rhs(tspt_hs_mod4al1ifp)) != "{ hs := * length (2) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4al2ifp));
    if(log2str(t_rhs(tspt_hs_mod4al2ifp)) != "{ hs := * length (2 .. 4) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4ql1ifp));
    if(log2str(t_rhs(tspt_hs_mod4ql1ifp)) != "{ hs := ? length (2) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4ql2ifp));
    if(log2str(t_rhs(tspt_hs_mod4ql2ifp)) != "{ hs := ? length (2 .. 4) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4vl1ifp));
    if(log2str(t_rhs(tspt_hs_mod4vl1ifp)) != "{ hs := \'ABBA\'H ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4vl2ifp));
    if(log2str(t_rhs(tspt_hs_mod4vl2ifp)) != "{ hs := (\'ABBA\'H, \'BABA\'H) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4vl3ifp));
    if(log2str(t_rhs(tspt_hs_mod4vl3ifp)) != "{ hs := (\'ABBA\'H, \'BABA\'H, \'B12\'H) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4c1ifp));
    if(log2str(t_rhs(tspt_hs_mod4c1ifp)) != "{ hs := complement (\'ABBA\'H) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4c2ifp));
    if(log2str(t_rhs(tspt_hs_mod4c2ifp)) != "{ hs := complement (\'ABBA\'H, \'BABA\'H) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4c3ifp));
    if(log2str(t_rhs(tspt_hs_mod4c3ifp)) != "{ hs := complement (\'ABBA\'H, \'BABA\'H, \'B12\'H) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4paifp));
    if(log2str(t_rhs(tspt_hs_mod4paifp)) != "{ hs := \'ABC*123'H ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_rhs(tspt_hs_mod4pqifp));
    if(log2str(t_rhs(tspt_hs_mod4pqifp)) != "{ hs := \'ABC?123\'H ifpresent }") {setverdict(fail)} else {setverdict(pass)};
  }


//=========================================================================
// Control
//=========================================================================

control {
  log("***hexstring tests****");
  execute(tc_hs_ModulePar_emb());
}


}  // end of module
