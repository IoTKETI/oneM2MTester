/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *
 ******************************************************************************/
/*
//AUTHOR: 
//DATE: 
//VERSION: 
*/
module union_test
{

//=========================================================================
// Import Part
//=========================================================================
import from types all;
import from functions all;
//=========================================================================
// Module Parameters
//=========================================================================
modulepar{
  template U tspt_union_mod4v_b := { e := first }
  template U tspt_union_mod4v_i := { e := first }
  template U tspt_union_mod4v_f := { e := first }
  template U tspt_union_mod4v_bs := { e := first }
  template U tspt_union_mod4v_os := { e := first }
  template U tspt_union_mod4v_hs := { e := first }
  template U tspt_union_mod4v_cs := { e := first }
  template U tspt_union_mod4v_r := { e := first }
  template U tspt_union_mod4v_roi := { e := first }
  template U tspt_union_mod4v_s := { e := first }
  template U tspt_union_mod4v_s_uninit := { e := first }
  template U tspt_union_mod4v_socs := { e := first }
  template U tspt_union_mod4v_e := { e := first }
  template U tspt_union_mod4v_u := { e := first }
  
  template U tspt_union_mod4a := { e := first }
  template U tspt_union_mod4q := { e := first }
  template U tspt_union_mod4o := { e := first }
  
  //union ifpresent
  template U tspt_union_mod4v_bifp := { e := first }  
  template U tspt_union_mod4v_iifp := { e := first } ifpresent
  template U tspt_union_mod4v_fifp := { e := first } ifpresent
  template U tspt_union_mod4v_bsifp := { e := first } ifpresent
  template U tspt_union_mod4v_osifp := { e := first } ifpresent
  template U tspt_union_mod4v_hsifp := { e := first } ifpresent
  template U tspt_union_mod4v_csifp := { e := first } ifpresent
  template U tspt_union_mod4v_rifp := { e := first } ifpresent
  template U tspt_union_mod4v_roiifp := { e := first } ifpresent
  template U tspt_union_mod4v_sifp := { e := first } ifpresent
  template U tspt_union_mod4v_s_uninitifp := { e := first } 
  template U tspt_union_mod4v_socsifp := { e := first } ifpresent
  template U tspt_union_mod4v_eifp := { e := first } ifpresent
  template U tspt_union_mod4v_uifp := { e := first } ifpresent
  
  template U tspt_union_mod4aifp := { e := first } ifpresent
  template U tspt_union_mod4qifp := { e := first } ifpresent
  template U tspt_union_mod4oifp := { e := first } ifpresent  
}
//=========================================================================
// Data Types
//=========================================================================

// Insert data type defintions here if applicable!
// You can use the data_type skeleton!

//=========================================================================
// Signatures
//=========================================================================

// Insert signature definitions here if applicable!
// You can use the signature skeleton!

//=========================================================================
//Port Types
//=========================================================================

// Insert port type defintions here if applicable!
// You can use the port_type skeleton!

//=========================================================================
//Component Types
//=========================================================================

// Insert component type defintions here if applicable!
// You can use the component_type skeleton!

//=========================================================================
// Constants
//=========================================================================

// Insert constants here if applicable!
// You can use the constant skeleton!

//=========================================================================
// Templates
//=========================================================================

// Insert templates here if applicable!
// You can use the template skeleton!

//=========================================================================
// Altsteps
//=========================================================================

// Insert altsteps here if applicable!
// You can use the altstep skeleton!

//=========================================================================
// Functions
//=========================================================================

// Insert functions here if applicable!
// You can use the function skeleton!

//=========================================================================
// Testcases
//=========================================================================


testcase tc_union_ModulePar() runs on MC {
  log(log2str(tspt_union_mod4v_b));
  if(log2str(tspt_union_mod4v_b) == "{ b := true }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_i));
  if(log2str(tspt_union_mod4v_i) == "{ i := 1 }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_f));
  if(log2str(tspt_union_mod4v_f) == "{ f := 1.000000 }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_bs));
  if(log2str(tspt_union_mod4v_bs) == "{ bs := '01101'B }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_os));
  if(log2str(tspt_union_mod4v_os) == "{ os := 'ABBA'O }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_hs));
  if(log2str(tspt_union_mod4v_hs) == "{ hs := 'ABBA'H }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_cs));
  if(log2str(tspt_union_mod4v_cs) == "{ cs := \"ABBA\" }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_r));
  if(log2str(tspt_union_mod4v_r) == "{ r := { i := 1, f := 1.000000, cs := \"ABBA\", bs := '0100'B } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_roi));
  if(log2str(tspt_union_mod4v_roi) == "{ roi := { 1 } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_s));
  if(log2str(tspt_union_mod4v_s) == 
    "{ s := { b := true, i := 1, f := 1.000000, bs := '01101'B, os := 'ABBA'O, hs := 'ABBA'H, cs := \"ABBA\" } }" ) 
  {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_s_uninit)); 
  if(log2str(tspt_union_mod4v_s_uninit) == 
    "{ s := { b := true, i := <uninitialized template>, f := <uninitialized template>, bs := <uninitialized template>, os := <uninitialized template>, hs := <uninitialized template>, cs := <uninitialized template> } }")
  {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_socs));
  if(log2str(tspt_union_mod4v_socs) == "{ socs := { \"ABBA\" } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_e));
  if(log2str(tspt_union_mod4v_e) == "{ e := first (0) }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_u));
  if(log2str(tspt_union_mod4v_u) == "{ u := { i := 1 } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4a));
  if(log2str(tspt_union_mod4a) == "*" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4q));
  if(log2str(tspt_union_mod4q) == "?" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4o));
  if(log2str(tspt_union_mod4o) == "omit" ) {setverdict(pass)} else {setverdict(fail)}
  
  log(log2str(tspt_union_mod4v_bifp));
  if(log2str(tspt_union_mod4v_bifp) == "{ b := true } ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_iifp));
  if(log2str(tspt_union_mod4v_iifp) == "{ i := 1 } ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_fifp));
  if(log2str(tspt_union_mod4v_fifp) == "{ f := 1.000000 } ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_bsifp));
  if(log2str(tspt_union_mod4v_bsifp) == "{ bs := '01101'B } ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_osifp));
  if(log2str(tspt_union_mod4v_osifp) == "{ os := 'ABBA'O } ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_hsifp));
  if(log2str(tspt_union_mod4v_hsifp) == "{ hs := 'ABBA'H } ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_csifp));
  if(log2str(tspt_union_mod4v_csifp) == "{ cs := \"ABBA\" } ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_rifp));
  if(log2str(tspt_union_mod4v_rifp) == "{ r := { i := 1, f := 1.000000, cs := \"ABBA\", bs := '0100'B } } ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_roiifp));
  if(log2str(tspt_union_mod4v_roiifp) == "{ roi := { 1 } } ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_sifp));
  if(log2str(tspt_union_mod4v_sifp) == 
    "{ s := { b := true, i := 1, f := 1.000000, bs := '01101'B, os := 'ABBA'O, hs := 'ABBA'H, cs := \"ABBA\" } } ifpresent" ) 
  {setverdict(pass)} else {setverdict(fail)}	    
  log(log2str(tspt_union_mod4v_s_uninitifp));
  if(log2str(tspt_union_mod4v_s_uninitifp) == 
    "{ s := { b := true, i := <uninitialized template>, f := <uninitialized template>, bs := <uninitialized template>, os := <uninitialized template>, hs := <uninitialized template>, cs := <uninitialized template> } } ifpresent")
  {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_socsifp));
  if(log2str(tspt_union_mod4v_socsifp) == "{ socs := { \"ABBA\" } } ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_eifp));
  if(log2str(tspt_union_mod4v_eifp) == "{ e := first (0) } ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4v_uifp));
  if(log2str(tspt_union_mod4v_uifp) == "{ u := { i := 1 } } ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4aifp));
  if(log2str(tspt_union_mod4aifp) == "* ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4qifp));
  if(log2str(tspt_union_mod4qifp) == "? ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(tspt_union_mod4oifp));
  if(log2str(tspt_union_mod4oifp) == "omit ifpresent" ) {setverdict(pass)} else {setverdict(fail)}
}

testcase tc_union_ModulePar_emb() runs on MC {
  log(log2str(t_ru(tspt_union_mod4v_b)));
  if(log2str(t_ru(tspt_union_mod4v_b)) == "{ u := { b := true } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_i)));
  if(log2str(t_ru(tspt_union_mod4v_i)) == "{ u := { i := 1 } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_f)));
  if(log2str(t_ru(tspt_union_mod4v_f)) == "{ u := { f := 1.000000 } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_bs)));
  if(log2str(t_ru(tspt_union_mod4v_bs)) == "{ u := { bs := '01101'B } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_os)));
  if(log2str(t_ru(tspt_union_mod4v_os)) == "{ u := { os := 'ABBA'O } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_hs)));
  if(log2str(t_ru(tspt_union_mod4v_hs)) == "{ u := { hs := 'ABBA'H } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_cs)));
  if(log2str(t_ru(tspt_union_mod4v_cs)) == "{ u := { cs := \"ABBA\" } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_r)));
  if(log2str(t_ru(tspt_union_mod4v_r)) == "{ u := { r := { i := 1, f := 1.000000, cs := \"ABBA\", bs := '0100'B } } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_roi)));
  if(log2str(t_ru(tspt_union_mod4v_roi)) == "{ u := { roi := { 1 } } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_s)));
  if(log2str(t_ru(tspt_union_mod4v_s)) == 
    "{ u := { s := { b := true, i := 1, f := 1.000000, bs := '01101'B, os := 'ABBA'O, hs := 'ABBA'H, cs := \"ABBA\" } } }" ) 
  {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_s_uninit))); 
  if(log2str(t_ru(tspt_union_mod4v_s_uninit)) == 
    "{ u := { s := { b := true, i := <uninitialized template>, f := <uninitialized template>, bs := <uninitialized template>, os := <uninitialized template>, hs := <uninitialized template>, cs := <uninitialized template> } } }")
  {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_socs)));
  if(log2str(t_ru(tspt_union_mod4v_socs)) == "{ u := { socs := { \"ABBA\" } } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_e)));
  if(log2str(t_ru(tspt_union_mod4v_e)) == "{ u := { e := first (0) } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_u)));
  if(log2str(t_ru(tspt_union_mod4v_u)) == "{ u := { u := { i := 1 } } }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4a)));
  if(log2str(t_ru(tspt_union_mod4a)) == "{ u := * }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4q)));
  if(log2str(t_ru(tspt_union_mod4q)) == "{ u := ? }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4o)));
  if(log2str(t_ru(tspt_union_mod4o)) == "{ u := omit }" ) {setverdict(pass)} else {setverdict(fail)}
  
  log(log2str(t_ru(tspt_union_mod4v_bifp)));
  if(log2str(t_ru(tspt_union_mod4v_bifp)) == "{ u := { b := true } ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_iifp)));
  if(log2str(t_ru(tspt_union_mod4v_iifp)) == "{ u := { i := 1 } ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_fifp)));
  if(log2str(t_ru(tspt_union_mod4v_fifp)) == "{ u := { f := 1.000000 } ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_bsifp)));
  if(log2str(t_ru(tspt_union_mod4v_bsifp)) == "{ u := { bs := '01101'B } ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_osifp)));
  if(log2str(t_ru(tspt_union_mod4v_osifp)) == "{ u := { os := 'ABBA'O } ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_hsifp)));
  if(log2str(t_ru(tspt_union_mod4v_hsifp)) == "{ u := { hs := 'ABBA'H } ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_csifp)));
  if(log2str(t_ru(tspt_union_mod4v_csifp)) == "{ u := { cs := \"ABBA\" } ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_rifp)));
  if(log2str(t_ru(tspt_union_mod4v_rifp)) == "{ u := { r := { i := 1, f := 1.000000, cs := \"ABBA\", bs := '0100'B } } ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_roiifp)));
  if(log2str(t_ru(tspt_union_mod4v_roiifp)) == "{ u := { roi := { 1 } } ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_sifp)));
  if(log2str(t_ru(tspt_union_mod4v_sifp)) == 
    "{ u := { s := { b := true, i := 1, f := 1.000000, bs := '01101'B, os := 'ABBA'O, hs := 'ABBA'H, cs := \"ABBA\" } } ifpresent }" ) 
  {setverdict(pass)} else {setverdict(fail)}	    
  log(log2str(t_ru(tspt_union_mod4v_s_uninitifp)));
  if(log2str(t_ru(tspt_union_mod4v_s_uninitifp)) == 
    "{ u := { s := { b := true, i := <uninitialized template>, f := <uninitialized template>, bs := <uninitialized template>, os := <uninitialized template>, hs := <uninitialized template>, cs := <uninitialized template> } } ifpresent }")
  {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_socsifp)));
  if(log2str(t_ru(tspt_union_mod4v_socsifp)) == "{ u := { socs := { \"ABBA\" } } ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_eifp)));
  if(log2str(t_ru(tspt_union_mod4v_eifp)) == "{ u := { e := first (0) } ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4v_uifp)));
  if(log2str(t_ru(tspt_union_mod4v_uifp)) == "{ u := { u := { i := 1 } } ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4aifp)));
  if(log2str(t_ru(tspt_union_mod4aifp)) == "{ u := * ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4qifp)));
  if(log2str(t_ru(tspt_union_mod4qifp)) == "{ u := ? ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
  log(log2str(t_ru(tspt_union_mod4oifp)));
  if(log2str(t_ru(tspt_union_mod4oifp)) == "{ u := omit ifpresent }" ) {setverdict(pass)} else {setverdict(fail)}
}
  //=========================================================================
  // Control
  //=========================================================================
  control {
    log("***union tests********");
    execute(tc_union_ModulePar());
    execute(tc_union_ModulePar_emb());
  }
  
}  // end of module
