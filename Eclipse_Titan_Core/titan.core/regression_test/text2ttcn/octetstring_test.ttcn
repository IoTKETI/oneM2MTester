/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *
 ******************************************************************************/
/*
//AUTHOR: 
//DATE: 
//VERSION: 
*/
module octetstring_test
{

//=========================================================================
// Import Part
//=========================================================================
import from types all;
import from functions all;
//=========================================================================
// Module Parameters
//=========================================================================

modulepar {
  //modulepar octetstrings not modified from cfg file
  template octetstring tspt_os_v := 'ABBA'O;
  template octetstring tspt_os_o := omit;
  template octetstring tspt_os_a := *;
  template octetstring tspt_os_q := ?;
  template octetstring tspt_os_al1 := * length(2); //length restriction
  template octetstring tspt_os_al2 := * length(2..4);
  template octetstring tspt_os_ql1 := ? length(2);
  template octetstring tspt_os_ql2 := ? length(2..4);
  template octetstring tspt_os_vl1 := ('ABBA'O);
  template octetstring tspt_os_vl2 := ('ABBA'O,'baba'O);
  template octetstring tspt_os_vl3 := ('ABBA'O,'baba'O,'B120'O);
  template octetstring tspt_os_c1 := complement('ABBA'O)
  template octetstring tspt_os_c2 := complement('ABBA'O,'baba'O);
  template octetstring tspt_os_c3 := complement('ABBA'O,'baba'O,'B120'O);
  //template octetstring tspt_os_r1 := ('A'O..'B'O); //range not allowed
  //template octetstring tspt_os_r2 := ('a'O..'c'O);
  template octetstring tspt_os_pa := 'abcd*1234'O
  template octetstring tspt_os_pq := 'abcd?1234'O
  
  template octetstring tspt_os_vifp := 'ABBA'O ifpresent;
  template octetstring tspt_os_oifp := omit ifpresent;
  template octetstring tspt_os_aifp := * ifpresent;
  template octetstring tspt_os_qifp := ? ifpresent;
  template octetstring tspt_os_al1ifp := * length(2) ifpresent; //length restriction
  template octetstring tspt_os_al2ifp := * length(2..4) ifpresent;
  template octetstring tspt_os_ql1ifp := ? length(2) ifpresent;
  template octetstring tspt_os_ql2ifp := ? length(2..4) ifpresent;
  template octetstring tspt_os_vl1ifp := ('ABBA'O) ifpresent;
  template octetstring tspt_os_vl2ifp := ('ABBA'O,'baba'O) ifpresent;
  template octetstring tspt_os_vl3ifp := ('ABBA'O,'baba'O,'B120'O) ifpresent;
  template octetstring tspt_os_c1ifp := complement('ABBA'O) ifpresent
  template octetstring tspt_os_c2ifp := complement('ABBA'O,'baba'O) ifpresent;
  template octetstring tspt_os_c3ifp := complement('ABBA'O,'baba'O,'B120'O) ifpresent;
  //template octetstring tspt_os_r1ifp := ('A'O..'B'O) ifpresent; //range not allowed
  //template octetstring tspt_os_r2ifp := ('a'O..'c'O) ifpresent; //range not allowed
  template octetstring tspt_os_paifp := 'abcd*1234'O  ifpresent
  template octetstring tspt_os_pqifp := 'abcd?1234'O  ifpresent  
  
  //modulepar octetstrings modified from cfg file
  template octetstring tspt_os_mod4v := * //after mod:'ABBA';
  template octetstring tspt_os_mod4o := * //omit;
  template octetstring tspt_os_mod4a := 'AB'O //*;
  template octetstring tspt_os_mod4q := ''O //?;
  template octetstring tspt_os_mod4al1 := 'AB'O //* length(2); //length restriction
  template octetstring tspt_os_mod4al2 := '1234'O //mofified for: * length(2..4);
  template octetstring tspt_os_mod4ql1 := '1234'O //mofified for:? length(2);
  template octetstring tspt_os_mod4ql2 := '1234'O //mofified for:? length(2..4);
  template octetstring tspt_os_mod4vl1 := ('ABBA'O) //TODO: Adam //It should be mofified for: ('ABBA'O);
  template octetstring tspt_os_mod4vl2 := '1234'O //mofified for:('ABBA'O,'baba'O);
  template octetstring tspt_os_mod4vl3 := '1234'O //mofified for:('ABBA'O,'baba'O,'B12'O);
  template octetstring tspt_os_mod4c1 := '1234'O //mofified for:complement('ABBA')
  template octetstring tspt_os_mod4c2 := '1234'O //mofified for:complement('ABBA','baba');
  template octetstring tspt_os_mod4c3 := '1234'O //mofified for:complement('ABBA','baba','Bye');
  template octetstring tspt_os_mod4r1 := '1234'O //mofified for:('A'..'B'); //range
  template octetstring tspt_os_mod4r2 := '1234'O //mofified for:('a'..'c');
  template octetstring tspt_os_mod4pa := '1234'O //mofified for:pattern 'abc*123'
  template octetstring tspt_os_mod4pq := '1234'O //mofified for:pattern 'abc?123'
  
  template octetstring tspt_os_mod4vifp := '1234'O //mofified for:'ABBA' ifpresent;
  template octetstring tspt_os_mod4oifp := '1234'O //mofified for:omit ifpresent;
  template octetstring tspt_os_mod4aifp := '1234'O //mofified for:* ifpresent;
  template octetstring tspt_os_mod4qifp := '1234'O //mofified for:? ifpresent;
  template octetstring tspt_os_mod4al1ifp := '1234'O //mofified for:* length(2) ifpresent; //length restriction
  template octetstring tspt_os_mod4al2ifp := '1234'O //mofified for:* length(2..4) ifpresent;
  template octetstring tspt_os_mod4ql1ifp := '1234'O //mofified for:? length(2) ifpresent;
  template octetstring tspt_os_mod4ql2ifp := '1234'O //mofified for:? length(2..4) ifpresent;
  template octetstring tspt_os_mod4vl1ifp :=  ('ABBA'O) ifpresent //TODO: Adam //It should be mofified for: ('ABBA'O);
  template octetstring tspt_os_mod4vl2ifp := '1234'O //mofified for:('ABBA','baba') ifpresent;
  template octetstring tspt_os_mod4vl3ifp := '1234'O //mofified for:('ABBA','baba','B12') ifpresent;
  template octetstring tspt_os_mod4c1ifp := '1234'O //mofified for:complement('ABBA') ifpresent
  template octetstring tspt_os_mod4c2ifp := '1234'O //mofified for:complement('ABBA','baba') ifpresent;
  template octetstring tspt_os_mod4c3ifp := '1234'O //mofified for:complement('ABBA','baba','Bye') ifpresent;
  //template octetstring tspt_os_mod4r1ifp := '1234'O //mofified for:('A'O..'B'O) ifpresent; //range
  //template octetstring tspt_os_mod4r2ifp := '1234'O //mofified for:('a'O..'c'O) ifpresent;
  template octetstring tspt_os_mod4paifp := '1234'O //mofified for:pattern 'abc*xyz'O  ifpresent
  template octetstring tspt_os_mod4pqifp := '1234'O //mofified for:pattern 'abc?xyz'O  ifpresent  
  
}

//=========================================================================
// Data Types
//=========================================================================

// Insert data type defintions here if applicable!
// You can use the data_type skeleton!

//=========================================================================
// Signatures
//=========================================================================

// Insert signature definitions here if applicable!
// You can use the signature skeleton!

//=========================================================================
//Port Types
//=========================================================================

// Insert port type defintions here if applicable!
// You can use the port_type skeleton!

//=========================================================================
//Component Types
//=========================================================================

// Insert component type defintions here if applicable!
// You can use the component_type skeleton!

//=========================================================================
// Constants
//=========================================================================

// Insert constants here if applicable!
// You can use the constant skeleton!

//=========================================================================
// Templates
//=========================================================================

// Insert templates here if applicable!
// You can use the template skeleton!

//=========================================================================
// Altsteps
//=========================================================================

// Insert altsteps here if applicable!
// You can use the altstep skeleton!

//=========================================================================
// Functions
//=========================================================================

// Insert functions here if applicable!
// You can use the function skeleton!

//=========================================================================
// Testcases
//=========================================================================

  testcase tc_os_ModulePar_emb() runs on MC {
    log(t_ros(tspt_os_mod4v));
    if(log2str(t_ros(tspt_os_mod4v)) != "{ os := \'ABBA\'O }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4o));
    if(log2str(t_ros(tspt_os_mod4o)) != "{ os := omit }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4a));
    if(log2str(t_ros(tspt_os_mod4a)) != "{ os := * }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4q));
    if(log2str(t_ros(tspt_os_mod4q)) != "{ os := ? }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4al1));
    if(log2str(t_ros(tspt_os_mod4al1)) != "{ os := * length (2) }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4al2));
    if(log2str(t_ros(tspt_os_mod4al2)) != "{ os := * length (2 .. 4) }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4ql1));
    if(log2str(t_ros(tspt_os_mod4ql1)) != "{ os := ? length (2) }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4ql2));
    if(log2str(t_ros(tspt_os_mod4ql2)) != "{ os := ? length (2 .. 4) }") {setverdict(fail)} else {setverdict(pass)};
    log(">",t_ros(tspt_os_mod4vl1),"<");
    if(log2str(t_ros(tspt_os_mod4vl1)) != "{ os := \'ABBA\'O }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4vl2));
    if(log2str(t_ros(tspt_os_mod4vl2)) != "{ os := (\'ABBA\'O, \'BABA\'O) }") {setverdict(fail)} else {setverdict(pass)};
    log(">{ os := (\'ABBA\'O, \'BABA\'O) }<");
    log(t_ros(tspt_os_mod4vl3));
    if(log2str(t_ros(tspt_os_mod4vl3)) != "{ os := (\'ABBA\'O, \'BABA\'O, \'B120\'O) }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4c1));
    if(log2str(t_ros(tspt_os_mod4c1)) != "{ os := complement (\'ABBA\'O) }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4c2));
    if(log2str(t_ros(tspt_os_mod4c2)) != "{ os := complement (\'ABBA\'O, \'BABA\'O) }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4c3));
    if(log2str(t_ros(tspt_os_mod4c3)) != "{ os := complement (\'ABBA\'O, \'BABA\'O, \'B120\'O) }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4pa));
    if(log2str(t_ros(tspt_os_mod4pa)) != "{ os := \'ABCD*1234\'O }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4pq));
    if(log2str(t_ros(tspt_os_mod4pq)) != "{ os := \'ABCD?1234\'O }") {setverdict(fail)} else {setverdict(pass)};
    //==
    log(t_ros(tspt_os_mod4vifp));
    if(log2str(t_ros(tspt_os_mod4vifp)) != "{ os := \'ABBA\'O ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4oifp));
    if(log2str(t_ros(tspt_os_mod4oifp)) != "{ os := omit ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4aifp));
    if(log2str(t_ros(tspt_os_mod4aifp)) != "{ os := * ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4qifp));
    if(log2str(t_ros(tspt_os_mod4qifp)) != "{ os := ? ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4al1ifp));
    if(log2str(t_ros(tspt_os_mod4al1ifp)) != "{ os := * length (2) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4al2ifp));
    if(log2str(t_ros(tspt_os_mod4al2ifp)) != "{ os := * length (2 .. 4) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4ql1ifp));
    if(log2str(t_ros(tspt_os_mod4ql1ifp)) != "{ os := ? length (2) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4ql2ifp));
    if(log2str(t_ros(tspt_os_mod4ql2ifp)) != "{ os := ? length (2 .. 4) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4vl1ifp));
    if(log2str(t_ros(tspt_os_mod4vl1ifp)) != "{ os := \'ABBA\'O ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4vl2ifp));
    if(log2str(t_ros(tspt_os_mod4vl2ifp)) != "{ os := (\'ABBA\'O, \'BABA\'O) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4vl3ifp));
    if(log2str(t_ros(tspt_os_mod4vl3ifp)) != "{ os := (\'ABBA\'O, \'BABA\'O, \'B120\'O) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4c1ifp));
    if(log2str(t_ros(tspt_os_mod4c1ifp)) != "{ os := complement (\'ABBA\'O) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4c2ifp));
    if(log2str(t_ros(tspt_os_mod4c2ifp)) != "{ os := complement (\'ABBA\'O, \'BABA\'O) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4c3ifp));
    if(log2str(t_ros(tspt_os_mod4c3ifp)) != "{ os := complement (\'ABBA\'O, \'BABA\'O, \'B120\'O) ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4paifp));
    if(log2str(t_ros(tspt_os_mod4paifp)) != "{ os := \'ABCD*1234'O ifpresent }") {setverdict(fail)} else {setverdict(pass)};
    log(t_ros(tspt_os_mod4pqifp));
    if(log2str(t_ros(tspt_os_mod4pqifp)) != "{ os := \'ABCD?1234\'O ifpresent }") {setverdict(fail)} else {setverdict(pass)};
  }
  
  //=========================================================================
  // Control
  //=========================================================================
  control {
    log("***octetstring tests****");
    execute(tc_os_ModulePar_emb());
  }
  
}  // end of module
