/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Szabados, Kristof
 *
 ******************************************************************************/
//Purpose: To test function ispresent()
//Last modified:2013-01-09 ETHBAAT
//It should be run in parallel mode

module IsPresent_Test {

modulepar integer tsp_repeatN :=100;

type port MyChrMessage_PT message {
  inout charstring
} with { extension "internal"}

type component MTC_CT {
  port MyChrMessage_PT my_PCO;
  //var integer v_counter1 :=0;

}
//===== SIMPLE, NOT TOO DEEP =====
type record of charstring ROC;
type record of integer  ROI;
type record MyRecord {
  integer       i optional,
  float         x optional,
  charstring    c
}

type record of ROI ROROI;

type union MyUnion1 {
  ROC roc,
  integer i,
  ROI roi,
  MyRecord r
}

const MyUnion1 c_myunion1:= { roc:= { "1aa", "2bb", "3cc"}}
const MyUnion1 c_myunion2:= { i:= 5}


//====== DEEP 3===============
type record MyRec2 {
  ROC roc optional,
  ROI roi optional,
  MyUnion1 u optional, 
  MyRecord r optional
}

type record of MyRec2 MyRecOf

  type record MyRec3{
    ROROI roroi optional,
    MyRec2 r optional
  }

  const MyRec2 c_myrec2_1:={ 
    roc:=omit,
    roi:={},
    u:={r:={ i:=1, x:=1.0, c:="one"}},
    r:={ i:=1, x:=1.0, c:="one"}
  }
  const MyRec2 c_myrec2_2:={ 
    roc:={},
    roi:={10,9,8},
    u:={r:={ i:=1, x:=1.0, c:="one"}},
    r:={ i:=1, x:=1.0, c:="one"}
  }  


  //partially initialized record:
  const MyRec2 c_myrec2_part:={ 
    roc:={},
    roi:={10,9,8},
    u:={ r:={ /*i:=1,*/ x:=1.0, c:="one"}},
    r:={ i:=1, x:=1.0, c:="one"}
  }  
  const MyRec3 c_myrec3_1 := {
    roroi:= { {1,2,3,4,5,6,7,8,9},{10} },
    r:= omit
  }

  const MyRec3 c_myrec3_2 := {
    roroi:= { {1,2,3,4,5,6,7,8,9},{10} },
    r:= {
      roc:={},
      roi:={},
      u:={i:=5},
      r:=omit
    }
  } 

  const MyRec3 c_myrec3_innerOmits := {
    roroi:= { {1,2,3,4,5,6,7,8,9},{10} },
    r:= {
      roc:=omit,
      roi:=omit,
      u:=omit,
      r:=omit
    }
  } 


  //==== Templates =====


  //===== SIMPLE TYPES =====
  testcase tc_simple_charstring_unbound() runs on MTC_CT {
    var charstring vl_ch;
    if(ispresent(vl_ch)){setverdict(fail)} else {setverdict(pass)}
  }


  testcase tc_simple_charstring_isvalue() runs on MTC_CT {
    var charstring vl_ch:="honey";
    if(ispresent(vl_ch)) { setverdict(pass)} else {setverdict(fail)}
  }

  testcase tc_simple_charstring_template_unbound() runs on MTC_CT {
    var template charstring vlt_ch;
    if(ispresent(vlt_ch)){setverdict(fail)} else {setverdict(pass)}
  }

  testcase tc_simple_charstring_template_isvalue() runs on MTC_CT {
    var template charstring vlt_ch:="AB?D*"
    if(ispresent(vlt_ch)) {setverdict(pass)} else {setverdict(fail)}

  }

  testcase tc_simple_charstring_template_pattern() runs on MTC_CT {
    var template charstring vlt_ch;
    vlt_ch:= pattern "AB?D"
    if(ispresent(vlt_ch)) {setverdict(pass)} else {setverdict(fail)}
  }

  testcase tc_simple_integer_unbound() runs on MTC_CT {
    var integer vl_i;
    if(ispresent(vl_i)){setverdict(fail)} else {setverdict(pass)} //fail
  }

  testcase tc_simple_integer_value() runs on MTC_CT {
    var integer vl_i:=5;
    if(ispresent(vl_i)) {setverdict(pass)} else {setverdict(fail)} //pass,  
  }

  testcase tc_simple_integer_templ_asterix() runs on MTC_CT {
    var template integer vtl_i :=*;
    if(ispresent( vtl_i )) {setverdict(fail)}else {setverdict(pass)}; 
  }

  testcase tc_simple_integer_templ_qm() runs on MTC_CT {
    var template integer vtl_i :=?;
    if(ispresent( vtl_i )) {setverdict(pass)}else {setverdict(fail)}; 
  }

  testcase tc_simple_integer_templ_value() runs on MTC_CT {
    var template integer vtl_i:=5;
    if(ispresent( vtl_i )) {setverdict(pass)}else {setverdict(fail)}; 
  }

  testcase tc_simple_octetstring_unbound() runs on MTC_CT {
    var octetstring vl_o;
    if(ispresent(vl_o)){setverdict(fail)} else {setverdict(pass)} //fail 
  }

  testcase tc_simple_octetstring_isvalue() runs on MTC_CT {
    var octetstring   
      vl_o:='ABBA'O;
    if(ispresent(vl_o)) {setverdict(pass)} else {setverdict(fail)} //not logged
  }

  //======= SPECIAL TYPES ======

  altstep as_empty() runs on MTC_CT {
    [] my_PCO.receive {}
  };

  function f_empty() runs on MTC_CT {
  }

  testcase tc_special_default_value_unbound() runs on MTC_CT {
    var default vl_default;
    if(ispresent(vl_default)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_special_default_value_null() runs on MTC_CT {
    var default vl_default := null;
    if(ispresent(vl_default)) {setverdict(pass)} else {setverdict(fail)}
  }
  testcase tc_special_default_value_isvalue() runs on MTC_CT {
    var default vl_default := activate(as_empty());
    if(ispresent(vl_default)){setverdict(pass)}else {setverdict(fail)};

    deactivate(vl_default);
    if(ispresent(vl_default)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_special_compref_unbound() runs on MTC_CT {
    var MTC_CT vc_myComp;
    if(ispresent(vc_myComp)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_special_compref_isvalue() runs on MTC_CT {
    var MTC_CT vc_myComp:= MTC_CT.create("hali");
    if(ispresent(vc_myComp)){setverdict(pass)}else {setverdict(fail)};

    vc_myComp.start(f_empty());
    if(ispresent(vc_myComp)){setverdict(pass)}else {setverdict(fail)};

    vc_myComp.done;
    if(ispresent(vc_myComp)){setverdict(pass)}else {setverdict(fail)};
  }

  //========= Compound =====
  testcase tc_unionOfRecordOfs1() runs on MTC_CT {
    var MyUnion1 vl_u:= c_myunion1;
    if(ispresent(vl_u)) {setverdict(pass)} else {setverdict(fail)}
  }
  testcase tc_unionOfRecordOfs1_2() runs on MTC_CT {
    var MyUnion1 vl_u:= c_myunion1;
    if(ispresent(vl_u.roc)){setverdict(pass)} else {setverdict(fail)}
    if(ispresent(vl_u.roc[0])){setverdict(pass)}else {setverdict(fail)}
    if(ispresent(vl_u.roc[1])){setverdict(pass)}else {setverdict(fail)}
    if(ispresent(vl_u.roc[2])){setverdict(pass)}else {setverdict(fail)}
    if(ispresent(vl_u.roc[3])){setverdict(fail)}else {setverdict(pass)}
    if(ispresent(vl_u.roc[99])){setverdict(fail)}else {setverdict(pass)}
    if(ispresent(vl_u.i)){setverdict(fail)}else {setverdict(pass)}
    if(ispresent(vl_u.roi)){setverdict(fail)}else {setverdict(pass)}
    if(ispresent(vl_u.roi[0])){setverdict(fail)}else {setverdict(pass)}
    if(ispresent(vl_u.roi[1])){setverdict(fail)} else {setverdict(pass)}
  }

  testcase tc_unionOfRecordOfs2() runs on MTC_CT {
    var MyUnion1 vl_u:= c_myunion2;
    if(ispresent(vl_u)) {setverdict(pass)} else {setverdict(fail)}
    if(ispresent(vl_u.roc)){setverdict(fail)} else {setverdict(pass)}
    if(ispresent(vl_u.roc[0])){setverdict(fail)} else {setverdict(pass)}
    if(ispresent(vl_u.roc[1])){setverdict(fail)} else {setverdict(pass)}
    if(ispresent(vl_u.roc[2])){setverdict(fail)} else {setverdict(pass)}
    if(ispresent(vl_u.roc[3])){setverdict(fail)} else {setverdict(pass)}
    if(ispresent(vl_u.roc[99])){setverdict(fail)} else {setverdict(pass)}
    if(ispresent(vl_u.r)){setverdict(fail)} else {setverdict(pass)};
    if(ispresent(vl_u.r.i)){setverdict(fail)} else {setverdict(pass)};
    if(ispresent(vl_u.r.x)){setverdict(fail)} else {setverdict(pass)};
    if(ispresent(vl_u.r.c)){setverdict(fail)} else {setverdict(pass)};
    //checks if the selected item remained the same
    if(ispresent(vl_u.i)){setverdict(pass)}else {setverdict(fail)}
    if(ispresent(vl_u.roi)){setverdict(fail)} else {setverdict(pass)}
    if(ispresent(vl_u.roi[0])){setverdict(fail)}else {setverdict(pass)}
    if(ispresent(vl_u.roi[1])){setverdict(fail)} else {setverdict(pass)}
  }


  // testcase tc_compilationerror1() runs on MTC_CT {
  //   var MyUnion1 vl_u:= c_myunion2;
  //   if(ispresent(vl_u)) {setverdict(pass)} else {setverdict(fail)}
  //   if(ispresent(vl_u.roc)){setverdict(fail)} else {setverdict(pass)}
  //   if(ispresent(vl_u.roc[0])){setverdict(fail)}else {setverdict(pass)} 
  //   if(ispresent(vl_u.r.x)){setverdict(fail)}else {setverdict(pass)} 
  //   if(ispresent(vl_u.roc[99])){setverdict(fail)} else {setverdict(pass)} 
  // }



  testcase tc_union_modify() runs on MTC_CT {
    var MyUnion1 vl_u:= c_myunion2;
    if(ispresent(vl_u)) {setverdict(pass)} else {setverdict(fail)}
    if(ispresent(vl_u.roc)){setverdict(fail)} else {setverdict(pass)}
    if(ispresent(vl_u.roi)){setverdict(fail)} else {setverdict(pass)}  

    vl_u:=c_myunion1;
    if(ispresent(vl_u)) {setverdict(pass)} else {setverdict(fail)}
    if(ispresent(vl_u.roc)){setverdict(pass)} else {setverdict(fail)}
    if(ispresent(vl_u.roc[0])){setverdict(pass)}else {setverdict(fail)}
    if(ispresent(vl_u.roc[1])){setverdict(pass)}else {setverdict(fail)}
    if(ispresent(vl_u.roc[2])){setverdict(pass)}else {setverdict(fail)}
    if(ispresent(vl_u.roc[3])){setverdict(fail)}
    if(ispresent(vl_u.roc[99])){setverdict(fail)}
    if(ispresent(vl_u.i)){setverdict(fail)}
    if(ispresent(vl_u.roi)){setverdict(fail)}
    if(ispresent(vl_u.roi[0])){setverdict(fail)}
    if(ispresent(vl_u.roi[1])){setverdict(fail)} else {setverdict(pass)}
  }
  //expected:error
  testcase tc_sideeffect1() runs on MTC_CT {
    var MyUnion1 vl_u:= c_myunion1;    // { roc:= { "1aa", "2bb", "3cc"}}
    if(ispresent(vl_u.roc[2])){setverdict(pass)}else {setverdict(fail)}
    if(ispresent(vl_u.roc[3])){setverdict(fail)}else {setverdict(pass)}
  }

  //expected:error
  testcase tc_sideeffect2() runs on MTC_CT {
    var MyUnion1 vl_u:= c_myunion1;  // { roc:= { "1aa", "2bb", "3cc"}}
    var integer vl_oldsize:=0, vl_newsize:=0;
    vl_oldsize:=sizeof(vl_u.roc);

    if(ispresent(vl_u.i)){setverdict(fail)}else {setverdict(pass)}  

    if(ispresent(vl_u.roc)) {setverdict(pass)}else {setverdict(fail)}

    //checks if  size is unchenged  
    if(ispresent(vl_u.roc[4])) {setverdict(fail)}else {setverdict(pass)}
    vl_newsize:=sizeof(vl_u.roc);
    if(vl_newsize == vl_oldsize) {setverdict(pass)}else {setverdict(fail)}
  }

  //====== DEEP 2-3 ===============


  testcase tc_recordOf_omit1() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_1;
    if(ispresent(vl_r.roc)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_recordOf_omit2() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_1;
    if(ispresent(vl_r.roc[0])){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_recordOf_emptyRoi1() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_1;
    if(ispresent(vl_r.roi)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_recordOf_emptyRoi2() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_1;
    if(ispresent(vl_r.roi[0])){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_recordOf_emptyRoi3() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_1;
    if(ispresent(vl_r.roi[90])){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_unbound() runs on MTC_CT {
    var template MyRec2 vtl_rec2;
    if(ispresent(vtl_rec2)) {setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_completlyInit() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_1;
    if(ispresent(vl_r)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit1() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(ispresent(vl_r)){setverdict(pass)}else {setverdict(fail)};
  }


  testcase tc_record_partiallyInit3() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(ispresent(vl_r.roc)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit4() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(ispresent(vl_r.roi)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit5() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(ispresent(vl_r.u)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit6() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(ispresent(vl_r.u.r)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit7() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(ispresent(vl_r.u.r.i)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_partiallyInit8() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(ispresent(vl_r.u.r.x)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit9() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(ispresent(vl_r.u.r.c)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit10() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_part;
    if(ispresent(vl_r.u.i)){setverdict(fail)}else {setverdict(pass)};
  }


  //  testcase tc_record_partiallyInit11() runs on MTC_CT {
  //    var MyRec2 vl_r:={ r:={}}
  //    if(ispresent(vl_r.r)){setverdict(pass)}else {setverdict(fail)};
  //  }

  testcase tc_record_partiallyInit12() runs on MTC_CT {
    var MyRec2 vl_r:={ r:={i:=5}}
    if(ispresent(vl_r.r)){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.r.i)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_partiallyInit13() runs on MTC_CT {
    var MyRec2 vl_r:={ r:={i:=5,x:=-,c:= -}} 
    if(ispresent(vl_r)){setverdict(pass)}else {setverdict(fail)}; 
    if(ispresent(vl_r.r)){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.r.i)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_omit() runs on MTC_CT {
    var MyRec2 vl_r:={omit, omit, omit, omit} 
    if(ispresent(vl_r)){setverdict(pass)}else {setverdict(fail)}; 
    if(ispresent(vl_r.roc)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.roi)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.u)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.u.r)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.u.r.i)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.u.r.x)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.u.r.c)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.r)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.r.i)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.r.x)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.r.c)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_omit2() runs on MTC_CT {
    var MyRec2 vl_r:={roc:=omit, roi:=omit,u:= omit,r:= omit} 
    if(ispresent(vl_r)){setverdict(pass)}else {setverdict(fail)}; 
    if(ispresent(vl_r.roc)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.roi)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.u)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.u.r)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.u.r.i)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.u.r.x)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.u.r.c)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.r)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.r.i)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.r.x)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.r.c)){setverdict(fail)}else {setverdict(pass)};
  }

  type union MyUnion_OneOption {
    integer i
  }

  type record MyRec4 {
    MyUnion_OneOption u,
    integer i
  }

  testcase tc_union_OneOption_WithWildcard() runs on MTC_CT {
    var template MyRec4 vtl_rec:=?
    if(ispresent(vtl_rec)){setverdict(pass)}else {setverdict(fail)};
    log("DTE is expected in the next line")
    if(ispresent(vtl_rec.u.i)){setverdict(fail)};
  }

  testcase tc_record_mandatoryField_WithWildcard() runs on MTC_CT {
    var template MyRec4 vtl_rec:=?
    if(ispresent(vtl_rec.u)){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vtl_rec.i)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_recordOf_union() runs on MTC_CT {
    var MyRec2 vl_r:=c_myrec2_1;
    if(ispresent(vl_r.u)){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.u.r)){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.u.r.i)){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.u.r.x)){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.u.r.c)){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.u.roi)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.u.roi[3])){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.u.i)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.u.roc)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.u.roc[0])){setverdict(fail)}else {setverdict(pass)}; 
  }

  testcase tc_recordOf_recordOfRecordOfInt() runs on MTC_CT {
    var MyRec3 vl_r:=c_myrec3_1;
    if(ispresent(vl_r.roroi)){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.roroi[0])){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.roroi[1])){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.roroi[2])){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.roroi[200])){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.roroi[0][0])){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_recordOf_recordOfRecordOfInt2() runs on MTC_CT {
    var MyRec3 vl_r:=c_myrec3_1;
    if(ispresent(vl_r.roroi[0][8])){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.roroi[0][9])){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.roroi[1][0])){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.roroi[1][1])){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.roroi[2][0])){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_recordOf_recordInRecord() runs on MTC_CT {
    var MyRec3 vl_r:=c_myrec3_2;
    if(ispresent(vl_r.r)) {setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.r.roc)) {setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.r.roi)) {setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.r.u)) {setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.r.u)) {setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.r.u.i)) {setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_recordOf_recordInRecord2() runs on MTC_CT {
    var MyRec3 vl_r:=c_myrec3_2;
    if(ispresent(vl_r.r.r)) {setverdict(fail)}else {setverdict(pass)}; 
  }

  testcase tc_recordOf_recordInRecord_innerOmits() runs on MTC_CT {
    var MyRec3 vl_r:=c_myrec3_innerOmits;
    if(ispresent(vl_r.roroi)) {setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.r)) {setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vl_r.r.roc)) {setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.r.roi)) {setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.r.u)) {setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vl_r.r.r)){setverdict(fail)}else {setverdict(pass)};
  }


  template MyRecOf t_recOf1 := (
    { [0]:= { roc:=omit }, [1]:= {roc:=omit} },
    { [0]:= { roc:=omit }, [1]:= {roc:={"one", "two"}} },
    { [0]:= { roc:=omit }, [2]:= {u:={i:=5}} }
  )

  testcase tc_recordOf_template1() runs on MTC_CT {
    var template MyRecOf vtl_recOf:= t_recOf1;
    if(ispresent( vtl_recOf )) {setverdict(pass)}else {setverdict(fail)};
    if(ispresent( t_recOf1 )) {setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_recordOf_template2() runs on MTC_CT {
    var template MyRecOf vtl_recOf:= t_recOf1;
    if(ispresent( vtl_recOf[0] )) {setverdict(fail)}else {setverdict(pass)};
    if(ispresent( vtl_recOf[1] )) {setverdict(fail)}else {setverdict(pass)};
    if(ispresent( vtl_recOf[2] )) {setverdict(fail)}else {setverdict(pass)}; 
  } 


  //========== WildCard in templates====================

  testcase tc_record_withWildCard1() runs on MTC_CT {
    var template MyRec2 vtl_rec2;
    vtl_rec2:={
      roc:=*
    }
    if(ispresent(vtl_rec2)) {setverdict(pass)}else {setverdict(fail)};
  }
  testcase tc_record_withWildCard1A() runs on MTC_CT {
    var template MyRec2 vtl_rec2;
    vtl_rec2:={
      roc:=*
    }  
    if(ispresent(vtl_rec2.roc)) {setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_withWildCard1AA() runs on MTC_CT {
    var template MyRec2 vtl_rec2;
    vtl_rec2:={
      roc:=?
    }  
    if(ispresent(vtl_rec2.roc)) {setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_withWildCard1B() runs on MTC_CT {
    var template MyRec2 vtl_rec2;
    vtl_rec2:={
      roc:=*
    }    
    if(ispresent(vtl_rec2.roc[0])) {setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_withWildCard2() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      roc:={ ?,? }
    }
    if(ispresent(vtl_rec2)) {setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vtl_rec2.roc)) {setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vtl_rec2.roc[0])){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vtl_rec2.roc[1])){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vtl_rec2.roc[10])){setverdict(fail)}else {setverdict(pass)};
  }

  //unbound
  testcase tc_record_withWildCard2A() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      roc:={ ?,? }
    }  
    if(ispresent(vtl_rec2.roi)){setverdict(fail)}else {setverdict(pass)};
  }
  testcase tc_record_withWildCard2B() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      roc:={ ?,? }
    }  
    if(ispresent(vtl_rec2.u)){setverdict(fail)}else {setverdict(pass)};
  }
  testcase tc_record_withWildCard2C() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      roc:={ ?,? }
    }    
    if(ispresent(vtl_rec2.r)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_withWildCard3() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      u := *
    }
    if(ispresent(vtl_rec2)) {setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_withWildCard3A() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      u := *
    }
    if(ispresent(vtl_rec2.roc)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_withWildCard3B() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      u := *
    }
    if(ispresent(vtl_rec2.roi)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_withWildCard3C() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      u := *
    }
    if(ispresent(vtl_rec2.u)){setverdict(fail)}else{setverdict(pass)};
  }

  testcase tc_record_withWildCard3D() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      u := ?
    }
    if(ispresent(vtl_rec2.u)){setverdict(pass)}else{setverdict(fail)};
  }

  testcase tc_record_withWildCard3E() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      u := ?
    }

    if(ispresent(vtl_rec2.u.i)){setverdict(fail)}else{setverdict(pass)}; //pass
  }

  testcase tc_record_withWildCard3E_log_sideeffect() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      u := ?
    }

    if(ispresent(vtl_rec2.u.i)){setverdict(fail)}else{setverdict(pass)}; //pass
  }

  testcase tc_record_withWildCard3E_log_sideeffect1() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      u := ?
    }

    if(ispresent(vtl_rec2.u.i)){setverdict(fail)}else {setverdict(pass)}; //fail
  }

  testcase tc_record_withWildCard4() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      roc:=omit,
      u:={i:=?}
    }
    if(ispresent(vtl_rec2)) {setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vtl_rec2.roc)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_withWildCard4A() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      roc:=omit,
      u:={i:=?}
    }  
    if(ispresent(vtl_rec2.roi)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_withWildCard4B() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      roc:=omit,
      u:={i:=?}
    }  
    if(ispresent(vtl_rec2.u)){setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vtl_rec2.u.i)){setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_withWildCard5() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      r:= ?
    }
    if(ispresent(vtl_rec2)) {setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vtl_rec2.roc)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vtl_rec2.roi)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vtl_rec2.u)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vtl_rec2.u.i)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_withWildCard5A() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      r:= ?
    }
    if(ispresent(vtl_rec2.r)) {setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_withWildCard5B_optional() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      r:= ?
    }
    if(ispresent(vtl_rec2.r.i)) {setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vtl_rec2.r.x)) {setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_withWildCard5B_mandatory() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      r:= ?
    }
    if(ispresent(vtl_rec2.r.c)) {setverdict(pass)}else {setverdict(fail)};
  }

  testcase tc_record_withWildCard6() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      r:= *
    }
    if(ispresent(vtl_rec2)) {setverdict(pass)}else {setverdict(fail)};
    if(ispresent(vtl_rec2.roc)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vtl_rec2.roi)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vtl_rec2.u)){setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vtl_rec2.u.i)){setverdict(fail)}else {setverdict(pass)};
  }

  testcase tc_record_withWildCard6A() runs on MTC_CT {
    var template MyRec2 vtl_rec2; 
    vtl_rec2:={
      r:= *
    }  
    if(ispresent(vtl_rec2.r)) {setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vtl_rec2.r.i)) {setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vtl_rec2.r.x)) {setverdict(fail)}else {setverdict(pass)};
    if(ispresent(vtl_rec2.r.c)) {setverdict(fail)}else {setverdict(pass)};
  }

  group g_TR_HO72812 {
    type record MyRecord_HO72812
    {
      record {
        boolean innerField1 optional,
        integer innerField2 optional
      } field1 optional,
      integer field2
    }
    testcase tc_record_TR_HO72813() runs on MTC_CT {
      var MyRecord_HO72812 vl_MyRecord := { field1 := {}, field2 := 5 }; 
      if(ispresent(vl_MyRecord)) {setverdict(pass)} else {setverdict(fail)}
      if(ispresent(vl_MyRecord.field1)) {setverdict(fail)} else {setverdict(pass)}  //according to ethgry
      if(ispresent(vl_MyRecord.field2)) {setverdict(pass)} else {setverdict(fail)}  
    }

    testcase tc_record_TR_HO72813_innerFields() runs on MTC_CT {
      var MyRecord_HO72812 vl_MyRecord := { field1 := {}, field2 := 5 }; 
      if(ispresent(vl_MyRecord.field1.innerField1)) {setverdict(fail)} else {setverdict(pass)}
      if(ispresent(vl_MyRecord.field1.innerField2)) {setverdict(fail)} else {setverdict(pass)}
    }

    testcase tc_record_TR_HO72813_partlyInitialized() runs on MTC_CT {
      var MyRecord_HO72812 vl_MyRecord := { field1 := {innerField1:=true}, field2 := 5 };
      if(ispresent(vl_MyRecord.field1)) {setverdict(pass)} else {setverdict(fail)} ;
      if(ispresent(vl_MyRecord.field1.innerField1)) {setverdict(pass)} else {setverdict(fail)};
      if(ispresent(vl_MyRecord.field1.innerField2)) {setverdict(fail)} else {setverdict(pass)} ; //DTE???
    }

    testcase tc_record_TR_HO72813_omit() runs on MTC_CT {
      var MyRecord_HO72812 vl_MyRecord := { field1 := {innerField1:=true}, field2 := 5 }    
      vl_MyRecord.field1 := omit;
      if(ispresent(vl_MyRecord.field1)) {setverdict(fail)} else {setverdict(pass)}     
      if(ispresent(vl_MyRecord.field1.innerField1)) {setverdict(fail)} else {setverdict(pass)};
      if(ispresent(vl_MyRecord.field1.innerField2)) {setverdict(fail)} else {setverdict(pass)} ; //DTE???
    }

  }//group

  testcase tc_runtimeDivisionByZero() runs on MTC_CT {
    var MyUnion1 vl_u:= c_myunion2;
    if(ispresent(vl_u)) {setverdict(pass)} else {setverdict(fail)} 
    if(ispresent(vl_u.i)){setverdict(pass)}else {setverdict(fail)}
    if(ispresent(vl_u.i/2)){setverdict(pass)}else {setverdict(fail)}
    if(ispresent(vl_u.i*0)){setverdict(pass)}else {setverdict(fail)}
    log("Expected DTE comes!!!");
    if(ispresent(vl_u.i/(vl_u.i-5))){setverdict(fail)}else {setverdict(pass)} //DTE - OK
  }

  //compilation error - ok?
  // testcase tc_compilationErrorDivisionByZero() runs on MTC_CT {
  //   var MyUnion1 vl_u:= c_myunion2;
  //   if(ispresent(vl_u.i/0)){setverdict(fail)}else {setverdict(pass)}
  // }
  template integer t_i(integer i, integer j) :=i+j;

  testcase tc_runtimeExprEval() runs on MTC_CT {
    var template integer vt_i:= t_i(1,2);
    var integer vl_i:=1, vl_j:=0;
    if(ispresent(vt_i)) {setverdict(pass)} else {setverdict(fail)};
    if(ispresent(t_i(1,2))) {setverdict(pass)} else {setverdict(fail)};
    if(ispresent(t_i(1,2*vl_i))) {setverdict(pass)} else {setverdict(fail)};
    //if(ispresent(t_i(1,2/vl_j))) {setverdict(pass)} else {setverdict(fail)}; //DTE
  }
  
  // Test case for:
  // Bug 495128 - Incorrect code generated for anytype field reference in ispresent clause
  // The 'ispresent' clauses in this test caused C++ compilation errors, because 
  // 'x.MyRecord()' was generated instead of 'x.AT_MyRecord()', when accessing the anytype field
  testcase tc_anytype_field() runs on MTC_CT {
    var anytype x;
    x.MyRecord := { i := 1, x := omit, c := "a" };
    if (ispresent(x.MyRecord.i)) { setverdict(pass); }
    else { setverdict(fail, "field i should be present"); }
    if (not ispresent(x.MyRecord.x)) { setverdict(pass); }
    else { setverdict(fail, "field x should not be present"); }
  }


  control {

    execute(tc_simple_charstring_unbound()); //pass
    execute(tc_simple_charstring_isvalue()); //pass
    execute(tc_simple_charstring_template_unbound()); //pass
    execute(tc_simple_charstring_template_isvalue()); //pass
    execute(tc_simple_charstring_template_pattern()); //pass
    execute(tc_simple_integer_unbound());       //pass
    execute(tc_simple_integer_value());         //pass
    execute(tc_simple_integer_templ_asterix()); //pass
    execute(tc_simple_integer_templ_qm());      //pass
    execute(tc_simple_integer_templ_value());   //pass        
    execute(tc_simple_octetstring_isvalue());   //pass
    execute(tc_simple_octetstring_unbound());   //pass
    execute(tc_special_default_value_unbound());//pass
    execute(tc_special_default_value_null());   //pass
    execute(tc_special_default_value_isvalue());//pass
    execute(tc_special_compref_unbound());      //pass
    execute(tc_special_compref_isvalue());      //pass
    execute(tc_unionOfRecordOfs1());            //pass
    execute(tc_unionOfRecordOfs1_2());          //pass
    execute(tc_unionOfRecordOfs2());            //pass
    //   //execute(tc_compilationerror1());
    execute(tc_union_modify());                 //pass  
    execute(tc_sideeffect1());                  //pass
    execute(tc_sideeffect2());                  //pass
    execute(tc_recordOf_omit1());               //pass
    execute(tc_recordOf_omit2());               //pass
    execute(tc_recordOf_emptyRoi1());           //pass
    execute(tc_recordOf_emptyRoi2());           //pass
    execute(tc_recordOf_emptyRoi3());           //pass
    execute(tc_record_unbound())
    execute(tc_record_completlyInit());         //pass
    execute(tc_record_partiallyInit1());        //pass
    execute(tc_record_partiallyInit3()); //pass
    execute(tc_record_partiallyInit4());
    execute(tc_record_partiallyInit5());
    execute(tc_record_partiallyInit6());
    execute(tc_record_partiallyInit7());
    execute(tc_record_partiallyInit8());
    execute(tc_record_partiallyInit9());
    execute(tc_record_partiallyInit10());
    //   //execute(tc_record_partiallyInit11()); //<=======COMPILATION ERROR
    execute(tc_record_partiallyInit12());
    execute(tc_record_partiallyInit13()); 
    execute(tc_record_omit());
    execute(tc_record_omit2());
    execute(tc_union_OneOption_WithWildcard());
    execute(tc_record_mandatoryField_WithWildcard());
    execute(tc_recordOf_union());
    execute(tc_recordOf_recordOfRecordOfInt());
    execute(tc_recordOf_recordOfRecordOfInt2());
    execute(tc_recordOf_recordInRecord());
    execute(tc_recordOf_recordInRecord2());
    execute(tc_recordOf_recordInRecord_innerOmits());
    execute(tc_recordOf_template1());
    execute(tc_recordOf_template2());
    execute(tc_record_withWildCard1());
    execute(tc_record_withWildCard1A()); //pass
    execute(tc_record_withWildCard1B());  
    execute(tc_record_withWildCard2());
    execute(tc_record_withWildCard2A());//pass (unbound)
    execute(tc_record_withWildCard2B());//pass (unbound)
    execute(tc_record_withWildCard2C());//pass (unbound)
    execute(tc_record_withWildCard3());
    execute(tc_record_withWildCard3A());//pass (unbound)
    execute(tc_record_withWildCard3B());//pass (unbound)
    execute(tc_record_withWildCard3C());//pass (*)
    execute(tc_record_withWildCard3D());//pass
    execute(tc_record_withWildCard3E());
    execute(tc_record_withWildCard3E_log_sideeffect()); 
    //execute(tc_record_withWildCard3E_log_sideeffect1());  // fail, mail sent to ethgry
    execute(tc_record_withWildCard4());//pass
    execute(tc_record_withWildCard4A());
    execute(tc_record_withWildCard4B()); 
    execute(tc_record_withWildCard5());//pass
    execute(tc_record_withWildCard5A());//pass
    execute(tc_record_withWildCard5A());//pass
    execute(tc_record_withWildCard5B_optional());//pass
    execute(tc_record_withWildCard5B_mandatory());//pass
    execute(tc_record_withWildCard6());//pass
    execute(tc_record_withWildCard6A());
    execute(tc_record_TR_HO72813());
    execute(tc_record_TR_HO72813_innerFields());
    execute(tc_record_TR_HO72813_partlyInitialized());
    execute(tc_record_TR_HO72813_omit());
    //execute(tc_runtimeDivisionByZero()); //expected DTE
    //execute(tc_compilationErrorDivisionByZero()); ok!?
    execute(tc_runtimeExprEval());
    execute(tc_anytype_field());
  }

}//module
with {
  extension "anytype MyRecord";
}
