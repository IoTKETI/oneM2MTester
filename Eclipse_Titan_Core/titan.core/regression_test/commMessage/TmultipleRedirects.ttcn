/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Baranyi, Botond â€“ initial implementation
 *
 ******************************************************************************/
module TmultipleRedirects {

import from TcommMessage all;

// test for value redirect with multiple variable references and field assignments
testcase commMessageMultiValueRedirect() runs on commMessage_comp3 {
  connect(mtc:Port3, mtc:Port3);
  var commMessage_trecord rec_val := { x1 := 3, x2 := -1.0 };
  Port3.send(rec_val);
  var commMessage_trecord redir_rec;
  var integer redir_int;
  var float redir_float;
  timer tmr := 1.0;
  tmr.start;
  alt {
    [] Port3.receive(rec_val) -> value (redir_rec, redir_int := x1, redir_float := x2) {
      if (redir_rec != rec_val) { setverdict(fail, "Invalid record value: ", redir_rec); }
      if (redir_int != rec_val.x1) { setverdict(fail, "Invalid integer value: ", redir_int); }
      if (redir_float != rec_val.x2) { setverdict(fail, "Invalid float value: ", redir_float); }
    }
    [] Port3.receive(commMessage_trecord:?) { setverdict(fail, "Incorrect value received."); }
    [] tmr.timeout { setverdict(fail, "Timeout."); }
  }
  setverdict(pass);
}

type record commMessage_tPayloadRecord {
  bitstring bs optional,
  hexstring hs optional,
  octetstring os optional,
  charstring cs optional,
  universal charstring ucs optional
}

type record commMessage_tDecoded {
  integer num,
  charstring str
}
with {
  encode "JSON";
}

type port commMessage_port_dec message {
  inout commMessage_tPayloadRecord
}
with { extension "internal" };

type component commMessage_comp_dec {
  port commMessage_port_dec pt
}

// test for decoded value redirect
testcase commMessageDecodedValueRedirect() runs on commMessage_comp_dec {
  connect(mtc:pt, mtc:pt);
  var commMessage_tDecoded val := { num := 10, str := "abc" };
  var bitstring bs_val := encvalue(val);
  var hexstring hs_val := bit2hex(encvalue(val));
  var octetstring os_val := bit2oct(encvalue(val));
  var charstring cs_val := oct2char(bit2oct(encvalue(val)));
  var universal charstring ucs_val := encvalue_unichar(val, "UTF-8");
  pt.send(commMessage_tPayloadRecord: { bs_val, omit,   omit,   omit,   omit    });
  pt.send(commMessage_tPayloadRecord: { omit,   hs_val, omit,   omit,   omit    });
  pt.send(commMessage_tPayloadRecord: { omit,   omit,   os_val, omit,   omit    });
  pt.send(commMessage_tPayloadRecord: { omit,   omit,   omit,   cs_val, omit    });
  pt.send(commMessage_tPayloadRecord: { omit,   omit,   omit,   omit,   ucs_val });
  timer tmr;
  var commMessage_tDecoded redir[5];
  tmr.start(1.0);
  alt {
    [] pt.receive(commMessage_tPayloadRecord: { decmatch val, *, *, *, * }) -> value (redir[0] := @decoded bs) {
      if (redir[0] != val) { setverdict(fail, "Bitstring test - redirect failed: ", redir[0]); }
    }
    [] pt.receive(commMessage_tPayloadRecord: { bs_val, *, *, *, * }) {
      setverdict(fail, "Bitstring test - decmatch failed.");
    }
    [] pt.receive(commMessage_tPayloadRecord:?) {
      setverdict(fail, "Bitstring test - incorrect record received.");
    }
    [] tmr.timeout { setverdict(fail, "Bitstring test - timeout."); }
  }
  tmr.stop;
  tmr.start(1.0);
  alt {
    [] pt.receive(commMessage_tPayloadRecord: { *, decmatch val, *, *, * }) -> value (redir[1] := @decoded hs) {
      if (redir[1] != val) { setverdict(fail, "Hexstring test - redirect failed: ", redir[1]); }
    }
    [] pt.receive(commMessage_tPayloadRecord: { *, hs_val, *, *, * }) {
      setverdict(fail, "Hexstring test - decmatch failed.");
    }
    [] pt.receive(commMessage_tPayloadRecord:?) {
      setverdict(fail, "Hexstring test - incorrect record received.");
    }
    [] tmr.timeout { setverdict(fail, "Hexstring test - timeout."); }
  }
  tmr.stop;
  tmr.start(1.0);
  alt {
    [] pt.receive(commMessage_tPayloadRecord: { *, *, decmatch val, *, * }) -> value (redir[2] := @decoded os) {
      if (redir[2] != val) { setverdict(fail, "Octetstring test - redirect failed: ", redir[2]); }
    }
    [] pt.receive(commMessage_tPayloadRecord: { *, *, os_val, *, * }) {
      setverdict(fail, "Octetstring test - decmatch failed.");
    }
    [] pt.receive(commMessage_tPayloadRecord:?) {
      setverdict(fail, "Octetstring test - incorrect record received.");
    }
    [] tmr.timeout { setverdict(fail, "Octetstring test - timeout."); }
  }
  tmr.stop;
  tmr.start(1.0);
  alt {
    [] pt.receive(commMessage_tPayloadRecord: { *, *, *, decmatch val, * }) -> value (redir[3] := @decoded cs) {
      if (redir[3] != val) { setverdict(fail, "Charstring test - redirect failed: ", redir[3]); }
    }
    [] pt.receive(commMessage_tPayloadRecord: { *, *, *, cs_val, * }) {
      setverdict(fail, "Charstring test - decmatch failed.");
    }
    [] pt.receive(commMessage_tPayloadRecord:?) {
      setverdict(fail, "Charstring test - incorrect record received.");
    }
    [] tmr.timeout { setverdict(fail, "Charstring test - timeout."); }
  }
  tmr.stop;
  tmr.start(1.0);
  alt {
    [] pt.receive(commMessage_tPayloadRecord: { *, *, *, *, decmatch("UTF-8") val }) -> value (redir[4] := @decoded("UTF-8") ucs) {
      if (redir[4] != val) { setverdict(fail, "Universal charstring test - redirect failed: ", redir[4]); }
    }
    [] pt.receive(commMessage_tPayloadRecord: { *, *, *, *, ucs_val }) {
      setverdict(fail, "Universal charstring test - decmatch failed.");
    }
    [] pt.receive(commMessage_tPayloadRecord:?) {
      setverdict(fail, "Universal charstring test - incorrect record received.");
    }
    [] tmr.timeout { setverdict(fail, "Universal charstring test - timeout."); }
  }
  setverdict(pass);
}

control {
  execute(commMessageMultiValueRedirect());
  execute(commMessageDecodedValueRedirect());
}

}
