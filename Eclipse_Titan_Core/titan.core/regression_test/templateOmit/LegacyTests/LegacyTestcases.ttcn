/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *
 ******************************************************************************/
 
module LegacyTestcases {
// This module contains tests related to the matching of omitted fields.
// Legacy behavior (before change request artf564824):
// - 'omit' can be used in value list and complement list templates
//   e.g.: 't := (1, 2, omit)' and 't := complement(1, 2, omit)' are allowed
// - a value list template only matches the value 'omit', if the value list
//   contains this value
// - a complement list template always matches the value 'omit', unless 
//   the complement list contains this value
// Note: this behavior requires compiler option -M

import from Types all;
import from Templates all;

// Testing the matching of an omitted field
// A different field is omitted in each of the 6 values.
// The value list template should not match any of the values.
// The complement list template should match all 6 values.
testcase tc_match_omit_legacy() runs on CT
{
  if (match(c_int_omitted, t_every_value_list)) { 
    setverdict(fail, c_int_omitted, " should not match ", t_every_value_list);
  }
  if (not match(c_int_omitted, t_every_comp_list)) { 
    setverdict(fail, c_int_omitted, " should match ", t_every_comp_list);
  }
  if (match(c_char_omitted, t_every_value_list)) { 
    setverdict(fail, c_char_omitted, " should not match ", t_every_value_list);
  }
  if (not match(c_char_omitted, t_every_comp_list)) { 
    setverdict(fail, c_char_omitted, " should match ", t_every_comp_list);
  }
  if (match(c_rec_omitted, t_every_value_list)) { 
    setverdict(fail, c_rec_omitted, " should not match ", t_every_value_list);
  }
  if (not match(c_rec_omitted, t_every_comp_list)) { 
    setverdict(fail, c_rec_omitted, " should match ", t_every_comp_list);
  }
  if (match(c_setof_omitted, t_every_value_list)) { 
    setverdict(fail, c_setof_omitted, " should not match ", t_every_value_list);
  }
  if (not match(c_setof_omitted, t_every_comp_list)) { 
    setverdict(fail, c_setof_omitted, " should match ", t_every_comp_list);
  }
  if (match(c_uni_omitted, t_every_value_list)) { 
    setverdict(fail, c_uni_omitted, " should not match ", t_every_value_list);
  }
  if (not match(c_uni_omitted, t_every_comp_list)) { 
    setverdict(fail, c_uni_omitted, " should match ", t_every_comp_list);
  }
  if (match(c_enum_omitted, t_every_value_list)) { 
    setverdict(fail, c_enum_omitted, " should not match ", t_every_value_list);
  }
  if (not match(c_enum_omitted, t_every_comp_list)) { 
    setverdict(fail, c_enum_omitted, " should match ", t_every_comp_list);
  }
  setverdict(pass);
}

// Testing the 'ispresent' clause on templates
// The value list templates are 'present', as these do not match the 'omit' value.
// The complement list templates are not 'present'.
testcase tc_ispresent_legacy() runs on CT
{
  if (not ispresent(t_int_value_list)) {
    setverdict(fail, t_int_value_list, " should be present");
  }
  if (not ispresent(t_char_value_list)) {
    setverdict(fail, t_char_value_list, " should be present");
  }
  if (not ispresent(t_rec_value_list)) {
    setverdict(fail, t_rec_value_list, " should be present");
  }
  if (not ispresent(t_setof_value_list)) {
    setverdict(fail, t_setof_value_list, " should be present");
  }
  if (not ispresent(t_uni_value_list)) {
    setverdict(fail, t_uni_value_list, " should be present");
  }
  if (not ispresent(t_enum_value_list)) {
    setverdict(fail, t_enum_value_list, " should be present");
  }
  if (ispresent(t_int_comp_list)) {
    setverdict(fail, t_int_comp_list, " should not be present");
  }
  if (ispresent(t_int_comp_list_p)) {
    setverdict(fail, t_int_comp_list_p, " should not be present");
  }
  if (ispresent(t_char_comp_list)) {
    setverdict(fail, t_char_comp_list, " should not be present");
  }
  if (ispresent(t_rec_comp_list)) {
    setverdict(fail, t_rec_comp_list, " should not be present");
  }
  if (ispresent(t_setof_comp_list)) {
    setverdict(fail, t_setof_comp_list, " should not be present");
  }
  if (ispresent(t_uni_comp_list)) {
    setverdict(fail, t_uni_comp_list, " should not be present");
  }
  if (ispresent(t_enum_comp_list)) {
    setverdict(fail, t_enum_comp_list, " should not be present");
  }
  
  var template Everything vt_present := { 1, "a", { 1.0, '10AB'O }, { '110'B, '101'B }, { b := true }, Second };
  if (not ispresent(vt_present)) {
    setverdict(fail, vt_present, " should be present");
  }
  if (not ispresent(valueof(vt_present))) {
    setverdict(fail, "value of ", vt_present, " should be present");
  }
  setverdict(pass);
}

// Testing the logging of matching an omitted field
// The results should be the same as with the matching tests
// (this is needed, because a different function is called when logging a match operation)
testcase tc_log_match_legacy() runs on CT
{
  // omitted integer
  var charstring v_log_match_res := log2str(match(c_int_omitted, t_every_value_list));
  if (not match(v_log_match_res, t_unmatched)) {
    setverdict(fail, c_int_omitted, " should not match ", t_every_value_list);
  }
  v_log_match_res := log2str(match(c_int_omitted, t_every_comp_list));
  if (match(v_log_match_res, t_unmatched)) {
    setverdict(fail, c_int_omitted, " should match ", t_every_comp_list);
  }
  
  // omitted charstring
  v_log_match_res := log2str(match(c_char_omitted, t_every_value_list));
  if (not match(v_log_match_res, t_unmatched)) {
    setverdict(fail, c_char_omitted, " should not match ", t_every_value_list);
  }
  v_log_match_res := log2str(match(c_char_omitted, t_every_comp_list));
  if (match(v_log_match_res, t_unmatched)) {
    setverdict(fail, c_char_omitted, " should match ", t_every_comp_list);
  }
  
  // omitted record
  v_log_match_res := log2str(match(c_rec_omitted, t_every_value_list));
  if (not match(v_log_match_res, t_unmatched)) {
    setverdict(fail, c_rec_omitted, " should not match ", t_every_value_list);
  }
  v_log_match_res := log2str(match(c_rec_omitted, t_every_comp_list));
  if (match(v_log_match_res, t_unmatched)) {
    setverdict(fail, c_rec_omitted, " should match ", t_every_comp_list);
  }
  
  // omitted set of
  v_log_match_res := log2str(match(c_setof_omitted, t_every_value_list));
  if (not match(v_log_match_res, t_unmatched)) {
    setverdict(fail, c_setof_omitted, " should not match ", t_every_value_list);
  }
  v_log_match_res := log2str(match(c_setof_omitted, t_every_comp_list));
  if (match(v_log_match_res, t_unmatched)) {
    setverdict(fail, c_setof_omitted, " should match ", t_every_comp_list);
  }
  
  // omitted union
  v_log_match_res := log2str(match(c_uni_omitted, t_every_value_list));
  if (not match(v_log_match_res, t_unmatched)) {
    setverdict(fail, c_uni_omitted, " should not match ", t_every_value_list);
  }
  v_log_match_res := log2str(match(c_uni_omitted, t_every_comp_list));
  if (match(v_log_match_res, t_unmatched)) {
    setverdict(fail, c_uni_omitted, " should match ", t_every_comp_list);
  }
  
  // omitted enumerated
  v_log_match_res := log2str(match(c_enum_omitted, t_every_value_list));
  if (not match(v_log_match_res, t_unmatched)) {
    setverdict(fail, c_enum_omitted, " should not match ", t_every_value_list);
  }
  v_log_match_res := log2str(match(c_enum_omitted, t_every_comp_list));
  if (match(v_log_match_res, t_unmatched)) {
    setverdict(fail, c_enum_omitted, " should match ", t_every_comp_list);
  }
  setverdict(pass);
}

// Testing the 'omit' value in a template's value list and complement list
testcase tc_omit_in_value_list_legacy() runs on CT
{
  // template
  template integer t_int_value_list_omit := ( 1, 3, 5, 7, omit );
  template integer t_int_comp_list_omit := complement ( 2, 4, 6, 8, omit );

  template charstring t_char_value_list_omit := ( "a", "aa", "aaa", omit );
  template charstring t_char_comp_list_omit := complement ( "b", "bb", "bbb", omit );

  template Rec t_rec_value_list_omit := ( { 3.0, '03'O }, { 1.0, '01'O }, omit );
  template Rec t_rec_comp_list_omit := complement ( { 2.0, '02'O }, { 4.0, '04'O }, omit );

  template SoBS t_setof_value_list_omit := ( { '1'B, '10'B, '11'B }, { '100'B, '101'B, '110'B }, omit );
  template SoBS t_setof_comp_list_omit := complement ( { '111'B, '1110'B, '1111'B }, { '100'B, '101'B, '110'B }, omit );

  template Uni t_uni_value_list_omit := ( { b := true }, { hs := 'DEADBEEF'H }, { ucs := "x" }, { vt := fail }, omit );
  template Uni t_uni_comp_list_omit := complement ( { b := false }, { hs := 'DEADBEEF'H }, { ucs := "x" }, { vt := fail }, omit );

  template Enum t_enum_value_list_omit := ( First, Second, omit );
  template Enum t_enum_comp_list_omit := complement ( Second, Third, omit );
  
  template Everything t_every_value_list_omit := { t_int_value_list_omit, t_char_value_list_omit,
    t_rec_value_list_omit, t_setof_value_list_omit, t_uni_value_list_omit, t_enum_value_list_omit };
  template Everything t_every_comp_list_omit := { t_int_comp_list_omit, t_char_comp_list_omit,
    t_rec_comp_list_omit, t_setof_comp_list_omit, t_uni_comp_list_omit, t_enum_comp_list_omit };
  
  // template variable
  var template integer vt_int_value_list_omit := ( -1, 3, 5, 7, omit );
  var template integer vt_int_comp_list_omit := complement ( 2, 4, 6, 8, omit );

  var template charstring vt_char_value_list_omit := ( "a", "aa", "aaa", omit );
  var template charstring vt_char_comp_list_omit := complement ( "b", "bb", "bbb", omit );

  var template Rec vt_rec_value_list_omit := ( { 3.0, '03'O }, { 1.0, '01'O }, omit );
  var template Rec vt_rec_comp_list_omit := complement ( { 2.0, '02'O }, { 4.0, '04'O }, omit );

  var template SoBS vt_setof_value_list_omit := ( { '1'B, '10'B, '11'B }, { '100'B, '101'B, '110'B }, omit );
  var template SoBS vt_setof_comp_list_omit := complement ( { '111'B, '1110'B, '1111'B }, { '100'B, '101'B, '110'B }, omit );

  var template Uni vt_uni_value_list_omit := ( { b := true }, { hs := 'DEADBEEF'H }, { ucs := "x" }, { vt := fail }, omit );
  var template Uni vt_uni_comp_list_omit := complement ( { b := false }, { hs := 'DEADBEEF'H }, { ucs := "x" }, { vt := fail }, omit );

  var template Enum vt_enum_value_list_omit := ( First, Second, omit );
  var template Enum vt_enum_comp_list_omit := complement ( Second, Third, omit );
  
  var template Everything vt_every_value_list_omit := { vt_int_value_list_omit, vt_char_value_list_omit,
    vt_rec_value_list_omit, vt_setof_value_list_omit, vt_uni_value_list_omit, vt_enum_value_list_omit };
  var template Everything vt_every_comp_list_omit := { vt_int_comp_list_omit, vt_char_comp_list_omit,
    vt_rec_comp_list_omit, vt_setof_comp_list_omit, vt_uni_comp_list_omit, vt_enum_comp_list_omit };
    
  // match
  if (not match(c_int_omitted, t_every_value_list_omit)) {
    setverdict(fail, c_int_omitted, " should match ", t_every_value_list_omit);
  }
  if (not match(c_char_omitted, vt_every_value_list_omit)) {
    setverdict(fail, c_char_omitted, " should match ", vt_every_value_list_omit);
  }
  if (match(c_rec_omitted, t_every_comp_list_omit)) {
    setverdict(fail, c_rec_omitted, " should not match ", t_every_comp_list_omit);
  }
  if (match(c_setof_omitted, t_every_comp_list_omit)) {
    setverdict(fail, c_setof_omitted, " should not match ", t_every_comp_list_omit);
  }
  
  // ispresent
  if (ispresent(t_every_value_list_omit.i)) {
    setverdict(fail, t_every_value_list_omit.i, " should not be present");
  }
  if (ispresent(vt_every_value_list_omit.cs)) {
    setverdict(fail, vt_every_value_list_omit.cs, " should not be present");
  }
  if (not ispresent(t_every_comp_list_omit.setof)) {
    setverdict(fail, t_every_comp_list_omit.setof, " should be present");
  }
  if (not ispresent(vt_every_comp_list_omit.uni)) {
    setverdict(fail, vt_every_comp_list_omit.uni, " should be present");
  }
  
  // log match
  var charstring v_log_res := log2str(match(c_rec_omitted, t_every_value_list_omit));
  if (match(v_log_res, t_unmatched)) {
    setverdict(fail, c_rec_omitted, " should match ", t_every_value_list_omit);
  }
  v_log_res := log2str(match(c_setof_omitted, vt_every_value_list_omit));
  if (match(v_log_res, t_unmatched)) {
    setverdict(fail, c_setof_omitted, " should match ", vt_every_value_list_omit);
  }
  v_log_res := log2str(match(c_uni_omitted, t_every_comp_list_omit));
  if (not match(v_log_res, t_unmatched)) {
    setverdict(fail, c_uni_omitted, " should not match ", t_every_comp_list_omit);
  }
  v_log_res := log2str(match(c_enum_omitted, vt_every_comp_list_omit));
  if (not match(v_log_res, t_unmatched)) {
    setverdict(fail, c_enum_omitted, " should not match ", vt_every_comp_list_omit);
  }
  
  setverdict(pass);
}

// A component's behavior function for the procedure-based port matching test
// Tests matching of 'omit' values in the 'getcall' operation:
// - on success replies with one of the test values
// - on failure replies with a specific template containing an error message
function f_behavior_proc_legacy() runs on CT
{
  var template Everything vt_bad := t_bad_call;
  timer t1 := 1.0;
  t1.start;
  alt {
    [] proc.getcall(Sig:{t_every_value_list, -}) {
      vt_bad.cs := log2str("getcall parameters should not match ", t_every_value_list);
      proc.reply(Sig:{-, vt_bad});
    }
    [] proc.getcall(Sig:{?, -}) {
      // this is the expected behavior, since the incomming call is not supposed to match the template
      proc.reply(Sig:{-, c_rec_omitted});
    }
    [] t1.timeout {
      vt_bad.cs := "getcall timed out";
      proc.reply(Sig:{-, vt_bad});
    }
  }
  
  timer t2 := 1.0;
  t2.start;
  alt {
    [] proc.getcall(Sig:{t_every_comp_list, -}) {
      // this is the expected behavior, since the incomming call is supposed to match the template
      proc.reply(Sig:{-, c_setof_omitted});
    }
    [] proc.getcall(Sig:{?, -}) {
      vt_bad.cs := log2str("getcall parameters should match ", t_every_comp_list);
      proc.reply(Sig:{-, vt_bad});
    }
    [] t2.timeout {
      vt_bad.cs := "getcall timed out";
      proc.reply(Sig:{-, vt_bad});
    }
  }
  
  timer t3 := 1.0;
  t3.start;
  alt {
    [] proc.getcall(Sig:{t_every_value_list, -}) {
      vt_bad.cs := log2str("getcall parameters should not match ", t_every_value_list);
      proc.reply(Sig:{-, vt_bad});
    }
    [] proc.getcall(Sig:{?, -}) {
      // this is the expected behavior, since the incomming call is not supposed to match the template
      proc.raise(Sig, c_uni_omitted);
    }
    [] t2.timeout {
      vt_bad.cs := "getcall timed out";
      proc.reply(Sig:{-, vt_bad});
    }
  }
  
  timer t4 := 1.0;
  t4.start;
  alt {
    [] proc.getcall(Sig:{t_every_comp_list, -}) {
      // this is the expected behavior, since the incomming call is supposed to match the template
      proc.raise(Sig, c_char_omitted);
    }
    [] proc.getcall(Sig:{?, -}) {
      vt_bad.cs := log2str("getcall parameters should not match ", t_every_comp_list);
      proc.reply(Sig:{-, vt_bad});
    }
    [] t2.timeout {
      vt_bad.cs := "getcall timed out";
      proc.reply(Sig:{-, vt_bad});
    }
  }
}

// Tests the matching of 'omit' values in procedure-based port operations
// ('getcall' is tested in the newly created component's behavior function,
// 'getreply' and 'catch' are tested here).
testcase tc_proc_port_match_legacy() runs on CT
{
  var CT v_comp := CT.create;
  connect(v_comp:proc, self:proc);
  v_comp.start(f_behavior_proc_legacy());

  // testing 'getcall' and 'getreply' with the value list template
  var Everything v_pars;
  proc.call(Sig:{c_int_omitted, -}, 1.0) {
    [] proc.getreply(Sig:{-, t_every_value_list}) {
      setverdict(fail, "getreply parameters should not match ", t_every_value_list);
    }
    [] proc.getreply(Sig:{-, t_bad_call}) -> param (v_pars) {
      // the 'getcall' operation did not succeed, display the received error message
      setverdict(fail, v_pars.cs);
    }
    [] proc.getreply(Sig:{-, ?}) {
      // this is the expected behavior, since the incomming reply is not supposed to match the template
      setverdict(pass);
    }
    [] proc.catch(Sig, ?) {
      setverdict(fail, "caught unexpected exception");
    }
    [] proc.catch(timeout) {
      setverdict(fail, "getreply timed out");
    }
  }
  
  // testing 'getcall' and 'getreply' with the complement list template
  proc.call(Sig:{c_enum_omitted, -}, 1.0) {
    [] proc.getreply(Sig:{-, t_every_comp_list}) {
      // this is the expected behavior, since the incomming reply is supposed to match the template
      setverdict(pass);
    }
    [] proc.getreply(Sig:{-, t_bad_call}) -> param (v_pars) {
      // the 'getcall' operation did not succeed, display the received error message
      setverdict(fail, v_pars.cs);
    }
    [] proc.getreply(Sig:{-, ?}) {
      setverdict(fail, "getreply parameters should match ", t_every_comp_list);
    }
    [] proc.catch(Sig, ?) {
      setverdict(fail, "caught unexpected exception");
    }
    [] proc.catch(timeout) {
      setverdict(fail, "getreply timed out");
    }
  }
  
  // testing 'getcall' and 'catch' with the value list template
  proc.call(Sig:{c_char_omitted, -}, 1.0) {
    [] proc.getreply(Sig:{-, t_bad_call}) -> param (v_pars) {
      // the 'getcall' operation did not succeed, display the received error message
      setverdict(fail, v_pars.cs);
    }
    [] proc.getreply(Sig:{-, ?}) {
      setverdict(fail, "received unexpected reply");
    }
    [] proc.catch(Sig, t_every_value_list) {
      setverdict(fail, "caught exception should not match ", t_every_value_list);
    }
    [] proc.catch(Sig, ?) {
      // this is the expected behavior, since the incomming exception is not supposed to match the template
      setverdict(pass);
    }
    [] proc.catch(timeout) {
      setverdict(fail, "catch timed out");
    }
  }
  
  // testing 'getcall' and 'catch' with the complement list template
  proc.call(Sig:{c_uni_omitted, -}, 1.0) {
    [] proc.getreply(Sig:{-, t_bad_call}) -> param (v_pars) {
      // the 'getcall' operation did not succeed, display the received error message
      setverdict(fail, v_pars.cs);
    }
    [] proc.getreply(Sig:{-, ?}) {
      setverdict(fail, "received unexpected reply");
    }
    [] proc.catch(Sig, t_every_comp_list) {
      // this is the expected behavior, since the incomming exception is supposed to match the template
      setverdict(pass);
    }
    [] proc.catch(Sig, ?) {
      setverdict(fail, "caught exception should match ", t_every_comp_list);
    }
    [] proc.catch(timeout) {
      setverdict(fail, "catch timed out");
    }
  }
  
  v_comp.done;
}

// A component's behavior function for the message-based port matching test
// Sends test messages to the caller test case for matching.
function f_behavior_msg_legacy() runs on CT
{
  msg.send(c_int_omitted);
  msg.send(c_char_omitted);
  msg.send(c_rec_omitted);
  msg.send(c_setof_omitted);
  msg.send(c_uni_omitted);
  msg.send(c_enum_omitted);
}

// Tests the matching of 'omit' values in message-based port operations
// (the newly created component's behavior function sends us 6 test messages,
// these are matched against value list and complement list templates).
testcase tc_msg_port_match_legacy() runs on CT
{
  var CT v_comp := CT.create;
  connect(v_comp:msg, self:msg);
  v_comp.start(f_behavior_msg_legacy());
  
  var integer v_msg_count := 1;
  timer t := 1.0;
  t.start;
  alt {
    [] msg.receive(t_every_value_list) {
      setverdict(fail, "Message ", v_msg_count, " should not match ", t_every_value_list);
    }
    [] msg.receive(t_every_comp_list) {
      // this is the expected behavior, since the incomming messages should not match
      // the previous template, only this one
      if (v_msg_count < 6) {
        // repeat until all 6 messages have been received
        v_msg_count := v_msg_count + 1;
        repeat;
      }
    }
    [] msg.receive(?) {
      setverdict(fail, "Message ", v_msg_count, " should match ", t_every_comp_list);
    }
    [] t.timeout {
      setverdict(fail, "receive timed out");
    }
  }
  
  v_comp.done;
  msg.clear;
  setverdict(pass);
}

// Testing the 'present' template restriction
// (complement list templates are 'present' if the list contains the 'omit' value,
// value lists are 'present' if the list does not contain the 'omit' value)
testcase tc_present_template_legacy() runs on CT
{
  template(present) integer t_present_value_list := (1, 2, 3);
  template(present) integer t_present_comp_list := complement (1, 2, 3, omit);
  
  var template(present) integer vt_present_value_list := (1, 2, 3);
  var template(present) integer vt_present_comp_list := complement (1, 2, 3, omit);
  
  vt_present_value_list := (4, 5, 6);
  vt_present_comp_list := complement (4, 5, 6, omit);
  
  setverdict(pass);
}

control {
  execute(tc_match_omit_legacy());
  execute(tc_ispresent_legacy());
  execute(tc_log_match_legacy());
  execute(tc_omit_in_value_list_legacy());
  execute(tc_proc_port_match_legacy());
  execute(tc_msg_port_match_legacy());
  execute(tc_present_template_legacy());
}

}
