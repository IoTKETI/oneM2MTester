/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Kovacs, Ferenc
 *   Lovassy, Arpad
 *   Raduly, Csaba
 *
 ******************************************************************************/
// This Test Port skeleton source file was generated by the
// TTCN-3 Compiler of the TTCN-3 Test Executor version 1.7.pre4 build 5
// for  (eferkov@E0017083EF5F5) on Wed Aug 20 21:06:45 2008

// You may modify this file. Complete the body of empty functions and
// add your member functions here.

#include "PCOType.hh"

#ifndef OLD_NAMES
namespace TintOper {
#define PCOTYPE_NS PCOType::
#else
#define PCOTYPE_NS
#endif

BOOLEAN MyConverter()
{
  INTEGER myint("2147483648");
  if (myint.get_long_long_val() != 2147483648) return false;
  myint.set_long_long_val(65536);         if (myint.get_long_long_val() != 65536)         return false;
  myint.set_long_long_val(2147483648);    if (myint.get_long_long_val() != 2147483648)    return false;
  myint.set_long_long_val(-2147483648);   if (myint.get_long_long_val() != -2147483648)   return false;
  myint.set_long_long_val(2147483647);    if (myint.get_long_long_val() != 2147483647)    return false;
  myint.set_long_long_val(2547483648);    if (myint.get_long_long_val() != 2547483648)    return false;
  myint.set_long_long_val(8589934592LL);  if (myint.get_long_long_val() != 8589934592LL)  return false;
  myint.set_long_long_val(17179869184LL); if (myint.get_long_long_val() != 17179869184LL) return false;
  myint.set_long_long_val(-8223372036854775808LL); if (myint.get_long_long_val() != -8223372036854775808LL) return false;
  // LLONG_MAX = 2^63 + 1
  myint.set_long_long_val(9223372036854775807LL);  if (myint.get_long_long_val() != 9223372036854775807LL)  return false;
  { INTEGER myint_tmp("9223372036854775807");
    if (myint_tmp != myint) return false; }
  // LLONG_MIN = -2^63 + 1
  myint.set_long_long_val(-9223372036854775807LL);  if (myint.get_long_long_val() != -9223372036854775807LL)  return false;
  { INTEGER myint_tmp("73786976294838206464");  // 2^66
    if (myint_tmp.get_long_long_val() != 0) return false; }
  { INTEGER myint_tmp("73786976294838206465");  // 2^66 + 1
    if (myint_tmp.get_long_long_val() != 1) return false; }
  myint.set_long_long_val(4294967296LL);  if (myint.get_long_long_val() != 4294967296LL)  return false;
  myint.set_long_long_val(-4294967296LL); if (myint.get_long_long_val() != -4294967296LL) return false;
  myint.set_long_long_val(4294967297LL);  if (myint.get_long_long_val() != 4294967297LL)  return false;
  myint.set_long_long_val(-4294967297LL); if (myint.get_long_long_val() != -4294967297LL) return false;
  myint.set_long_long_val(4294967295UL);  if (myint.get_long_long_val() != 4294967295UL)  return false;
  myint.set_long_long_val(-4294967295);   if (myint.get_long_long_val() != -4294967295)   return false;
  return true;
}

PCOType::PCOType(const char *par_port_name)
	: PCOType_BASE(par_port_name)
{

}

PCOType::~PCOType()
{

}

void PCOType::set_parameter(const char *parameter_name,
	const char *parameter_value)
{

}

/*void PCOType::Handle_Fd_Event(int fd, boolean is_readable,
	boolean is_writable, boolean is_error) {}*/

void PCOType::Handle_Fd_Event_Error(int fd)
{

}

void PCOType::Handle_Fd_Event_Writable(int fd)
{

}

void PCOType::Handle_Fd_Event_Readable(int fd)
{

}

/*void PCOType::Handle_Timeout(double time_since_last_call) {}*/

void PCOType::user_map(const char *system_port)
{

}

void PCOType::user_unmap(const char *system_port)
{

}

void PCOType::user_start()
{

}

void PCOType::user_stop()
{

}

void PCOType::outgoing_send(const INTEGER& send_par)
{

}

void PCOType::outgoing_send(const eint1& send_par)
{

}

void PCOType::outgoing_send(const rint1& send_par)
{

}

#ifndef OLD_NAMES
} /* end of namespace */
#endif

