/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *
 ******************************************************************************/

// This module contains 'record of' and 'set of' type declarations for certain base types.
// It is used for pre-generating the C++ classes that represent these types,
// so they are not re-generated every time they are declared in TTCN-3 or ASN.1
// modules.
module PreGenRecordOf {

// 'record of' declarations (regular):
type record of boolean PREGEN_RECORD_OF_BOOLEAN;

type record of integer PREGEN_RECORD_OF_INTEGER;

type record of float PREGEN_RECORD_OF_FLOAT;

type record of bitstring PREGEN_RECORD_OF_BITSTRING;

type record of hexstring PREGEN_RECORD_OF_HEXSTRING;

type record of octetstring PREGEN_RECORD_OF_OCTETSTRING;

type record of charstring PREGEN_RECORD_OF_CHARSTRING;

type record of universal charstring PREGEN_RECORD_OF_UNIVERSAL_CHARSTRING;

// 'record of' declarations (with optimized memory allocation):
type record of boolean PREGEN_RECORD_OF_BOOLEAN_OPTIMIZED with { extension "optimize:memalloc" };

type record of integer PREGEN_RECORD_OF_INTEGER_OPTIMIZED with { extension "optimize:memalloc" };

type record of float PREGEN_RECORD_OF_FLOAT_OPTIMIZED with { extension "optimize:memalloc" };

type record of bitstring PREGEN_RECORD_OF_BITSTRING_OPTIMIZED with { extension "optimize:memalloc" };

type record of hexstring PREGEN_RECORD_OF_HEXSTRING_OPTIMIZED with { extension "optimize:memalloc" };

type record of octetstring PREGEN_RECORD_OF_OCTETSTRING_OPTIMIZED with { extension "optimize:memalloc" };

type record of charstring PREGEN_RECORD_OF_CHARSTRING_OPTIMIZED with { extension "optimize:memalloc" };

type record of universal charstring PREGEN_RECORD_OF_UNIVERSAL_CHARSTRING_OPTIMIZED with { extension "optimize:memalloc" };

// 'set of' declarations (regular):
type set of boolean PREGEN_SET_OF_BOOLEAN;

type set of integer PREGEN_SET_OF_INTEGER;

type set of float PREGEN_SET_OF_FLOAT;

type set of bitstring PREGEN_SET_OF_BITSTRING;

type set of hexstring PREGEN_SET_OF_HEXSTRING;

type set of octetstring PREGEN_SET_OF_OCTETSTRING;

type set of charstring PREGEN_SET_OF_CHARSTRING;

type set of universal charstring PREGEN_SET_OF_UNIVERSAL_CHARSTRING;

// 'set of' declarations (with optimized memory allocation):
type set of boolean PREGEN_SET_OF_BOOLEAN_OPTIMIZED with { extension "optimize:memalloc" };

type set of integer PREGEN_SET_OF_INTEGER_OPTIMIZED with { extension "optimize:memalloc" };

type set of float PREGEN_SET_OF_FLOAT_OPTIMIZED with { extension "optimize:memalloc" };

type set of bitstring PREGEN_SET_OF_BITSTRING_OPTIMIZED with { extension "optimize:memalloc" };

type set of hexstring PREGEN_SET_OF_HEXSTRING_OPTIMIZED with { extension "optimize:memalloc" };

type set of octetstring PREGEN_SET_OF_OCTETSTRING_OPTIMIZED with { extension "optimize:memalloc" };

type set of charstring PREGEN_SET_OF_CHARSTRING_OPTIMIZED with { extension "optimize:memalloc" };

type set of universal charstring PREGEN_SET_OF_UNIVERSAL_CHARSTRING_OPTIMIZED with { extension "optimize:memalloc" };

}
