/****************************************************************************************
* Copyright (c) 2017  Korea Electronics Technology Institute.							*
* All rights reserved. This program and the accompanying materials						*
* are made available under the terms of                                         		*
* - Eclipse Public License v1.0(http://www.eclipse.org/legal/epl-v10.html),     		*
* - BSD-3 Clause Licence(http://www.iotocean.org/license/),                    			* 
* - MIT License   (https://github.com/open-source-parsers/jsoncpp/blob/master/LICENSE), * 
* - zlib License  (https://github.com/leethomason/tinyxml2#license).                    *	
*																						*
* Contributors:																			*
* JaeYoung Hwang - forest62590@gmail.com                                                *
* Nak-Myoung Sung                                                                       *
* Ting Martin MIAO - initial implementation                                   		    *   
*                                                                 		                *                                                               		* 
* Updated:  2017-08-31                                                          		*
*****************************************************************************************/
// oneM2MTester_Template.ttcn  														
//  oneM2MTester Protocol message template

module oneM2MTester_Template {
	
	import from Mqtt_v3_1_1_Types all;	
	import from CoAP_Types all;
	import from HTTPmsg_Types all;
	import from Socket_API_Definitions all;
	import from OneM2M_Constants all;
	
	function f_randomInteger(in integer p_lower, in integer p_upper) return integer {
		return float2int(rnd() * int2float(p_upper - p_lower + 1)) + p_lower;	
	}
	
	/**
     * @desc  a List Type for configuration test components 
     * e.g.preconfigurations for different protocol
     * it is extendable to suport flexible t-ype parameter
     */
	type record ConfigurationFields{
		ProtoTuple protoTuple,
		ConnectionId connectionId
	}
	
	template (value) ConfigurationFields m_configs(in template (value) ProtoTuple p_proTuple, in template (value) ConnectionId p_connId) := {
		protoTuple 		:= p_proTuple ,
		connectionId	:= p_connId	
	}		

    /***************************
     * Mqtt message templates
     ***************************
     */    
    group Mqtt_template {
          
		/* Mqtt pingreq message */ 
        template MQTT_v3_1_1_ReqResp t_pingReq := {
			pingreq := {
    			header := { 	
    				flags := '0000'B 
    			}
			}
        } 
         
        /* Mqtt pingresp message */
        template MQTT_v3_1_1_ReqResp tw_pingResp := {
			pingresp := {
				header := { 	
					flags := '0000'B 
				}
			}
        } 
          
        /* Mqtt connect message */
      	template MQTT_v3_1_1_ReqResp t_connect(integer p_id, in QoS p_qos) := {
			connect_msg := {
				header := { 	
					flags := '0000'B 
				},
				name := "MQTT",
				protocol_level := 4,
				flags := {
                    user_name_flag 	:= '0'B,
                  	password_flag 	:= '0'B,
                    will_retain 	:= '0'B,
                    will_qos 		:= p_qos,
                    will_flag 		:= '0'B,
                    clean_session 	:= '0'B
              	},
              	keep_alive := float2int(maxResponseTime),
      		  	payload := {        
      		  		client_identifier 	:= "myclientid_"&int2str(p_id),
      	  	 		will_topic 			:= omit,
        	  		will_message 		:= omit,
      	  	  		user_name 			:= omit,
        	  		password 			:= omit
				}
			}
        } 
           
        /* Mqtt connectAck message */
        template MQTT_v3_1_1_ReqResp tr_connectAck := {
			connack := {
				header := { 	
					flags := '0000'B 
				},
				session_present_flag 	:= '0'B,
				connect_return_code 	:= 0
			}
        }
        
        /* Mqtt disconnect message */
        template MQTT_v3_1_1_ReqResp t_disconnect := {
			disconnect_msg := {
				header := { 	
					flags := '0000'B 
				}
			}
        }
    		
    	/* Mqtt subscribe message */
    	template MQTT_v3_1_1_ReqResp t_subscribe(in charstring p_topic, in integer p_id, in QoS p_qos) := {	  
			subscribe := {
				header := { 
					flags := '0000'B 		
				},
              	packet_identifier := p_id,
              	payload := {{
            	  	topic_filter 	:= p_topic,
            	  	requested_qos := p_qos
                }}
			}
      	}
      	
      	/* Mqtt subscribeAck message */
      	 template MQTT_v3_1_1_ReqResp tr_suback(in template IntegerList p_code, in template integer p_id) := {
			suback := {
				header := {             
					flags := '0000'B           		
				},
              	packet_identifier := p_id,
              	payload := {
					return_code := p_code
				}
			}
      	}  
      		
      	/* Mqtt unsubscribe message */
        template MQTT_v3_1_1_ReqResp t_unsubscribe(in charstring p_topic, in integer p_id) := {
			unsubscribe := {
            	header := { 
              		flags := '0000'B 
            	},
            	packet_identifier := p_id,
            	payload := {
          	  		topic_filter := { p_topic }
				}
			}
        }
        
      	/* Mqtt unsubscribeAck */
        template MQTT_v3_1_1_ReqResp tr_unsuback(in template integer p_id) := {
			unsuback := {
            	header := { 
              		flags := '0000'B 	
            	},
            	packet_identifier := p_id
			}
        }	
    	
    	/* Mqtt publish message */
    	template MQTT_v3_1_1_ReqResp t_publish( in charstring p_topic, in template integer p_id, in QoS p_qos, in charstring p_payload) :=  {	  
			publish := {        
				header := {
          			dup_flag 		:= '0'B,
          			qos_level 		:= p_qos,
          			retain_flag 	:= '0'B
          		},      	
          		topic_name 			:= p_topic,      	
          		packet_identifier 	:= p_id,      	
          		payload 			:= char2oct(p_payload)      	
          	}
       }
       
		/* template for a publish message from broker i.e. payload wrapped oneM2M reponsePrimtive */
		template MQTT_v3_1_1_ReqResp tw_publish :=  {	  
			publish := {        
				header := {
          			dup_flag 	:= ?,
          			qos_level 	:= ?,
          			retain_flag := ?
          		},      	
          		topic_name 			:= ?,      	
          		packet_identifier 	:= *,      	
          		payload 			:= ?      	
          	}
      	}
      
		/* Mqtt publishAck message */
        template MQTT_v3_1_1_ReqResp t_puback( in template integer p_id) := {    
			puback := {
          		header := {     	  
          	  		flags := '0000'B   	  
          		},
				packet_identifier := p_id
			}
		}     
	}
    
    /*============================
     * CoAP message templates
     *============================
     */
    group Coap_template {
          
		template CoAP_ReqResp t_COAP_TEST (in template (omit) CoAP_OptionsList p_option := omit, in Code p_requestMethod, in charstring p_payload) := {
			header := {
        		version 	:= 1,
        		msg_type 	:= CONFIRMABLE,
        		code 		:= p_requestMethod,
        		message_id 	:= f_randomInteger(1, 10000)
    	  	},
        	token 	:= ''O,
        	options := p_option, //omit
        	payload := char2oct(p_payload)
    	}
    	
    	/* ***************************************
         * Coap message for POST operation
         * - mandatory options includes
         * @ Content-Format, oneM2M-TY, oneM2M-RQI, 
    	 * and oneM2M-FR
         * ****************************************
         */
		template CoAP_ReqResp t_COAP_POST_request(integer p_content_format, integer p_resource_type, UCHAR0_255 p_from, UCHAR0_255 p_request_id, charstring p_payload) := {
			header := {
        		version 	:= 1,
        		msg_type 	:= CONFIRMABLE,
        		code 		:= METHOD_POST,
        		message_id 	:= f_randomInteger(1, 10000)
    	  	},
        	token := ''O,
        	options := {
    		  	{
    	  		  	uri_host 		:= OneM2M_Constants.tsp_connectionParams.remHost 
    	  		},
    	  		{
    	    		uri_port 		:= OneM2M_Constants.tsp_connectionParams.remPort
    	        },
    	  		{
    	  		  	content_format 	:= p_content_format
    	  		},
    	  		{
    	    		oneM2M_TY 		:= p_resource_type
    	        },
    	        {
    	  		  	oneM2M_RQI 		:= p_request_id
    	  		},
    	  		{
    	    		oneM2M_FR 		:= p_from
    	        }
    		},
        	payload := char2oct(p_payload)
		}
    	 
    	 /* ***************************************
         * Coap message for GET operation
         * - mandatory options includes
         * @ Content-Format, oneM2M-RQI, and oneM2M-FR
         * ****************************************
         */
    	template CoAP_ReqResp t_COAP_GET_request(integer p_content_format, UCHAR0_255 p_from, UCHAR0_255 p_request_id) := {
    	  	header := {
        		version 	:= 1,
        		msg_type 	:= CONFIRMABLE,
        		code 		:= METHOD_GET,
        		message_id 	:= f_randomInteger(1, 10000)
    	  	},
        	token 	:= ''O,
        	options := {		  	
    		  	{
    	  		  	uri_host 	:= OneM2M_Constants.tsp_connectionParams.remHost 
    	  		},
    	  		{
    	    		uri_port 	:= OneM2M_Constants.tsp_connectionParams.remPort
    	        },
    	  		{
    	  		  	content_format := p_content_format
    	  		},
    	        {
    	  		  	oneM2M_RQI 	:= p_request_id
    	  		},
    	  		{
    	    		oneM2M_FR 	:= p_from
    	        }
    		},
        	payload := omit
    	}
    	
    	/* ***************************************
         * Coap message for UPDATE operation
         * - mandatory options includes
         * @ Content-Format, oneM2M-RQI, and oneM2M-FR
         * ****************************************
         */
         //SP Relative structured format
    	template CoAP_ReqResp t_COAP_PUT_request(integer p_content_format, UCHAR0_255 p_from, UCHAR0_255 p_request_id, charstring p_payload) := {
    	  	header := {
        		version := 1,
        		msg_type := CONFIRMABLE,
        		code := METHOD_PUT,
        		message_id := f_randomInteger(1, 10000)
    	  	},
        	token := ''O,
        	options := {		  	
    		  	{
    	  		  	uri_host := OneM2M_Constants.tsp_connectionParams.remHost 
    	  		},
    	  		{
    	    		uri_port := OneM2M_Constants.tsp_connectionParams.remPort
    	        },	        
    	  		{
    	  		  	content_format := p_content_format
    	  		},
    	        {
    	  		  	oneM2M_RQI := p_request_id
    	  		},
    	  		{
    	    		oneM2M_FR := p_from
    	        }
    		},
        	payload := char2oct(p_payload)
    	}
    	
    	/* ***************************************
         * Coap message for DELETE operation
         * - mandatory options includes
         * @ Content-Format, oneM2M-RQI, and oneM2M-FR
         * ****************************************
         */
    	template CoAP_ReqResp t_COAP_DELETE_request(integer p_content_format, UCHAR0_255 p_from, UCHAR0_255 p_request_id) := {
    	  	header := {
        		version := 1,
        		msg_type := CONFIRMABLE,
        		code := METHOD_DELETE,
        		message_id := f_randomInteger(1, 10000)
    	  	},
        	token := ''O,
        	options := {
    		  	{
    	  		  	uri_host := OneM2M_Constants.tsp_connectionParams.remHost 
    	  		},
    	  		{
    	    		uri_port := OneM2M_Constants.tsp_connectionParams.remPort
    	        },
    	  		{
    	  		  	content_format := p_content_format
    	  		},
    	        {
    	  		  	oneM2M_RQI := p_request_id
    	  		},
    	  		{
    	    		oneM2M_FR := p_from
    	        }
    		},
        	payload := omit
    	}        
    }
    	
    /*============================
     * HTTP message templates
     *============================
     */
    group Http_template {    	
        
        /**
    	 * @desc HTTP POST request for utTrigger primitive
    	 * AE testing
    	 */	
    	template HTTPRequest t_utTrigger_HTTP_POST_request (
        	integer    p_clientId, 
        	charstring p_uri,
        	charstring p_accept,
        	charstring p_contentType,
        	charstring p_payload ) := {
        	
        	client_id 		:= p_clientId,
        	method	 		:= POST_HTTP,
        	uri	 			:= p_uri,
        	version_major 	:= 1, //p_major_version,
        	version_minor	:= 1, //p_minor_version,
        	
        	header := {
    			{
    				header_name 	:= HTTP_HOST,
    				header_value 	:= OneM2M_Constants.tsp_connectionParams.remHost & ":" & int2str(OneM2M_Constants.tsp_connectionParams.remPort)
    			},
    			{
    				header_name 	:= HTTP_ACCEPT,
    				header_value 	:= p_accept
    			},			
    			{
    				header_name 	:= HTTP_CONTENT_TYPE,
    				header_value 	:= p_contentType
    			},
    			{
    				header_name 	:= HTTP_CONTENT_LENGTH,
    				header_value 	:= int2str(lengthof(p_payload))
    			}
        
    		},
    		body	:= p_payload 
		}
   
        //HTTP POST request	
		template HTTPRequest t_HTTP_POST_request (
        	integer p_clientId, 
        	charstring p_uri,
            // integer p_major_version,
            // integer p_minor_version,
        	charstring p_accept,
            charstring p_from,
        	charstring p_requestId,
        	charstring p_contentType,
        	charstring p_payload ) := {
        	
        	client_id 		:= p_clientId,
        	method	 		:= POST_HTTP,
        	uri	 			:= p_uri,
        	version_major 	:= 1, //p_major_version,
        	version_minor	:= 1, //p_minor_version,
        	
        	header := {
				{
					header_name 	:= HTTP_HOST,
					header_value 	:= OneM2M_Constants.tsp_connectionParams.remHost & ":" & int2str(OneM2M_Constants.tsp_connectionParams.remPort)
				},
				{
					header_name 	:= HTTP_ACCEPT,
					header_value 	:= p_accept
				},
				{
        			header_name 	:= HTTP_M2M_ORIGIN,
        			header_value 	:= p_from
				},
				{
        			header_name 	:= HTTP_M2M_REQUEST_ID,
        			header_value 	:= p_requestId
				},
				{
        			header_name 	:= HTTP_CONTENT_TYPE,
        			header_value 	:= p_contentType
				},
				{
        			header_name 	:= HTTP_CONTENT_LENGTH,
        			header_value 	:= int2str(lengthof(p_payload))
				}
        
			},
			body	:= p_payload 
       }
       
    	//HTTP GET request	
    	template HTTPRequest t_HTTP_GET_request (
        	integer p_clientId, 
        	charstring p_uri,
            //integer p_major_version,
            //integer p_minor_version,
        	charstring p_accept,
            charstring p_from,
        	charstring p_requestId ) := {
        	
        	client_id 		:= p_clientId,
        	method	 		:= GET_HTTP,
        	uri	 			:= p_uri,
        	version_major 	:= 1, //p_major_version,
        	version_minor	:= 1, //p_minor_version,
        	
        	header := {
				{
        			header_name 	:= HTTP_HOST,
        			header_value 	:= OneM2M_Constants.tsp_connectionParams.remHost & ":" & int2str(OneM2M_Constants.tsp_connectionParams.remPort)
				},
				{
        			header_name 	:= HTTP_ACCEPT,
        			header_value 	:= p_accept
				},
				{
        			header_name 	:= HTTP_M2M_ORIGIN,
        			header_value 	:= p_from
 				},
				{
        			header_name 	:= HTTP_M2M_REQUEST_ID,
        			header_value 	:= p_requestId
				}
        
			},
			body := ""    
    	}
    	
    	//HTTP PUT request	
    	template HTTPRequest t_HTTP_PUT_request(
        	integer p_clientId, 
        	charstring p_uri,
        	//integer p_major_version,
        	//integer p_minor_version,
        	charstring p_accept,
            charstring p_from,
        	charstring p_requestId,
        	charstring p_contentType,
        	charstring p_payload ) := {
        	
        	client_id 		:= p_clientId,
        	method	 		:= PUT_HTTP,
        	uri	 			:= p_uri,
        	version_major 	:= 1, //p_major_version,
        	version_minor	:= 1, //p_minor_version,
        	
        	header := {
				{
        			header_name 	:= HTTP_HOST,
        			header_value 	:= OneM2M_Constants.tsp_connectionParams.remHost & ":" & int2str(OneM2M_Constants.tsp_connectionParams.remPort)
				},
				{
        			header_name 	:= HTTP_ACCEPT,
        			header_value 	:= p_accept
				},
				{
        			header_name 	:= HTTP_M2M_ORIGIN,
        			header_value 	:= p_from
				},
				{
        			header_name 	:= HTTP_M2M_REQUEST_ID,
        			header_value 	:= p_requestId
				},
				{
        			header_name 	:= HTTP_CONTENT_TYPE,
        			header_value 	:= p_contentType
				},
				{
        			header_name 	:= HTTP_CONTENT_LENGTH,
        			header_value 	:= int2str(lengthof(p_payload))
				}
        
			},
        	body := p_payload    
    	}
    	
    	//HTTP DELETE request	
    	template HTTPRequest t_HTTP_DELETE_request (
        	integer p_clientId, 
        	charstring p_uri,
        	//integer p_major_version,
        	//integer p_minor_version,
        	charstring p_accept,
            charstring p_from,
        	charstring p_requestId ) := {
        	
        	client_id 		:= p_clientId,
        	method	 		:= DELETE_HTTP,
        	uri	 			:= p_uri,
        	version_major 	:= 1, //p_major_version,
        	version_minor	:= 1, //p_minor_version,
        	
        	header := {
            	{
        			header_name 	:= HTTP_HOST,
        			header_value 	:= OneM2M_Constants.tsp_connectionParams.remHost & ":" & int2str(OneM2M_Constants.tsp_connectionParams.remPort)
        		},
        		{
        			header_name 	:= HTTP_ACCEPT,
        			header_value 	:= p_accept
        		},
        		{
        			header_name 	:= HTTP_M2M_ORIGIN,
        			header_value 	:= p_from
        		},
        		{
        			header_name 	:= HTTP_M2M_REQUEST_ID,
        			header_value 	:= p_requestId
        		}
        
        	},
        	body := ""    
        }       
    }
}//End_of_Namespace
