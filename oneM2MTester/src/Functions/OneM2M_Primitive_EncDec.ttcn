/****************************************************************************************
* Copyright (c) 2017  Korea Electronics Technology Institute.							*
* All rights reserved. This program and the accompanying materials						*
* are made available under the terms of                                         		*
* - Eclipse Public License v1.0(http://www.eclipse.org/legal/epl-v10.html),     		*
* - BSD-3 Clause Licence(http://www.iotocean.org/license/),                    			* 
* - MIT License   (https://github.com/open-source-parsers/jsoncpp/blob/master/LICENSE), * 
* - zlib License  (https://github.com/leethomason/tinyxml2#license).                    *	
*																						*
* Contributors:																			*
*   Ting Martin MIAO - initial implementation                                   		*   
*   Nak-Myoung Sung                                                             		*
*                                                                               		* 
* Updated:  2017-08-31                                                          		*
*****************************************************************************************/
// Description:																	
//    OneM2M_Primitive_EncDec.ttcn  														
//    Call Titan built-int Codec to encode/decode oneM2M resource primitivies

module OneM2M_Primitive_EncDec {
	
	import from OneM2M_Types all;
	import from OneM2M_Constants all;
	
	//=============================
	// XML encoding
	//=============================
	
	//encode requestPrimitive (AE/CSE originator)
	external function f_enc_XER_requestPrimitive(in RequestPrimitive p_du) return octetstring
	with{ extension "prototype (convert) encode(XER:XER_EXTENDED)" }
	
	//encode responsePrimitive (CSE receiver)
	external function f_enc_XER_responsePrimitive(in ResponsePrimitive p_du) return octetstring
	with{ extension "prototype (convert) encode(XER:XER_EXTENDED)" } 
	
	
	external function f_enc_XER_resourcePrimitive(in PrimitiveContent p_primitive) return octetstring
	with{ extension "prototype (convert) encode(XER:XER_EXTENDED)" }  
	
	
	//encode resourcePrimitive
	external function f_dec_XER_resourcePrimitive(in octetstring p_stream, out PrimitiveContent p_decodedValue) return integer
	with{
	  	extension "prototype (backtrack) decode(XER:XER_EXTENDED)";
	  	extension "errorbehavior(ALL:WARNING)"	  
	}
		
	//decode requestPrimitive (CSE receiver)
	external function f_dec_XER_requestPrimitive(in octetstring p_stream) return RequestPrimitive
	with{ 	extension "prototype (convert) decode(XER:XER_EXTENDED)";
	  		extension "errorbehavior(ALL:WARNING)" }
	  		
	//decode responsePrimitive (AE/CSE)
	external function f_dec_XER_responsePrimitive(in octetstring p_stream) return ResponsePrimitive
	with{ 	extension "prototype (convert) decode(XER:XER_EXTENDED)";
	  		extension "errorbehavior(ALL:WARNING)" }
	
	//=============================
	// JSON encoding
	// - PrimitiveContent encoding 
	//=============================
	
	//encode primitiveContent for HTTP/COAP communication
	external function f_enc_JSON_resourcePrimitive(in PrimitiveContent p_primitive) return octetstring
	with{ extension "prototype (convert) encode(JSON) printing(pretty)" }

	//encode requestPrimitive (AE/CSE originator) for MQTT communication
	external function f_enc_JSON_requestPrimitive(in RequestPrimitive p_du) return octetstring
	with{ extension "prototype (convert) encode(JSON) printing(pretty)" }

	//encode responsePrimitive (CSE receiver)	
	external function f_enc_JSON_responsePrimitive(in ResponsePrimitive p_du) return octetstring
	with{ extension "prototype (convert) encode(JSON) printing(pretty)" } 

	external function f_dec_JSON_resourcePrimitive(in octetstring p_stream, out PrimitiveContent p_decodedValue) return integer
	with{ 	extension "prototype (backtrack) decode(JSON)"; 
	  		extension "errorbehavior(ALL:WARNING,INVAL_MSG:ERROR)"  }	
	  		
//	external function f_dec_JSON_resourcePrimitive(in octetstring p_stream) return PrimitiveContent
//	with{ 	extension "prototype (convert) decode(JSON)"  }	
	 		
	
	//decode requestPrimitive (CSE receiver)
	external function f_dec_JSON_requestPrimitive(in octetstring p_stream, out RequestPrimitive p_req) return integer
	with{ 	extension "prototype (backtrack) decode(JSON)"; 
	  		extension "errorbehavior(ALL:WARNING,INVAL_MSG:ERROR)"     }
	
	//decode responsePrimitive (AE/CSE)
	external function f_dec_JSON_responsePrimitive(in octetstring p_stream, out ResponsePrimitive p_req) return integer
	with{ 	extension "prototype (backtrack) decode(JSON)"; 
	  		extension "errorbehavior(ALL:WARNING,INVAL_MSG:ERROR)" }
 
/************************************************
* f_encode_requestPrimitive()
* encode oneM2M request primitives 
* @p_reqp: RequestPrimitive
* @v_serial_type: serialization type
* DEPRECIATED FUNCTION: 
* Use f_enc_XER_requestPrimitive() for XML and 
* f_enc_JSON_requestPrimitive() for JSON
*************************************************
*/
function f_encode_requestPrimitive(in RequestPrimitive p_reqp, charstring v_serial_type) return charstring{

  var octetstring v_stream_any;
  var charstring v_char;
  var RequestPrimitive v_reqPrimitive := p_reqp;

  if(ispresent(v_reqPrimitive.primitiveContent)){
   
    if(JSON_SERIAL ==  v_serial_type){
       
       //encode primitiveContent for JSON serialization
       v_stream_any := f_enc_JSON_resourcePrimitive(v_reqPrimitive.primitiveContent);
       log(__SCOPE__&" V_STEAM_ANY_JSON converted from bitstring", v_stream_any);
       
    }else if(XML_SERIAL ==  v_serial_type){
   
      var bitstring v_bit_stream := encvalue(v_reqPrimitive.primitiveContent);
      if(v_bit_stream != ''B){
        v_stream_any := bit2oct(v_bit_stream);
        log(__SCOPE__&" V_STEAM_ANY converted from bitstring", v_stream_any);
      }
       
      
    }else{
      log(__SCOPE__ &"[Warning]NOT SUPPORTED SERIALIZATION TYPE !! \n"); 	  		  	  
    }
    
    if(v_stream_any != ''O){
      v_char := oct2char(v_stream_any); log(__SCOPE__&"[DEBUG] encoded requestPrimitive", v_char);
      return v_char;
    }else{
      
      return "";
    }
	

  }else {//XML
    log(__SCOPE__ &" [Warning]No primitive to encode!!"); 
	return "";
  }//  	   		

  
}//end_f_encode_requestPrimitive 
 


}//End_of_namespace
